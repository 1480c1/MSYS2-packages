--- origsrc/openssh-portable/install-sh	2022-11-07 17:12:48.000000000 +0100
+++ src/openssh-portable/install-sh	2022-11-07 17:26:14.699971800 +0100
@@ -1,7 +1,7 @@
 #!/bin/sh
 # install - install a program, script, or datafile
 
-scriptversion=2011-11-20.07; # UTC
+scriptversion=2020-11-14.01; # UTC
 
 # This originates from X11R5 (mit/util/scripts/install.sh), which was
 # later released in X11R6 (xc/config/util/install.sh) with the
@@ -41,19 +41,15 @@ scriptversion=2011-11-20.07; # UTC
 # This script is compatible with the BSD install script, but was written
 # from scratch.
 
+tab='	'
 nl='
 '
-IFS=" ""	$nl"
+IFS=" $tab$nl"
 
-# set DOITPROG to echo to test this script
+# Set DOITPROG to "echo" to test this script.
 
-# Don't use :- since 4.3BSD and earlier shells don't like it.
 doit=${DOITPROG-}
-if test -z "$doit"; then
-  doit_exec=exec
-else
-  doit_exec=$doit
-fi
+doit_exec=${doit:-exec}
 
 # Put in absolute file names if you don't have them in your path;
 # or use environment vars.
@@ -68,22 +64,16 @@ mvprog=${MVPROG-mv}
 rmprog=${RMPROG-rm}
 stripprog=${STRIPPROG-strip}
 
-posix_glob='?'
-initialize_posix_glob='
-  test "$posix_glob" != "?" || {
-    if (set -f) 2>/dev/null; then
-      posix_glob=
-    else
-      posix_glob=:
-    fi
-  }
-'
-
 posix_mkdir=
 
 # Desired mode of installed file.
 mode=0755
 
+# Create dirs (including intermediate dirs) using mode 755.
+# This is like GNU 'install' as of coreutils 8.32 (2020).
+mkdir_umask=22
+
+backupsuffix=
 chgrpcmd=
 chmodcmd=$chmodprog
 chowncmd=
@@ -97,7 +87,7 @@ dir_arg=
 dst_arg=
 
 copy_on_change=false
-no_target_directory=
+is_target_a_directory=possibly
 
 usage="\
 Usage: $0 [OPTION]... [-T] SRCFILE DSTFILE
@@ -114,18 +104,28 @@ Options:
      --version  display version info and exit.
 
   -c            (ignored)
-  -C            install only if different (preserve the last data modification time)
+  -C            install only if different (preserve data modification time)
   -d            create directories instead of installing files.
   -g GROUP      $chgrpprog installed files to GROUP.
   -m MODE       $chmodprog installed files to MODE.
   -o USER       $chownprog installed files to USER.
+  -p            pass -p to $cpprog.
   -s            $stripprog installed files.
+  -S SUFFIX     attempt to back up existing files, with suffix SUFFIX.
   -t DIRECTORY  install into DIRECTORY.
   -T            report an error if DSTFILE is a directory.
 
 Environment variables override the default commands:
   CHGRPPROG CHMODPROG CHOWNPROG CMPPROG CPPROG MKDIRPROG MVPROG
   RMPROG STRIPPROG
+
+By default, rm is invoked with -f; when overridden with RMPROG,
+it's up to you to specify -f if you want it.
+
+If -S is not specified, no backups are attempted.
+
+Email bug reports to bug-automake@gnu.org.
+Automake home page: https://www.gnu.org/software/automake/
 "
 
 while test $# -ne 0; do
@@ -137,46 +137,62 @@ while test $# -ne 0; do
     -d) dir_arg=true;;
 
     -g) chgrpcmd="$chgrpprog $2"
-	shift;;
+        shift;;
 
     --help) echo "$usage"; exit $?;;
 
     -m) mode=$2
-	case $mode in
-	  *' '* | *'	'* | *'
-'*	  | *'*'* | *'?'* | *'['*)
-	    echo "$0: invalid mode: $mode" >&2
-	    exit 1;;
-	esac
-	shift;;
+        case $mode in
+          *' '* | *"$tab"* | *"$nl"* | *'*'* | *'?'* | *'['*)
+            echo "$0: invalid mode: $mode" >&2
+            exit 1;;
+        esac
+        shift;;
 
     -o) chowncmd="$chownprog $2"
-	shift;;
+        shift;;
+
+    -p) cpprog="$cpprog -p";;
 
     -s) stripcmd=$stripprog;;
 
-    -t) dst_arg=$2
-	# Protect names problematic for 'test' and other utilities.
-	case $dst_arg in
-	  -* | [=\(\)!]) dst_arg=./$dst_arg;;
-	esac
-	shift;;
+    -S) backupsuffix="$2"
+        shift;;
 
-    -T) no_target_directory=true;;
+    -t)
+        is_target_a_directory=always
+        dst_arg=$2
+        # Protect names problematic for 'test' and other utilities.
+        case $dst_arg in
+          -* | [=\(\)!]) dst_arg=./$dst_arg;;
+        esac
+        shift;;
+
+    -T) is_target_a_directory=never;;
 
     --version) echo "$0 $scriptversion"; exit $?;;
 
-    --)	shift
-	break;;
+    --) shift
+        break;;
 
-    -*)	echo "$0: invalid option: $1" >&2
-	exit 1;;
+    -*) echo "$0: invalid option: $1" >&2
+        exit 1;;
 
     *)  break;;
   esac
   shift
 done
 
+# We allow the use of options -d and -T together, by making -d
+# take the precedence; this is for compatibility with GNU install.
+
+if test -n "$dir_arg"; then
+  if test -n "$dst_arg"; then
+    echo "$0: target directory not allowed when installing a directory." >&2
+    exit 1
+  fi
+fi
+
 if test $# -ne 0 && test -z "$dir_arg$dst_arg"; then
   # When -d is used, all remaining arguments are directories to create.
   # When -t is used, the destination is already specified.
@@ -208,6 +224,15 @@ if test $# -eq 0; then
 fi
 
 if test -z "$dir_arg"; then
+  if test $# -gt 1 || test "$is_target_a_directory" = always; then
+    if test ! -d "$dst_arg"; then
+      echo "$0: $dst_arg: Is not a directory." >&2
+      exit 1
+    fi
+  fi
+fi
+
+if test -z "$dir_arg"; then
   do_exit='(exit $ret); exit $ret'
   trap "ret=129; $do_exit" 1
   trap "ret=130; $do_exit" 2
@@ -223,16 +248,16 @@ if test -z "$dir_arg"; then
 
     *[0-7])
       if test -z "$stripcmd"; then
-	u_plus_rw=
+        u_plus_rw=
       else
-	u_plus_rw='% 200'
+        u_plus_rw='% 200'
       fi
       cp_umask=`expr '(' 777 - $mode % 1000 ')' $u_plus_rw`;;
     *)
       if test -z "$stripcmd"; then
-	u_plus_rw=
+        u_plus_rw=
       else
-	u_plus_rw=,u+rw
+        u_plus_rw=,u+rw
       fi
       cp_umask=$mode$u_plus_rw;;
   esac
@@ -250,6 +275,10 @@ do
     dstdir=$dst
     test -d "$dstdir"
     dstdir_status=$?
+    # Don't chown directories that already exist.
+    if test $dstdir_status = 0; then
+      chowncmd=""
+    fi
   else
 
     # Waiting for this to be detected by the "$cpprog $src $dsttmp" command
@@ -266,178 +295,148 @@ do
     fi
     dst=$dst_arg
 
-    # If destination is a directory, append the input filename; won't work
-    # if double slashes aren't ignored.
+    # If destination is a directory, append the input filename.
     if test -d "$dst"; then
-      if test -n "$no_target_directory"; then
-	echo "$0: $dst_arg: Is a directory" >&2
-	exit 1
+      if test "$is_target_a_directory" = never; then
+        echo "$0: $dst_arg: Is a directory" >&2
+        exit 1
       fi
       dstdir=$dst
-      dst=$dstdir/`basename "$src"`
+      dstbase=`basename "$src"`
+      case $dst in
+	*/) dst=$dst$dstbase;;
+	*)  dst=$dst/$dstbase;;
+      esac
       dstdir_status=0
     else
-      # Prefer dirname, but fall back on a substitute if dirname fails.
-      dstdir=`
-	(dirname "$dst") 2>/dev/null ||
-	expr X"$dst" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
-	     X"$dst" : 'X\(//\)[^/]' \| \
-	     X"$dst" : 'X\(//\)$' \| \
-	     X"$dst" : 'X\(/\)' \| . 2>/dev/null ||
-	echo X"$dst" |
-	    sed '/^X\(.*[^/]\)\/\/*[^/][^/]*\/*$/{
-		   s//\1/
-		   q
-		 }
-		 /^X\(\/\/\)[^/].*/{
-		   s//\1/
-		   q
-		 }
-		 /^X\(\/\/\)$/{
-		   s//\1/
-		   q
-		 }
-		 /^X\(\/\).*/{
-		   s//\1/
-		   q
-		 }
-		 s/.*/./; q'
-      `
-
+      dstdir=`dirname "$dst"`
       test -d "$dstdir"
       dstdir_status=$?
     fi
   fi
 
+  case $dstdir in
+    */) dstdirslash=$dstdir;;
+    *)  dstdirslash=$dstdir/;;
+  esac
+
   obsolete_mkdir_used=false
 
   if test $dstdir_status != 0; then
     case $posix_mkdir in
       '')
-	# Create intermediate dirs using mode 755 as modified by the umask.
-	# This is like FreeBSD 'install' as of 1997-10-28.
-	umask=`umask`
-	case $stripcmd.$umask in
-	  # Optimize common cases.
-	  *[2367][2367]) mkdir_umask=$umask;;
-	  .*0[02][02] | .[02][02] | .[02]) mkdir_umask=22;;
-
-	  *[0-7])
-	    mkdir_umask=`expr $umask + 22 \
-	      - $umask % 100 % 40 + $umask % 20 \
-	      - $umask % 10 % 4 + $umask % 2
-	    `;;
-	  *) mkdir_umask=$umask,go-w;;
-	esac
-
-	# With -d, create the new directory with the user-specified mode.
-	# Otherwise, rely on $mkdir_umask.
-	if test -n "$dir_arg"; then
-	  mkdir_mode=-m$mode
+        # With -d, create the new directory with the user-specified mode.
+        # Otherwise, rely on $mkdir_umask.
+        if test -n "$dir_arg"; then
+          mkdir_mode=-m$mode
+        else
+          mkdir_mode=
+        fi
+
+        posix_mkdir=false
+	# The $RANDOM variable is not portable (e.g., dash).  Use it
+	# here however when possible just to lower collision chance.
+	tmpdir=${TMPDIR-/tmp}/ins$RANDOM-$$
+
+	trap '
+	  ret=$?
+	  rmdir "$tmpdir/a/b" "$tmpdir/a" "$tmpdir" 2>/dev/null
+	  exit $ret
+	' 0
+
+	# Because "mkdir -p" follows existing symlinks and we likely work
+	# directly in world-writeable /tmp, make sure that the '$tmpdir'
+	# directory is successfully created first before we actually test
+	# 'mkdir -p'.
+	if (umask $mkdir_umask &&
+	    $mkdirprog $mkdir_mode "$tmpdir" &&
+	    exec $mkdirprog $mkdir_mode -p -- "$tmpdir/a/b") >/dev/null 2>&1
+	then
+	  if test -z "$dir_arg" || {
+	       # Check for POSIX incompatibilities with -m.
+	       # HP-UX 11.23 and IRIX 6.5 mkdir -m -p sets group- or
+	       # other-writable bit of parent directory when it shouldn't.
+	       # FreeBSD 6.1 mkdir -m -p sets mode of existing directory.
+	       test_tmpdir="$tmpdir/a"
+	       ls_ld_tmpdir=`ls -ld "$test_tmpdir"`
+	       case $ls_ld_tmpdir in
+		 d????-?r-*) different_mode=700;;
+		 d????-?--*) different_mode=755;;
+		 *) false;;
+	       esac &&
+	       $mkdirprog -m$different_mode -p -- "$test_tmpdir" && {
+		 ls_ld_tmpdir_1=`ls -ld "$test_tmpdir"`
+		 test "$ls_ld_tmpdir" = "$ls_ld_tmpdir_1"
+	       }
+	     }
+	  then posix_mkdir=:
+	  fi
+	  rmdir "$tmpdir/a/b" "$tmpdir/a" "$tmpdir"
 	else
-	  mkdir_mode=
+	  # Remove any dirs left behind by ancient mkdir implementations.
+	  rmdir ./$mkdir_mode ./-p ./-- "$tmpdir" 2>/dev/null
 	fi
-
-	posix_mkdir=false
-	case $umask in
-	  *[123567][0-7][0-7])
-	    # POSIX mkdir -p sets u+wx bits regardless of umask, which
-	    # is incompatible with FreeBSD 'install' when (umask & 300) != 0.
-	    ;;
-	  *)
-	    tmpdir=${TMPDIR-/tmp}/ins$RANDOM-$$
-	    trap 'ret=$?; rmdir "$tmpdir/d" "$tmpdir" 2>/dev/null; exit $ret' 0
-
-	    if (umask $mkdir_umask &&
-		exec $mkdirprog $mkdir_mode -p -- "$tmpdir/d") >/dev/null 2>&1
-	    then
-	      if test -z "$dir_arg" || {
-		   # Check for POSIX incompatibilities with -m.
-		   # HP-UX 11.23 and IRIX 6.5 mkdir -m -p sets group- or
-		   # other-writable bit of parent directory when it shouldn't.
-		   # FreeBSD 6.1 mkdir -m -p sets mode of existing directory.
-		   ls_ld_tmpdir=`ls -ld "$tmpdir"`
-		   case $ls_ld_tmpdir in
-		     d????-?r-*) different_mode=700;;
-		     d????-?--*) different_mode=755;;
-		     *) false;;
-		   esac &&
-		   $mkdirprog -m$different_mode -p -- "$tmpdir" && {
-		     ls_ld_tmpdir_1=`ls -ld "$tmpdir"`
-		     test "$ls_ld_tmpdir" = "$ls_ld_tmpdir_1"
-		   }
-		 }
-	      then posix_mkdir=:
-	      fi
-	      rmdir "$tmpdir/d" "$tmpdir"
-	    else
-	      # Remove any dirs left behind by ancient mkdir implementations.
-	      rmdir ./$mkdir_mode ./-p ./-- 2>/dev/null
-	    fi
-	    trap '' 0;;
-	esac;;
+	trap '' 0;;
     esac
 
     if
       $posix_mkdir && (
-	umask $mkdir_umask &&
-	$doit_exec $mkdirprog $mkdir_mode -p -- "$dstdir"
+        umask $mkdir_umask &&
+        $doit_exec $mkdirprog $mkdir_mode -p -- "$dstdir"
       )
     then :
     else
 
-      # The umask is ridiculous, or mkdir does not conform to POSIX,
+      # mkdir does not conform to POSIX,
       # or it failed possibly due to a race condition.  Create the
       # directory the slow way, step by step, checking for races as we go.
 
       case $dstdir in
-	/*) prefix='/';;
-	[-=\(\)!]*) prefix='./';;
-	*)  prefix='';;
+        /*) prefix='/';;
+        [-=\(\)!]*) prefix='./';;
+        *)  prefix='';;
       esac
 
-      eval "$initialize_posix_glob"
-
       oIFS=$IFS
       IFS=/
-      $posix_glob set -f
+      set -f
       set fnord $dstdir
       shift
-      $posix_glob set +f
+      set +f
       IFS=$oIFS
 
       prefixes=
 
       for d
       do
-	test X"$d" = X && continue
+        test X"$d" = X && continue
 
-	prefix=$prefix$d
-	if test -d "$prefix"; then
-	  prefixes=
-	else
-	  if $posix_mkdir; then
-	    (umask=$mkdir_umask &&
-	     $doit_exec $mkdirprog $mkdir_mode -p -- "$dstdir") && break
-	    # Don't fail if two instances are running concurrently.
-	    test -d "$prefix" || exit 1
-	  else
-	    case $prefix in
-	      *\'*) qprefix=`echo "$prefix" | sed "s/'/'\\\\\\\\''/g"`;;
-	      *) qprefix=$prefix;;
-	    esac
-	    prefixes="$prefixes '$qprefix'"
-	  fi
-	fi
-	prefix=$prefix/
+        prefix=$prefix$d
+        if test -d "$prefix"; then
+          prefixes=
+        else
+          if $posix_mkdir; then
+            (umask $mkdir_umask &&
+             $doit_exec $mkdirprog $mkdir_mode -p -- "$dstdir") && break
+            # Don't fail if two instances are running concurrently.
+            test -d "$prefix" || exit 1
+          else
+            case $prefix in
+              *\'*) qprefix=`echo "$prefix" | sed "s/'/'\\\\\\\\''/g"`;;
+              *) qprefix=$prefix;;
+            esac
+            prefixes="$prefixes '$qprefix'"
+          fi
+        fi
+        prefix=$prefix/
       done
 
       if test -n "$prefixes"; then
-	# Don't fail if two instances are running concurrently.
-	(umask $mkdir_umask &&
-	 eval "\$doit_exec \$mkdirprog $prefixes") ||
-	  test -d "$dstdir" || exit 1
-	obsolete_mkdir_used=true
+        # Don't fail if two instances are running concurrently.
+        (umask $mkdir_umask &&
+         eval "\$doit_exec \$mkdirprog $prefixes") ||
+          test -d "$dstdir" || exit 1
+        obsolete_mkdir_used=true
       fi
     fi
   fi
@@ -450,14 +449,25 @@ do
   else
 
     # Make a couple of temp file names in the proper directory.
-    dsttmp=$dstdir/_inst.$$_
-    rmtmp=$dstdir/_rm.$$_
+    dsttmp=${dstdirslash}_inst.$$_
+    rmtmp=${dstdirslash}_rm.$$_
 
     # Trap to clean up those temp files at exit.
     trap 'ret=$?; rm -f "$dsttmp" "$rmtmp" && exit $ret' 0
 
     # Copy the file name to the temp name.
-    (umask $cp_umask && $doit_exec $cpprog "$src" "$dsttmp") &&
+    (umask $cp_umask &&
+     { test -z "$stripcmd" || {
+	 # Create $dsttmp read-write so that cp doesn't create it read-only,
+	 # which would cause strip to fail.
+	 if test -z "$doit"; then
+	   : >"$dsttmp" # No need to fork-exec 'touch'.
+	 else
+	   $doit touch "$dsttmp"
+	 fi
+       }
+     } &&
+     $doit_exec $cpprog "$src" "$dsttmp") &&
 
     # and set any options; do chmod last to preserve setuid bits.
     #
@@ -472,20 +482,24 @@ do
 
     # If -C, don't bother to copy if it wouldn't change the file.
     if $copy_on_change &&
-       old=`LC_ALL=C ls -dlL "$dst"	2>/dev/null` &&
-       new=`LC_ALL=C ls -dlL "$dsttmp"	2>/dev/null` &&
-
-       eval "$initialize_posix_glob" &&
-       $posix_glob set -f &&
+       old=`LC_ALL=C ls -dlL "$dst"     2>/dev/null` &&
+       new=`LC_ALL=C ls -dlL "$dsttmp"  2>/dev/null` &&
+       set -f &&
        set X $old && old=:$2:$4:$5:$6 &&
        set X $new && new=:$2:$4:$5:$6 &&
-       $posix_glob set +f &&
-
+       set +f &&
        test "$old" = "$new" &&
        $cmpprog "$dst" "$dsttmp" >/dev/null 2>&1
     then
       rm -f "$dsttmp"
     else
+      # If $backupsuffix is set, and the file being installed
+      # already exists, attempt a backup.  Don't worry if it fails,
+      # e.g., if mv doesn't support -f.
+      if test -n "$backupsuffix" && test -f "$dst"; then
+        $doit $mvcmd -f "$dst" "$dst$backupsuffix" 2>/dev/null
+      fi
+
       # Rename the file to the real destination.
       $doit $mvcmd -f "$dsttmp" "$dst" 2>/dev/null ||
 
@@ -493,24 +507,24 @@ do
       # to itself, or perhaps because mv is so ancient that it does not
       # support -f.
       {
-	# Now remove or move aside any old file at destination location.
-	# We try this two ways since rm can't unlink itself on some
-	# systems and the destination file might be busy for other
-	# reasons.  In this case, the final cleanup might fail but the new
-	# file should still install successfully.
-	{
-	  test ! -f "$dst" ||
-	  $doit $rmcmd -f "$dst" 2>/dev/null ||
-	  { $doit $mvcmd -f "$dst" "$rmtmp" 2>/dev/null &&
-	    { $doit $rmcmd -f "$rmtmp" 2>/dev/null; :; }
-	  } ||
-	  { echo "$0: cannot unlink or rename $dst" >&2
-	    (exit 1); exit 1
-	  }
-	} &&
+        # Now remove or move aside any old file at destination location.
+        # We try this two ways since rm can't unlink itself on some
+        # systems and the destination file might be busy for other
+        # reasons.  In this case, the final cleanup might fail but the new
+        # file should still install successfully.
+        {
+          test ! -f "$dst" ||
+          $doit $rmcmd "$dst" 2>/dev/null ||
+          { $doit $mvcmd -f "$dst" "$rmtmp" 2>/dev/null &&
+            { $doit $rmcmd "$rmtmp" 2>/dev/null; :; }
+          } ||
+          { echo "$0: cannot unlink or rename $dst" >&2
+            (exit 1); exit 1
+          }
+        } &&
 
-	# Now rename the file to the real destination.
-	$doit $mvcmd "$dsttmp" "$dst"
+        # Now rename the file to the real destination.
+        $doit $mvcmd "$dsttmp" "$dst"
       }
     fi || exit 1
 
@@ -519,9 +533,9 @@ do
 done
 
 # Local variables:
-# eval: (add-hook 'write-file-hooks 'time-stamp)
+# eval: (add-hook 'before-save-hook 'time-stamp)
 # time-stamp-start: "scriptversion="
 # time-stamp-format: "%:y-%02m-%02d.%02H"
-# time-stamp-time-zone: "UTC"
+# time-stamp-time-zone: "UTC0"
 # time-stamp-end: "; # UTC"
 # End:
--- origsrc/openssh-portable/tags	1970-01-01 01:00:00.000000000 +0100
+++ src/openssh-portable/tags	2022-11-07 17:24:05.421449400 +0100
@@ -0,0 +1,10024 @@
+!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
+!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
+!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
+!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
+!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
+!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
+!_TAG_PROC_CWD	/cygwin/src/openssh/openssh-9.1p1/openssh-9.1p1-1.x86_64/src/openssh-portable/	//
+!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
+!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
+!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
+!_TAG_PROGRAM_VERSION	5.9.0	//
+$(COMPAT)	openbsd-compat/Makefile.in	/^$(COMPAT): ..\/config.h$/;"	t
+$(CONFIGFILES)	Makefile.in	/^$(CONFIGFILES): $(CONFIGFILES_IN)$/;"	t
+$(LIBCOMPAT)	Makefile.in	/^$(LIBCOMPAT): always$/;"	t
+$(LIBSSH_OBJS)	Makefile.in	/^$(LIBSSH_OBJS): Makefile.in config.h$/;"	t
+$(MANPAGES)	Makefile.in	/^$(MANPAGES): $(MANPAGES_IN)$/;"	t
+$(OBJ)/t10.out	regress/Makefile	/^$(OBJ)\/t10.out:$/;"	t
+$(OBJ)/t12.out	regress/Makefile	/^$(OBJ)\/t12.out:$/;"	t
+$(OBJ)/t7.out	regress/Makefile	/^$(OBJ)\/t7.out:$/;"	t
+$(OBJ)/t8.out	regress/Makefile	/^$(OBJ)\/t8.out:$/;"	t
+$(OBJ)/t9.out	regress/Makefile	/^$(OBJ)\/t9.out:$/;"	t
+$(OPENBSD)	openbsd-compat/Makefile.in	/^$(OPENBSD): ..\/config.h$/;"	t
+$(PORTS)	openbsd-compat/Makefile.in	/^$(PORTS): ..\/config.h$/;"	t
+$(PROG)	regress/misc/sk-dummy/Makefile	/^$(PROG): $(OBJS)$/;"	t
+$(SSHDOBJS)	Makefile.in	/^$(SSHDOBJS): Makefile.in config.h$/;"	t
+$(SSHOBJS)	Makefile.in	/^$(SSHOBJS): Makefile.in config.h$/;"	t
+%$(EXEEXT)	openbsd-compat/regress/Makefile.in	/^%$(EXEEXT):	%.c $(LIBCOMPAT)$/;"	t
+.c.lo	Makefile.in	/^.c.lo: Makefile.in config.h$/;"	t
+.c.o	Makefile.in	/^.c.o:$/;"	t
+.c.o	openbsd-compat/Makefile.in	/^.c.o:$/;"	t
+.cc.o	regress/misc/fuzz-harness/Makefile	/^.cc.o:$/;"	t
+4in6	configure.ac	/^AC_ARG_WITH(4in6,$/;"	w
+ADDINC128	openbsd-compat/sha2.c	/^#define ADDINC128(/;"	d	file:
+AES_BLOCK_LEN	umac.c	/^#define AES_BLOCK_LEN /;"	d	file:
+AES_BLOCK_SIZE	cipher-aesctr.h	/^#define AES_BLOCK_SIZE /;"	d
+AES_MAXKEYBITS	rijndael.h	/^#define AES_MAXKEYBITS	/;"	d
+AES_MAXKEYBYTES	rijndael.h	/^#define AES_MAXKEYBYTES	/;"	d
+AES_MAXROUNDS	rijndael.h	/^#define AES_MAXROUNDS	/;"	d
+AES_ROUNDS	umac.c	/^#define AES_ROUNDS /;"	d	file:
+AF_INET6	openbsd-compat/fake-rfc2553.h	/^#define AF_INET6 /;"	d
+AGENT_MAX_DEST_CONSTRAINTS	ssh-agent.c	/^#define AGENT_MAX_DEST_CONSTRAINTS	/;"	d	file:
+AGENT_MAX_LEN	ssh-agent.c	/^#define AGENT_MAX_LEN	/;"	d	file:
+AGENT_MAX_SESSION_IDS	ssh-agent.c	/^#define AGENT_MAX_SESSION_IDS	/;"	d	file:
+AGENT_MAX_SID_LEN	ssh-agent.c	/^#define AGENT_MAX_SID_LEN	/;"	d	file:
+AGENT_RBUF_LEN	ssh-agent.c	/^#define AGENT_RBUF_LEN	/;"	d	file:
+AGE_FACTOR	progressmeter.c	/^#define AGE_FACTOR /;"	d	file:
+AI_CANONNAME	openbsd-compat/fake-rfc2553.h	/^# define AI_CANONNAME	/;"	d
+AI_NUMERICHOST	openbsd-compat/fake-rfc2553.h	/^# define AI_NUMERICHOST	/;"	d
+AI_NUMERICSERV	defines.h	/^#   define AI_NUMERICSERV	/;"	d
+AI_NUMERICSERV	openbsd-compat/fake-rfc2553.h	/^# define AI_NUMERICSERV	/;"	d
+AI_PASSIVE	openbsd-compat/fake-rfc2553.h	/^# define AI_PASSIVE	/;"	d
+ALG_APPEND	sshconnect2.c	/^#define ALG_APPEND(/;"	d	file:
+ALIGN	defines.h	/^# define ALIGN(/;"	d
+ALIGNBYTES	defines.h	/^# define ALIGNBYTES /;"	d
+ALLOC_BOUNDARY	umac.c	/^#define ALLOC_BOUNDARY /;"	d	file:
+ALLOWED	ssh-keygen.1	/^.Sh ALLOWED SIGNERS$/;"	s
+ANSWER_BUFFER_SIZE	openbsd-compat/getrrsetbyname.c	/^#define ANSWER_BUFFER_SIZE /;"	d	file:
+API_H	ssh_api.h	/^#define API_H$/;"	d
+AR	Makefile.in	/^AR=@AR@$/;"	m
+AR	openbsd-compat/Makefile.in	/^AR=@AR@$/;"	m
+ARGV_MAX	session.c	/^#define ARGV_MAX /;"	d	file:
+ARG_HI_OFFSET	sandbox-seccomp-filter.c	/^# define ARG_HI_OFFSET /;"	d	file:
+ARG_LO_OFFSET	sandbox-seccomp-filter.c	/^# define ARG_LO_OFFSET /;"	d	file:
+ARRAY_EQ	regress/unittests/authopt/tests.c	/^#define ARRAY_EQ(/;"	d	file:
+ARRAY_TEST	regress/unittests/authopt/tests.c	/^#define ARRAY_TEST(/;"	d	file:
+ASKPASS_PROGRAM	Makefile.in	/^ASKPASS_PROGRAM=$(libexecdir)\/ssh-askpass$/;"	m
+ASKPASS_PROGRAM	pathnames.h	/^#define ASKPASS_PROGRAM /;"	d
+ASSEMBLE	readconf.c	/^#define ASSEMBLE(/;"	d	file:
+ASSEMBLE	servconf.c	/^#define ASSEMBLE(/;"	d	file:
+ASSERT_BIGNUM_EQ	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_BIGNUM_EQ(/;"	d
+ASSERT_BIGNUM_GE	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_BIGNUM_GE(/;"	d
+ASSERT_BIGNUM_GT	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_BIGNUM_GT(/;"	d
+ASSERT_BIGNUM_LE	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_BIGNUM_LE(/;"	d
+ASSERT_BIGNUM_LT	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_BIGNUM_LT(/;"	d
+ASSERT_BIGNUM_NE	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_BIGNUM_NE(/;"	d
+ASSERT_CHAR_EQ	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_CHAR_EQ(/;"	d
+ASSERT_CHAR_GE	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_CHAR_GE(/;"	d
+ASSERT_CHAR_GT	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_CHAR_GT(/;"	d
+ASSERT_CHAR_LE	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_CHAR_LE(/;"	d
+ASSERT_CHAR_LT	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_CHAR_LT(/;"	d
+ASSERT_CHAR_NE	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_CHAR_NE(/;"	d
+ASSERT_DOLLAR_EQ	regress/unittests/misc/test_expand.c	/^#define ASSERT_DOLLAR_EQ(/;"	d	file:
+ASSERT_INT_EQ	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_INT_EQ(/;"	d
+ASSERT_INT_GE	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_INT_GE(/;"	d
+ASSERT_INT_GT	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_INT_GT(/;"	d
+ASSERT_INT_LE	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_INT_LE(/;"	d
+ASSERT_INT_LT	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_INT_LT(/;"	d
+ASSERT_INT_NE	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_INT_NE(/;"	d
+ASSERT_LONG_EQ	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_LONG_EQ(/;"	d
+ASSERT_LONG_GE	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_LONG_GE(/;"	d
+ASSERT_LONG_GT	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_LONG_GT(/;"	d
+ASSERT_LONG_LE	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_LONG_LE(/;"	d
+ASSERT_LONG_LONG_EQ	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_LONG_LONG_EQ(/;"	d
+ASSERT_LONG_LONG_GE	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_LONG_LONG_GE(/;"	d
+ASSERT_LONG_LONG_GT	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_LONG_LONG_GT(/;"	d
+ASSERT_LONG_LONG_LE	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_LONG_LONG_LE(/;"	d
+ASSERT_LONG_LONG_LT	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_LONG_LONG_LT(/;"	d
+ASSERT_LONG_LONG_NE	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_LONG_LONG_NE(/;"	d
+ASSERT_LONG_LT	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_LONG_LT(/;"	d
+ASSERT_LONG_NE	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_LONG_NE(/;"	d
+ASSERT_MEM_EQ	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_MEM_EQ(/;"	d
+ASSERT_MEM_FILLED_EQ	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_MEM_FILLED_EQ(/;"	d
+ASSERT_MEM_GE	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_MEM_GE(/;"	d
+ASSERT_MEM_GT	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_MEM_GT(/;"	d
+ASSERT_MEM_LE	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_MEM_LE(/;"	d
+ASSERT_MEM_LT	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_MEM_LT(/;"	d
+ASSERT_MEM_NE	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_MEM_NE(/;"	d
+ASSERT_MEM_ZERO_EQ	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_MEM_ZERO_EQ(/;"	d
+ASSERT_MEM_ZERO_NE	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_MEM_ZERO_NE(/;"	d
+ASSERT_PTR_EQ	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_PTR_EQ(/;"	d
+ASSERT_PTR_GE	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_PTR_GE(/;"	d
+ASSERT_PTR_GT	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_PTR_GT(/;"	d
+ASSERT_PTR_LE	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_PTR_LE(/;"	d
+ASSERT_PTR_LT	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_PTR_LT(/;"	d
+ASSERT_PTR_NE	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_PTR_NE(/;"	d
+ASSERT_SIZE_T_EQ	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_SIZE_T_EQ(/;"	d
+ASSERT_SIZE_T_GE	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_SIZE_T_GE(/;"	d
+ASSERT_SIZE_T_GT	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_SIZE_T_GT(/;"	d
+ASSERT_SIZE_T_LE	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_SIZE_T_LE(/;"	d
+ASSERT_SIZE_T_LT	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_SIZE_T_LT(/;"	d
+ASSERT_SIZE_T_NE	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_SIZE_T_NE(/;"	d
+ASSERT_STRING_EQ	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_STRING_EQ(/;"	d
+ASSERT_STRING_GE	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_STRING_GE(/;"	d
+ASSERT_STRING_GT	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_STRING_GT(/;"	d
+ASSERT_STRING_LE	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_STRING_LE(/;"	d
+ASSERT_STRING_LT	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_STRING_LT(/;"	d
+ASSERT_STRING_NE	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_STRING_NE(/;"	d
+ASSERT_U16_EQ	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_U16_EQ(/;"	d
+ASSERT_U16_GE	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_U16_GE(/;"	d
+ASSERT_U16_GT	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_U16_GT(/;"	d
+ASSERT_U16_LE	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_U16_LE(/;"	d
+ASSERT_U16_LT	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_U16_LT(/;"	d
+ASSERT_U16_NE	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_U16_NE(/;"	d
+ASSERT_U32_EQ	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_U32_EQ(/;"	d
+ASSERT_U32_GE	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_U32_GE(/;"	d
+ASSERT_U32_GT	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_U32_GT(/;"	d
+ASSERT_U32_LE	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_U32_LE(/;"	d
+ASSERT_U32_LT	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_U32_LT(/;"	d
+ASSERT_U32_NE	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_U32_NE(/;"	d
+ASSERT_U64_EQ	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_U64_EQ(/;"	d
+ASSERT_U64_GE	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_U64_GE(/;"	d
+ASSERT_U64_GT	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_U64_GT(/;"	d
+ASSERT_U64_LE	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_U64_LE(/;"	d
+ASSERT_U64_LT	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_U64_LT(/;"	d
+ASSERT_U64_NE	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_U64_NE(/;"	d
+ASSERT_U8_EQ	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_U8_EQ(/;"	d
+ASSERT_U8_GE	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_U8_GE(/;"	d
+ASSERT_U8_GT	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_U8_GT(/;"	d
+ASSERT_U8_LE	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_U8_LE(/;"	d
+ASSERT_U8_LT	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_U8_LT(/;"	d
+ASSERT_U8_NE	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_U8_NE(/;"	d
+ASSERT_U_INT_EQ	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_U_INT_EQ(/;"	d
+ASSERT_U_INT_GE	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_U_INT_GE(/;"	d
+ASSERT_U_INT_GT	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_U_INT_GT(/;"	d
+ASSERT_U_INT_LE	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_U_INT_LE(/;"	d
+ASSERT_U_INT_LT	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_U_INT_LT(/;"	d
+ASSERT_U_INT_NE	regress/unittests/test_helper/test_helper.h	/^#define ASSERT_U_INT_NE(/;"	d
+AT_FDCWD	openbsd-compat/bsd-misc.h	/^# define AT_FDCWD /;"	d
+AT_SYMLINK_NOFOLLOW	openbsd-compat/bsd-misc.h	/^#  define AT_SYMLINK_NOFOLLOW /;"	d
+AT_SYMLINK_NOFOLLOW	openbsd-compat/regress/utimensattest.c	/^# define AT_SYMLINK_NOFOLLOW /;"	d	file:
+AUE_openssh	audit-bsm.c	/^# define AUE_openssh /;"	d	file:
+AUTHENTICATION	ssh.1	/^.Sh AUTHENTICATION$/;"	s
+AUTHENTICATION	sshd.8	/^.Sh AUTHENTICATION$/;"	s
+AUTHFD_H	authfd.h	/^#define AUTHFD_H$/;"	d
+AUTHFILE_H	authfile.h	/^#define AUTHFILE_H$/;"	d
+AUTHORIZED_KEYS	sshd.8	/^.Sh AUTHORIZED_KEYS FILE FORMAT$/;"	s
+AUTHORS	scp.1	/^.Sh AUTHORS$/;"	s
+AUTHORS	sftp-server.8	/^.Sh AUTHORS$/;"	s
+AUTHORS	ssh-add.1	/^.Sh AUTHORS$/;"	s
+AUTHORS	ssh-agent.1	/^.Sh AUTHORS$/;"	s
+AUTHORS	ssh-keygen.1	/^.Sh AUTHORS$/;"	s
+AUTHORS	ssh-keyscan.1	/^.Sh AUTHORS$/;"	s
+AUTHORS	ssh-keysign.8	/^.Sh AUTHORS$/;"	s
+AUTHORS	ssh-pkcs11-helper.8	/^.Sh AUTHORS$/;"	s
+AUTHORS	ssh-sk-helper.8	/^.Sh AUTHORS$/;"	s
+AUTHORS	ssh.1	/^.Sh AUTHORS$/;"	s
+AUTHORS	ssh_config.5	/^.Sh AUTHORS$/;"	s
+AUTHORS	sshd.8	/^.Sh AUTHORS$/;"	s
+AUTHORS	sshd_config.5	/^.Sh AUTHORS$/;"	s
+AUTH_CONNECTION	ssh-agent.c	/^	AUTH_CONNECTION = 2,$/;"	e	enum:__anona16508200103	file:
+AUTH_H	auth.h	/^#define AUTH_H$/;"	d
+AUTH_MAGIC	sshkey.c	/^#define AUTH_MAGIC	/;"	d	file:
+AUTH_OPTIONS_H	auth-options.h	/^#define AUTH_OPTIONS_H$/;"	d
+AUTH_SOCKET	ssh-agent.c	/^	AUTH_SOCKET = 1,$/;"	e	enum:__anona16508200103	file:
+AUTH_UNUSED	ssh-agent.c	/^	AUTH_UNUSED = 0,$/;"	e	enum:__anona16508200103	file:
+AUTORECONF	Makefile.in	/^AUTORECONF=autoreconf$/;"	m
+AUToReturnFunc	audit-bsm.c	/^#define AUToReturnFunc(/;"	d	file:
+AUToSubjectFunc	audit-bsm.c	/^#define AUToSubjectFunc	/;"	d	file:
+AU_IPv4	configure.ac	/^	    AC_DEFINE([AU_IPv4], [0], [System only supports IPv4 audit records])$/;"	d
+AWK	Makefile.in	/^AWK=@AWK@$/;"	m
+Assert	regress/unittests/sshsig/webauthn.html	/^<h2>Assert<\/h2>$/;"	i
+Attrib	sftp-common.h	/^struct Attrib {$/;"	s
+Attrib	sftp-common.h	/^typedef struct Attrib Attrib;$/;"	t	typeref:struct:Attrib
+AuditInfoStruct	audit-bsm.c	/^#define	AuditInfoStruct	/;"	d	file:
+AuditInfoTermID	audit-bsm.c	/^#define AuditInfoTermID	/;"	d	file:
+Authctxt	auth.h	/^struct Authctxt {$/;"	s
+Authctxt	auth.h	/^typedef struct Authctxt Authctxt;$/;"	t	typeref:struct:Authctxt
+Authctxt	sshconnect2.c	/^typedef struct cauthctxt Authctxt;$/;"	t	typeref:struct:cauthctxt	file:
+Authmethod	auth.h	/^struct Authmethod {$/;"	s
+Authmethod	auth.h	/^typedef struct Authmethod Authmethod;$/;"	t	typeref:struct:Authmethod
+Authmethod	sshconnect2.c	/^typedef struct cauthmethod Authmethod;$/;"	t	typeref:struct:cauthmethod	file:
+BADARG	openbsd-compat/getopt_long.c	/^#define	BADARG	/;"	d	file:
+BADCH	openbsd-compat/getopt_long.c	/^#define	BADCH	/;"	d	file:
+BCRYPT_HASHSIZE	openbsd-compat/bcrypt_pbkdf.c	/^#define BCRYPT_HASHSIZE /;"	d	file:
+BCRYPT_WORDS	openbsd-compat/bcrypt_pbkdf.c	/^#define BCRYPT_WORDS /;"	d	file:
+BEGIN_SIGNATURE	sshsig.c	/^#define BEGIN_SIGNATURE	/;"	d	file:
+BE_32_TO_8	openbsd-compat/sha2.c	/^#define BE_32_TO_8(/;"	d	file:
+BE_64_TO_8	openbsd-compat/sha2.c	/^#define BE_64_TO_8(/;"	d	file:
+BE_8_TO_32	openbsd-compat/sha2.c	/^#define BE_8_TO_32(/;"	d	file:
+BE_8_TO_64	openbsd-compat/sha2.c	/^#define BE_8_TO_64(/;"	d	file:
+BIGNUM	kex.h	/^# define BIGNUM	/;"	d
+BIGNUM	packet.h	/^# define BIGNUM	/;"	d
+BIGNUM	sshkey.h	/^# define BIGNUM	/;"	d
+BIG_ENDIAN	defines.h	/^#  define BIG_ENDIAN /;"	d
+BIND_8_COMPAT	configure.ac	/^	AC_DEFINE_UNQUOTED([BIND_8_COMPAT], [1],$/;"	d
+BITMAP_BITS	bitmap.c	/^#define BITMAP_BITS	/;"	d	file:
+BITMAP_BYTES	bitmap.c	/^#define BITMAP_BYTES	/;"	d	file:
+BITMAP_MAX	bitmap.c	/^#define BITMAP_MAX	/;"	d	file:
+BITMAP_WMASK	bitmap.c	/^#define BITMAP_WMASK	/;"	d	file:
+BITMAP_WTYPE	bitmap.c	/^#define BITMAP_WTYPE	/;"	d	file:
+BITOP	openbsd-compat/memmem.c	/^#define BITOP(/;"	d	file:
+BIT_CLEAR	moduli.c	/^#define BIT_CLEAR(/;"	d	file:
+BIT_SET	moduli.c	/^#define BIT_SET(/;"	d	file:
+BIT_TEST	moduli.c	/^#define BIT_TEST(/;"	d	file:
+BLFRND	openbsd-compat/blowfish.c	/^#define BLFRND(/;"	d	file:
+BLF_MAXKEYLEN	openbsd-compat/blf.h	/^#define BLF_MAXKEYLEN /;"	d
+BLF_MAXUTILIZED	openbsd-compat/blf.h	/^#define BLF_MAXUTILIZED /;"	d
+BLF_N	openbsd-compat/blf.h	/^#define BLF_N	/;"	d
+BLOCKSZ	openbsd-compat/arc4random.c	/^#define BLOCKSZ	/;"	d	file:
+BROKEN_CLOSEFROM	configure.ac	/^	AC_DEFINE([BROKEN_CLOSEFROM], [1], [broken in chroots on older kernels])$/;"	d
+BROKEN_CMSG_TYPE	configure.ac	/^		AC_DEFINE([BROKEN_CMSG_TYPE], [1],$/;"	d
+BROKEN_GETADDRINFO	configure.ac	/^	AC_DEFINE([BROKEN_GETADDRINFO])$/;"	d
+BROKEN_GETGROUPS	configure.ac	/^	AC_DEFINE([BROKEN_GETGROUPS], [1], [getgroups(0,NULL) will return -1])$/;"	d
+BROKEN_GETLINE	configure.ac	/^		AC_DEFINE([BROKEN_GETLINE], [1], [getline is not what we expect])$/;"	d
+BROKEN_GLOB	configure.ac	/^	AC_DEFINE([BROKEN_GLOB], [1], [FreeBSD glob does not do what we need])$/;"	d
+BROKEN_GLOB	configure.ac	/^	AC_DEFINE([BROKEN_GLOB], [1], [OS X glob does not do what we expect])$/;"	d
+BROKEN_INET_NTOA	configure.ac	/^	AC_DEFINE([BROKEN_INET_NTOA])$/;"	d
+BROKEN_INET_NTOA	configure.ac	/^	AC_DEFINE([BROKEN_INET_NTOA], [1],$/;"	d
+BROKEN_POLL	configure.ac	/^	AC_DEFINE([BROKEN_POLL], [1],$/;"	d
+BROKEN_READV_COMPARISON	configure.ac	/^	AC_DEFINE([BROKEN_READV_COMPARISON], [1], [Can't do comparisons on readv])$/;"	d
+BROKEN_READ_COMPARISON	configure.ac	/^	AC_DEFINE([BROKEN_READ_COMPARISON], [1],$/;"	d
+BROKEN_SAVED_UIDS	configure.ac	/^	AC_DEFINE([BROKEN_SAVED_UIDS], [1], [Needed for NeXT])$/;"	d
+BROKEN_SETREGID	configure.ac	/^	AC_DEFINE([BROKEN_SETREGID])$/;"	d
+BROKEN_SETREGID	configure.ac	/^	AC_DEFINE([BROKEN_SETREGID], [1], [Define if your setregid() is broken])$/;"	d
+BROKEN_SETREUID	configure.ac	/^	AC_DEFINE([BROKEN_SETREUID])$/;"	d
+BROKEN_SETREUID	configure.ac	/^	AC_DEFINE([BROKEN_SETREUID], [1], [Define if your setreuid() is broken])$/;"	d
+BROKEN_SETVBUF	configure.ac	/^	AC_DEFINE([BROKEN_SETVBUF], [1],$/;"	d
+BROKEN_SHADOW_EXPIRE	configure.ac	/^	AC_DEFINE([BROKEN_SHADOW_EXPIRE], [1], [QNX shadow support is broken])$/;"	d
+BROKEN_STRNDUP	configure.ac	/^	AC_DEFINE([BROKEN_STRNDUP], 1, [strndup broken, see APAR IY61211])$/;"	d
+BROKEN_STRNLEN	configure.ac	/^	AC_DEFINE([BROKEN_STRNLEN], 1, [strnlen broken, see APAR IY62551])$/;"	d
+BROKEN_STRNVIS	configure.ac	/^    AC_DEFINE(BROKEN_STRNVIS, 1, [missing VIS_ALL]), [#include <vis.h>])$/;"	d
+BROKEN_TCGETATTR_ICANON	configure.ac	/^	AC_DEFINE([BROKEN_TCGETATTR_ICANON])$/;"	d
+BROKEN_TCGETATTR_ICANON	configure.ac	/^	AC_DEFINE([BROKEN_TCGETATTR_ICANON], [1], [tcgetattr with ICANON may hang])$/;"	d
+BROKEN_UPDWTMPX	configure.ac	/^		AC_DEFINE([BROKEN_UPDWTMPX])$/;"	d
+BROKEN_UPDWTMPX	configure.ac	/^	AC_DEFINE([BROKEN_UPDWTMPX])$/;"	d
+BROKEN_UPDWTMPX	configure.ac	/^	AC_DEFINE([BROKEN_UPDWTMPX], [1], [updwtmpx is broken (if present)])$/;"	d
+BSM_TEXTBUFSZ	audit-bsm.c	/^#define BSM_TEXTBUFSZ /;"	d	file:
+BUF	scp.c	/^} BUF;$/;"	t	typeref:struct:__anon10582e5c0108	file:
+BUFSIZE	regress/netcat.c	/^#define BUFSIZE /;"	d	file:
+BUFSZ	openbsd-compat/regress/snprintftest.c	/^#define BUFSZ /;"	d	file:
+BUILDDIR	Makefile.in	/^BUILDDIR=@abs_top_builddir@$/;"	m
+BYTE_ORDER	defines.h	/^#  define BYTE_ORDER /;"	d
+Base64	openbsd-compat/base64.c	/^static const char Base64[] =$/;"	v	typeref:typename:const char[]	file:
+BlowfishContext	openbsd-compat/blf.h	/^typedef struct BlowfishContext {$/;"	s
+Blowfish_decipher	openbsd-compat/blowfish.c	/^Blowfish_decipher(blf_ctx *c, u_int32_t *xl, u_int32_t *xr)$/;"	f	typeref:typename:void
+Blowfish_encipher	openbsd-compat/blowfish.c	/^Blowfish_encipher(blf_ctx *c, u_int32_t *xl, u_int32_t *xr)$/;"	f	typeref:typename:void
+Blowfish_expand0state	openbsd-compat/blowfish.c	/^Blowfish_expand0state(blf_ctx *c, const u_int8_t *key, u_int16_t keybytes)$/;"	f	typeref:typename:void
+Blowfish_expandstate	openbsd-compat/blowfish.c	/^Blowfish_expandstate(blf_ctx *c, const u_int8_t *data, u_int16_t databytes,$/;"	f	typeref:typename:void
+Blowfish_initstate	openbsd-compat/blowfish.c	/^Blowfish_initstate(blf_ctx *c)$/;"	f	typeref:typename:void
+Blowfish_stream2word	openbsd-compat/blowfish.c	/^Blowfish_stream2word(const u_int8_t *data, u_int16_t databytes,$/;"	f	typeref:typename:u_int32_t
+Build-time Customisation	README.md	/^### Build-time Customisation$/;"	S	section:Portable OpenSSH""Building Portable OpenSSH
+BuildPrereq	contrib/suse/openssh.spec	/^BuildPrereq:	XFree86-devel$/;"	t
+BuildPrereq	contrib/suse/openssh.spec	/^BuildPrereq:	openssl$/;"	t
+BuildPrereq	contrib/suse/openssh.spec	/^BuildPrereq:	zlib-devel$/;"	t
+BuildRequires	contrib/redhat/openssh.spec	/^BuildRequires: \/bin\/login$/;"	t
+BuildRequires	contrib/redhat/openssh.spec	/^BuildRequires: \/usr\/include\/X11\/Xlib.h$/;"	t
+BuildRequires	contrib/redhat/openssh.spec	/^BuildRequires: \/usr\/include\/security\/pam_appl.h$/;"	t
+BuildRequires	contrib/redhat/openssh.spec	/^BuildRequires: compat-openssl10-devel$/;"	t
+BuildRequires	contrib/redhat/openssh.spec	/^BuildRequires: glibc-devel, pam$/;"	t
+BuildRequires	contrib/redhat/openssh.spec	/^BuildRequires: gtk2-devel$/;"	t
+BuildRequires	contrib/redhat/openssh.spec	/^BuildRequires: imake$/;"	t
+BuildRequires	contrib/redhat/openssh.spec	/^BuildRequires: krb5-devel$/;"	t
+BuildRequires	contrib/redhat/openssh.spec	/^BuildRequires: krb5-libs$/;"	t
+BuildRequires	contrib/redhat/openssh.spec	/^BuildRequires: libXt-devel$/;"	t
+BuildRequires	contrib/redhat/openssh.spec	/^BuildRequires: openssl-devel < 1.1$/;"	t
+BuildRequires	contrib/redhat/openssh.spec	/^BuildRequires: openssl-devel >= 1.0.1$/;"	t
+BuildRequires	contrib/redhat/openssh.spec	/^BuildRequires: perl$/;"	t
+BuildRequires	contrib/redhat/openssh.spec	/^BuildRequires: pkgconfig$/;"	t
+BuildRoot	contrib/redhat/openssh.spec	/^BuildRoot: %{_tmppath}\/%{name}-%{version}-buildroot$/;"	t
+BuildRoot	contrib/suse/openssh.spec	/^BuildRoot:	%{_tmppath}\/openssh-%{version}-buildroot$/;"	t
+Building Portable OpenSSH	README.md	/^## Building Portable OpenSSH$/;"	s	chapter:Portable OpenSSH
+Building a release	README.md	/^### Building a release$/;"	S	section:Portable OpenSSH""Building Portable OpenSSH
+Building from git	README.md	/^### Building from git$/;"	S	section:Portable OpenSSH""Building Portable OpenSSH
+CAVEATS	scp.1	/^.Sh CAVEATS$/;"	s
+CA_MARKER	hostfile.h	/^#define CA_MARKER	/;"	d
+CC	Makefile.in	/^CC=@CC@$/;"	m
+CC	openbsd-compat/Makefile.in	/^CC=@CC@$/;"	m
+CC	openbsd-compat/regress/Makefile.in	/^CC=@CC@$/;"	m
+CC	regress/misc/fuzz-harness/Makefile	/^CC=clang-11$/;"	m
+CDIAGFLAGS	regress/misc/sk-dummy/Makefile	/^CDIAGFLAGS=	-Wall$/;"	m
+CERTIFICATES	ssh-keygen.1	/^.Sh CERTIFICATES$/;"	s
+CERTOPT_AGENT_FWD	ssh-keygen.c	/^#define CERTOPT_AGENT_FWD	/;"	d	file:
+CERTOPT_DEFAULT	ssh-keygen.c	/^#define CERTOPT_DEFAULT	/;"	d	file:
+CERTOPT_NO_REQUIRE_USER_PRESENCE	ssh-keygen.c	/^#define CERTOPT_NO_REQUIRE_USER_PRESENCE	/;"	d	file:
+CERTOPT_PORT_FWD	ssh-keygen.c	/^#define CERTOPT_PORT_FWD	/;"	d	file:
+CERTOPT_PTY	ssh-keygen.c	/^#define CERTOPT_PTY	/;"	d	file:
+CERTOPT_REQUIRE_VERIFY	ssh-keygen.c	/^#define CERTOPT_REQUIRE_VERIFY	/;"	d	file:
+CERTOPT_USER_RC	ssh-keygen.c	/^#define CERTOPT_USER_RC	/;"	d	file:
+CERTOPT_X_FWD	ssh-keygen.c	/^#define CERTOPT_X_FWD	/;"	d	file:
+CERT_DSA	regress/misc/fuzz-harness/fixed-keys.h	/^#define CERT_DSA /;"	d
+CERT_ECDSA	regress/misc/fuzz-harness/fixed-keys.h	/^#define CERT_ECDSA /;"	d
+CERT_ECDSA_SK	regress/misc/fuzz-harness/fixed-keys.h	/^#define CERT_ECDSA_SK /;"	d
+CERT_ED25519	regress/misc/fuzz-harness/fixed-keys.h	/^#define CERT_ED25519 /;"	d
+CERT_ED25519_SK	regress/misc/fuzz-harness/fixed-keys.h	/^#define CERT_ED25519_SK /;"	d
+CERT_RSA	regress/misc/fuzz-harness/fixed-keys.h	/^#define CERT_RSA /;"	d
+CFLAGS	Makefile.in	/^CFLAGS=@CFLAGS@$/;"	m
+CFLAGS	openbsd-compat/Makefile.in	/^CFLAGS=@CFLAGS@$/;"	m
+CFLAGS	openbsd-compat/regress/Makefile.in	/^CFLAGS=@CFLAGS@$/;"	m
+CFLAGS	regress/misc/fuzz-harness/Makefile	/^CFLAGS=$(CXXFLAGS)$/;"	m
+CFLAGS_NOPIE	Makefile.in	/^CFLAGS_NOPIE=@CFLAGS_NOPIE@$/;"	m
+CFLAGS_NOPIE	configure.ac	/^AC_SUBST([CFLAGS_NOPIE])$/;"	s
+CFLAGS_NOPIE	openbsd-compat/Makefile.in	/^CFLAGS_NOPIE=@CFLAGS_NOPIE@$/;"	m
+CFLAG_AESCTR	cipher.c	/^#define CFLAG_AESCTR	/;"	d	file:
+CFLAG_CBC	cipher.c	/^#define CFLAG_CBC	/;"	d	file:
+CFLAG_CHACHAPOLY	cipher.c	/^#define CFLAG_CHACHAPOLY	/;"	d	file:
+CFLAG_INTERNAL	cipher.c	/^#define CFLAG_INTERNAL	/;"	d	file:
+CFLAG_NONE	cipher.c	/^#define CFLAG_NONE	/;"	d	file:
+CHACHA_BLOCKLEN	chacha.h	/^#define CHACHA_BLOCKLEN	/;"	d
+CHACHA_CTRLEN	chacha.h	/^#define CHACHA_CTRLEN	/;"	d
+CHACHA_H	chacha.h	/^#define CHACHA_H$/;"	d
+CHACHA_KEYLEN	cipher-chachapoly.h	/^#define CHACHA_KEYLEN	/;"	d
+CHACHA_MINKEYLEN	chacha.h	/^#define CHACHA_MINKEYLEN	/;"	d
+CHACHA_NONCELEN	chacha.h	/^#define CHACHA_NONCELEN	/;"	d
+CHACHA_POLY_AEAD_H	cipher-chachapoly.h	/^#define CHACHA_POLY_AEAD_H$/;"	d
+CHACHA_STATELEN	chacha.h	/^#define CHACHA_STATELEN	/;"	d
+CHANNELLIBS	Makefile.in	/^CHANNELLIBS=@CHANNELLIBS@$/;"	m
+CHANNELLIBS	configure.ac	/^AC_SUBST([CHANNELLIBS])$/;"	s
+CHANNELS_MAX_CHANNELS	channels.h	/^#define CHANNELS_MAX_CHANNELS	/;"	d
+CHANNEL_CANCEL_PORT_STATIC	channels.h	/^#define CHANNEL_CANCEL_PORT_STATIC	/;"	d
+CHANNEL_EFD_INPUT_ACTIVE	channels.h	/^#define CHANNEL_EFD_INPUT_ACTIVE(/;"	d
+CHANNEL_EFD_OUTPUT_ACTIVE	channels.h	/^#define CHANNEL_EFD_OUTPUT_ACTIVE(/;"	d
+CHANNEL_H	channels.h	/^#define CHANNEL_H$/;"	d
+CHANNEL_MAX_READ	channels.h	/^#define CHANNEL_MAX_READ	/;"	d
+CHANNEL_MUX_MAX_PACKET	channels.c	/^#define CHANNEL_MUX_MAX_PACKET	/;"	d	file:
+CHANNEL_NONBLOCK_LEAVE	channels.h	/^#define CHANNEL_NONBLOCK_LEAVE	/;"	d
+CHANNEL_NONBLOCK_SET	channels.h	/^#define CHANNEL_NONBLOCK_SET	/;"	d
+CHANNEL_NONBLOCK_STDIO	channels.h	/^#define CHANNEL_NONBLOCK_STDIO	/;"	d
+CHANNEL_RESTORE_EFD	channels.h	/^#define CHANNEL_RESTORE_EFD	/;"	d
+CHANNEL_RESTORE_RFD	channels.h	/^#define CHANNEL_RESTORE_RFD	/;"	d
+CHANNEL_RESTORE_WFD	channels.h	/^#define CHANNEL_RESTORE_WFD	/;"	d
+CHAN_CLOSE_RCVD	channels.h	/^#define CHAN_CLOSE_RCVD	/;"	d
+CHAN_CLOSE_SENT	channels.h	/^#define CHAN_CLOSE_SENT	/;"	d
+CHAN_EOF_RCVD	channels.h	/^#define CHAN_EOF_RCVD	/;"	d
+CHAN_EOF_SENT	channels.h	/^#define CHAN_EOF_SENT	/;"	d
+CHAN_EXTENDED_IGNORE	channels.h	/^#define CHAN_EXTENDED_IGNORE	/;"	d
+CHAN_EXTENDED_READ	channels.h	/^#define CHAN_EXTENDED_READ	/;"	d
+CHAN_EXTENDED_WRITE	channels.h	/^#define CHAN_EXTENDED_WRITE	/;"	d
+CHAN_INPUT_CLOSED	channels.h	/^#define CHAN_INPUT_CLOSED	/;"	d
+CHAN_INPUT_MAX	channels.h	/^#define CHAN_INPUT_MAX	/;"	d
+CHAN_INPUT_OPEN	channels.h	/^#define CHAN_INPUT_OPEN	/;"	d
+CHAN_INPUT_WAIT_DRAIN	channels.h	/^#define CHAN_INPUT_WAIT_DRAIN	/;"	d
+CHAN_INPUT_WAIT_OCLOSE	channels.h	/^#define CHAN_INPUT_WAIT_OCLOSE	/;"	d
+CHAN_LOCAL	channels.h	/^#define CHAN_LOCAL	/;"	d
+CHAN_OUTPUT_CLOSED	channels.h	/^#define CHAN_OUTPUT_CLOSED	/;"	d
+CHAN_OUTPUT_OPEN	channels.h	/^#define CHAN_OUTPUT_OPEN	/;"	d
+CHAN_OUTPUT_WAIT_DRAIN	channels.h	/^#define CHAN_OUTPUT_WAIT_DRAIN	/;"	d
+CHAN_OUTPUT_WAIT_IEOF	channels.h	/^#define CHAN_OUTPUT_WAIT_IEOF	/;"	d
+CHAN_POST	channels.c	/^enum channel_table { CHAN_PRE, CHAN_POST };$/;"	e	enum:channel_table	file:
+CHAN_PRE	channels.c	/^enum channel_table { CHAN_PRE, CHAN_POST };$/;"	e	enum:channel_table	file:
+CHAN_RBUF	channels.h	/^#define CHAN_RBUF	/;"	d
+CHAN_SES_PACKET_DEFAULT	channels.h	/^#define CHAN_SES_PACKET_DEFAULT	/;"	d
+CHAN_SES_WINDOW_DEFAULT	channels.h	/^#define CHAN_SES_WINDOW_DEFAULT	/;"	d
+CHAN_TCP_PACKET_DEFAULT	channels.h	/^#define CHAN_TCP_PACKET_DEFAULT	/;"	d
+CHAN_TCP_WINDOW_DEFAULT	channels.h	/^#define CHAN_TCP_WINDOW_DEFAULT	/;"	d
+CHAN_X11_PACKET_DEFAULT	channels.h	/^#define CHAN_X11_PACKET_DEFAULT	/;"	d
+CHAN_X11_WINDOW_DEFAULT	channels.h	/^#define CHAN_X11_WINDOW_DEFAULT	/;"	d
+CHAR	openbsd-compat/glob.c	/^#define	CHAR(/;"	d	file:
+CHAR64LONG16	openbsd-compat/sha1.c	/^} CHAR64LONG16;$/;"	t	typeref:union:__anonad849d8e010a	file:
+CHECK_FILTER	regress/unittests/match/tests.c	/^#define CHECK_FILTER(/;"	d	file:
+CHECK_SUCCESS_AND_CLEANUP	regress/unittests/authopt/tests.c	/^#define CHECK_SUCCESS_AND_CLEANUP(/;"	d	file:
+CIPHER_DECRYPT	cipher.h	/^#define CIPHER_DECRYPT	/;"	d
+CIPHER_ENCRYPT	cipher.h	/^#define CIPHER_ENCRYPT	/;"	d
+CIPHER_H	cipher.h	/^#define CIPHER_H$/;"	d
+CIPHER_SEP	cipher.c	/^#define	CIPHER_SEP	/;"	d	file:
+CKA_AC_ISSUER	pkcs11.h	/^#define CKA_AC_ISSUER	/;"	d
+CKA_ALLOWED_MECHANISMS	pkcs11.h	/^#define CKA_ALLOWED_MECHANISMS	/;"	d
+CKA_ALWAYS_AUTHENTICATE	pkcs11.h	/^#define CKA_ALWAYS_AUTHENTICATE	/;"	d
+CKA_ALWAYS_SENSITIVE	pkcs11.h	/^#define CKA_ALWAYS_SENSITIVE	/;"	d
+CKA_APPLICATION	pkcs11.h	/^#define CKA_APPLICATION	/;"	d
+CKA_ATTR_TYPES	pkcs11.h	/^#define CKA_ATTR_TYPES	/;"	d
+CKA_AUTH_PIN_FLAGS	pkcs11.h	/^#define CKA_AUTH_PIN_FLAGS	/;"	d
+CKA_BASE	pkcs11.h	/^#define CKA_BASE	/;"	d
+CKA_BITS_PER_PIXEL	pkcs11.h	/^#define CKA_BITS_PER_PIXEL	/;"	d
+CKA_CERTIFICATE_CATEGORY	pkcs11.h	/^#define CKA_CERTIFICATE_CATEGORY	/;"	d
+CKA_CERTIFICATE_TYPE	pkcs11.h	/^#define CKA_CERTIFICATE_TYPE	/;"	d
+CKA_CHAR_COLUMNS	pkcs11.h	/^#define CKA_CHAR_COLUMNS	/;"	d
+CKA_CHAR_ROWS	pkcs11.h	/^#define CKA_CHAR_ROWS	/;"	d
+CKA_CHAR_SETS	pkcs11.h	/^#define CKA_CHAR_SETS	/;"	d
+CKA_CHECK_VALUE	pkcs11.h	/^#define CKA_CHECK_VALUE	/;"	d
+CKA_CLASS	pkcs11.h	/^#define CKA_CLASS	/;"	d
+CKA_COEFFICIENT	pkcs11.h	/^#define CKA_COEFFICIENT	/;"	d
+CKA_COLOR	pkcs11.h	/^#define CKA_COLOR	/;"	d
+CKA_DECRYPT	pkcs11.h	/^#define CKA_DECRYPT	/;"	d
+CKA_DEFAULT_CMS_ATTRIBUTES	pkcs11.h	/^#define CKA_DEFAULT_CMS_ATTRIBUTES	/;"	d
+CKA_DERIVE	pkcs11.h	/^#define CKA_DERIVE	/;"	d
+CKA_ECDSA_PARAMS	pkcs11.h	/^#define CKA_ECDSA_PARAMS	/;"	d
+CKA_EC_PARAMS	pkcs11.h	/^#define CKA_EC_PARAMS	/;"	d
+CKA_EC_POINT	pkcs11.h	/^#define CKA_EC_POINT	/;"	d
+CKA_ENCODING_METHODS	pkcs11.h	/^#define CKA_ENCODING_METHODS	/;"	d
+CKA_ENCRYPT	pkcs11.h	/^#define CKA_ENCRYPT	/;"	d
+CKA_END_DATE	pkcs11.h	/^#define CKA_END_DATE	/;"	d
+CKA_EXPONENT_1	pkcs11.h	/^#define CKA_EXPONENT_1	/;"	d
+CKA_EXPONENT_2	pkcs11.h	/^#define CKA_EXPONENT_2	/;"	d
+CKA_EXTRACTABLE	pkcs11.h	/^#define CKA_EXTRACTABLE	/;"	d
+CKA_HASH_OF_ISSUER_PUBLIC_KEY	pkcs11.h	/^#define CKA_HASH_OF_ISSUER_PUBLIC_KEY	/;"	d
+CKA_HASH_OF_SUBJECT_PUBLIC_KEY	pkcs11.h	/^#define CKA_HASH_OF_SUBJECT_PUBLIC_KEY	/;"	d
+CKA_HAS_RESET	pkcs11.h	/^#define CKA_HAS_RESET	/;"	d
+CKA_HW_FEATURE_TYPE	pkcs11.h	/^#define CKA_HW_FEATURE_TYPE	/;"	d
+CKA_ID	pkcs11.h	/^#define CKA_ID	/;"	d
+CKA_ISSUER	pkcs11.h	/^#define CKA_ISSUER	/;"	d
+CKA_JAVA_MIDP_SECURITY_DOMAIN	pkcs11.h	/^#define CKA_JAVA_MIDP_SECURITY_DOMAIN	/;"	d
+CKA_KEY_GEN_MECHANISM	pkcs11.h	/^#define CKA_KEY_GEN_MECHANISM	/;"	d
+CKA_KEY_TYPE	pkcs11.h	/^#define CKA_KEY_TYPE	/;"	d
+CKA_LABEL	pkcs11.h	/^#define CKA_LABEL	/;"	d
+CKA_LOCAL	pkcs11.h	/^#define CKA_LOCAL	/;"	d
+CKA_MECHANISM_TYPE	pkcs11.h	/^#define CKA_MECHANISM_TYPE	/;"	d
+CKA_MIME_TYPES	pkcs11.h	/^#define CKA_MIME_TYPES	/;"	d
+CKA_MODIFIABLE	pkcs11.h	/^#define CKA_MODIFIABLE	/;"	d
+CKA_MODULUS	pkcs11.h	/^#define CKA_MODULUS	/;"	d
+CKA_MODULUS_BITS	pkcs11.h	/^#define CKA_MODULUS_BITS	/;"	d
+CKA_NEVER_EXTRACTABLE	pkcs11.h	/^#define CKA_NEVER_EXTRACTABLE	/;"	d
+CKA_OBJECT_ID	pkcs11.h	/^#define CKA_OBJECT_ID	/;"	d
+CKA_OWNER	pkcs11.h	/^#define CKA_OWNER	/;"	d
+CKA_PIXEL_X	pkcs11.h	/^#define CKA_PIXEL_X	/;"	d
+CKA_PIXEL_Y	pkcs11.h	/^#define CKA_PIXEL_Y	/;"	d
+CKA_PRIME	pkcs11.h	/^#define CKA_PRIME	/;"	d
+CKA_PRIME_1	pkcs11.h	/^#define CKA_PRIME_1	/;"	d
+CKA_PRIME_2	pkcs11.h	/^#define CKA_PRIME_2	/;"	d
+CKA_PRIME_BITS	pkcs11.h	/^#define CKA_PRIME_BITS	/;"	d
+CKA_PRIVATE	pkcs11.h	/^#define CKA_PRIVATE	/;"	d
+CKA_PRIVATE_EXPONENT	pkcs11.h	/^#define CKA_PRIVATE_EXPONENT	/;"	d
+CKA_PUBLIC_EXPONENT	pkcs11.h	/^#define CKA_PUBLIC_EXPONENT	/;"	d
+CKA_REQUIRED_CMS_ATTRIBUTES	pkcs11.h	/^#define CKA_REQUIRED_CMS_ATTRIBUTES	/;"	d
+CKA_RESET_ON_INIT	pkcs11.h	/^#define CKA_RESET_ON_INIT	/;"	d
+CKA_RESOLUTION	pkcs11.h	/^#define CKA_RESOLUTION	/;"	d
+CKA_SECONDARY_AUTH	pkcs11.h	/^#define CKA_SECONDARY_AUTH	/;"	d
+CKA_SENSITIVE	pkcs11.h	/^#define CKA_SENSITIVE	/;"	d
+CKA_SERIAL_NUMBER	pkcs11.h	/^#define CKA_SERIAL_NUMBER	/;"	d
+CKA_SIGN	pkcs11.h	/^#define CKA_SIGN	/;"	d
+CKA_SIGN_RECOVER	pkcs11.h	/^#define CKA_SIGN_RECOVER	/;"	d
+CKA_START_DATE	pkcs11.h	/^#define CKA_START_DATE	/;"	d
+CKA_SUBJECT	pkcs11.h	/^#define CKA_SUBJECT	/;"	d
+CKA_SUBPRIME	pkcs11.h	/^#define CKA_SUBPRIME	/;"	d
+CKA_SUB_PRIME_BITS	pkcs11.h	/^#define CKA_SUB_PRIME_BITS	/;"	d
+CKA_SUPPORTED_CMS_ATTRIBUTES	pkcs11.h	/^#define CKA_SUPPORTED_CMS_ATTRIBUTES	/;"	d
+CKA_TOKEN	pkcs11.h	/^#define CKA_TOKEN	/;"	d
+CKA_TRUSTED	pkcs11.h	/^#define CKA_TRUSTED	/;"	d
+CKA_UNWRAP	pkcs11.h	/^#define CKA_UNWRAP	/;"	d
+CKA_UNWRAP_TEMPLATE	pkcs11.h	/^#define CKA_UNWRAP_TEMPLATE	/;"	d
+CKA_URL	pkcs11.h	/^#define CKA_URL	/;"	d
+CKA_VALUE	pkcs11.h	/^#define CKA_VALUE	/;"	d
+CKA_VALUE_BITS	pkcs11.h	/^#define CKA_VALUE_BITS	/;"	d
+CKA_VALUE_LEN	pkcs11.h	/^#define CKA_VALUE_LEN	/;"	d
+CKA_VENDOR_DEFINED	pkcs11.h	/^#define CKA_VENDOR_DEFINED	/;"	d
+CKA_VERIFY	pkcs11.h	/^#define CKA_VERIFY	/;"	d
+CKA_VERIFY_RECOVER	pkcs11.h	/^#define CKA_VERIFY_RECOVER	/;"	d
+CKA_WRAP	pkcs11.h	/^#define CKA_WRAP	/;"	d
+CKA_WRAP_TEMPLATE	pkcs11.h	/^#define CKA_WRAP_TEMPLATE	/;"	d
+CKA_WRAP_WITH_TRUSTED	pkcs11.h	/^#define CKA_WRAP_WITH_TRUSTED	/;"	d
+CKC_VENDOR_DEFINED	pkcs11.h	/^#define CKC_VENDOR_DEFINED	/;"	d
+CKC_WTLS	pkcs11.h	/^#define CKC_WTLS	/;"	d
+CKC_X_509	pkcs11.h	/^#define CKC_X_509	/;"	d
+CKC_X_509_ATTR_CERT	pkcs11.h	/^#define CKC_X_509_ATTR_CERT	/;"	d
+CKF_ARRAY_ATTRIBUTE	pkcs11.h	/^#define CKF_ARRAY_ATTRIBUTE	/;"	d
+CKF_CLOCK_ON_TOKEN	pkcs11.h	/^#define CKF_CLOCK_ON_TOKEN	/;"	d
+CKF_DECRYPT	pkcs11.h	/^#define CKF_DECRYPT	/;"	d
+CKF_DERIVE	pkcs11.h	/^#define CKF_DERIVE	/;"	d
+CKF_DIGEST	pkcs11.h	/^#define CKF_DIGEST	/;"	d
+CKF_DONT_BLOCK	pkcs11.h	/^#define CKF_DONT_BLOCK	/;"	d
+CKF_DUAL_CRYPTO_OPERATIONS	pkcs11.h	/^#define CKF_DUAL_CRYPTO_OPERATIONS	/;"	d
+CKF_ENCRYPT	pkcs11.h	/^#define CKF_ENCRYPT	/;"	d
+CKF_EXTENSION	pkcs11.h	/^#define CKF_EXTENSION	/;"	d
+CKF_GENERATE	pkcs11.h	/^#define CKF_GENERATE	/;"	d
+CKF_GENERATE_KEY_PAIR	pkcs11.h	/^#define CKF_GENERATE_KEY_PAIR	/;"	d
+CKF_HW	pkcs11.h	/^#define CKF_HW	/;"	d
+CKF_HW_SLOT	pkcs11.h	/^#define CKF_HW_SLOT	/;"	d
+CKF_LIBRARY_CANT_CREATE_OS_THREADS	pkcs11.h	/^#define CKF_LIBRARY_CANT_CREATE_OS_THREADS	/;"	d
+CKF_LOGIN_REQUIRED	pkcs11.h	/^#define CKF_LOGIN_REQUIRED	/;"	d
+CKF_OS_LOCKING_OK	pkcs11.h	/^#define CKF_OS_LOCKING_OK	/;"	d
+CKF_PROTECTED_AUTHENTICATION_PATH	pkcs11.h	/^#define CKF_PROTECTED_AUTHENTICATION_PATH	/;"	d
+CKF_REMOVABLE_DEVICE	pkcs11.h	/^#define CKF_REMOVABLE_DEVICE	/;"	d
+CKF_RESTORE_KEY_NOT_NEEDED	pkcs11.h	/^#define CKF_RESTORE_KEY_NOT_NEEDED	/;"	d
+CKF_RNG	pkcs11.h	/^#define CKF_RNG	/;"	d
+CKF_RW_SESSION	pkcs11.h	/^#define CKF_RW_SESSION	/;"	d
+CKF_SECONDARY_AUTHENTICATION	pkcs11.h	/^#define CKF_SECONDARY_AUTHENTICATION	/;"	d
+CKF_SERIAL_SESSION	pkcs11.h	/^#define CKF_SERIAL_SESSION	/;"	d
+CKF_SIGN	pkcs11.h	/^#define CKF_SIGN	/;"	d
+CKF_SIGN_RECOVER	pkcs11.h	/^#define CKF_SIGN_RECOVER	/;"	d
+CKF_SO_PIN_COUNT_LOW	pkcs11.h	/^#define CKF_SO_PIN_COUNT_LOW	/;"	d
+CKF_SO_PIN_FINAL_TRY	pkcs11.h	/^#define CKF_SO_PIN_FINAL_TRY	/;"	d
+CKF_SO_PIN_LOCKED	pkcs11.h	/^#define CKF_SO_PIN_LOCKED	/;"	d
+CKF_SO_PIN_TO_BE_CHANGED	pkcs11.h	/^#define CKF_SO_PIN_TO_BE_CHANGED	/;"	d
+CKF_TOKEN_INITIALIZED	pkcs11.h	/^#define CKF_TOKEN_INITIALIZED	/;"	d
+CKF_TOKEN_PRESENT	pkcs11.h	/^#define CKF_TOKEN_PRESENT	/;"	d
+CKF_UNWRAP	pkcs11.h	/^#define CKF_UNWRAP	/;"	d
+CKF_USER_PIN_COUNT_LOW	pkcs11.h	/^#define CKF_USER_PIN_COUNT_LOW	/;"	d
+CKF_USER_PIN_FINAL_TRY	pkcs11.h	/^#define CKF_USER_PIN_FINAL_TRY	/;"	d
+CKF_USER_PIN_INITIALIZED	pkcs11.h	/^#define CKF_USER_PIN_INITIALIZED	/;"	d
+CKF_USER_PIN_LOCKED	pkcs11.h	/^#define CKF_USER_PIN_LOCKED	/;"	d
+CKF_USER_PIN_TO_BE_CHANGED	pkcs11.h	/^#define CKF_USER_PIN_TO_BE_CHANGED	/;"	d
+CKF_VERIFY	pkcs11.h	/^#define CKF_VERIFY	/;"	d
+CKF_VERIFY_RECOVER	pkcs11.h	/^#define CKF_VERIFY_RECOVER	/;"	d
+CKF_WRAP	pkcs11.h	/^#define CKF_WRAP	/;"	d
+CKF_WRITE_PROTECTED	pkcs11.h	/^#define CKF_WRITE_PROTECTED	/;"	d
+CKH_CLOCK	pkcs11.h	/^#define CKH_CLOCK	/;"	d
+CKH_MONOTONIC_COUNTER	pkcs11.h	/^#define CKH_MONOTONIC_COUNTER	/;"	d
+CKH_USER_INTERFACE	pkcs11.h	/^#define CKH_USER_INTERFACE	/;"	d
+CKH_VENDOR_DEFINED	pkcs11.h	/^#define CKH_VENDOR_DEFINED	/;"	d
+CKK_AES	pkcs11.h	/^#define CKK_AES	/;"	d
+CKK_BATON	pkcs11.h	/^#define CKK_BATON	/;"	d
+CKK_BLOWFISH	pkcs11.h	/^#define CKK_BLOWFISH	/;"	d
+CKK_CAST	pkcs11.h	/^#define CKK_CAST	/;"	d
+CKK_CAST128	pkcs11.h	/^#define CKK_CAST128	/;"	d
+CKK_CAST3	pkcs11.h	/^#define CKK_CAST3	/;"	d
+CKK_CDMF	pkcs11.h	/^#define CKK_CDMF	/;"	d
+CKK_DES	pkcs11.h	/^#define CKK_DES	/;"	d
+CKK_DES2	pkcs11.h	/^#define CKK_DES2	/;"	d
+CKK_DES3	pkcs11.h	/^#define CKK_DES3	/;"	d
+CKK_DH	pkcs11.h	/^#define CKK_DH	/;"	d
+CKK_DSA	pkcs11.h	/^#define CKK_DSA	/;"	d
+CKK_EC	pkcs11.h	/^#define CKK_EC	/;"	d
+CKK_ECDSA	pkcs11.h	/^#define CKK_ECDSA	/;"	d
+CKK_GENERIC_SECRET	pkcs11.h	/^#define CKK_GENERIC_SECRET	/;"	d
+CKK_IDEA	pkcs11.h	/^#define CKK_IDEA	/;"	d
+CKK_JUNIPER	pkcs11.h	/^#define CKK_JUNIPER	/;"	d
+CKK_KEA	pkcs11.h	/^#define CKK_KEA	/;"	d
+CKK_RC2	pkcs11.h	/^#define CKK_RC2	/;"	d
+CKK_RC4	pkcs11.h	/^#define CKK_RC4	/;"	d
+CKK_RC5	pkcs11.h	/^#define CKK_RC5	/;"	d
+CKK_RSA	pkcs11.h	/^#define CKK_RSA	/;"	d
+CKK_SKIPJACK	pkcs11.h	/^#define CKK_SKIPJACK	/;"	d
+CKK_TWOFISH	pkcs11.h	/^#define CKK_TWOFISH	/;"	d
+CKK_VENDOR_DEFINED	pkcs11.h	/^#define CKK_VENDOR_DEFINED	/;"	d
+CKK_X9_42_DH	pkcs11.h	/^#define CKK_X9_42_DH	/;"	d
+CKM_AES_CBC	pkcs11.h	/^#define CKM_AES_CBC	/;"	d
+CKM_AES_CBC_PAD	pkcs11.h	/^#define CKM_AES_CBC_PAD	/;"	d
+CKM_AES_ECB	pkcs11.h	/^#define CKM_AES_ECB	/;"	d
+CKM_AES_KEY_GEN	pkcs11.h	/^#define CKM_AES_KEY_GEN	/;"	d
+CKM_AES_MAC	pkcs11.h	/^#define CKM_AES_MAC	/;"	d
+CKM_AES_MAC_GENERAL	pkcs11.h	/^#define CKM_AES_MAC_GENERAL	/;"	d
+CKM_BATON_CBC128	pkcs11.h	/^#define CKM_BATON_CBC128	/;"	d
+CKM_BATON_COUNTER	pkcs11.h	/^#define CKM_BATON_COUNTER	/;"	d
+CKM_BATON_ECB128	pkcs11.h	/^#define CKM_BATON_ECB128	/;"	d
+CKM_BATON_ECB96	pkcs11.h	/^#define CKM_BATON_ECB96	/;"	d
+CKM_BATON_KEY_GEN	pkcs11.h	/^#define CKM_BATON_KEY_GEN	/;"	d
+CKM_BATON_SHUFFLE	pkcs11.h	/^#define CKM_BATON_SHUFFLE	/;"	d
+CKM_BATON_WRAP	pkcs11.h	/^#define CKM_BATON_WRAP	/;"	d
+CKM_CAST128_CBC	pkcs11.h	/^#define CKM_CAST128_CBC	/;"	d
+CKM_CAST128_CBC_PAD	pkcs11.h	/^#define CKM_CAST128_CBC_PAD	/;"	d
+CKM_CAST128_ECB	pkcs11.h	/^#define CKM_CAST128_ECB	/;"	d
+CKM_CAST128_KEY_GEN	pkcs11.h	/^#define CKM_CAST128_KEY_GEN	/;"	d
+CKM_CAST128_MAC	pkcs11.h	/^#define	CKM_CAST128_MAC	/;"	d
+CKM_CAST128_MAC_GENERAL	pkcs11.h	/^#define CKM_CAST128_MAC_GENERAL	/;"	d
+CKM_CAST3_CBC	pkcs11.h	/^#define CKM_CAST3_CBC	/;"	d
+CKM_CAST3_CBC_PAD	pkcs11.h	/^#define CKM_CAST3_CBC_PAD	/;"	d
+CKM_CAST3_ECB	pkcs11.h	/^#define CKM_CAST3_ECB	/;"	d
+CKM_CAST3_KEY_GEN	pkcs11.h	/^#define CKM_CAST3_KEY_GEN	/;"	d
+CKM_CAST3_MAC	pkcs11.h	/^#define CKM_CAST3_MAC	/;"	d
+CKM_CAST3_MAC_GENERAL	pkcs11.h	/^#define CKM_CAST3_MAC_GENERAL	/;"	d
+CKM_CAST5_CBC	pkcs11.h	/^#define CKM_CAST5_CBC	/;"	d
+CKM_CAST5_CBC_PAD	pkcs11.h	/^#define CKM_CAST5_CBC_PAD	/;"	d
+CKM_CAST5_ECB	pkcs11.h	/^#define CKM_CAST5_ECB	/;"	d
+CKM_CAST5_KEY_GEN	pkcs11.h	/^#define CKM_CAST5_KEY_GEN	/;"	d
+CKM_CAST5_MAC	pkcs11.h	/^#define CKM_CAST5_MAC	/;"	d
+CKM_CAST5_MAC_GENERAL	pkcs11.h	/^#define CKM_CAST5_MAC_GENERAL	/;"	d
+CKM_CAST_CBC	pkcs11.h	/^#define CKM_CAST_CBC	/;"	d
+CKM_CAST_CBC_PAD	pkcs11.h	/^#define CKM_CAST_CBC_PAD	/;"	d
+CKM_CAST_ECB	pkcs11.h	/^#define CKM_CAST_ECB	/;"	d
+CKM_CAST_KEY_GEN	pkcs11.h	/^#define CKM_CAST_KEY_GEN	/;"	d
+CKM_CAST_MAC	pkcs11.h	/^#define CKM_CAST_MAC	/;"	d
+CKM_CAST_MAC_GENERAL	pkcs11.h	/^#define CKM_CAST_MAC_GENERAL	/;"	d
+CKM_CDMF_CBC	pkcs11.h	/^#define CKM_CDMF_CBC	/;"	d
+CKM_CDMF_CBC_PAD	pkcs11.h	/^#define CKM_CDMF_CBC_PAD	/;"	d
+CKM_CDMF_ECB	pkcs11.h	/^#define CKM_CDMF_ECB	/;"	d
+CKM_CDMF_KEY_GEN	pkcs11.h	/^#define CKM_CDMF_KEY_GEN	/;"	d
+CKM_CDMF_MAC	pkcs11.h	/^#define CKM_CDMF_MAC	/;"	d
+CKM_CDMF_MAC_GENERAL	pkcs11.h	/^#define CKM_CDMF_MAC_GENERAL	/;"	d
+CKM_CONCATENATE_BASE_AND_DATA	pkcs11.h	/^#define CKM_CONCATENATE_BASE_AND_DATA	/;"	d
+CKM_CONCATENATE_BASE_AND_KEY	pkcs11.h	/^#define CKM_CONCATENATE_BASE_AND_KEY	/;"	d
+CKM_CONCATENATE_DATA_AND_BASE	pkcs11.h	/^#define CKM_CONCATENATE_DATA_AND_BASE	/;"	d
+CKM_DES2_KEY_GEN	pkcs11.h	/^#define CKM_DES2_KEY_GEN	/;"	d
+CKM_DES3_CBC	pkcs11.h	/^#define CKM_DES3_CBC	/;"	d
+CKM_DES3_CBC_PAD	pkcs11.h	/^#define CKM_DES3_CBC_PAD	/;"	d
+CKM_DES3_ECB	pkcs11.h	/^#define CKM_DES3_ECB	/;"	d
+CKM_DES3_KEY_GEN	pkcs11.h	/^#define CKM_DES3_KEY_GEN	/;"	d
+CKM_DES3_MAC	pkcs11.h	/^#define CKM_DES3_MAC	/;"	d
+CKM_DES3_MAC_GENERAL	pkcs11.h	/^#define CKM_DES3_MAC_GENERAL	/;"	d
+CKM_DES_CBC	pkcs11.h	/^#define CKM_DES_CBC	/;"	d
+CKM_DES_CBC_PAD	pkcs11.h	/^#define CKM_DES_CBC_PAD	/;"	d
+CKM_DES_ECB	pkcs11.h	/^#define CKM_DES_ECB	/;"	d
+CKM_DES_KEY_GEN	pkcs11.h	/^#define CKM_DES_KEY_GEN	/;"	d
+CKM_DES_MAC	pkcs11.h	/^#define CKM_DES_MAC	/;"	d
+CKM_DES_MAC_GENERAL	pkcs11.h	/^#define CKM_DES_MAC_GENERAL	/;"	d
+CKM_DH_PKCS_DERIVE	pkcs11.h	/^#define CKM_DH_PKCS_DERIVE	/;"	d
+CKM_DH_PKCS_KEY_PAIR_GEN	pkcs11.h	/^#define CKM_DH_PKCS_KEY_PAIR_GEN	/;"	d
+CKM_DH_PKCS_PARAMETER_GEN	pkcs11.h	/^#define CKM_DH_PKCS_PARAMETER_GEN	/;"	d
+CKM_DSA	pkcs11.h	/^#define	CKM_DSA	/;"	d
+CKM_DSA_KEY_PAIR_GEN	pkcs11.h	/^#define CKM_DSA_KEY_PAIR_GEN	/;"	d
+CKM_DSA_PARAMETER_GEN	pkcs11.h	/^#define CKM_DSA_PARAMETER_GEN	/;"	d
+CKM_DSA_SHA1	pkcs11.h	/^#define CKM_DSA_SHA1	/;"	d
+CKM_ECDH1_COFACTOR_DERIVE	pkcs11.h	/^#define CKM_ECDH1_COFACTOR_DERIVE	/;"	d
+CKM_ECDH1_DERIVE	pkcs11.h	/^#define CKM_ECDH1_DERIVE	/;"	d
+CKM_ECDSA	pkcs11.h	/^#define CKM_ECDSA	/;"	d
+CKM_ECDSA_KEY_PAIR_GEN	pkcs11.h	/^#define CKM_ECDSA_KEY_PAIR_GEN	/;"	d
+CKM_ECDSA_SHA1	pkcs11.h	/^#define CKM_ECDSA_SHA1	/;"	d
+CKM_ECMQV_DERIVE	pkcs11.h	/^#define CKM_ECMQV_DERIVE	/;"	d
+CKM_EC_KEY_PAIR_GEN	pkcs11.h	/^#define CKM_EC_KEY_PAIR_GEN	/;"	d
+CKM_EXTRACT_KEY_FROM_KEY	pkcs11.h	/^#define CKM_EXTRACT_KEY_FROM_KEY	/;"	d
+CKM_FASTHASH	pkcs11.h	/^#define CKM_FASTHASH	/;"	d
+CKM_FORTEZZA_TIMESTAMP	pkcs11.h	/^#define CKM_FORTEZZA_TIMESTAMP	/;"	d
+CKM_GENERIC_SECRET_KEY_GEN	pkcs11.h	/^#define CKM_GENERIC_SECRET_KEY_GEN	/;"	d
+CKM_IDEA_CBC	pkcs11.h	/^#define	CKM_IDEA_CBC	/;"	d
+CKM_IDEA_CBC_PAD	pkcs11.h	/^#define CKM_IDEA_CBC_PAD	/;"	d
+CKM_IDEA_ECB	pkcs11.h	/^#define CKM_IDEA_ECB	/;"	d
+CKM_IDEA_KEY_GEN	pkcs11.h	/^#define CKM_IDEA_KEY_GEN	/;"	d
+CKM_IDEA_MAC	pkcs11.h	/^#define CKM_IDEA_MAC	/;"	d
+CKM_IDEA_MAC_GENERAL	pkcs11.h	/^#define CKM_IDEA_MAC_GENERAL	/;"	d
+CKM_JUNIPER_CBC128	pkcs11.h	/^#define CKM_JUNIPER_CBC128	/;"	d
+CKM_JUNIPER_COUNTER	pkcs11.h	/^#define CKM_JUNIPER_COUNTER	/;"	d
+CKM_JUNIPER_ECB128	pkcs11.h	/^#define CKM_JUNIPER_ECB128	/;"	d
+CKM_JUNIPER_KEY_GEN	pkcs11.h	/^#define CKM_JUNIPER_KEY_GEN	/;"	d
+CKM_JUNIPER_SHUFFLE	pkcs11.h	/^#define CKM_JUNIPER_SHUFFLE	/;"	d
+CKM_JUNIPER_WRAP	pkcs11.h	/^#define CKM_JUNIPER_WRAP	/;"	d
+CKM_KEA_KEY_DERIVE	pkcs11.h	/^#define CKM_KEA_KEY_DERIVE	/;"	d
+CKM_KEA_KEY_PAIR_GEN	pkcs11.h	/^#define CKM_KEA_KEY_PAIR_GEN	/;"	d
+CKM_KEY_WRAP_LYNKS	pkcs11.h	/^#define CKM_KEY_WRAP_LYNKS	/;"	d
+CKM_KEY_WRAP_SET_OAEP	pkcs11.h	/^#define CKM_KEY_WRAP_SET_OAEP	/;"	d
+CKM_MD2	pkcs11.h	/^#define CKM_MD2	/;"	d
+CKM_MD2_HMAC	pkcs11.h	/^#define CKM_MD2_HMAC	/;"	d
+CKM_MD2_HMAC_GENERAL	pkcs11.h	/^#define CKM_MD2_HMAC_GENERAL	/;"	d
+CKM_MD2_KEY_DERIVATION	pkcs11.h	/^#define CKM_MD2_KEY_DERIVATION	/;"	d
+CKM_MD2_RSA_PKCS	pkcs11.h	/^#define CKM_MD2_RSA_PKCS	/;"	d
+CKM_MD5	pkcs11.h	/^#define CKM_MD5	/;"	d
+CKM_MD5_HMAC	pkcs11.h	/^#define CKM_MD5_HMAC	/;"	d
+CKM_MD5_HMAC_GENERAL	pkcs11.h	/^#define CKM_MD5_HMAC_GENERAL	/;"	d
+CKM_MD5_KEY_DERIVATION	pkcs11.h	/^#define CKM_MD5_KEY_DERIVATION	/;"	d
+CKM_MD5_RSA_PKCS	pkcs11.h	/^#define CKM_MD5_RSA_PKCS	/;"	d
+CKM_PBA_SHA1_WITH_SHA1_HMAC	pkcs11.h	/^#define CKM_PBA_SHA1_WITH_SHA1_HMAC	/;"	d
+CKM_PBE_MD2_DES_CBC	pkcs11.h	/^#define CKM_PBE_MD2_DES_CBC	/;"	d
+CKM_PBE_MD5_CAST128_CBC	pkcs11.h	/^#define CKM_PBE_MD5_CAST128_CBC	/;"	d
+CKM_PBE_MD5_CAST3_CBC	pkcs11.h	/^#define CKM_PBE_MD5_CAST3_CBC	/;"	d
+CKM_PBE_MD5_CAST5_CBC	pkcs11.h	/^#define CKM_PBE_MD5_CAST5_CBC	/;"	d
+CKM_PBE_MD5_CAST_CBC	pkcs11.h	/^#define CKM_PBE_MD5_CAST_CBC	/;"	d
+CKM_PBE_MD5_DES_CBC	pkcs11.h	/^#define CKM_PBE_MD5_DES_CBC	/;"	d
+CKM_PBE_SHA1_CAST128_CBC	pkcs11.h	/^#define CKM_PBE_SHA1_CAST128_CBC	/;"	d
+CKM_PBE_SHA1_CAST5_CBC	pkcs11.h	/^#define CKM_PBE_SHA1_CAST5_CBC	/;"	d
+CKM_PBE_SHA1_DES2_EDE_CBC	pkcs11.h	/^#define CKM_PBE_SHA1_DES2_EDE_CBC	/;"	d
+CKM_PBE_SHA1_DES3_EDE_CBC	pkcs11.h	/^#define CKM_PBE_SHA1_DES3_EDE_CBC	/;"	d
+CKM_PBE_SHA1_RC2_128_CBC	pkcs11.h	/^#define CKM_PBE_SHA1_RC2_128_CBC	/;"	d
+CKM_PBE_SHA1_RC2_40_CBC	pkcs11.h	/^#define CKM_PBE_SHA1_RC2_40_CBC	/;"	d
+CKM_PBE_SHA1_RC4_128	pkcs11.h	/^#define CKM_PBE_SHA1_RC4_128	/;"	d
+CKM_PBE_SHA1_RC4_40	pkcs11.h	/^#define CKM_PBE_SHA1_RC4_40	/;"	d
+CKM_PKCS5_PBKD2	pkcs11.h	/^#define CKM_PKCS5_PBKD2	/;"	d
+CKM_RC2_CBC	pkcs11.h	/^#define	CKM_RC2_CBC	/;"	d
+CKM_RC2_CBC_PAD	pkcs11.h	/^#define CKM_RC2_CBC_PAD	/;"	d
+CKM_RC2_ECB	pkcs11.h	/^#define CKM_RC2_ECB	/;"	d
+CKM_RC2_KEY_GEN	pkcs11.h	/^#define CKM_RC2_KEY_GEN	/;"	d
+CKM_RC2_MAC	pkcs11.h	/^#define	CKM_RC2_MAC	/;"	d
+CKM_RC2_MAC_GENERAL	pkcs11.h	/^#define CKM_RC2_MAC_GENERAL	/;"	d
+CKM_RC4	pkcs11.h	/^#define CKM_RC4	/;"	d
+CKM_RC4_KEY_GEN	pkcs11.h	/^#define CKM_RC4_KEY_GEN	/;"	d
+CKM_RC5_CBC	pkcs11.h	/^#define CKM_RC5_CBC	/;"	d
+CKM_RC5_CBC_PAD	pkcs11.h	/^#define CKM_RC5_CBC_PAD	/;"	d
+CKM_RC5_ECB	pkcs11.h	/^#define CKM_RC5_ECB	/;"	d
+CKM_RC5_KEY_GEN	pkcs11.h	/^#define CKM_RC5_KEY_GEN	/;"	d
+CKM_RC5_MAC	pkcs11.h	/^#define CKM_RC5_MAC	/;"	d
+CKM_RC5_MAC_GENERAL	pkcs11.h	/^#define CKM_RC5_MAC_GENERAL	/;"	d
+CKM_RIPEMD128	pkcs11.h	/^#define CKM_RIPEMD128	/;"	d
+CKM_RIPEMD128_HMAC	pkcs11.h	/^#define CKM_RIPEMD128_HMAC	/;"	d
+CKM_RIPEMD128_HMAC_GENERAL	pkcs11.h	/^#define CKM_RIPEMD128_HMAC_GENERAL	/;"	d
+CKM_RIPEMD128_RSA_PKCS	pkcs11.h	/^#define CKM_RIPEMD128_RSA_PKCS	/;"	d
+CKM_RIPEMD160	pkcs11.h	/^#define CKM_RIPEMD160	/;"	d
+CKM_RIPEMD160_HMAC	pkcs11.h	/^#define CKM_RIPEMD160_HMAC	/;"	d
+CKM_RIPEMD160_HMAC_GENERAL	pkcs11.h	/^#define CKM_RIPEMD160_HMAC_GENERAL	/;"	d
+CKM_RIPEMD160_RSA_PKCS	pkcs11.h	/^#define CKM_RIPEMD160_RSA_PKCS	/;"	d
+CKM_RSA_9796	pkcs11.h	/^#define CKM_RSA_9796	/;"	d
+CKM_RSA_PKCS	pkcs11.h	/^#define CKM_RSA_PKCS	/;"	d
+CKM_RSA_PKCS_KEY_PAIR_GEN	pkcs11.h	/^#define CKM_RSA_PKCS_KEY_PAIR_GEN	/;"	d
+CKM_RSA_PKCS_OAEP	pkcs11.h	/^#define CKM_RSA_PKCS_OAEP	/;"	d
+CKM_RSA_PKCS_PSS	pkcs11.h	/^#define CKM_RSA_PKCS_PSS	/;"	d
+CKM_RSA_X9_31	pkcs11.h	/^#define CKM_RSA_X9_31	/;"	d
+CKM_RSA_X9_31_KEY_PAIR_GEN	pkcs11.h	/^#define CKM_RSA_X9_31_KEY_PAIR_GEN	/;"	d
+CKM_RSA_X_509	pkcs11.h	/^#define CKM_RSA_X_509	/;"	d
+CKM_SHA1_KEY_DERIVATION	pkcs11.h	/^#define CKM_SHA1_KEY_DERIVATION	/;"	d
+CKM_SHA1_RSA_PKCS	pkcs11.h	/^#define CKM_SHA1_RSA_PKCS	/;"	d
+CKM_SHA1_RSA_PKCS_PSS	pkcs11.h	/^#define CKM_SHA1_RSA_PKCS_PSS	/;"	d
+CKM_SHA1_RSA_X9_31	pkcs11.h	/^#define CKM_SHA1_RSA_X9_31	/;"	d
+CKM_SHA256	pkcs11.h	/^#define CKM_SHA256	/;"	d
+CKM_SHA256_HMAC	pkcs11.h	/^#define CKM_SHA256_HMAC	/;"	d
+CKM_SHA256_HMAC_GENERAL	pkcs11.h	/^#define CKM_SHA256_HMAC_GENERAL	/;"	d
+CKM_SHA256_RSA_PKCS	pkcs11.h	/^#define CKM_SHA256_RSA_PKCS	/;"	d
+CKM_SHA256_RSA_PKCS_PSS	pkcs11.h	/^#define CKM_SHA256_RSA_PKCS_PSS	/;"	d
+CKM_SHA384	pkcs11.h	/^#define CKM_SHA384	/;"	d
+CKM_SHA384_HMAC	pkcs11.h	/^#define CKM_SHA384_HMAC	/;"	d
+CKM_SHA384_HMAC_GENERAL	pkcs11.h	/^#define CKM_SHA384_HMAC_GENERAL	/;"	d
+CKM_SHA384_RSA_PKCS	pkcs11.h	/^#define CKM_SHA384_RSA_PKCS	/;"	d
+CKM_SHA384_RSA_PKCS_PSS	pkcs11.h	/^#define CKM_SHA384_RSA_PKCS_PSS	/;"	d
+CKM_SHA512	pkcs11.h	/^#define CKM_SHA512	/;"	d
+CKM_SHA512_HMAC	pkcs11.h	/^#define CKM_SHA512_HMAC	/;"	d
+CKM_SHA512_HMAC_GENERAL	pkcs11.h	/^#define CKM_SHA512_HMAC_GENERAL	/;"	d
+CKM_SHA512_RSA_PKCS	pkcs11.h	/^#define CKM_SHA512_RSA_PKCS	/;"	d
+CKM_SHA512_RSA_PKCS_PSS	pkcs11.h	/^#define CKM_SHA512_RSA_PKCS_PSS	/;"	d
+CKM_SHA_1	pkcs11.h	/^#define CKM_SHA_1	/;"	d
+CKM_SHA_1_HMAC	pkcs11.h	/^#define CKM_SHA_1_HMAC	/;"	d
+CKM_SHA_1_HMAC_GENERAL	pkcs11.h	/^#define CKM_SHA_1_HMAC_GENERAL	/;"	d
+CKM_SKIPJACK_CBC64	pkcs11.h	/^#define CKM_SKIPJACK_CBC64	/;"	d
+CKM_SKIPJACK_CFB16	pkcs11.h	/^#define CKM_SKIPJACK_CFB16	/;"	d
+CKM_SKIPJACK_CFB32	pkcs11.h	/^#define CKM_SKIPJACK_CFB32	/;"	d
+CKM_SKIPJACK_CFB64	pkcs11.h	/^#define CKM_SKIPJACK_CFB64	/;"	d
+CKM_SKIPJACK_CFB8	pkcs11.h	/^#define CKM_SKIPJACK_CFB8	/;"	d
+CKM_SKIPJACK_ECB64	pkcs11.h	/^#define CKM_SKIPJACK_ECB64	/;"	d
+CKM_SKIPJACK_KEY_GEN	pkcs11.h	/^#define CKM_SKIPJACK_KEY_GEN	/;"	d
+CKM_SKIPJACK_OFB64	pkcs11.h	/^#define CKM_SKIPJACK_OFB64	/;"	d
+CKM_SKIPJACK_PRIVATE_WRAP	pkcs11.h	/^#define CKM_SKIPJACK_PRIVATE_WRAP	/;"	d
+CKM_SKIPJACK_RELAYX	pkcs11.h	/^#define CKM_SKIPJACK_RELAYX	/;"	d
+CKM_SKIPJACK_WRAP	pkcs11.h	/^#define CKM_SKIPJACK_WRAP	/;"	d
+CKM_SSL3_KEY_AND_MAC_DERIVE	pkcs11.h	/^#define CKM_SSL3_KEY_AND_MAC_DERIVE	/;"	d
+CKM_SSL3_MASTER_KEY_DERIVE	pkcs11.h	/^#define CKM_SSL3_MASTER_KEY_DERIVE	/;"	d
+CKM_SSL3_MASTER_KEY_DERIVE_DH	pkcs11.h	/^#define CKM_SSL3_MASTER_KEY_DERIVE_DH	/;"	d
+CKM_SSL3_MD5_MAC	pkcs11.h	/^#define CKM_SSL3_MD5_MAC	/;"	d
+CKM_SSL3_PRE_MASTER_KEY_GEN	pkcs11.h	/^#define CKM_SSL3_PRE_MASTER_KEY_GEN	/;"	d
+CKM_SSL3_SHA1_MAC	pkcs11.h	/^#define CKM_SSL3_SHA1_MAC	/;"	d
+CKM_TLS_KEY_AND_MAC_DERIVE	pkcs11.h	/^#define CKM_TLS_KEY_AND_MAC_DERIVE	/;"	d
+CKM_TLS_MASTER_KEY_DERIVE	pkcs11.h	/^#define CKM_TLS_MASTER_KEY_DERIVE	/;"	d
+CKM_TLS_MASTER_KEY_DERIVE_DH	pkcs11.h	/^#define CKM_TLS_MASTER_KEY_DERIVE_DH	/;"	d
+CKM_TLS_PRE_MASTER_KEY_GEN	pkcs11.h	/^#define CKM_TLS_PRE_MASTER_KEY_GEN	/;"	d
+CKM_VENDOR_DEFINED	pkcs11.h	/^#define CKM_VENDOR_DEFINED	/;"	d
+CKM_X9_42_DH_DERIVE	pkcs11.h	/^#define CKM_X9_42_DH_DERIVE	/;"	d
+CKM_X9_42_DH_HYBRID_DERIVE	pkcs11.h	/^#define CKM_X9_42_DH_HYBRID_DERIVE	/;"	d
+CKM_X9_42_DH_KEY_PAIR_GEN	pkcs11.h	/^#define	CKM_X9_42_DH_KEY_PAIR_GEN	/;"	d
+CKM_X9_42_DH_PARAMETER_GEN	pkcs11.h	/^#define CKM_X9_42_DH_PARAMETER_GEN	/;"	d
+CKM_X9_42_MQV_DERIVE	pkcs11.h	/^#define CKM_X9_42_MQV_DERIVE	/;"	d
+CKM_XOR_BASE_AND_DATA	pkcs11.h	/^#define CKM_XOR_BASE_AND_DATA	/;"	d
+CKN_SURRENDER	pkcs11.h	/^#define CKN_SURRENDER	/;"	d
+CKO_CERTIFICATE	pkcs11.h	/^#define CKO_CERTIFICATE	/;"	d
+CKO_DATA	pkcs11.h	/^#define CKO_DATA	/;"	d
+CKO_DOMAIN_PARAMETERS	pkcs11.h	/^#define CKO_DOMAIN_PARAMETERS	/;"	d
+CKO_HW_FEATURE	pkcs11.h	/^#define CKO_HW_FEATURE	/;"	d
+CKO_MECHANISM	pkcs11.h	/^#define CKO_MECHANISM	/;"	d
+CKO_PRIVATE_KEY	pkcs11.h	/^#define CKO_PRIVATE_KEY	/;"	d
+CKO_PUBLIC_KEY	pkcs11.h	/^#define CKO_PUBLIC_KEY	/;"	d
+CKO_SECRET_KEY	pkcs11.h	/^#define CKO_SECRET_KEY	/;"	d
+CKO_VENDOR_DEFINED	pkcs11.h	/^#define CKO_VENDOR_DEFINED	/;"	d
+CKR_ARGUMENTS_BAD	pkcs11.h	/^#define CKR_ARGUMENTS_BAD	/;"	d
+CKR_ATTRIBUTE_READ_ONLY	pkcs11.h	/^#define CKR_ATTRIBUTE_READ_ONLY	/;"	d
+CKR_ATTRIBUTE_SENSITIVE	pkcs11.h	/^#define CKR_ATTRIBUTE_SENSITIVE	/;"	d
+CKR_ATTRIBUTE_TYPE_INVALID	pkcs11.h	/^#define CKR_ATTRIBUTE_TYPE_INVALID	/;"	d
+CKR_ATTRIBUTE_VALUE_INVALID	pkcs11.h	/^#define CKR_ATTRIBUTE_VALUE_INVALID	/;"	d
+CKR_BUFFER_TOO_SMALL	pkcs11.h	/^#define CKR_BUFFER_TOO_SMALL	/;"	d
+CKR_CANCEL	pkcs11.h	/^#define CKR_CANCEL	/;"	d
+CKR_CANT_LOCK	pkcs11.h	/^#define CKR_CANT_LOCK	/;"	d
+CKR_CRYPTOKI_ALREADY_INITIALIZED	pkcs11.h	/^#define CKR_CRYPTOKI_ALREADY_INITIALIZED	/;"	d
+CKR_CRYPTOKI_NOT_INITIALIZED	pkcs11.h	/^#define CKR_CRYPTOKI_NOT_INITIALIZED	/;"	d
+CKR_DATA_INVALID	pkcs11.h	/^#define CKR_DATA_INVALID	/;"	d
+CKR_DATA_LEN_RANGE	pkcs11.h	/^#define CKR_DATA_LEN_RANGE	/;"	d
+CKR_DEVICE_ERROR	pkcs11.h	/^#define CKR_DEVICE_ERROR	/;"	d
+CKR_DEVICE_MEMORY	pkcs11.h	/^#define CKR_DEVICE_MEMORY	/;"	d
+CKR_DEVICE_REMOVED	pkcs11.h	/^#define CKR_DEVICE_REMOVED	/;"	d
+CKR_DOMAIN_PARAMS_INVALID	pkcs11.h	/^#define CKR_DOMAIN_PARAMS_INVALID	/;"	d
+CKR_ENCRYPTED_DATA_INVALID	pkcs11.h	/^#define CKR_ENCRYPTED_DATA_INVALID	/;"	d
+CKR_ENCRYPTED_DATA_LEN_RANGE	pkcs11.h	/^#define CKR_ENCRYPTED_DATA_LEN_RANGE	/;"	d
+CKR_FUNCTION_CANCELED	pkcs11.h	/^#define CKR_FUNCTION_CANCELED	/;"	d
+CKR_FUNCTION_FAILED	pkcs11.h	/^#define CKR_FUNCTION_FAILED	/;"	d
+CKR_FUNCTION_NOT_PARALLEL	pkcs11.h	/^#define CKR_FUNCTION_NOT_PARALLEL	/;"	d
+CKR_FUNCTION_NOT_SUPPORTED	pkcs11.h	/^#define CKR_FUNCTION_NOT_SUPPORTED	/;"	d
+CKR_FUNCTION_REJECTED	pkcs11.h	/^#define CKR_FUNCTION_REJECTED	/;"	d
+CKR_GENERAL_ERROR	pkcs11.h	/^#define CKR_GENERAL_ERROR	/;"	d
+CKR_HOST_MEMORY	pkcs11.h	/^#define CKR_HOST_MEMORY	/;"	d
+CKR_INFORMATION_SENSITIVE	pkcs11.h	/^#define CKR_INFORMATION_SENSITIVE	/;"	d
+CKR_KEY_CHANGED	pkcs11.h	/^#define CKR_KEY_CHANGED	/;"	d
+CKR_KEY_FUNCTION_NOT_PERMITTED	pkcs11.h	/^#define CKR_KEY_FUNCTION_NOT_PERMITTED	/;"	d
+CKR_KEY_HANDLE_INVALID	pkcs11.h	/^#define CKR_KEY_HANDLE_INVALID	/;"	d
+CKR_KEY_INDIGESTIBLE	pkcs11.h	/^#define CKR_KEY_INDIGESTIBLE	/;"	d
+CKR_KEY_NEEDED	pkcs11.h	/^#define CKR_KEY_NEEDED	/;"	d
+CKR_KEY_NOT_NEEDED	pkcs11.h	/^#define CKR_KEY_NOT_NEEDED	/;"	d
+CKR_KEY_NOT_WRAPPABLE	pkcs11.h	/^#define CKR_KEY_NOT_WRAPPABLE	/;"	d
+CKR_KEY_SIZE_RANGE	pkcs11.h	/^#define CKR_KEY_SIZE_RANGE	/;"	d
+CKR_KEY_TYPE_INCONSISTENT	pkcs11.h	/^#define CKR_KEY_TYPE_INCONSISTENT	/;"	d
+CKR_KEY_UNEXTRACTABLE	pkcs11.h	/^#define CKR_KEY_UNEXTRACTABLE	/;"	d
+CKR_MECHANISM_INVALID	pkcs11.h	/^#define CKR_MECHANISM_INVALID	/;"	d
+CKR_MECHANISM_PARAM_INVALID	pkcs11.h	/^#define CKR_MECHANISM_PARAM_INVALID	/;"	d
+CKR_MUTEX_BAD	pkcs11.h	/^#define CKR_MUTEX_BAD	/;"	d
+CKR_MUTEX_NOT_LOCKED	pkcs11.h	/^#define CKR_MUTEX_NOT_LOCKED	/;"	d
+CKR_NEED_TO_CREATE_THREADS	pkcs11.h	/^#define CKR_NEED_TO_CREATE_THREADS	/;"	d
+CKR_NO_EVENT	pkcs11.h	/^#define CKR_NO_EVENT	/;"	d
+CKR_OBJECT_HANDLE_INVALID	pkcs11.h	/^#define CKR_OBJECT_HANDLE_INVALID	/;"	d
+CKR_OK	pkcs11.h	/^#define CKR_OK	/;"	d
+CKR_OPERATION_ACTIVE	pkcs11.h	/^#define CKR_OPERATION_ACTIVE	/;"	d
+CKR_OPERATION_NOT_INITIALIZED	pkcs11.h	/^#define CKR_OPERATION_NOT_INITIALIZED	/;"	d
+CKR_PIN_EXPIRED	pkcs11.h	/^#define CKR_PIN_EXPIRED	/;"	d
+CKR_PIN_INCORRECT	pkcs11.h	/^#define CKR_PIN_INCORRECT	/;"	d
+CKR_PIN_INVALID	pkcs11.h	/^#define CKR_PIN_INVALID	/;"	d
+CKR_PIN_LEN_RANGE	pkcs11.h	/^#define CKR_PIN_LEN_RANGE	/;"	d
+CKR_PIN_LOCKED	pkcs11.h	/^#define CKR_PIN_LOCKED	/;"	d
+CKR_RANDOM_NO_RNG	pkcs11.h	/^#define CKR_RANDOM_NO_RNG	/;"	d
+CKR_RANDOM_SEED_NOT_SUPPORTED	pkcs11.h	/^#define CKR_RANDOM_SEED_NOT_SUPPORTED	/;"	d
+CKR_SAVED_STATE_INVALID	pkcs11.h	/^#define CKR_SAVED_STATE_INVALID	/;"	d
+CKR_SESSION_CLOSED	pkcs11.h	/^#define CKR_SESSION_CLOSED	/;"	d
+CKR_SESSION_COUNT	pkcs11.h	/^#define CKR_SESSION_COUNT	/;"	d
+CKR_SESSION_EXISTS	pkcs11.h	/^#define CKR_SESSION_EXISTS	/;"	d
+CKR_SESSION_HANDLE_INVALID	pkcs11.h	/^#define CKR_SESSION_HANDLE_INVALID	/;"	d
+CKR_SESSION_PARALLEL_NOT_SUPPORTED	pkcs11.h	/^#define CKR_SESSION_PARALLEL_NOT_SUPPORTED	/;"	d
+CKR_SESSION_READ_ONLY	pkcs11.h	/^#define CKR_SESSION_READ_ONLY	/;"	d
+CKR_SESSION_READ_ONLY_EXISTS	pkcs11.h	/^#define CKR_SESSION_READ_ONLY_EXISTS	/;"	d
+CKR_SESSION_READ_WRITE_SO_EXISTS	pkcs11.h	/^#define CKR_SESSION_READ_WRITE_SO_EXISTS	/;"	d
+CKR_SIGNATURE_INVALID	pkcs11.h	/^#define CKR_SIGNATURE_INVALID	/;"	d
+CKR_SIGNATURE_LEN_RANGE	pkcs11.h	/^#define CKR_SIGNATURE_LEN_RANGE	/;"	d
+CKR_SLOT_ID_INVALID	pkcs11.h	/^#define CKR_SLOT_ID_INVALID	/;"	d
+CKR_STATE_UNSAVEABLE	pkcs11.h	/^#define CKR_STATE_UNSAVEABLE	/;"	d
+CKR_TEMPLATE_INCOMPLETE	pkcs11.h	/^#define CKR_TEMPLATE_INCOMPLETE	/;"	d
+CKR_TEMPLATE_INCONSISTENT	pkcs11.h	/^#define CKR_TEMPLATE_INCONSISTENT	/;"	d
+CKR_TOKEN_NOT_PRESENT	pkcs11.h	/^#define CKR_TOKEN_NOT_PRESENT	/;"	d
+CKR_TOKEN_NOT_RECOGNIZED	pkcs11.h	/^#define CKR_TOKEN_NOT_RECOGNIZED	/;"	d
+CKR_TOKEN_WRITE_PROTECTED	pkcs11.h	/^#define CKR_TOKEN_WRITE_PROTECTED	/;"	d
+CKR_UNWRAPPING_KEY_HANDLE_INVALID	pkcs11.h	/^#define	CKR_UNWRAPPING_KEY_HANDLE_INVALID	/;"	d
+CKR_UNWRAPPING_KEY_SIZE_RANGE	pkcs11.h	/^#define CKR_UNWRAPPING_KEY_SIZE_RANGE	/;"	d
+CKR_UNWRAPPING_KEY_TYPE_INCONSISTENT	pkcs11.h	/^#define CKR_UNWRAPPING_KEY_TYPE_INCONSISTENT	/;"	d
+CKR_USER_ALREADY_LOGGED_IN	pkcs11.h	/^#define CKR_USER_ALREADY_LOGGED_IN	/;"	d
+CKR_USER_ANOTHER_ALREADY_LOGGED_IN	pkcs11.h	/^#define CKR_USER_ANOTHER_ALREADY_LOGGED_IN	/;"	d
+CKR_USER_NOT_LOGGED_IN	pkcs11.h	/^#define CKR_USER_NOT_LOGGED_IN	/;"	d
+CKR_USER_PIN_NOT_INITIALIZED	pkcs11.h	/^#define CKR_USER_PIN_NOT_INITIALIZED	/;"	d
+CKR_USER_TOO_MANY_TYPES	pkcs11.h	/^#define CKR_USER_TOO_MANY_TYPES	/;"	d
+CKR_USER_TYPE_INVALID	pkcs11.h	/^#define CKR_USER_TYPE_INVALID	/;"	d
+CKR_VENDOR_DEFINED	pkcs11.h	/^#define CKR_VENDOR_DEFINED	/;"	d
+CKR_WRAPPED_KEY_INVALID	pkcs11.h	/^#define CKR_WRAPPED_KEY_INVALID	/;"	d
+CKR_WRAPPED_KEY_LEN_RANGE	pkcs11.h	/^#define CKR_WRAPPED_KEY_LEN_RANGE	/;"	d
+CKR_WRAPPING_KEY_HANDLE_INVALID	pkcs11.h	/^#define CKR_WRAPPING_KEY_HANDLE_INVALID	/;"	d
+CKR_WRAPPING_KEY_SIZE_RANGE	pkcs11.h	/^#define CKR_WRAPPING_KEY_SIZE_RANGE	/;"	d
+CKR_WRAPPING_KEY_TYPE_INCONSISTENT	pkcs11.h	/^#define CKR_WRAPPING_KEY_TYPE_INCONSISTENT	/;"	d
+CKS_RO_PUBLIC_SESSION	pkcs11.h	/^#define CKS_RO_PUBLIC_SESSION	/;"	d
+CKS_RO_USER_FUNCTIONS	pkcs11.h	/^#define CKS_RO_USER_FUNCTIONS	/;"	d
+CKS_RW_PUBLIC_SESSION	pkcs11.h	/^#define CKS_RW_PUBLIC_SESSION	/;"	d
+CKS_RW_SO_FUNCTIONS	pkcs11.h	/^#define CKS_RW_SO_FUNCTIONS	/;"	d
+CKS_RW_USER_FUNCTIONS	pkcs11.h	/^#define CKS_RW_USER_FUNCTIONS	/;"	d
+CKU_CONTEXT_SPECIFIC	pkcs11.h	/^#define CKU_CONTEXT_SPECIFIC	/;"	d
+CKU_SO	pkcs11.h	/^#define CKU_SO	/;"	d
+CKU_USER	pkcs11.h	/^#define CKU_USER	/;"	d
+CK_ATTRIBUTE	pkcs11.h	/^typedef struct ck_attribute CK_ATTRIBUTE;$/;"	t	typeref:struct:ck_attribute
+CK_ATTRIBUTE_PTR	pkcs11.h	/^typedef struct ck_attribute *CK_ATTRIBUTE_PTR;$/;"	t	typeref:struct:ck_attribute *
+CK_BBOOL	pkcs11.h	/^typedef unsigned char CK_BBOOL;$/;"	t	typeref:typename:unsigned char
+CK_BYTE	pkcs11.h	/^typedef unsigned char CK_BYTE;$/;"	t	typeref:typename:unsigned char
+CK_BYTE_PTR	pkcs11.h	/^typedef CK_BYTE *CK_BYTE_PTR;$/;"	t	typeref:typename:CK_BYTE *
+CK_CHAR	pkcs11.h	/^typedef unsigned char CK_CHAR;$/;"	t	typeref:typename:unsigned char
+CK_CHAR_PTR	pkcs11.h	/^typedef CK_CHAR *CK_CHAR_PTR;$/;"	t	typeref:typename:CK_CHAR *
+CK_C_INITIALIZE_ARGS	pkcs11.h	/^typedef struct ck_c_initialize_args CK_C_INITIALIZE_ARGS;$/;"	t	typeref:struct:ck_c_initialize_args
+CK_C_INITIALIZE_ARGS_PTR	pkcs11.h	/^typedef struct ck_c_initialize_args *CK_C_INITIALIZE_ARGS_PTR;$/;"	t	typeref:struct:ck_c_initialize_args *
+CK_DATE	pkcs11.h	/^typedef struct ck_date CK_DATE;$/;"	t	typeref:struct:ck_date
+CK_DATE_PTR	pkcs11.h	/^typedef struct ck_date *CK_DATE_PTR;$/;"	t	typeref:struct:ck_date *
+CK_DEFINE_FUNCTION	pkcs11.h	/^#define CK_DEFINE_FUNCTION(/;"	d
+CK_EFFECTIVELY_INFINITE	pkcs11.h	/^#define CK_EFFECTIVELY_INFINITE	/;"	d
+CK_FALSE	pkcs11.h	/^#define CK_FALSE /;"	d
+CK_FUNCTION_LIST	pkcs11.h	/^typedef struct ck_function_list CK_FUNCTION_LIST;$/;"	t	typeref:struct:ck_function_list
+CK_FUNCTION_LIST_PTR	pkcs11.h	/^typedef struct ck_function_list *CK_FUNCTION_LIST_PTR;$/;"	t	typeref:struct:ck_function_list *
+CK_FUNCTION_LIST_PTR_PTR	pkcs11.h	/^typedef struct ck_function_list **CK_FUNCTION_LIST_PTR_PTR;$/;"	t	typeref:struct:ck_function_list **
+CK_INFO	pkcs11.h	/^typedef struct ck_info CK_INFO;$/;"	t	typeref:struct:ck_info
+CK_INFO_PTR	pkcs11.h	/^typedef struct ck_info *CK_INFO_PTR;$/;"	t	typeref:struct:ck_info *
+CK_INVALID_HANDLE	pkcs11.h	/^#define CK_INVALID_HANDLE	/;"	d
+CK_LONG	pkcs11.h	/^typedef long int CK_LONG;$/;"	t	typeref:typename:long int
+CK_MECHANISM	pkcs11.h	/^typedef struct ck_mechanism CK_MECHANISM;$/;"	t	typeref:struct:ck_mechanism
+CK_MECHANISM_INFO	pkcs11.h	/^typedef struct ck_mechanism_info CK_MECHANISM_INFO;$/;"	t	typeref:struct:ck_mechanism_info
+CK_MECHANISM_INFO_PTR	pkcs11.h	/^typedef struct ck_mechanism_info *CK_MECHANISM_INFO_PTR;$/;"	t	typeref:struct:ck_mechanism_info *
+CK_MECHANISM_PTR	pkcs11.h	/^typedef struct ck_mechanism *CK_MECHANISM_PTR;$/;"	t	typeref:struct:ck_mechanism *
+CK_MECHANISM_TYPE_PTR	pkcs11.h	/^typedef ck_mechanism_type_t *CK_MECHANISM_TYPE_PTR;$/;"	t	typeref:typename:ck_mechanism_type_t *
+CK_OBJECT_CLASS_PTR	pkcs11.h	/^typedef ck_object_class_t *CK_OBJECT_CLASS_PTR;$/;"	t	typeref:typename:ck_object_class_t *
+CK_OBJECT_HANDLE_PTR	pkcs11.h	/^typedef ck_object_handle_t *CK_OBJECT_HANDLE_PTR;$/;"	t	typeref:typename:ck_object_handle_t *
+CK_SESSION_HANDLE_PTR	pkcs11.h	/^typedef ck_session_handle_t *CK_SESSION_HANDLE_PTR;$/;"	t	typeref:typename:ck_session_handle_t *
+CK_SESSION_INFO	pkcs11.h	/^typedef struct ck_session_info CK_SESSION_INFO;$/;"	t	typeref:struct:ck_session_info
+CK_SESSION_INFO_PTR	pkcs11.h	/^typedef struct ck_session_info *CK_SESSION_INFO_PTR;$/;"	t	typeref:struct:ck_session_info *
+CK_SLOT_ID_PTR	pkcs11.h	/^typedef ck_slot_id_t *CK_SLOT_ID_PTR;$/;"	t	typeref:typename:ck_slot_id_t *
+CK_SLOT_INFO	pkcs11.h	/^typedef struct ck_slot_info CK_SLOT_INFO;$/;"	t	typeref:struct:ck_slot_info
+CK_SLOT_INFO_PTR	pkcs11.h	/^typedef struct ck_slot_info *CK_SLOT_INFO_PTR;$/;"	t	typeref:struct:ck_slot_info *
+CK_SPEC	pkcs11.h	/^#define CK_SPEC /;"	d
+CK_TOKEN_INFO	pkcs11.h	/^typedef struct ck_token_info CK_TOKEN_INFO;$/;"	t	typeref:struct:ck_token_info
+CK_TOKEN_INFO_PTR	pkcs11.h	/^typedef struct ck_token_info *CK_TOKEN_INFO_PTR;$/;"	t	typeref:struct:ck_token_info *
+CK_TRUE	pkcs11.h	/^#define CK_TRUE /;"	d
+CK_ULONG	pkcs11.h	/^typedef unsigned long int CK_ULONG;$/;"	t	typeref:typename:unsigned long int
+CK_ULONG_PTR	pkcs11.h	/^typedef CK_ULONG *CK_ULONG_PTR;$/;"	t	typeref:typename:CK_ULONG *
+CK_UNAVAILABLE_INFORMATION	pkcs11.h	/^#define CK_UNAVAILABLE_INFORMATION	/;"	d
+CK_UTF8CHAR	pkcs11.h	/^typedef unsigned char CK_UTF8CHAR;$/;"	t	typeref:typename:unsigned char
+CK_UTF8CHAR_PTR	pkcs11.h	/^typedef CK_UTF8CHAR *CK_UTF8CHAR_PTR;$/;"	t	typeref:typename:CK_UTF8CHAR *
+CK_VERSION	pkcs11.h	/^typedef struct ck_version CK_VERSION;$/;"	t	typeref:struct:ck_version
+CK_VERSION_PTR	pkcs11.h	/^typedef struct ck_version *CK_VERSION_PTR;$/;"	t	typeref:struct:ck_version *
+CK_VOID_PTR	pkcs11.h	/^typedef void *CK_VOID_PTR;$/;"	t	typeref:typename:void *
+CK_VOID_PTR_PTR	pkcs11.h	/^typedef void **CK_VOID_PTR_PTR;$/;"	t	typeref:typename:void **
+CLEANFILES	regress/Makefile	/^CLEANFILES=	*.core actual agent-key.* authorized_keys_${USERNAME} \\$/;"	m
+CLEANUP	regress/unittests/authopt/tests.c	/^#define CLEANUP(/;"	d	file:
+CLEAR_ON_NONE	readconf.c	/^#define CLEAR_ON_NONE(/;"	d	file:
+CLEAR_ON_NONE	servconf.c	/^#define CLEAR_ON_NONE(/;"	d	file:
+CMD	sftp.c	/^struct CMD {$/;"	s	file:
+CMDNEEDS	scp.c	/^#define	CMDNEEDS	/;"	d	file:
+CMSG_DATA	defines.h	/^#define CMSG_DATA(/;"	d
+CMSG_FIRSTHDR	defines.h	/^#define CMSG_FIRSTHDR(/;"	d
+CMSG_LEN	defines.h	/^#define	CMSG_LEN(/;"	d
+CMSG_SPACE	defines.h	/^#define	CMSG_SPACE(/;"	d
+COMMA	openbsd-compat/glob.c	/^#define	COMMA	/;"	d	file:
+COMMON_DEPS	regress/misc/fuzz-harness/Makefile	/^COMMON_DEPS=..\/..\/..\/libssh.a$/;"	m
+COMPAT	openbsd-compat/Makefile.in	/^COMPAT= bsd-asprintf.o \\$/;"	m
+COMPAT_H	compat.h	/^#define COMPAT_H$/;"	d
+COMP_DELAYED	kex.h	/^#define COMP_DELAYED	/;"	d
+COMP_NONE	kex.h	/^#define COMP_NONE	/;"	d
+COMP_ZLIB	kex.h	/^#define COMP_ZLIB	/;"	d
+CONFIGFILES	Makefile.in	/^CONFIGFILES=sshd_config.out ssh_config.out moduli.out$/;"	m
+CONFIGFILES_IN	Makefile.in	/^CONFIGFILES_IN=sshd_config ssh_config moduli$/;"	m
+CONFIRM_CLOSE	clientloop.h	/^enum confirm_action { CONFIRM_WARN = 0, CONFIRM_CLOSE, CONFIRM_TTY };$/;"	e	enum:confirm_action
+CONFIRM_TTY	clientloop.h	/^enum confirm_action { CONFIRM_WARN = 0, CONFIRM_CLOSE, CONFIRM_TTY };$/;"	e	enum:confirm_action
+CONFIRM_WARN	clientloop.h	/^enum confirm_action { CONFIRM_WARN = 0, CONFIRM_CLOSE, CONFIRM_TTY };$/;"	e	enum:confirm_action
+CONF_LASTLOG_FILE	configure.ac	/^	AC_DEFINE_UNQUOTED([CONF_LASTLOG_FILE], ["$conf_lastlog_location"],$/;"	d
+CONF_UTMP_FILE	configure.ac	/^	AC_DEFINE_UNQUOTED([CONF_UTMP_FILE], ["$conf_utmp_location"],$/;"	d
+CONF_WTMPX_FILE	configure.ac	/^	AC_DEFINE_UNQUOTED([CONF_WTMPX_FILE], ["$conf_wtmpx_location"],$/;"	d
+CONF_WTMP_FILE	configure.ac	/^	AC_DEFINE_UNQUOTED([CONF_WTMP_FILE], ["$conf_wtmp_location"],$/;"	d
+COPY_BUFLEN	scp.c	/^#define COPY_BUFLEN	/;"	d	file:
+COPY_MATCH_STRING_OPTS	servconf.h	/^#define COPY_MATCH_STRING_OPTS(/;"	d
+CPPFLAGS	Makefile.in	/^CPPFLAGS=-I. -I$(srcdir) @CPPFLAGS@ $(PATHS) @DEFS@$/;"	m
+CPPFLAGS	openbsd-compat/Makefile.in	/^CPPFLAGS=-I. -I.. -I$(srcdir) -I$(srcdir)\/.. @CPPFLAGS@ @DEFS@$/;"	m
+CPPFLAGS	openbsd-compat/regress/Makefile.in	/^CPPFLAGS=-I. -I.. -I..\/.. -I$(srcdir) -I$(srcdir)\/.. -I$(srcdir)\/..\/.. @CPPFLAGS@ @DEFS@$/;"	m
+CPPFLAGS	regress/Makefile	/^CPPFLAGS=-I..$/;"	m
+CRYPTOKI_COMPAT	pkcs11.h	/^#define CRYPTOKI_COMPAT /;"	d
+CRYPTOKI_COMPAT	ssh-pkcs11.c	/^#define CRYPTOKI_COMPAT$/;"	d	file:
+CRYPTOKI_VERSION_MAJOR	pkcs11.h	/^#define CRYPTOKI_VERSION_MAJOR	/;"	d
+CRYPTOKI_VERSION_MINOR	pkcs11.h	/^#define CRYPTOKI_VERSION_MINOR	/;"	d
+CRYPTOKI_VERSION_REVISION	pkcs11.h	/^#define CRYPTOKI_VERSION_REVISION	/;"	d
+CS_CON	ssh-keyscan.c	/^#define CS_CON /;"	d	file:
+CS_KEYS	ssh-keyscan.c	/^#define CS_KEYS /;"	d	file:
+CS_SIZE	ssh-keyscan.c	/^#define CS_SIZE /;"	d	file:
+CS_UNUSED	ssh-keyscan.c	/^#define CS_UNUSED /;"	d	file:
+CT_LATEST	openbsd-compat/port-solaris.c	/^#define CT_LATEST	/;"	d	file:
+CT_TEMPLATE	openbsd-compat/port-solaris.c	/^#define CT_TEMPLATE	/;"	d	file:
+CURVE25519_SIZE	kex.h	/^#define CURVE25519_SIZE /;"	d
+CUSTOM_FAILED_LOGIN	defines.h	/^# define CUSTOM_FAILED_LOGIN$/;"	d
+CUSTOM_FAILED_LOGIN	openbsd-compat/port-aix.h	/^# define CUSTOM_FAILED_LOGIN /;"	d
+CUSTOM_SSH_AUDIT_EVENTS	defines.h	/^# define CUSTOM_SSH_AUDIT_EVENTS$/;"	d
+CUSTOM_SYS_AUTH_ALLOWED_USER	openbsd-compat/port-aix.h	/^# define CUSTOM_SYS_AUTH_ALLOWED_USER /;"	d
+CUSTOM_SYS_AUTH_GET_LASTLOGIN_MSG	openbsd-compat/port-aix.h	/^# define CUSTOM_SYS_AUTH_GET_LASTLOGIN_MSG$/;"	d
+CUSTOM_SYS_AUTH_PASSWD	defines.h	/^# define CUSTOM_SYS_AUTH_PASSWD /;"	d
+CUSTOM_SYS_AUTH_PASSWD	openbsd-compat/port-aix.h	/^# define CUSTOM_SYS_AUTH_PASSWD /;"	d
+CUSTOM_SYS_AUTH_RECORD_LOGIN	openbsd-compat/port-aix.h	/^# define CUSTOM_SYS_AUTH_RECORD_LOGIN /;"	d
+CUSTOM_SYS_TUN_OPEN	openbsd-compat/port-net.h	/^# define CUSTOM_SYS_TUN_OPEN$/;"	d
+CXX	regress/misc/fuzz-harness/Makefile	/^CXX=clang++-11$/;"	m
+CXXFLAGS	regress/misc/fuzz-harness/Makefile	/^CXXFLAGS=-O2 -g -Wall -Wextra -Wno-unused-parameter -I ..\/..\/.. $(FUZZ_FLAGS)$/;"	m
+CYGWIN_SSH_PRIVSEP_USER	openbsd-compat/bsd-cygwin_util.h	/^#define CYGWIN_SSH_PRIVSEP_USER /;"	d
+C_CancelFunction	pkcs11.h	/^  CK_C_CancelFunction C_CancelFunction;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_CancelFunction
+C_CloseAllSessions	pkcs11.h	/^  CK_C_CloseAllSessions C_CloseAllSessions;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_CloseAllSessions
+C_CloseSession	pkcs11.h	/^  CK_C_CloseSession C_CloseSession;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_CloseSession
+C_CopyObject	pkcs11.h	/^  CK_C_CopyObject C_CopyObject;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_CopyObject
+C_CreateObject	pkcs11.h	/^  CK_C_CreateObject C_CreateObject;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_CreateObject
+C_Decrypt	pkcs11.h	/^  CK_C_Decrypt C_Decrypt;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_Decrypt
+C_DecryptDigestUpdate	pkcs11.h	/^  CK_C_DecryptDigestUpdate C_DecryptDigestUpdate;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_DecryptDigestUpdate
+C_DecryptFinal	pkcs11.h	/^  CK_C_DecryptFinal C_DecryptFinal;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_DecryptFinal
+C_DecryptInit	pkcs11.h	/^  CK_C_DecryptInit C_DecryptInit;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_DecryptInit
+C_DecryptUpdate	pkcs11.h	/^  CK_C_DecryptUpdate C_DecryptUpdate;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_DecryptUpdate
+C_DecryptVerifyUpdate	pkcs11.h	/^  CK_C_DecryptVerifyUpdate C_DecryptVerifyUpdate;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_DecryptVerifyUpdate
+C_DeriveKey	pkcs11.h	/^  CK_C_DeriveKey C_DeriveKey;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_DeriveKey
+C_DestroyObject	pkcs11.h	/^  CK_C_DestroyObject C_DestroyObject;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_DestroyObject
+C_Digest	pkcs11.h	/^  CK_C_Digest C_Digest;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_Digest
+C_DigestEncryptUpdate	pkcs11.h	/^  CK_C_DigestEncryptUpdate C_DigestEncryptUpdate;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_DigestEncryptUpdate
+C_DigestFinal	pkcs11.h	/^  CK_C_DigestFinal C_DigestFinal;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_DigestFinal
+C_DigestInit	pkcs11.h	/^  CK_C_DigestInit C_DigestInit;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_DigestInit
+C_DigestKey	pkcs11.h	/^  CK_C_DigestKey C_DigestKey;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_DigestKey
+C_DigestUpdate	pkcs11.h	/^  CK_C_DigestUpdate C_DigestUpdate;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_DigestUpdate
+C_Encrypt	pkcs11.h	/^  CK_C_Encrypt C_Encrypt;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_Encrypt
+C_EncryptFinal	pkcs11.h	/^  CK_C_EncryptFinal C_EncryptFinal;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_EncryptFinal
+C_EncryptInit	pkcs11.h	/^  CK_C_EncryptInit C_EncryptInit;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_EncryptInit
+C_EncryptUpdate	pkcs11.h	/^  CK_C_EncryptUpdate C_EncryptUpdate;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_EncryptUpdate
+C_Finalize	pkcs11.h	/^  CK_C_Finalize C_Finalize;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_Finalize
+C_FindObjects	pkcs11.h	/^  CK_C_FindObjects C_FindObjects;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_FindObjects
+C_FindObjectsFinal	pkcs11.h	/^  CK_C_FindObjectsFinal C_FindObjectsFinal;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_FindObjectsFinal
+C_FindObjectsInit	pkcs11.h	/^  CK_C_FindObjectsInit C_FindObjectsInit;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_FindObjectsInit
+C_GenerateKey	pkcs11.h	/^  CK_C_GenerateKey C_GenerateKey;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_GenerateKey
+C_GenerateKeyPair	pkcs11.h	/^  CK_C_GenerateKeyPair C_GenerateKeyPair;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_GenerateKeyPair
+C_GenerateRandom	pkcs11.h	/^  CK_C_GenerateRandom C_GenerateRandom;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_GenerateRandom
+C_GetAttributeValue	pkcs11.h	/^  CK_C_GetAttributeValue C_GetAttributeValue;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_GetAttributeValue
+C_GetFunctionList	pkcs11.h	/^  CK_C_GetFunctionList C_GetFunctionList;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_GetFunctionList
+C_GetFunctionStatus	pkcs11.h	/^  CK_C_GetFunctionStatus C_GetFunctionStatus;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_GetFunctionStatus
+C_GetInfo	pkcs11.h	/^  CK_C_GetInfo C_GetInfo;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_GetInfo
+C_GetMechanismInfo	pkcs11.h	/^  CK_C_GetMechanismInfo C_GetMechanismInfo;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_GetMechanismInfo
+C_GetMechanismList	pkcs11.h	/^  CK_C_GetMechanismList C_GetMechanismList;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_GetMechanismList
+C_GetObjectSize	pkcs11.h	/^  CK_C_GetObjectSize C_GetObjectSize;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_GetObjectSize
+C_GetOperationState	pkcs11.h	/^  CK_C_GetOperationState C_GetOperationState;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_GetOperationState
+C_GetSessionInfo	pkcs11.h	/^  CK_C_GetSessionInfo C_GetSessionInfo;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_GetSessionInfo
+C_GetSlotInfo	pkcs11.h	/^  CK_C_GetSlotInfo C_GetSlotInfo;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_GetSlotInfo
+C_GetSlotList	pkcs11.h	/^  CK_C_GetSlotList C_GetSlotList;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_GetSlotList
+C_GetTokenInfo	pkcs11.h	/^  CK_C_GetTokenInfo C_GetTokenInfo;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_GetTokenInfo
+C_InitPIN	pkcs11.h	/^  CK_C_InitPIN C_InitPIN;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_InitPIN
+C_InitToken	pkcs11.h	/^  CK_C_InitToken C_InitToken;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_InitToken
+C_Initialize	pkcs11.h	/^  CK_C_Initialize C_Initialize;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_Initialize
+C_Login	pkcs11.h	/^  CK_C_Login C_Login;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_Login
+C_Logout	pkcs11.h	/^  CK_C_Logout C_Logout;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_Logout
+C_OpenSession	pkcs11.h	/^  CK_C_OpenSession C_OpenSession;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_OpenSession
+C_SeedRandom	pkcs11.h	/^  CK_C_SeedRandom C_SeedRandom;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_SeedRandom
+C_SetAttributeValue	pkcs11.h	/^  CK_C_SetAttributeValue C_SetAttributeValue;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_SetAttributeValue
+C_SetOperationState	pkcs11.h	/^  CK_C_SetOperationState C_SetOperationState;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_SetOperationState
+C_SetPIN	pkcs11.h	/^  CK_C_SetPIN C_SetPIN;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_SetPIN
+C_Sign	pkcs11.h	/^  CK_C_Sign C_Sign;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_Sign
+C_SignEncryptUpdate	pkcs11.h	/^  CK_C_SignEncryptUpdate C_SignEncryptUpdate;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_SignEncryptUpdate
+C_SignFinal	pkcs11.h	/^  CK_C_SignFinal C_SignFinal;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_SignFinal
+C_SignInit	pkcs11.h	/^  CK_C_SignInit C_SignInit;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_SignInit
+C_SignRecover	pkcs11.h	/^  CK_C_SignRecover C_SignRecover;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_SignRecover
+C_SignRecoverInit	pkcs11.h	/^  CK_C_SignRecoverInit C_SignRecoverInit;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_SignRecoverInit
+C_SignUpdate	pkcs11.h	/^  CK_C_SignUpdate C_SignUpdate;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_SignUpdate
+C_UnwrapKey	pkcs11.h	/^  CK_C_UnwrapKey C_UnwrapKey;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_UnwrapKey
+C_Verify	pkcs11.h	/^  CK_C_Verify C_Verify;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_Verify
+C_VerifyFinal	pkcs11.h	/^  CK_C_VerifyFinal C_VerifyFinal;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_VerifyFinal
+C_VerifyInit	pkcs11.h	/^  CK_C_VerifyInit C_VerifyInit;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_VerifyInit
+C_VerifyRecover	pkcs11.h	/^  CK_C_VerifyRecover C_VerifyRecover;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_VerifyRecover
+C_VerifyRecoverInit	pkcs11.h	/^  CK_C_VerifyRecoverInit C_VerifyRecoverInit;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_VerifyRecoverInit
+C_VerifyUpdate	pkcs11.h	/^  CK_C_VerifyUpdate C_VerifyUpdate;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_VerifyUpdate
+C_WaitForSlotEvent	pkcs11.h	/^  CK_C_WaitForSlotEvent C_WaitForSlotEvent;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_WaitForSlotEvent
+C_WrapKey	pkcs11.h	/^  CK_C_WrapKey C_WrapKey;$/;"	m	struct:ck_function_list	typeref:typename:CK_C_WrapKey
+Ch	openbsd-compat/sha2.c	/^#define Ch(/;"	d	file:
+Channel	channels.h	/^struct Channel {$/;"	s
+Channel	channels.h	/^typedef struct Channel Channel;$/;"	t	typeref:struct:Channel
+Char	openbsd-compat/glob.c	/^typedef char Char;$/;"	t	typeref:typename:char	file:
+Char	openbsd-compat/glob.c	/^typedef u_short Char;$/;"	t	typeref:typename:u_short	file:
+Ciphertexts_bytes	sntrup761.c	/^#define Ciphertexts_bytes /;"	d	file:
+Ciphertexts_diff_mask	sntrup761.c	/^static int Ciphertexts_diff_mask(const unsigned char *c,const unsigned char *c2)$/;"	f	typeref:typename:int	file:
+Confirm_bytes	sntrup761.c	/^#define Confirm_bytes /;"	d	file:
+Connection	ssh-keyscan.c	/^typedef struct Connection {$/;"	s	file:
+DAY	auth-passwd.c	/^#define DAY	/;"	d	file:
+DAY	auth-shadow.c	/^#define DAY	/;"	d	file:
+DAYS	misc.c	/^#define DAYS	/;"	d	file:
+DBG	packet.c	/^#define DBG(/;"	d	file:
+DEBUG	regress/misc/sk-dummy/Makefile	/^DEBUG=-g$/;"	m
+DEFAULT_ALLOWED_PROVIDERS	ssh-agent.c	/^# define DEFAULT_ALLOWED_PROVIDERS /;"	d	file:
+DEFAULT_AUTH_FAIL_MAX	servconf.h	/^#define DEFAULT_AUTH_FAIL_MAX	/;"	d
+DEFAULT_BITS	ssh-keygen.c	/^#define DEFAULT_BITS	/;"	d	file:
+DEFAULT_BITS_DSA	ssh-keygen.c	/^#define DEFAULT_BITS_DSA	/;"	d	file:
+DEFAULT_BITS_ECDSA	ssh-keygen.c	/^#define DEFAULT_BITS_ECDSA	/;"	d	file:
+DEFAULT_CIPHERNAME	sshkey.c	/^#define DEFAULT_CIPHERNAME	/;"	d	file:
+DEFAULT_CLIENT_PERCENT_EXPAND_ARGS	sshconnect.h	/^#define DEFAULT_CLIENT_PERCENT_EXPAND_ARGS(/;"	d
+DEFAULT_COPY_BUFLEN	sftp-client.c	/^#define DEFAULT_COPY_BUFLEN	/;"	d	file:
+DEFAULT_KEY_TYPE_NAME	ssh-keygen.c	/^# define DEFAULT_KEY_TYPE_NAME /;"	d	file:
+DEFAULT_NUM_REQUESTS	sftp-client.c	/^#define DEFAULT_NUM_REQUESTS	/;"	d	file:
+DEFAULT_ROUNDS	sshkey.c	/^#define	DEFAULT_ROUNDS	/;"	d	file:
+DEFAULT_SESSIONS_MAX	servconf.h	/^#define DEFAULT_SESSIONS_MAX	/;"	d
+DEFAULT_WINSIZE	progressmeter.c	/^#define DEFAULT_WINSIZE /;"	d	file:
+DEF_WEAK	defines.h	/^#define DEF_WEAK(/;"	d
+DEPEND	configure.ac	/^AC_SUBST([DEPEND], [$(cat $srcdir\/.depend)])$/;"	s
+DESCRIPTION	contrib/ssh-copy-id.1	/^.Sh DESCRIPTION$/;"	s
+DESCRIPTION	moduli.5	/^.Sh DESCRIPTION$/;"	s
+DESCRIPTION	scp.1	/^.Sh DESCRIPTION$/;"	s
+DESCRIPTION	sftp-server.8	/^.Sh DESCRIPTION$/;"	s
+DESCRIPTION	sftp.1	/^.Sh DESCRIPTION$/;"	s
+DESCRIPTION	ssh-add.1	/^.Sh DESCRIPTION$/;"	s
+DESCRIPTION	ssh-agent.1	/^.Sh DESCRIPTION$/;"	s
+DESCRIPTION	ssh-keygen.1	/^.Sh DESCRIPTION$/;"	s
+DESCRIPTION	ssh-keyscan.1	/^.Sh DESCRIPTION$/;"	s
+DESCRIPTION	ssh-keysign.8	/^.Sh DESCRIPTION$/;"	s
+DESCRIPTION	ssh-pkcs11-helper.8	/^.Sh DESCRIPTION$/;"	s
+DESCRIPTION	ssh-sk-helper.8	/^.Sh DESCRIPTION$/;"	s
+DESCRIPTION	ssh.1	/^.Sh DESCRIPTION$/;"	s
+DESCRIPTION	ssh_config.5	/^.Sh DESCRIPTION$/;"	s
+DESCRIPTION	sshd.8	/^.Sh DESCRIPTION$/;"	s
+DESCRIPTION	sshd_config.5	/^.Sh DESCRIPTION$/;"	s
+DESTDIR	Makefile.in	/^DESTDIR=$/;"	m
+DESTDIR	contrib/cygwin/Makefile	/^DESTDIR=$/;"	m
+DH	kex.h	/^# define DH	/;"	d
+DH_GRP_MAX	dh.h	/^#define DH_GRP_MAX	/;"	d
+DH_GRP_MIN	dh.h	/^#define DH_GRP_MIN	/;"	d
+DH_H	dh.h	/^#define DH_H$/;"	d
+DH_get0_key	openbsd-compat/libressl-api-compat.c	/^DH_get0_key(const DH *dh, const BIGNUM **pub_key, const BIGNUM **priv_key)$/;"	f	typeref:typename:void
+DH_get0_pqg	openbsd-compat/libressl-api-compat.c	/^DH_get0_pqg(const DH *dh, const BIGNUM **p, const BIGNUM **q, const BIGNUM **g)$/;"	f	typeref:typename:void
+DH_set0_key	openbsd-compat/libressl-api-compat.c	/^DH_set0_key(DH *dh, BIGNUM *pub_key, BIGNUM *priv_key)$/;"	f	typeref:typename:int
+DH_set0_pqg	openbsd-compat/libressl-api-compat.c	/^DH_set0_pqg(DH *dh, BIGNUM *p, BIGNUM *q, BIGNUM *g)$/;"	f	typeref:typename:int
+DH_set_length	openbsd-compat/libressl-api-compat.c	/^DH_set_length(DH *dh, long length)$/;"	f	typeref:typename:int
+DISABLE_FD_PASSING	configure.ac	/^			AC_DEFINE([DISABLE_FD_PASSING])$/;"	d
+DISABLE_FD_PASSING	configure.ac	/^		AC_DEFINE([DISABLE_FD_PASSING])$/;"	d
+DISABLE_FD_PASSING	configure.ac	/^	AC_DEFINE([DISABLE_FD_PASSING])$/;"	d
+DISABLE_FD_PASSING	configure.ac	/^	AC_DEFINE([DISABLE_FD_PASSING], [1], [Need to call setpgrp as root])$/;"	d
+DISABLE_FD_PASSING	configure.ac	/^	AC_DEFINE([DISABLE_FD_PASSING], [1],$/;"	d
+DISABLE_LASTLOG	configure.ac	/^	AC_DEFINE([DISABLE_LASTLOG])$/;"	d
+DISABLE_LASTLOG	configure.ac	/^	AC_DEFINE([DISABLE_LASTLOG], [1], [Define if you don't want to use lastlog])$/;"	d
+DISABLE_LOGIN	configure.ac	/^			AC_DEFINE([DISABLE_LOGIN], [1],$/;"	d
+DISABLE_SHADOW	configure.ac	/^	AC_DEFINE([DISABLE_SHADOW])$/;"	d
+DISABLE_SHADOW	configure.ac	/^	AC_DEFINE([DISABLE_SHADOW], [1],$/;"	d
+DISABLE_UTMP	configure.ac	/^			AC_DEFINE([DISABLE_UTMP])$/;"	d
+DISABLE_UTMP	configure.ac	/^		AC_DEFINE([DISABLE_UTMP])$/;"	d
+DISABLE_UTMP	configure.ac	/^		AC_DEFINE([DISABLE_UTMP], [1],$/;"	d
+DISABLE_UTMP	configure.ac	/^	AC_DEFINE([DISABLE_UTMP], [1], [Define if you don't want to use utmp])$/;"	d
+DISABLE_UTMPX	configure.ac	/^	AC_DEFINE([DISABLE_UTMPX], [1], [Disable utmpx])$/;"	d
+DISABLE_UTMPX	configure.ac	/^	AC_DEFINE([DISABLE_UTMPX], [1], [no utmpx])$/;"	d
+DISABLE_WTMP	configure.ac	/^			AC_DEFINE([DISABLE_WTMP])$/;"	d
+DISABLE_WTMP	configure.ac	/^		AC_DEFINE([DISABLE_WTMP], [1],$/;"	d
+DISABLE_WTMP	configure.ac	/^	AC_DEFINE([DISABLE_WTMP], [1], [Define if you don't want to use wtmp])$/;"	d
+DISABLE_WTMPX	configure.ac	/^		AC_DEFINE([DISABLE_WTMPX])$/;"	d
+DISPATCH_BLOCK	dispatch.h	/^	DISPATCH_BLOCK,$/;"	e	enum:__anon4a95a8cb0103
+DISPATCH_H	dispatch.h	/^#define DISPATCH_H$/;"	d
+DISPATCH_MAX	dispatch.h	/^#define DISPATCH_MAX	/;"	d
+DISPATCH_NONBLOCK	dispatch.h	/^	DISPATCH_NONBLOCK$/;"	e	enum:__anon4a95a8cb0103
+DNLEN	openbsd-compat/bsd-cygwin_util.h	/^#define DNLEN /;"	d
+DNS_H	dns.h	/^#define DNS_H$/;"	d
+DNS_RDATACLASS_IN	dns.h	/^#define DNS_RDATACLASS_IN	/;"	d
+DNS_RDATATYPE_SSHFP	dns.h	/^#define DNS_RDATATYPE_SSHFP	/;"	d
+DNS_VERIFY_FAILED	dns.h	/^#define DNS_VERIFY_FAILED	/;"	d
+DNS_VERIFY_FOUND	dns.h	/^#define DNS_VERIFY_FOUND	/;"	d
+DNS_VERIFY_MATCH	dns.h	/^#define DNS_VERIFY_MATCH	/;"	d
+DNS_VERIFY_SECURE	dns.h	/^#define DNS_VERIFY_SECURE	/;"	d
+DO	regress/netcat.c	/^#define DO	/;"	d	file:
+DOLLAR	openbsd-compat/glob.c	/^#define	DOLLAR	/;"	d	file:
+DONE_STRING	regress/unittests/misc/test_hpdelim.c	/^#define DONE_STRING(/;"	d	file:
+DONE_STRING	regress/unittests/misc/test_strdelim.c	/^#define DONE_STRING(/;"	d	file:
+DONT	regress/netcat.c	/^#define DONT	/;"	d	file:
+DOPR_OUTCH	openbsd-compat/bsd-snprintf.c	/^#define DOPR_OUTCH(/;"	d	file:
+DOT	openbsd-compat/glob.c	/^#define	DOT	/;"	d	file:
+DO_LOG_SAFE_IN_SIGHAND	defines.h	/^# define DO_LOG_SAFE_IN_SIGHAND$/;"	d
+DP_C_INTMAX	openbsd-compat/bsd-snprintf.c	/^#define DP_C_INTMAX /;"	d	file:
+DP_C_LDOUBLE	openbsd-compat/bsd-snprintf.c	/^#define DP_C_LDOUBLE /;"	d	file:
+DP_C_LLONG	openbsd-compat/bsd-snprintf.c	/^#define DP_C_LLONG /;"	d	file:
+DP_C_LONG	openbsd-compat/bsd-snprintf.c	/^#define DP_C_LONG /;"	d	file:
+DP_C_SHORT	openbsd-compat/bsd-snprintf.c	/^#define DP_C_SHORT /;"	d	file:
+DP_C_SIZE	openbsd-compat/bsd-snprintf.c	/^#define DP_C_SIZE /;"	d	file:
+DP_F_MINUS	openbsd-compat/bsd-snprintf.c	/^#define DP_F_MINUS	/;"	d	file:
+DP_F_NUM	openbsd-compat/bsd-snprintf.c	/^#define DP_F_NUM	/;"	d	file:
+DP_F_PLUS	openbsd-compat/bsd-snprintf.c	/^#define DP_F_PLUS	/;"	d	file:
+DP_F_SPACE	openbsd-compat/bsd-snprintf.c	/^#define DP_F_SPACE	/;"	d	file:
+DP_F_UNSIGNED	openbsd-compat/bsd-snprintf.c	/^#define DP_F_UNSIGNED	/;"	d	file:
+DP_F_UP	openbsd-compat/bsd-snprintf.c	/^#define DP_F_UP	/;"	d	file:
+DP_F_ZERO	openbsd-compat/bsd-snprintf.c	/^#define DP_F_ZERO	/;"	d	file:
+DP_S_CONV	openbsd-compat/bsd-snprintf.c	/^#define DP_S_CONV /;"	d	file:
+DP_S_DEFAULT	openbsd-compat/bsd-snprintf.c	/^#define DP_S_DEFAULT /;"	d	file:
+DP_S_DONE	openbsd-compat/bsd-snprintf.c	/^#define DP_S_DONE /;"	d	file:
+DP_S_DOT	openbsd-compat/bsd-snprintf.c	/^#define DP_S_DOT /;"	d	file:
+DP_S_FLAGS	openbsd-compat/bsd-snprintf.c	/^#define DP_S_FLAGS /;"	d	file:
+DP_S_MAX	openbsd-compat/bsd-snprintf.c	/^#define DP_S_MAX /;"	d	file:
+DP_S_MIN	openbsd-compat/bsd-snprintf.c	/^#define DP_S_MIN /;"	d	file:
+DP_S_MOD	openbsd-compat/bsd-snprintf.c	/^#define DP_S_MOD /;"	d	file:
+DSA	sshkey.h	/^# define DSA	/;"	d
+DSA_SIG_get0	openbsd-compat/libressl-api-compat.c	/^DSA_SIG_get0(const DSA_SIG *sig, const BIGNUM **pr, const BIGNUM **ps)$/;"	f	typeref:typename:void
+DSA_SIG_set0	openbsd-compat/libressl-api-compat.c	/^DSA_SIG_set0(DSA_SIG *sig, BIGNUM *r, BIGNUM *s)$/;"	f	typeref:typename:int
+DSA_get0_key	openbsd-compat/libressl-api-compat.c	/^DSA_get0_key(const DSA *d, const BIGNUM **pub_key, const BIGNUM **priv_key)$/;"	f	typeref:typename:void
+DSA_get0_pqg	openbsd-compat/libressl-api-compat.c	/^DSA_get0_pqg(const DSA *d, const BIGNUM **p, const BIGNUM **q, const BIGNUM **g)$/;"	f	typeref:typename:void
+DSA_set0_key	openbsd-compat/libressl-api-compat.c	/^DSA_set0_key(DSA *d, BIGNUM *pub_key, BIGNUM *priv_key)$/;"	f	typeref:typename:int
+DSA_set0_pqg	openbsd-compat/libressl-api-compat.c	/^DSA_set0_pqg(DSA *d, BIGNUM *p, BIGNUM *q, BIGNUM *g)$/;"	f	typeref:typename:int
+Decap	sntrup761.c	/^static void Decap(unsigned char *k,const unsigned char *c,const unsigned char *sk)$/;"	f	typeref:typename:void	file:
+Decode	sntrup761.c	/^static void Decode(uint16 *out,const unsigned char *S,const uint16 *M,long long len)$/;"	f	typeref:typename:void	file:
+Decode_H	sntrup761.c	/^#define Decode_H$/;"	d	file:
+Decrypt	sntrup761.c	/^static void Decrypt(int8 *r,const Fq *B,const int8 *T,const small *a)$/;"	f	typeref:typename:void	file:
+Decrypt	sntrup761.c	/^static void Decrypt(small *r,const Fq *c,const small *f,const small *ginv)$/;"	f	typeref:typename:void	file:
+Dependencies	README.md	/^### Dependencies$/;"	S	section:Portable OpenSSH""Building Portable OpenSSH
+Development	README.md	/^## Development$/;"	s	chapter:Portable OpenSSH
+Dflag	regress/netcat.c	/^int	Dflag;					\/* sodebug *\/$/;"	v	typeref:typename:int
+Documentation	README.md	/^## Documentation$/;"	s	chapter:Portable OpenSSH
+EAI_FAMILY	openbsd-compat/fake-rfc2553.h	/^# define EAI_FAMILY	/;"	d
+EAI_MEMORY	openbsd-compat/fake-rfc2553.h	/^# define EAI_MEMORY	/;"	d
+EAI_NODATA	openbsd-compat/fake-rfc2553.h	/^# define EAI_NODATA	/;"	d
+EAI_NONAME	openbsd-compat/fake-rfc2553.h	/^# define EAI_NONAME	/;"	d
+EAI_SYSTEM	openbsd-compat/fake-rfc2553.h	/^# define EAI_SYSTEM	/;"	d
+ECDSA_SIG_get0	openbsd-compat/libressl-api-compat.c	/^ECDSA_SIG_get0(const ECDSA_SIG *sig, const BIGNUM **pr, const BIGNUM **ps)$/;"	f	typeref:typename:void
+ECDSA_SIG_get0	regress/misc/sk-dummy/sk-dummy.c	/^#define ECDSA_SIG_get0(/;"	d	file:
+ECDSA_SIG_get0	sk-usbhid.c	/^#define ECDSA_SIG_get0(/;"	d	file:
+ECDSA_SIG_set0	openbsd-compat/libressl-api-compat.c	/^ECDSA_SIG_set0(ECDSA_SIG *sig, BIGNUM *r, BIGNUM *s)$/;"	f	typeref:typename:int
+EC_GROUP	kex.h	/^#  define EC_GROUP	/;"	d
+EC_GROUP	kex.h	/^# define EC_GROUP	/;"	d
+EC_GROUP	packet.h	/^#  define EC_GROUP	/;"	d
+EC_GROUP	packet.h	/^# define EC_GROUP	/;"	d
+EC_GROUP	sshkey.h	/^#  define EC_GROUP	/;"	d
+EC_GROUP	sshkey.h	/^# define EC_GROUP	/;"	d
+EC_KEY	kex.h	/^#  define EC_KEY	/;"	d
+EC_KEY	kex.h	/^# define EC_KEY	/;"	d
+EC_KEY	packet.h	/^#  define EC_KEY	/;"	d
+EC_KEY	packet.h	/^# define EC_KEY	/;"	d
+EC_KEY	sshkey.h	/^#  define EC_KEY	/;"	d
+EC_KEY	sshkey.h	/^# define EC_KEY	/;"	d
+EC_POINT	kex.h	/^#  define EC_POINT	/;"	d
+EC_POINT	kex.h	/^# define EC_POINT	/;"	d
+EC_POINT	packet.h	/^#  define EC_POINT	/;"	d
+EC_POINT	packet.h	/^# define EC_POINT	/;"	d
+EC_POINT	sshkey.h	/^#  define EC_POINT	/;"	d
+EC_POINT	sshkey.h	/^# define EC_POINT	/;"	d
+ED25519_PK_SZ	sshkey.h	/^#define	ED25519_PK_SZ	/;"	d
+ED25519_SK_SZ	sshkey.h	/^#define	ED25519_SK_SZ	/;"	d
+EMSG	openbsd-compat/getopt_long.c	/^#define	EMSG	/;"	d	file:
+ENABLE_PKCS11	configure.ac	/^	AC_DEFINE([ENABLE_PKCS11], [], [Enable for PKCS#11 support])$/;"	d
+ENABLE_SK	configure.ac	/^	AC_DEFINE([ENABLE_SK], [], [Enable for U2F\/FIDO support])$/;"	d
+ENABLE_SK_INTERNAL	configure.ac	/^		AC_DEFINE([ENABLE_SK_INTERNAL], [],$/;"	d
+ENDPORT	openbsd-compat/bindresvport.c	/^#define ENDPORT /;"	d	file:
+END_SIGNATURE	sshsig.c	/^#define END_SIGNATURE	/;"	d	file:
+ENVIRONMENT	ssh-add.1	/^.Sh ENVIRONMENT$/;"	s
+ENVIRONMENT	ssh-agent.1	/^.Sh ENVIRONMENT$/;"	s
+ENVIRONMENT	ssh-keygen.1	/^.Sh ENVIRONMENT$/;"	s
+ENVIRONMENT	ssh.1	/^.Sh ENVIRONMENT$/;"	s
+ENVIRONMENT	ssh_config.5	/^.Sh ENVIRONMENT VARIABLES$/;"	s
+EOD	contrib/aix/buildbff.sh	/^cat <<EOD >..\/openssh.copyright$/;"	h
+EOD	contrib/findssl.sh	/^cat >conftest.c <<EOD$/;"	h
+EOD	regress/addrmatch.sh	/^cat >>$OBJ\/sshd_proxy <<EOD$/;"	h
+EOD	regress/cfgmatch.sh	/^	cat >>$OBJ\/sshd_config <<EOD$/;"	h
+EOD	regress/cfgparse.sh	/^[ X${SKIP_IPV6} = Xyes ] || cat >> $OBJ\/sshd_config.0 <<EOD$/;"	h
+EOD	regress/cfgparse.sh	/^[ X${SKIP_IPV6} = Xyes ] || cat >> $OBJ\/sshd_config.1 <<EOD$/;"	h
+EOD	regress/cfgparse.sh	/^cat > $OBJ\/sshd_config.0 <<EOD$/;"	h
+EOD	regress/cfgparse.sh	/^cat > $OBJ\/sshd_config.1 <<EOD$/;"	h
+EOD	regress/cipher-speed.sh	/^cat >>$OBJ\/sshd_proxy <<EOD$/;"	h
+EOD	regress/hostbased.sh	/^cat >>$OBJ\/ssh_proxy <<EOD$/;"	h
+EOD	regress/hostbased.sh	/^cat >>$OBJ\/sshd_proxy <<EOD$/;"	h
+EOD	regress/keygen-convert.sh	/^cat > $OBJ\/askpass <<EOD$/;"	h
+EOD	regress/sshcfgparse.sh	/^cat >$OBJ\/ssh_config.0 <<EOD$/;"	h
+EOD	regress/test-exec.sh	/^		cat <<EOD$/;"	h
+EOD	regress/test-exec.sh	/^cat >$SSHLOGWRAP <<EOD$/;"	h
+EOE	regress/host-expand.sh	/^cat >$OBJ\/expect <<EOE$/;"	h
+EOF	config.guess	/^		    sed 's\/^		\/\/' << EOF > "$dummy.c"$/;"	h
+EOF	config.guess	/^		sed 's\/^		\/\/' << EOF > "$dummy.c"$/;"	h
+EOF	config.guess	/^	cat <<-EOF > "$dummy.c"$/;"	h
+EOF	config.guess	/^	cat >&2 <<EOF$/;"	h
+EOF	config.guess	/^	sed 's\/^	\/\/' << EOF > "$dummy.c"$/;"	h
+EOF	config.guess	/^   cat >&2 <<EOF$/;"	h
+EOF	config.guess	/^cat > "$dummy.c" <<EOF$/;"	h
+EOF	config.guess	/^cat >&2 <<EOF$/;"	h
+EOF	config.sub	/^		IFS="-" read cpu vendor <<EOF$/;"	h
+EOF	config.sub	/^IFS="-" read field1 field2 field3 field4 <<EOF$/;"	h
+EOF	contrib/aix/buildbff.sh	/^cat <<EOF >..\/lpp_name$/;"	h
+EOF	contrib/aix/buildbff.sh	/^cat <<EOF >>..\/openssh.post_i$/;"	h
+EOF	regress/agent-pkcs11.sh	/^cat > $SOFTHSM2_CONF << EOF$/;"	h
+EOF	regress/agent-ptrace.sh	/^	gdb ${SSHAGENT} ${SSH_AGENT_PID} > ${OBJ}\/gdb.out 2>&1 << EOF$/;"	h
+EOF	regress/envpass.sh	/^	sh << 'EOF'$/;"	h
+EOF	regress/envpass.sh	/^    otherhost sh << 'EOF'$/;"	h
+EOF	regress/envpass.sh	/^cat << EOF > $OBJ\/ssh_proxy_envpass$/;"	h
+EOF	regress/krl.sh	/^cat << EOF >> $OBJ\/revoked-serials$/;"	h
+EOF	regress/multiplex.sh	/^${SSH} -F $OBJ\/ssh_config -oSetEnv="_XXX_TEST=foo" -S$CTL otherhost sh << 'EOF'$/;"	h
+EOF	regress/multiplex.sh	/^_XXX_TEST=blah ${SSH} -F $OBJ\/ssh_config -oSendEnv="_XXX_TEST" -S$CTL otherhost sh << 'EOF'$/;"	h
+EOF	regress/sftp-batch.sh	/^cat << EOF > ${BATCH}.fail.1$/;"	h
+EOF	regress/sftp-batch.sh	/^cat << EOF > ${BATCH}.fail.2$/;"	h
+EOF	regress/sftp-batch.sh	/^cat << EOF > ${BATCH}.pass.1$/;"	h
+EOF	regress/sftp-batch.sh	/^cat << EOF > ${BATCH}.pass.2$/;"	h
+EOF	regress/sftp-uri.sh	/^    "sftp:\/\/${USER}@somehost:${PORT}\/${DIR}" > \/dev\/null 2>&1 << EOF$/;"	h
+EOF	regress/sftp-uri.sh	/^    "sftp:\/\/${USER}@somehost:${PORT}\/${DIR}\/" > \/dev\/null 2>&1 << EOF$/;"	h
+EOF	regress/sftp.sh	/^cat >$SFTPCMDFILE <<EOF$/;"	h
+EOF	regress/ssh-com-client.sh	/^cat > ${OBJ}\/ssh2_config << EOF$/;"	h
+EOF	regress/ssh-com-sftp.sh	/^cat >$SFTPCMDFILE <<EOF$/;"	h
+EOF	regress/ssh-com.sh	/^cat << EOF > $OBJ\/sshd2_config$/;"	h
+EOF	regress/test-exec.sh	/^		cat > $OBJ\/valgrind-sftp-server.sh << EOF$/;"	h
+EOF	regress/test-exec.sh	/^cat << EOF > $OBJ\/ssh_config$/;"	h
+EOF	regress/test-exec.sh	/^cat << EOF > $OBJ\/sshd_config$/;"	h
+EOS	openbsd-compat/glob.c	/^#define	EOS	/;"	d	file:
+ERRSET_FAIL	openbsd-compat/getrrsetbyname.h	/^# define ERRSET_FAIL	/;"	d
+ERRSET_INVAL	openbsd-compat/getrrsetbyname.h	/^# define ERRSET_INVAL	/;"	d
+ERRSET_NODATA	openbsd-compat/getrrsetbyname.h	/^# define ERRSET_NODATA	/;"	d
+ERRSET_NOMEMORY	openbsd-compat/getrrsetbyname.h	/^# define ERRSET_NOMEMORY	/;"	d
+ERRSET_NONAME	openbsd-compat/getrrsetbyname.h	/^# define ERRSET_NONAME	/;"	d
+ERRSET_SUCCESS	openbsd-compat/getrrsetbyname.h	/^# define ERRSET_SUCCESS	/;"	d
+ESCAPE	ssh.1	/^.Sh ESCAPE CHARACTERS$/;"	s
+ETCDIR	pathnames.h	/^#define ETCDIR	/;"	d
+EVP_CIPHER_CTX	cipher.c	/^#define EVP_CIPHER_CTX /;"	d	file:
+EVP_CIPHER_CTX_get_iv	openbsd-compat/libressl-api-compat.c	/^EVP_CIPHER_CTX_get_iv(const EVP_CIPHER_CTX *ctx, unsigned char *iv, size_t len)$/;"	f	typeref:typename:int
+EVP_CIPHER_CTX_get_iv	openbsd-compat/openssl-compat.h	/^#  define EVP_CIPHER_CTX_get_iv /;"	d
+EVP_CIPHER_CTX_set_iv	openbsd-compat/libressl-api-compat.c	/^EVP_CIPHER_CTX_set_iv(EVP_CIPHER_CTX *ctx, const unsigned char *iv, size_t len)$/;"	f	typeref:typename:int
+EVP_MD_CTX_free	openbsd-compat/libressl-api-compat.c	/^EVP_MD_CTX_free(EVP_MD_CTX *ctx)$/;"	f	typeref:typename:void
+EVP_MD_CTX_new	openbsd-compat/libressl-api-compat.c	/^EVP_MD_CTX_new(void)$/;"	f	typeref:typename:EVP_MD_CTX *
+EVP_PKEY_get0_RSA	openbsd-compat/libressl-api-compat.c	/^EVP_PKEY_get0_RSA(EVP_PKEY *pkey)$/;"	f	typeref:typename:RSA *
+EVP_sha256	digest-openssl.c	/^# define EVP_sha256 /;"	d	file:
+EVP_sha384	digest-openssl.c	/^# define EVP_sha384 /;"	d	file:
+EVP_sha512	digest-openssl.c	/^# define EVP_sha512 /;"	d	file:
+EWOULDBLOCK	defines.h	/^# define EWOULDBLOCK /;"	d
+EXA	openbsd-compat/fmt_scaled.c	/^	NONE = 0, KILO = 1, MEGA = 2, GIGA = 3, TERA = 4, PETA = 5, EXA = 6$/;"	e	enum:__anondc0b1e130103	file:
+EXAMPLES	contrib/ssh-copy-id.1	/^.Sh EXAMPLES$/;"	s
+EXAMPLES	ssh-keyscan.1	/^.Sh EXAMPLES$/;"	s
+EXEEXT	Makefile.in	/^EXEEXT=@EXEEXT@$/;"	m
+EXEEXT	openbsd-compat/regress/Makefile.in	/^EXEEXT=@EXEEXT@$/;"	m
+EXIT	scp.1	/^.Sh EXIT STATUS$/;"	s
+EXIT	ssh-add.1	/^.Sh EXIT STATUS$/;"	s
+EXIT	ssh.1	/^.Sh EXIT STATUS$/;"	s
+EXPAND_MAX_KEYS	misc.c	/^#define EXPAND_MAX_KEYS	/;"	d	file:
+EXTRA_TESTS	regress/Makefile	/^EXTRA_TESTS=	agent-pkcs11$/;"	m
+EditLine	sftp.c	/^typedef void EditLine;$/;"	t	typeref:typename:void	file:
+Encap	sntrup761.c	/^static void Encap(unsigned char *c,unsigned char *k,const unsigned char *pk)$/;"	f	typeref:typename:void	file:
+Encode	sntrup761.c	/^static void Encode(unsigned char *out,const uint16 *R,const uint16 *M,long long len)$/;"	f	typeref:typename:void	file:
+Encode_H	sntrup761.c	/^#define Encode_H$/;"	d	file:
+Encrypt	sntrup761.c	/^static void Encrypt(Fq *B,int8 *T,const int8 *r,const Fq *G,const Fq *A,const small *b)$/;"	f	typeref:typename:void	file:
+Encrypt	sntrup761.c	/^static void Encrypt(Fq *c,const small *r,const Fq *h)$/;"	f	typeref:typename:void	file:
+Enroll	regress/unittests/sshsig/webauthn.html	/^<h2>Enroll<\/h2>$/;"	i
+Expand	sntrup761.c	/^static void Expand(uint32 *L,const unsigned char *k)$/;"	f	typeref:typename:void	file:
+F	openbsd-compat/blowfish.c	/^#define F(/;"	d	file:
+F	verify.c	/^#define F(/;"	d	file:
+F1	openbsd-compat/md5.c	/^#define F1(/;"	d	file:
+F2	openbsd-compat/md5.c	/^#define F2(/;"	d	file:
+F3	openbsd-compat/md5.c	/^#define F3(/;"	d	file:
+F3_freeze	sntrup761.c	/^static small F3_freeze(int16 x)$/;"	f	typeref:typename:small	file:
+F4	openbsd-compat/md5.c	/^#define F4(/;"	d	file:
+FAIL_TEST	regress/unittests/authopt/tests.c	/^#define FAIL_TEST(/;"	d	file:
+FALSE	pkcs11.h	/^#define FALSE /;"	d
+FD_CLOSEONEXEC	monitor.c	/^#define FD_CLOSEONEXEC(/;"	d	file:
+FD_ISSET	openbsd-compat/openbsd-compat.h	/^#   define FD_ISSET(/;"	d
+FD_SET	openbsd-compat/openbsd-compat.h	/^#   define FD_SET(/;"	d
+FE25519_H	fe25519.h	/^#define FE25519_H$/;"	d
+FIDO	ssh-keygen.1	/^.Sh FIDO AUTHENTICATOR$/;"	s
+FIDO_CRED_PROT_UV_OPTIONAL_WITH_ID	sk-usbhid.c	/^#define FIDO_CRED_PROT_UV_OPTIONAL_WITH_ID /;"	d	file:
+FIDO_CRED_PROT_UV_REQUIRED	sk-usbhid.c	/^#define FIDO_CRED_PROT_UV_REQUIRED /;"	d	file:
+FIDO_ERR_OPERATION_DENIED	sk-usbhid.c	/^#define FIDO_ERR_OPERATION_DENIED /;"	d	file:
+FIDO_POLL_MS	sk-usbhid.c	/^#define FIDO_POLL_MS	/;"	d	file:
+FILEMODEMASK	scp.c	/^#define	FILEMODEMASK	/;"	d	file:
+FILES	ssh-add.1	/^.Sh FILES$/;"	s
+FILES	ssh-agent.1	/^.Sh FILES$/;"	s
+FILES	ssh-keygen.1	/^.Sh FILES$/;"	s
+FILES	ssh-keyscan.1	/^.Sh FILES$/;"	s
+FILES	ssh-keysign.8	/^.Sh FILES$/;"	s
+FILES	ssh.1	/^.Sh FILES$/;"	s
+FILES	ssh_config.5	/^.Sh FILES$/;"	s
+FILES	sshd.8	/^.Sh FILES$/;"	s
+FILES	sshd_config.5	/^.Sh FILES$/;"	s
+FILESYSTEM_NO_BACKSLASH	configure.ac	/^	AC_DEFINE([FILESYSTEM_NO_BACKSLASH], [1], [File names may not contain backslash characters])$/;"	d
+FILL_ATTR	ssh-pkcs11.c	/^#define FILL_ATTR(/;"	d	file:
+FIXALGORITHMSCMD	Makefile.in	/^FIXALGORITHMSCMD= $(SHELL) $(srcdir)\/fixalgorithms $(SED) \\$/;"	m
+FIXPATHSCMD	Makefile.in	/^FIXPATHSCMD	= $(SED) $(PATHSUBS)$/;"	m
+FLAG_ALLARGS	openbsd-compat/getopt_long.c	/^#define FLAG_ALLARGS	/;"	d	file:
+FLAG_CASE	regress/unittests/authopt/tests.c	/^#define FLAG_CASE(/;"	d	file:
+FLAG_EQ	regress/unittests/authopt/tests.c	/^#define FLAG_EQ(/;"	d	file:
+FLAG_LONGONLY	openbsd-compat/getopt_long.c	/^#define FLAG_LONGONLY	/;"	d	file:
+FLAG_PERMUTE	openbsd-compat/getopt_long.c	/^#define FLAG_PERMUTE	/;"	d	file:
+FLAG_TEST	regress/unittests/authopt/tests.c	/^#define FLAG_TEST(/;"	d	file:
+FLDBASE	sshkey.c	/^#define	FLDBASE	/;"	d	file:
+FLDSIZE_X	sshkey.c	/^#define	FLDSIZE_X	/;"	d	file:
+FLDSIZE_Y	sshkey.c	/^#define	FLDSIZE_Y	/;"	d	file:
+FMT_PEM	ssh-keygen.c	/^	FMT_PEM$/;"	e	enum:__anon9cc534940103	file:
+FMT_PKCS8	ssh-keygen.c	/^	FMT_PKCS8,$/;"	e	enum:__anon9cc534940103	file:
+FMT_RFC4716	ssh-keygen.c	/^	FMT_RFC4716,$/;"	e	enum:__anon9cc534940103	file:
+FMT_SCALED_STRSIZE	openbsd-compat/openbsd-compat.h	/^#define	FMT_SCALED_STRSIZE	/;"	d
+FNM_CASEFOLD	openbsd-compat/fnmatch.h	/^#define	FNM_CASEFOLD	/;"	d
+FNM_FILE_NAME	openbsd-compat/fnmatch.h	/^#define	FNM_FILE_NAME	/;"	d
+FNM_IGNORECASE	openbsd-compat/fnmatch.h	/^#define	FNM_IGNORECASE	/;"	d
+FNM_LEADING_DIR	openbsd-compat/fnmatch.h	/^#define	FNM_LEADING_DIR	/;"	d
+FNM_NOESCAPE	openbsd-compat/fnmatch.h	/^#define	FNM_NOESCAPE	/;"	d
+FNM_NOMATCH	openbsd-compat/fnmatch.h	/^#define	FNM_NOMATCH	/;"	d
+FNM_NOSYS	openbsd-compat/fnmatch.h	/^#define	FNM_NOSYS	/;"	d
+FNM_PATHNAME	openbsd-compat/fnmatch.h	/^#define	FNM_PATHNAME	/;"	d
+FNM_PERIOD	openbsd-compat/fnmatch.h	/^#define	FNM_PERIOD	/;"	d
+FORWARD_ADM	channels.h	/^#define FORWARD_ADM	/;"	d
+FORWARD_ALLOW	channels.h	/^#define FORWARD_ALLOW	/;"	d
+FORWARD_DENY	channels.h	/^#define FORWARD_DENY	/;"	d
+FORWARD_LOCAL	channels.h	/^#define FORWARD_LOCAL	/;"	d
+FORWARD_REMOTE	channels.h	/^#define FORWARD_REMOTE	/;"	d
+FORWARD_USER	channels.h	/^#define FORWARD_USER	/;"	d
+FREE_ARRAY	readconf.c	/^#define FREE_ARRAY(/;"	d	file:
+FSID_TO_ULONG	defines.h	/^# define FSID_TO_ULONG(/;"	d
+FSID_TO_ULONG	defines.h	/^#define FSID_TO_ULONG(/;"	d
+FUZZ_1_BIT_FLIP	regress/unittests/test_helper/test_helper.h	/^#define FUZZ_1_BIT_FLIP	/;"	d
+FUZZ_1_BYTE_FLIP	regress/unittests/test_helper/test_helper.h	/^#define FUZZ_1_BYTE_FLIP	/;"	d
+FUZZ_2_BIT_FLIP	regress/unittests/test_helper/test_helper.h	/^#define FUZZ_2_BIT_FLIP	/;"	d
+FUZZ_2_BYTE_FLIP	regress/unittests/test_helper/test_helper.h	/^#define FUZZ_2_BYTE_FLIP	/;"	d
+FUZZ_BASE64	regress/unittests/test_helper/test_helper.h	/^#define FUZZ_BASE64	/;"	d
+FUZZ_DBG	regress/unittests/test_helper/fuzz.c	/^# define FUZZ_DBG(/;"	d	file:
+FUZZ_LIBS	regress/misc/fuzz-harness/Makefile	/^FUZZ_LIBS=-lFuzzer$/;"	m
+FUZZ_MAX	regress/unittests/test_helper/test_helper.h	/^#define FUZZ_MAX	/;"	d
+FUZZ_TRUNCATE_END	regress/unittests/test_helper/test_helper.h	/^#define FUZZ_TRUNCATE_END	/;"	d
+FUZZ_TRUNCATE_START	regress/unittests/test_helper/test_helper.h	/^#define FUZZ_TRUNCATE_START	/;"	d
+FWD_PERMIT_ANY_HOST	channels.c	/^#define FWD_PERMIT_ANY_HOST	/;"	d	file:
+FWD_PERMIT_ANY_PORT	channels.c	/^#define FWD_PERMIT_ANY_PORT	/;"	d	file:
+Fflag	regress/netcat.c	/^int	Fflag;					\/* fdpass sock to stdout *\/$/;"	v	typeref:typename:int
+Forward	misc.h	/^struct Forward {$/;"	s
+ForwardOptions	misc.h	/^struct ForwardOptions {$/;"	s
+Fq	sntrup761.c	/^typedef int16 Fq;$/;"	t	typeref:typename:int16	file:
+Fq_freeze	sntrup761.c	/^static Fq Fq_freeze(int32 x)$/;"	f	typeref:typename:Fq	file:
+Fq_recip	sntrup761.c	/^static Fq Fq_recip(Fq a1)$/;"	f	typeref:typename:Fq	file:
+GE25519_H	ge25519.h	/^#define GE25519_H$/;"	d
+GETLONG	openbsd-compat/getrrsetbyname.c	/^#define GETLONG(/;"	d	file:
+GETPW	monitor_wrap.c	/^#define GETPW(/;"	d	file:
+GETSHORT	openbsd-compat/getrrsetbyname.c	/^#define GETSHORT(/;"	d	file:
+GETU32	rijndael.c	/^#define GETU32(/;"	d	file:
+GIGA	openbsd-compat/fmt_scaled.c	/^	NONE = 0, KILO = 1, MEGA = 2, GIGA = 3, TERA = 4, PETA = 5, EXA = 6$/;"	e	enum:__anondc0b1e130103	file:
+GLOB_ABEND	openbsd-compat/glob.h	/^#define GLOB_ABEND	/;"	d
+GLOB_ABORTED	openbsd-compat/glob.h	/^#define	GLOB_ABORTED	/;"	d
+GLOB_ALTDIRFUNC	openbsd-compat/glob.h	/^#define	GLOB_ALTDIRFUNC	/;"	d
+GLOB_APPEND	openbsd-compat/glob.h	/^#define	GLOB_APPEND	/;"	d
+GLOB_BRACE	openbsd-compat/glob.h	/^#define	GLOB_BRACE	/;"	d
+GLOB_DOOFFS	openbsd-compat/glob.h	/^#define	GLOB_DOOFFS	/;"	d
+GLOB_ERR	openbsd-compat/glob.h	/^#define	GLOB_ERR	/;"	d
+GLOB_KEEPSTAT	openbsd-compat/glob.h	/^#define	GLOB_KEEPSTAT	/;"	d
+GLOB_LIMIT	openbsd-compat/glob.h	/^#define GLOB_LIMIT	/;"	d
+GLOB_LIMIT_MALLOC	openbsd-compat/glob.c	/^#define	GLOB_LIMIT_MALLOC	/;"	d	file:
+GLOB_LIMIT_READDIR	openbsd-compat/glob.c	/^#define	GLOB_LIMIT_READDIR	/;"	d	file:
+GLOB_LIMIT_STAT	openbsd-compat/glob.c	/^#define	GLOB_LIMIT_STAT	/;"	d	file:
+GLOB_MAGCHAR	openbsd-compat/glob.h	/^#define	GLOB_MAGCHAR	/;"	d
+GLOB_MARK	openbsd-compat/glob.h	/^#define	GLOB_MARK	/;"	d
+GLOB_NOCHECK	openbsd-compat/glob.h	/^#define	GLOB_NOCHECK	/;"	d
+GLOB_NOESCAPE	openbsd-compat/glob.h	/^#define	GLOB_NOESCAPE	/;"	d
+GLOB_NOMAGIC	openbsd-compat/glob.h	/^#define	GLOB_NOMAGIC	/;"	d
+GLOB_NOMATCH	openbsd-compat/glob.h	/^#define	GLOB_NOMATCH	/;"	d
+GLOB_NOSORT	openbsd-compat/glob.h	/^#define	GLOB_NOSORT	/;"	d
+GLOB_NOSPACE	openbsd-compat/glob.h	/^#define	GLOB_NOSPACE	/;"	d
+GLOB_NOSYS	openbsd-compat/glob.h	/^#define	GLOB_NOSYS	/;"	d
+GLOB_QUOTE	openbsd-compat/glob.h	/^#define	GLOB_QUOTE	/;"	d
+GLOB_TILDE	openbsd-compat/glob.h	/^#define	GLOB_TILDE	/;"	d
+GRAB_TRIES	contrib/gnome-ssh-askpass2.c	/^#define GRAB_TRIES	/;"	d	file:
+GRAB_TRIES	contrib/gnome-ssh-askpass3.c	/^#define GRAB_TRIES	/;"	d	file:
+GRAB_WAIT	contrib/gnome-ssh-askpass2.c	/^#define GRAB_WAIT	/;"	d	file:
+GRAB_WAIT	contrib/gnome-ssh-askpass3.c	/^#define GRAB_WAIT	/;"	d	file:
+GROUPACCESS_H	groupaccess.h	/^#define GROUPACCESS_H$/;"	d
+GSSLIBS	Makefile.in	/^GSSLIBS=@GSSLIBS@$/;"	m
+GSSLIBS	configure.ac	/^AC_SUBST([GSSLIBS])$/;"	s
+GSS_C_NT_HOSTBASED_SERVICE	ssh-gss.h	/^#   define GSS_C_NT_HOSTBASED_SERVICE /;"	d
+Generator	sntrup761.c	/^static void Generator(Fq *G,const unsigned char *k)$/;"	f	typeref:typename:void	file:
+Group	contrib/redhat/openssh.spec	/^Group: Applications\/Internet$/;"	t
+Group	contrib/redhat/openssh.spec	/^Group: System Environment\/Daemons$/;"	t
+Group	contrib/suse/openssh.spec	/^Group:		Productivity\/Networking\/SSH$/;"	t
+Gssctxt	ssh-gss.h	/^} Gssctxt;$/;"	t	typeref:struct:__anon1dbf9ce30308
+HANDLE	openbsd-compat/bsd-cygwin_util.h	/^typedef void *HANDLE;$/;"	t	typeref:typename:void *
+HANDLE_DIR	sftp-server.c	/^	HANDLE_DIR,$/;"	e	enum:__anond4ee95b70103	file:
+HANDLE_FILE	sftp-server.c	/^	HANDLE_FILE$/;"	e	enum:__anond4ee95b70103	file:
+HANDLE_UNUSED	sftp-server.c	/^	HANDLE_UNUSED,$/;"	e	enum:__anond4ee95b70103	file:
+HASHALG_ALLOWED	sshsig.c	/^#define HASHALG_ALLOWED	/;"	d	file:
+HASHALG_DEFAULT	sshsig.c	/^#define HASHALG_DEFAULT	/;"	d	file:
+HASH_BUF_BYTES	umac.c	/^#define HASH_BUF_BYTES /;"	d	file:
+HASH_DELIM	hostfile.h	/^#define HASH_DELIM	/;"	d
+HASH_H	xmss_hash.h	/^#define HASH_H$/;"	d
+HASH_MAGIC	hostfile.h	/^#define HASH_MAGIC	/;"	d
+HAS_SHADOW_EXPIRE	configure.ac	/^		AC_DEFINE([HAS_SHADOW_EXPIRE], [1],$/;"	d
+HAVE_ACCRIGHTS_IN_MSGHDR	configure.ac	/^	AC_DEFINE([HAVE_ACCRIGHTS_IN_MSGHDR], [1],$/;"	d
+HAVE_ATTRIBUTE__BOUNDED__	configure.ac	/^	AC_DEFINE([HAVE_ATTRIBUTE__BOUNDED__], [1], [OpenBSD's gcc has bounded])$/;"	d
+HAVE_ATTRIBUTE__NONNULL__	configure.ac	/^	AC_DEFINE([HAVE_ATTRIBUTE__NONNULL__], [1], [Have attribute nonnull])$/;"	d
+HAVE_ATTRIBUTE__SENTINEL__	configure.ac	/^	AC_DEFINE([HAVE_ATTRIBUTE__SENTINEL__], [1], [OpenBSD's gcc has sentinel])$/;"	d
+HAVE_BROKEN_CHACHA20	openbsd-compat/openssl-compat.h	/^#  define HAVE_BROKEN_CHACHA20$/;"	d
+HAVE_CALLOC	configure.ac	/^	AC_DEFINE(HAVE_CALLOC, 0, [calloc(0, x) returns NULL])$/;"	d
+HAVE_CALLOC	configure.ac	/^	AC_DEFINE(HAVE_CALLOC, 1, [calloc(0, x) returns non-null])$/;"	d
+HAVE_CLOCK_T	configure.ac	/^	AC_DEFINE([HAVE_CLOCK_T], [1], [define if you have clock_t data type])$/;"	d
+HAVE_CLOCK_T	defines.h	/^# define HAVE_CLOCK_T$/;"	d
+HAVE_CONTROL_IN_MSGHDR	configure.ac	/^	AC_DEFINE([HAVE_CONTROL_IN_MSGHDR], [1],$/;"	d
+HAVE_CYGWIN	configure.ac	/^	AC_DEFINE([HAVE_CYGWIN], [1], [Define if you are on Cygwin])$/;"	d
+HAVE_ETC_DEFAULT_LOGIN	configure.ac	/^		AC_DEFINE([HAVE_ETC_DEFAULT_LOGIN], [1],$/;"	d
+HAVE_FCNTL_CLOSEM	configure.ac	/^	    AC_DEFINE([HAVE_FCNTL_CLOSEM], [1], [Use F_CLOSEM fcntl for closefrom]),$/;"	d
+HAVE_GETADDRINFO	defines.h	/^# define HAVE_GETADDRINFO$/;"	d
+HAVE_GETGROUPLIST	openbsd-compat/port-aix.h	/^# define HAVE_GETGROUPLIST$/;"	d
+HAVE_GETOPT_OPTRESET	configure.ac	/^	AC_DEFINE([HAVE_GETOPT_OPTRESET], [1],$/;"	d
+HAVE_INT64_T	configure.ac	/^	AC_DEFINE([HAVE_INT64_T], [1], [define if you have int64_t data type])$/;"	d
+HAVE_INTXX_T	configure.ac	/^	AC_DEFINE([HAVE_INTXX_T], [1], [define if you have intxx_t data type])$/;"	d
+HAVE_LOGIN_CAP	defines.h	/^# define HAVE_LOGIN_CAP$/;"	d
+HAVE_MODE_T	configure.ac	/^	AC_DEFINE([HAVE_MODE_T], [1], [define if you have mode_t data type])$/;"	d
+HAVE_MODE_T	defines.h	/^# define HAVE_MODE_T$/;"	d
+HAVE_NEXT	configure.ac	/^	AC_DEFINE([HAVE_NEXT], [1], [Define if you are on NeXT])$/;"	d
+HAVE_OPENSSL_ADD_ALL_ALGORITHMS	configure.ac	/^		AC_DEFINE(HAVE_OPENSSL_ADD_ALL_ALGORITHMS, 1, [as a macro]), ,$/;"	d
+HAVE_OPENSSL_ADD_ALL_ALGORITHMS	configure.ac	/^	    AC_DEFINE(HAVE_OPENSSL_ADD_ALL_ALGORITHMS, 1, [as a function]),$/;"	d
+HAVE_OSF_SIA	configure.ac	/^			AC_DEFINE([HAVE_OSF_SIA], [1],$/;"	d
+HAVE_PID_T	configure.ac	/^	AC_DEFINE([HAVE_PID_T], [1], [define if you have pid_t data type])$/;"	d
+HAVE_PID_T	defines.h	/^# define HAVE_PID_T$/;"	d
+HAVE_PROC_PID	configure.ac	/^	AC_DEFINE([HAVE_PROC_PID], [1], [Define if you have \/proc\/$pid\/fd])$/;"	d
+HAVE_SA_FAMILY_T	configure.ac	/^	AC_DEFINE([HAVE_SA_FAMILY_T], [1],$/;"	d
+HAVE_SA_FAMILY_T	defines.h	/^# define HAVE_SA_FAMILY_T$/;"	d
+HAVE_SECUREWARE	configure.ac	/^		AC_DEFINE([HAVE_SECUREWARE], [1],$/;"	d
+HAVE_SECUREWARE	configure.ac	/^	AC_DEFINE([HAVE_SECUREWARE])$/;"	d
+HAVE_SIG_ATOMIC_T	defines.h	/^# define HAVE_SIG_ATOMIC_T$/;"	d
+HAVE_SIZE_T	configure.ac	/^	AC_DEFINE([HAVE_SIZE_T], [1], [define if you have size_t data type])$/;"	d
+HAVE_SIZE_T	defines.h	/^# define HAVE_SIZE_T$/;"	d
+HAVE_SSIZE_T	configure.ac	/^	AC_DEFINE([HAVE_SSIZE_T], [1], [define if you have ssize_t data type])$/;"	d
+HAVE_SSIZE_T	defines.h	/^# define HAVE_SSIZE_T$/;"	d
+HAVE_SS_FAMILY_IN_SS	configure.ac	/^	AC_DEFINE([HAVE_SS_FAMILY_IN_SS], [1], [Fields in struct sockaddr_storage])$/;"	d
+HAVE_STRUCT_ADDRINFO	configure.ac	/^	AC_DEFINE([HAVE_STRUCT_ADDRINFO], [1],$/;"	d
+HAVE_STRUCT_IN6_ADDR	configure.ac	/^	AC_DEFINE([HAVE_STRUCT_IN6_ADDR], [1],$/;"	d
+HAVE_STRUCT_SOCKADDR_IN6	configure.ac	/^	AC_DEFINE([HAVE_STRUCT_SOCKADDR_IN6], [1],$/;"	d
+HAVE_STRUCT_SOCKADDR_STORAGE	configure.ac	/^	AC_DEFINE([HAVE_STRUCT_SOCKADDR_STORAGE], [1],$/;"	d
+HAVE_STRUCT_STATFS	openbsd-compat/bsd-statvfs.c	/^# define HAVE_STRUCT_STATFS$/;"	d	file:
+HAVE_STRUCT_TIMESPEC	configure.ac	/^	AC_DEFINE([HAVE_STRUCT_TIMESPEC], [1], [define if you have struct timespec])$/;"	d
+HAVE_STRUCT_TIMEVAL	configure.ac	/^	AC_DEFINE([HAVE_STRUCT_TIMEVAL], [1], [define if you have struct timeval])$/;"	d
+HAVE_SYS_ERRLIST	configure.ac	/^	AC_DEFINE([HAVE_SYS_ERRLIST], [1],$/;"	d
+HAVE_SYS_GET_RDOMAIN	openbsd-compat/port-net.h	/^# define HAVE_SYS_GET_RDOMAIN$/;"	d
+HAVE_SYS_NERR	configure.ac	/^	AC_DEFINE([HAVE_SYS_NERR], [1], [Define if your system defines sys_nerr])$/;"	d
+HAVE_SYS_SET_PROCESS_RDOMAIN	openbsd-compat/port-net.h	/^# define HAVE_SYS_SET_PROCESS_RDOMAIN$/;"	d
+HAVE_SYS_SET_RDOMAIN	openbsd-compat/port-net.h	/^# define HAVE_SYS_SET_RDOMAIN$/;"	d
+HAVE_SYS_SYSLOG_H	configure.ac	/^	AC_DEFINE([HAVE_SYS_SYSLOG_H], [1], [Force use of sys\/syslog.h on Ultrix])$/;"	d
+HAVE_SYS_VALID_RDOMAIN	openbsd-compat/port-net.h	/^# define HAVE_SYS_VALID_RDOMAIN$/;"	d
+HAVE_UINTXX_T	configure.ac	/^		AC_DEFINE([HAVE_UINTXX_T], [1],$/;"	d
+HAVE_U_CHAR	configure.ac	/^	AC_DEFINE([HAVE_U_CHAR], [1], [define if you have u_char data type])$/;"	d
+HAVE_U_CHAR	defines.h	/^# define HAVE_U_CHAR$/;"	d
+HAVE_U_INT	configure.ac	/^	AC_DEFINE([HAVE_U_INT], [1], [define if you have u_int data type])$/;"	d
+HAVE_U_INT64_T	configure.ac	/^	AC_DEFINE([HAVE_U_INT64_T])$/;"	d
+HAVE_U_INT64_T	configure.ac	/^	AC_DEFINE([HAVE_U_INT64_T], [1], [define if you have u_int64_t data type])$/;"	d
+HAVE_U_INTXX_T	configure.ac	/^	AC_DEFINE([HAVE_U_INTXX_T], [1], [define if you have u_intxx_t data type])$/;"	d
+HAVE_U_INTXX_T	defines.h	/^# define HAVE_U_INTXX_T /;"	d
+HAVE_VA_COPY	configure.ac	/^	AC_DEFINE([HAVE_VA_COPY], [1], [Define if va_copy exists])$/;"	d
+HAVE___FUNCTION__	configure.ac	/^	AC_DEFINE([HAVE___FUNCTION__], [1],$/;"	d
+HAVE___PROGNAME	configure.ac	/^	AC_DEFINE([HAVE___PROGNAME], [1], [Define if libc defines __progname])$/;"	d
+HAVE___SS_FAMILY_IN_SS	configure.ac	/^	AC_DEFINE([HAVE___SS_FAMILY_IN_SS], [1],$/;"	d
+HAVE___VA_COPY	configure.ac	/^	AC_DEFINE([HAVE___VA_COPY], [1], [Define if __va_copy exists])$/;"	d
+HAVE___func__	configure.ac	/^	AC_DEFINE([HAVE___func__], [1], [Define if compiler implements __func__])$/;"	d
+HEADER_UMAC_H	umac.h	/^#define HEADER_UMAC_H$/;"	d
+HFIXEDSZ	openbsd-compat/getrrsetbyname.h	/^#define HFIXEDSZ /;"	d
+HISTORY	scp.1	/^.Sh HISTORY$/;"	s
+HISTORY	sftp-server.8	/^.Sh HISTORY$/;"	s
+HISTORY	ssh-keysign.8	/^.Sh HISTORY$/;"	s
+HISTORY	ssh-pkcs11-helper.8	/^.Sh HISTORY$/;"	s
+HISTORY	ssh-sk-helper.8	/^.Sh HISTORY$/;"	s
+HKF_MATCH_HOST	hostfile.h	/^#define HKF_MATCH_HOST	/;"	d
+HKF_MATCH_HOST_HASHED	hostfile.h	/^#define HKF_MATCH_HOST_HASHED	/;"	d
+HKF_MATCH_IP	hostfile.h	/^#define HKF_MATCH_IP	/;"	d
+HKF_MATCH_IP_HASHED	hostfile.h	/^#define HKF_MATCH_IP_HASHED	/;"	d
+HKF_STATUS_COMMENT	hostfile.h	/^#define HKF_STATUS_COMMENT	/;"	d
+HKF_STATUS_INVALID	hostfile.h	/^#define HKF_STATUS_INVALID	/;"	d
+HKF_STATUS_MATCHED	hostfile.h	/^#define HKF_STATUS_MATCHED	/;"	d
+HKF_STATUS_OK	hostfile.h	/^#define HKF_STATUS_OK	/;"	d
+HKF_WANT_MATCH	hostfile.h	/^#define HKF_WANT_MATCH	/;"	d
+HKF_WANT_PARSE_KEY	hostfile.h	/^#define HKF_WANT_PARSE_KEY	/;"	d
+HOSTFILE_H	hostfile.h	/^#define HOSTFILE_H$/;"	d
+HOSTKEY_PROOF_RSA_ALGS	clientloop.c	/^#define HOSTKEY_PROOF_RSA_ALGS	/;"	d	file:
+HOST_CHANGED	hostfile.h	/^	HOST_OK, HOST_NEW, HOST_CHANGED, HOST_REVOKED, HOST_FOUND$/;"	e	enum:__anon547b26990103
+HOST_FOUND	hostfile.h	/^	HOST_OK, HOST_NEW, HOST_CHANGED, HOST_REVOKED, HOST_FOUND$/;"	e	enum:__anon547b26990103
+HOST_NAME_MAX	defines.h	/^#  define HOST_NAME_MAX	/;"	d
+HOST_NAME_MAX	defines.h	/^#  define HOST_NAME_MAX /;"	d
+HOST_NEW	hostfile.h	/^	HOST_OK, HOST_NEW, HOST_CHANGED, HOST_REVOKED, HOST_FOUND$/;"	e	enum:__anon547b26990103
+HOST_OK	hostfile.h	/^	HOST_OK, HOST_NEW, HOST_CHANGED, HOST_REVOKED, HOST_FOUND$/;"	e	enum:__anon547b26990103
+HOST_REVOKED	hostfile.h	/^	HOST_OK, HOST_NEW, HOST_CHANGED, HOST_REVOKED, HOST_FOUND$/;"	e	enum:__anon547b26990103
+HOURS	misc.c	/^#define HOURS	/;"	d	file:
+HTONDIGEST	openbsd-compat/sha1.h	/^#define HTONDIGEST(/;"	d
+HTTP_MAXHDRS	regress/netcat.c	/^#define HTTP_MAXHDRS	/;"	d	file:
+HTTP_PROXY_PORT	regress/netcat.c	/^#define HTTP_PROXY_PORT	/;"	d	file:
+Handle	sftp-server.c	/^struct Handle {$/;"	s	file:
+Handle	sftp-server.c	/^typedef struct Handle Handle;$/;"	t	typeref:struct:Handle	file:
+HashConfirm	sntrup761.c	/^static void HashConfirm(unsigned char *h,const unsigned char *r,const unsigned char *pk,const un/;"	f	typeref:typename:void	file:
+HashSession	sntrup761.c	/^static void HashSession(unsigned char *k,int b,const unsigned char *y,const unsigned char *z)$/;"	f	typeref:typename:void	file:
+HashShort	sntrup761.c	/^static void HashShort(small *out,const Inputs r)$/;"	f	typeref:typename:void	file:
+Hash_bytes	sntrup761.c	/^#define Hash_bytes /;"	d	file:
+Hash_prefix	sntrup761.c	/^static void Hash_prefix(unsigned char *out,int b,const unsigned char *in,int inlen)$/;"	f	typeref:typename:void	file:
+Hide	sntrup761.c	/^static void Hide(unsigned char *c,unsigned char *r_enc,const Inputs r,const unsigned char *pk,co/;"	f	typeref:typename:void	file:
+HostStatus	hostfile.h	/^}       HostStatus;$/;"	t	typeref:enum:__anon547b26990103
+HostkeyMarker	hostfile.h	/^}	HostkeyMarker;$/;"	t	typeref:enum:__anon547b26990203
+I	sntrup761.c	/^#define I /;"	d	file:
+IAC	regress/netcat.c	/^#define IAC	/;"	d	file:
+IGNORE_RHOSTS_NO	servconf.h	/^#define IGNORE_RHOSTS_NO	/;"	d
+IGNORE_RHOSTS_SHOSTS	servconf.h	/^#define IGNORE_RHOSTS_SHOSTS	/;"	d
+IGNORE_RHOSTS_YES	servconf.h	/^#define IGNORE_RHOSTS_YES	/;"	d
+IN6ADDRSZ	openbsd-compat/inet_ntop.c	/^#define IN6ADDRSZ /;"	d	file:
+IN6_IS_ADDR_LOOPBACK	openbsd-compat/fake-rfc2553.h	/^# define IN6_IS_ADDR_LOOPBACK(/;"	d
+IN6_IS_ADDR_V4MAPPED	defines.h	/^# define IN6_IS_ADDR_V4MAPPED(/;"	d
+INADDR_LOOPBACK	defines.h	/^#define INADDR_LOOPBACK /;"	d
+INCLUDES_H	includes.h	/^#define INCLUDES_H$/;"	d
+INET6_ADDRSTRLEN	defines.h	/^#define INET6_ADDRSTRLEN /;"	d
+INFTIM	openbsd-compat/bsd-poll.h	/^#define INFTIM	/;"	d
+INIT_SZ	openbsd-compat/bsd-asprintf.c	/^#define INIT_SZ	/;"	d	file:
+INORDER	openbsd-compat/getopt_long.c	/^#define	INORDER	/;"	d	file:
+INSTALL	Makefile.in	/^INSTALL=@INSTALL@$/;"	m
+INSTALL	contrib/cygwin/Makefile	/^INSTALL=\/usr\/bin\/install -c$/;"	m
+INSTALL	openbsd-compat/Makefile.in	/^INSTALL=@INSTALL@$/;"	m
+INT16SZ	openbsd-compat/getrrsetbyname.c	/^# define INT16SZ	/;"	d	file:
+INT16SZ	openbsd-compat/inet_ntop.c	/^#define INT16SZ /;"	d	file:
+INT32SZ	openbsd-compat/getrrsetbyname.c	/^# define INT32SZ	/;"	d	file:
+INT32_MAX	defines.h	/^#  define INT32_MAX /;"	d
+INT64_MAX	defines.h	/^#  define INT64_MAX /;"	d
+INTBLOB_LEN	ssh-dss.c	/^#define INTBLOB_LEN	/;"	d	file:
+INTERACTIVE	sftp.1	/^.Sh INTERACTIVE COMMANDS$/;"	s
+INTERNAL_SFTP_NAME	servconf.h	/^#define INTERNAL_SFTP_NAME	/;"	d
+INTEROP_TESTS	regress/Makefile	/^INTEROP_TESTS=	putty-transfer putty-ciphers putty-kex conch-ciphers$/;"	m
+INVALID	openbsd-compat/strtonum.c	/^#define INVALID	/;"	d	file:
+INVALID_HANDLE_VALUE	openbsd-compat/bsd-cygwin_util.h	/^#define INVALID_HANDLE_VALUE /;"	d
+IOV_MAX	defines.h	/^#  define	IOV_MAX	/;"	d
+IPADDR_IN_DISPLAY	configure.ac	/^	AC_DEFINE([IPADDR_IN_DISPLAY], [1],$/;"	d
+IPPORT_RESERVED	defines.h	/^#define IPPORT_RESERVED /;"	d
+IPTOS_DSCP_AF11	defines.h	/^# define	IPTOS_DSCP_AF11	/;"	d
+IPTOS_DSCP_AF12	defines.h	/^# define	IPTOS_DSCP_AF12	/;"	d
+IPTOS_DSCP_AF13	defines.h	/^# define	IPTOS_DSCP_AF13	/;"	d
+IPTOS_DSCP_AF21	defines.h	/^# define	IPTOS_DSCP_AF21	/;"	d
+IPTOS_DSCP_AF22	defines.h	/^# define	IPTOS_DSCP_AF22	/;"	d
+IPTOS_DSCP_AF23	defines.h	/^# define	IPTOS_DSCP_AF23	/;"	d
+IPTOS_DSCP_AF31	defines.h	/^# define	IPTOS_DSCP_AF31	/;"	d
+IPTOS_DSCP_AF32	defines.h	/^# define	IPTOS_DSCP_AF32	/;"	d
+IPTOS_DSCP_AF33	defines.h	/^# define	IPTOS_DSCP_AF33	/;"	d
+IPTOS_DSCP_AF41	defines.h	/^# define	IPTOS_DSCP_AF41	/;"	d
+IPTOS_DSCP_AF42	defines.h	/^# define	IPTOS_DSCP_AF42	/;"	d
+IPTOS_DSCP_AF43	defines.h	/^# define	IPTOS_DSCP_AF43	/;"	d
+IPTOS_DSCP_CS0	defines.h	/^# define	IPTOS_DSCP_CS0	/;"	d
+IPTOS_DSCP_CS1	defines.h	/^# define	IPTOS_DSCP_CS1	/;"	d
+IPTOS_DSCP_CS2	defines.h	/^# define	IPTOS_DSCP_CS2	/;"	d
+IPTOS_DSCP_CS3	defines.h	/^# define	IPTOS_DSCP_CS3	/;"	d
+IPTOS_DSCP_CS4	defines.h	/^# define	IPTOS_DSCP_CS4	/;"	d
+IPTOS_DSCP_CS5	defines.h	/^# define	IPTOS_DSCP_CS5	/;"	d
+IPTOS_DSCP_CS6	defines.h	/^# define	IPTOS_DSCP_CS6	/;"	d
+IPTOS_DSCP_CS7	defines.h	/^# define	IPTOS_DSCP_CS7	/;"	d
+IPTOS_DSCP_EF	defines.h	/^# define	IPTOS_DSCP_EF	/;"	d
+IPTOS_DSCP_LE	defines.h	/^# define	IPTOS_DSCP_LE	/;"	d
+IPTOS_LOWCOST	defines.h	/^# define IPTOS_LOWCOST /;"	d
+IPTOS_LOWDELAY	defines.h	/^# define IPTOS_LOWDELAY /;"	d
+IPTOS_MINCOST	defines.h	/^# define IPTOS_MINCOST /;"	d
+IPTOS_PREC_CRITIC_ECP	defines.h	/^# define IPTOS_PREC_CRITIC_ECP	/;"	d
+IPTOS_PREC_INTERNETCONTROL	defines.h	/^# define IPTOS_PREC_INTERNETCONTROL	/;"	d
+IPTOS_PREC_NETCONTROL	defines.h	/^# define IPTOS_PREC_NETCONTROL	/;"	d
+IPTOS_RELIABILITY	defines.h	/^# define IPTOS_RELIABILITY /;"	d
+IPTOS_THROUGHPUT	defines.h	/^# define IPTOS_THROUGHPUT /;"	d
+IP_TOS_IS_BROKEN	configure.ac	/^	AC_DEFINE([IP_TOS_IS_BROKEN])$/;"	d
+IP_TOS_IS_BROKEN	configure.ac	/^	AC_DEFINE([IP_TOS_IS_BROKEN], [1],$/;"	d
+IPv4or6	channels.c	/^	int IPv4or6;$/;"	m	struct:ssh_channels	typeref:typename:int	file:
+IPv4or6	ssh-keyscan.c	/^int IPv4or6 = AF_UNSPEC;$/;"	v	typeref:typename:int
+ISDOT	openbsd-compat/getcwd.c	/^#define	ISDOT(/;"	d	file:
+IS_INTERNAL_SFTP	session.c	/^#define IS_INTERNAL_SFTP(/;"	d	file:
+IS_LITTLE_ENDIAN	xmss_hash.h	/^#define IS_LITTLE_ENDIAN /;"	d
+IVSZ	openbsd-compat/arc4random.c	/^#define IVSZ	/;"	d	file:
+I_CHDIR	sftp.c	/^	I_CHDIR = 1,$/;"	e	enum:sftp_command	file:
+I_CHGRP	sftp.c	/^	I_CHGRP,$/;"	e	enum:sftp_command	file:
+I_CHMOD	sftp.c	/^	I_CHMOD,$/;"	e	enum:sftp_command	file:
+I_CHOWN	sftp.c	/^	I_CHOWN,$/;"	e	enum:sftp_command	file:
+I_COPY	sftp.c	/^	I_COPY,$/;"	e	enum:sftp_command	file:
+I_DF	sftp.c	/^	I_DF,$/;"	e	enum:sftp_command	file:
+I_GET	sftp.c	/^	I_GET,$/;"	e	enum:sftp_command	file:
+I_HELP	sftp.c	/^	I_HELP,$/;"	e	enum:sftp_command	file:
+I_LCHDIR	sftp.c	/^	I_LCHDIR,$/;"	e	enum:sftp_command	file:
+I_LINK	sftp.c	/^	I_LINK,$/;"	e	enum:sftp_command	file:
+I_LLS	sftp.c	/^	I_LLS,$/;"	e	enum:sftp_command	file:
+I_LMKDIR	sftp.c	/^	I_LMKDIR,$/;"	e	enum:sftp_command	file:
+I_LPWD	sftp.c	/^	I_LPWD,$/;"	e	enum:sftp_command	file:
+I_LS	sftp.c	/^	I_LS,$/;"	e	enum:sftp_command	file:
+I_LUMASK	sftp.c	/^	I_LUMASK,$/;"	e	enum:sftp_command	file:
+I_MKDIR	sftp.c	/^	I_MKDIR,$/;"	e	enum:sftp_command	file:
+I_PROGRESS	sftp.c	/^	I_PROGRESS,$/;"	e	enum:sftp_command	file:
+I_PUT	sftp.c	/^	I_PUT,$/;"	e	enum:sftp_command	file:
+I_PWD	sftp.c	/^	I_PWD,$/;"	e	enum:sftp_command	file:
+I_QUIT	sftp.c	/^	I_QUIT,$/;"	e	enum:sftp_command	file:
+I_REGET	sftp.c	/^	I_REGET,$/;"	e	enum:sftp_command	file:
+I_RENAME	sftp.c	/^	I_RENAME,$/;"	e	enum:sftp_command	file:
+I_REPUT	sftp.c	/^	I_REPUT,$/;"	e	enum:sftp_command	file:
+I_RM	sftp.c	/^	I_RM,$/;"	e	enum:sftp_command	file:
+I_RMDIR	sftp.c	/^	I_RMDIR,$/;"	e	enum:sftp_command	file:
+I_SHELL	sftp.c	/^	I_SHELL,$/;"	e	enum:sftp_command	file:
+I_SYMLINK	sftp.c	/^	I_SYMLINK,$/;"	e	enum:sftp_command	file:
+I_VERSION	sftp.c	/^	I_VERSION,$/;"	e	enum:sftp_command	file:
+Identity	ssh-agent.c	/^} Identity;$/;"	t	typeref:struct:identity	file:
+Identity	sshconnect2.c	/^typedef struct identity Identity;$/;"	t	typeref:struct:identity	file:
+Idlist	sshconnect2.c	/^typedef struct idlist Idlist;$/;"	t	typeref:struct:idlist	file:
+Iflag	regress/netcat.c	/^int	Iflag;					\/* TCP receive buffer size *\/$/;"	v	typeref:typename:int
+Inputs	sntrup761.c	/^typedef int8 Inputs[I]; \/* passed by reference *\/$/;"	t	typeref:typename:int8[I]	file:
+Inputs	sntrup761.c	/^typedef small Inputs[p]; \/* passed by reference *\/$/;"	t	typeref:typename:small[p]	file:
+Inputs_bytes	sntrup761.c	/^#define Inputs_bytes /;"	d	file:
+Inputs_encode	sntrup761.c	/^#define Inputs_encode /;"	d	file:
+Inputs_encode	sntrup761.c	/^static void Inputs_encode(unsigned char *s,const Inputs r)$/;"	f	typeref:typename:void	file:
+Inputs_random	sntrup761.c	/^#define Inputs_random /;"	d	file:
+Inputs_random	sntrup761.c	/^static void Inputs_random(Inputs r)$/;"	f	typeref:typename:void	file:
+K256	openbsd-compat/sha2.c	/^static const u_int32_t K256[64] = {$/;"	v	typeref:typename:const u_int32_t[64]	file:
+K512	openbsd-compat/sha2.c	/^static const u_int64_t K512[80] = {$/;"	v	typeref:typename:const u_int64_t[80]	file:
+K5LIBS	Makefile.in	/^K5LIBS=@K5LIBS@$/;"	m
+K5LIBS	configure.ac	/^AC_SUBST([K5LIBS])$/;"	s
+KDFNAME	sshkey.c	/^#define KDFNAME	/;"	d	file:
+KEM_KeyGen	sntrup761.c	/^static void KEM_KeyGen(unsigned char *pk,unsigned char *sk)$/;"	f	typeref:typename:void	file:
+KEX_C25519_SHA256	kex.h	/^	KEX_C25519_SHA256,$/;"	e	enum:kex_exchange
+KEX_CLIENT	myproposal.h	/^#define KEX_CLIENT /;"	d
+KEX_CLIENT_ENCRYPT	myproposal.h	/^#define KEX_CLIENT_ENCRYPT /;"	d
+KEX_CLIENT_KEX	myproposal.h	/^#define KEX_CLIENT_KEX /;"	d
+KEX_CLIENT_MAC	myproposal.h	/^#define KEX_CLIENT_MAC /;"	d
+KEX_COOKIE_LEN	kex.h	/^#define KEX_COOKIE_LEN	/;"	d
+KEX_CURVE25519_SHA256	kex.h	/^#define	KEX_CURVE25519_SHA256	/;"	d
+KEX_CURVE25519_SHA256_OLD	kex.h	/^#define	KEX_CURVE25519_SHA256_OLD	/;"	d
+KEX_DEFAULT_COMP	myproposal.h	/^#define	KEX_DEFAULT_COMP	/;"	d
+KEX_DEFAULT_LANG	myproposal.h	/^#define	KEX_DEFAULT_LANG	/;"	d
+KEX_DEFAULT_PK_ALG	myproposal.h	/^#define	KEX_DEFAULT_PK_ALG	/;"	d
+KEX_DH1	kex.h	/^#define	KEX_DH1	/;"	d
+KEX_DH14_SHA1	kex.h	/^#define	KEX_DH14_SHA1	/;"	d
+KEX_DH14_SHA256	kex.h	/^#define	KEX_DH14_SHA256	/;"	d
+KEX_DH16_SHA512	kex.h	/^#define	KEX_DH16_SHA512	/;"	d
+KEX_DH18_SHA512	kex.h	/^#define	KEX_DH18_SHA512	/;"	d
+KEX_DHGEX_SHA1	kex.h	/^#define	KEX_DHGEX_SHA1	/;"	d
+KEX_DHGEX_SHA256	kex.h	/^#define	KEX_DHGEX_SHA256	/;"	d
+KEX_DH_GEX_SHA1	kex.h	/^	KEX_DH_GEX_SHA1,$/;"	e	enum:kex_exchange
+KEX_DH_GEX_SHA256	kex.h	/^	KEX_DH_GEX_SHA256,$/;"	e	enum:kex_exchange
+KEX_DH_GRP14_SHA1	kex.h	/^	KEX_DH_GRP14_SHA1,$/;"	e	enum:kex_exchange
+KEX_DH_GRP14_SHA256	kex.h	/^	KEX_DH_GRP14_SHA256,$/;"	e	enum:kex_exchange
+KEX_DH_GRP16_SHA512	kex.h	/^	KEX_DH_GRP16_SHA512,$/;"	e	enum:kex_exchange
+KEX_DH_GRP18_SHA512	kex.h	/^	KEX_DH_GRP18_SHA512,$/;"	e	enum:kex_exchange
+KEX_DH_GRP1_SHA1	kex.h	/^	KEX_DH_GRP1_SHA1,$/;"	e	enum:kex_exchange
+KEX_ECDH_SHA2	kex.h	/^	KEX_ECDH_SHA2,$/;"	e	enum:kex_exchange
+KEX_ECDH_SHA2_NISTP256	kex.h	/^#define	KEX_ECDH_SHA2_NISTP256	/;"	d
+KEX_ECDH_SHA2_NISTP384	kex.h	/^#define	KEX_ECDH_SHA2_NISTP384	/;"	d
+KEX_ECDH_SHA2_NISTP521	kex.h	/^#define	KEX_ECDH_SHA2_NISTP521	/;"	d
+KEX_H	kex.h	/^#define KEX_H$/;"	d
+KEX_HAS_PUBKEY_HOSTBOUND	kex.h	/^#define KEX_HAS_PUBKEY_HOSTBOUND	/;"	d
+KEX_INITIAL	kex.h	/^#define KEX_INITIAL	/;"	d
+KEX_INIT_SENT	kex.h	/^#define KEX_INIT_SENT	/;"	d
+KEX_KEM_SNTRUP761X25519_SHA512	kex.h	/^	KEX_KEM_SNTRUP761X25519_SHA512,$/;"	e	enum:kex_exchange
+KEX_MAX	kex.h	/^	KEX_MAX$/;"	e	enum:kex_exchange
+KEX_RSA_SHA2_256_SUPPORTED	kex.h	/^#define KEX_RSA_SHA2_256_SUPPORTED /;"	d
+KEX_RSA_SHA2_512_SUPPORTED	kex.h	/^#define KEX_RSA_SHA2_512_SUPPORTED /;"	d
+KEX_SERVER	myproposal.h	/^#define KEX_SERVER /;"	d
+KEX_SERVER_ENCRYPT	myproposal.h	/^#define	KEX_SERVER_ENCRYPT /;"	d
+KEX_SERVER_KEX	myproposal.h	/^#define KEX_SERVER_KEX	/;"	d
+KEX_SERVER_MAC	myproposal.h	/^#define	KEX_SERVER_MAC /;"	d
+KEX_SNTRUP761X25519_SHA512	kex.h	/^#define	KEX_SNTRUP761X25519_SHA512	/;"	d
+KEY	ssh-keygen.1	/^.Sh KEY REVOCATION LISTS$/;"	s
+KEYSTREAM_ONLY	openbsd-compat/arc4random.c	/^#define KEYSTREAM_ONLY$/;"	d	file:
+KEYSZ	openbsd-compat/arc4random.c	/^#define KEYSZ	/;"	d	file:
+KEY_DSA	sshkey.h	/^	KEY_DSA,$/;"	e	enum:sshkey_types
+KEY_DSA_CERT	sshkey.h	/^	KEY_DSA_CERT,$/;"	e	enum:sshkey_types
+KEY_ECDSA	sshkey.h	/^	KEY_ECDSA,$/;"	e	enum:sshkey_types
+KEY_ECDSA_CERT	sshkey.h	/^	KEY_ECDSA_CERT,$/;"	e	enum:sshkey_types
+KEY_ECDSA_SK	sshkey.h	/^	KEY_ECDSA_SK,$/;"	e	enum:sshkey_types
+KEY_ECDSA_SK_CERT	sshkey.h	/^	KEY_ECDSA_SK_CERT,$/;"	e	enum:sshkey_types
+KEY_ED25519	sshkey.h	/^	KEY_ED25519,$/;"	e	enum:sshkey_types
+KEY_ED25519_CERT	sshkey.h	/^	KEY_ED25519_CERT,$/;"	e	enum:sshkey_types
+KEY_ED25519_SK	sshkey.h	/^	KEY_ED25519_SK,$/;"	e	enum:sshkey_types
+KEY_ED25519_SK_CERT	sshkey.h	/^	KEY_ED25519_SK_CERT,$/;"	e	enum:sshkey_types
+KEY_RSA	sshkey.h	/^	KEY_RSA,$/;"	e	enum:sshkey_types
+KEY_RSA_CERT	sshkey.h	/^	KEY_RSA_CERT,$/;"	e	enum:sshkey_types
+KEY_UNSPEC	sshkey.h	/^	KEY_UNSPEC$/;"	e	enum:sshkey_types
+KEY_XMSS	sshkey.h	/^	KEY_XMSS,$/;"	e	enum:sshkey_types
+KEY_XMSS_CERT	sshkey.h	/^	KEY_XMSS_CERT,$/;"	e	enum:sshkey_types
+KILO	openbsd-compat/fmt_scaled.c	/^	NONE = 0, KILO = 1, MEGA = 2, GIGA = 3, TERA = 4, PETA = 5, EXA = 6$/;"	e	enum:__anondc0b1e130103	file:
+KRL_DBG	krl.c	/^# define KRL_DBG(/;"	d	file:
+KRL_FORMAT_VERSION	krl.h	/^#define KRL_FORMAT_VERSION	/;"	d
+KRL_MAGIC	krl.h	/^#define KRL_MAGIC	/;"	d
+KRL_SECTION_CERTIFICATES	krl.h	/^#define KRL_SECTION_CERTIFICATES	/;"	d
+KRL_SECTION_CERT_KEY_ID	krl.h	/^#define KRL_SECTION_CERT_KEY_ID	/;"	d
+KRL_SECTION_CERT_SERIAL_BITMAP	krl.h	/^#define KRL_SECTION_CERT_SERIAL_BITMAP	/;"	d
+KRL_SECTION_CERT_SERIAL_LIST	krl.h	/^#define KRL_SECTION_CERT_SERIAL_LIST	/;"	d
+KRL_SECTION_CERT_SERIAL_RANGE	krl.h	/^#define KRL_SECTION_CERT_SERIAL_RANGE	/;"	d
+KRL_SECTION_EXPLICIT_KEY	krl.h	/^#define KRL_SECTION_EXPLICIT_KEY	/;"	d
+KRL_SECTION_FINGERPRINT_SHA1	krl.h	/^#define KRL_SECTION_FINGERPRINT_SHA1	/;"	d
+KRL_SECTION_FINGERPRINT_SHA256	krl.h	/^#define KRL_SECTION_FINGERPRINT_SHA256	/;"	d
+KRL_SECTION_SIGNATURE	krl.h	/^#define KRL_SECTION_SIGNATURE	/;"	d
+KT_DSA	ssh-keyscan.c	/^#define KT_DSA	/;"	d	file:
+KT_ECDSA	ssh-keyscan.c	/^#define KT_ECDSA	/;"	d	file:
+KT_ECDSA_SK	ssh-keyscan.c	/^#define KT_ECDSA_SK	/;"	d	file:
+KT_ED25519	ssh-keyscan.c	/^#define KT_ED25519	/;"	d	file:
+KT_ED25519_SK	ssh-keyscan.c	/^#define KT_ED25519_SK	/;"	d	file:
+KT_MAX	ssh-keyscan.c	/^#define KT_MAX	/;"	d	file:
+KT_MIN	ssh-keyscan.c	/^#define KT_MIN	/;"	d	file:
+KT_RSA	ssh-keyscan.c	/^#define KT_RSA	/;"	d	file:
+KT_XMSS	ssh-keyscan.c	/^#define KT_XMSS	/;"	d	file:
+KbdintAuthctxt	auth2-chall.c	/^struct KbdintAuthctxt$/;"	s	file:
+KbdintAuthctxt	auth2-chall.c	/^typedef struct KbdintAuthctxt KbdintAuthctxt;$/;"	t	typeref:struct:KbdintAuthctxt	file:
+KbdintDevice	auth.h	/^struct KbdintDevice$/;"	s
+KbdintDevice	auth.h	/^typedef struct KbdintDevice KbdintDevice;$/;"	t	typeref:struct:KbdintDevice
+KeyGen	sntrup761.c	/^static void KeyGen(Fq *A,small *a,const Fq *G)$/;"	f	typeref:typename:void	file:
+KeyGen	sntrup761.c	/^static void KeyGen(Fq *h,small *f,small *ginv)$/;"	f	typeref:typename:void	file:
+L1_KEY_LEN	umac.c	/^#define L1_KEY_LEN /;"	d	file:
+L1_KEY_SHIFT	umac.c	/^#define L1_KEY_SHIFT /;"	d	file:
+L1_PAD_BOUNDARY	umac.c	/^#define L1_PAD_BOUNDARY /;"	d	file:
+LARGE_MAXIMUM	moduli.c	/^#define LARGE_MAXIMUM	/;"	d	file:
+LARGE_MINIMUM	moduli.c	/^#define LARGE_MINIMUM	/;"	d	file:
+LASTLOG_FILE	defines.h	/^#      define LASTLOG_FILE /;"	d
+LASTLOG_FILE	defines.h	/^#    define LASTLOG_FILE /;"	d
+LASTLOG_WRITE_PUTUTXLINE	configure.ac	/^	AC_DEFINE([LASTLOG_WRITE_PUTUTXLINE], [1],$/;"	d
+LBRACE	openbsd-compat/glob.c	/^#define	LBRACE	/;"	d	file:
+LBRACKET	openbsd-compat/glob.c	/^#define	LBRACKET	/;"	d	file:
+LD	Makefile.in	/^LD=@LD@$/;"	m
+LD	configure.ac	/^AC_SUBST([LD])$/;"	s
+LD	openbsd-compat/Makefile.in	/^LD=@LD@$/;"	m
+LD	openbsd-compat/regress/Makefile.in	/^LD=@LD@$/;"	m
+LDFLAGS	Makefile.in	/^LDFLAGS=-L. -Lopenbsd-compat\/ @LDFLAGS@$/;"	m
+LDFLAGS	openbsd-compat/Makefile.in	/^LDFLAGS=-L. @LDFLAGS@$/;"	m
+LDFLAGS	openbsd-compat/regress/Makefile.in	/^LDFLAGS=@LDFLAGS@ $(LIBCOMPAT)$/;"	m
+LDFLAGS	regress/misc/fuzz-harness/Makefile	/^LDFLAGS=-L ..\/..\/.. -L ..\/..\/..\/openbsd-compat -g $(FUZZ_FLAGS)$/;"	m
+LDFLAGS_NOPIE	Makefile.in	/^LDFLAGS_NOPIE=-L. -Lopenbsd-compat\/ @LDFLAGS_NOPIE@$/;"	m
+LDFLAGS_NOPIE	configure.ac	/^AC_SUBST([LDFLAGS_NOPIE])$/;"	s
+LDFLAGS_NOPIE	openbsd-compat/Makefile.in	/^LDFLAGS_NOPIE=-L. -Lopenbsd-compat\/ @LDFLAGS_NOPIE@$/;"	m
+LDOUBLE	openbsd-compat/bsd-snprintf.c	/^# define LDOUBLE /;"	d	file:
+LEGACY_BEGIN	sshkey.c	/^#define LEGACY_BEGIN	/;"	d	file:
+LIB	regress/unittests/test_helper/Makefile	/^LIB=	test_helper$/;"	m
+LIBCOMPAT	Makefile.in	/^LIBCOMPAT=openbsd-compat\/libopenbsd-compat.a$/;"	m
+LIBCOMPAT	openbsd-compat/regress/Makefile.in	/^LIBCOMPAT=..\/libopenbsd-compat.a$/;"	m
+LIBCRYPTO_EVP_INL_TYPE	openbsd-compat/openssl-compat.h	/^# define LIBCRYPTO_EVP_INL_TYPE /;"	d
+LIBEDIT	Makefile.in	/^LIBEDIT=@LIBEDIT@$/;"	m
+LIBFIDO2	Makefile.in	/^LIBFIDO2=@LIBFIDO2@$/;"	m
+LIBFIDO2	configure.ac	/^		AC_SUBST([LIBFIDO2])$/;"	s
+LIBOPENSSH_OBJS	Makefile.in	/^LIBOPENSSH_OBJS=\\$/;"	m
+LIBS	Makefile.in	/^LIBS=@LIBS@$/;"	m
+LIBS	openbsd-compat/Makefile.in	/^LIBS=@LIBS@$/;"	m
+LIBS	openbsd-compat/regress/Makefile.in	/^LIBS=@LIBS@$/;"	m
+LIBS	regress/misc/fuzz-harness/Makefile	/^LIBS=-lssh -lopenbsd-compat -lmd -lcrypto -lfido2 -lcbor $(FUZZ_LIBS)$/;"	m
+LIBSSH_OBJS	Makefile.in	/^LIBSSH_OBJS=${LIBOPENSSH_OBJS} \\$/;"	m
+LINFO_HOSTSIZE	loginrec.h	/^#define LINFO_HOSTSIZE /;"	d
+LINFO_LINESIZE	loginrec.h	/^#define LINFO_LINESIZE /;"	d
+LINFO_NAMESIZE	loginrec.h	/^#define LINFO_NAMESIZE /;"	d
+LINFO_PROGSIZE	loginrec.h	/^#define LINFO_PROGSIZE /;"	d
+LINK_OPNOTSUPP_ERRNO	configure.ac	/^	AC_DEFINE([LINK_OPNOTSUPP_ERRNO], [EPERM],$/;"	d
+LINUX_OOM_ADJUST	configure.ac	/^	AC_DEFINE([LINUX_OOM_ADJUST], [1], [Adjust Linux out-of-memory killer])$/;"	d
+LIST_EMPTY	openbsd-compat/sys-queue.h	/^#define	LIST_EMPTY(/;"	d
+LIST_END	openbsd-compat/sys-queue.h	/^#define	LIST_END(/;"	d
+LIST_ENTRY	openbsd-compat/sys-queue.h	/^#define LIST_ENTRY(/;"	d
+LIST_FIRST	openbsd-compat/sys-queue.h	/^#define	LIST_FIRST(/;"	d
+LIST_FOREACH	openbsd-compat/sys-queue.h	/^#define LIST_FOREACH(/;"	d
+LIST_FOREACH_SAFE	openbsd-compat/sys-queue.h	/^#define	LIST_FOREACH_SAFE(/;"	d
+LIST_HEAD	openbsd-compat/sys-queue.h	/^#define LIST_HEAD(/;"	d
+LIST_HEAD_INITIALIZER	openbsd-compat/sys-queue.h	/^#define LIST_HEAD_INITIALIZER(/;"	d
+LIST_INIT	openbsd-compat/sys-queue.h	/^#define	LIST_INIT(/;"	d
+LIST_INSERT_AFTER	openbsd-compat/sys-queue.h	/^#define LIST_INSERT_AFTER(/;"	d
+LIST_INSERT_BEFORE	openbsd-compat/sys-queue.h	/^#define	LIST_INSERT_BEFORE(/;"	d
+LIST_INSERT_HEAD	openbsd-compat/sys-queue.h	/^#define LIST_INSERT_HEAD(/;"	d
+LIST_NEXT	openbsd-compat/sys-queue.h	/^#define	LIST_NEXT(/;"	d
+LIST_REMOVE	openbsd-compat/sys-queue.h	/^#define LIST_REMOVE(/;"	d
+LIST_REPLACE	openbsd-compat/sys-queue.h	/^#define LIST_REPLACE(/;"	d
+LITTLE_ENDIAN	defines.h	/^#  define LITTLE_ENDIAN /;"	d
+LLONG	openbsd-compat/bsd-snprintf.c	/^# define LLONG /;"	d	file:
+LLONG_MAX	defines.h	/^#define LLONG_MAX /;"	d
+LLONG_MAX	openbsd-compat/regress/strtonumtest.c	/^# define LLONG_MAX /;"	d	file:
+LLONG_MIN	defines.h	/^#define LLONG_MIN /;"	d
+LLONG_MIN	openbsd-compat/regress/strtonumtest.c	/^# define LLONG_MIN /;"	d	file:
+LLVMFuzzerTestOneInput	regress/misc/fuzz-harness/agent_fuzz.cc	/^int LLVMFuzzerTestOneInput(const uint8_t* s, size_t slen)$/;"	f	typeref:typename:int
+LLVMFuzzerTestOneInput	regress/misc/fuzz-harness/authkeys_fuzz.cc	/^int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size)$/;"	f	typeref:typename:int
+LLVMFuzzerTestOneInput	regress/misc/fuzz-harness/authopt_fuzz.cc	/^int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size)$/;"	f	typeref:typename:int
+LLVMFuzzerTestOneInput	regress/misc/fuzz-harness/kex_fuzz.cc	/^int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size)$/;"	f	typeref:typename:int
+LLVMFuzzerTestOneInput	regress/misc/fuzz-harness/privkey_fuzz.cc	/^int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size)$/;"	f	typeref:typename:int
+LLVMFuzzerTestOneInput	regress/misc/fuzz-harness/pubkey_fuzz.cc	/^int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size)$/;"	f	typeref:typename:int
+LLVMFuzzerTestOneInput	regress/misc/fuzz-harness/sig_fuzz.cc	/^int LLVMFuzzerTestOneInput(const uint8_t* sig, size_t slen)$/;"	f	typeref:typename:int
+LLVMFuzzerTestOneInput	regress/misc/fuzz-harness/sshsig_fuzz.cc	/^int LLVMFuzzerTestOneInput(const uint8_t* sig, size_t slen)$/;"	f	typeref:typename:int
+LLVMFuzzerTestOneInput	regress/misc/fuzz-harness/sshsigopt_fuzz.cc	/^int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size)$/;"	f	typeref:typename:int
+LOAD_UINT32_LITTLE	umac.c	/^#define LOAD_UINT32_LITTLE(/;"	d	file:
+LOAD_UINT32_REVERSED	umac.c	/^#define LOAD_UINT32_REVERSED(/;"	d	file:
+LOCAL	sftp.c	/^#define LOCAL	/;"	d	file:
+LOCKED_PASSWD_PREFIX	configure.ac	/^	AC_DEFINE([LOCKED_PASSWD_PREFIX], ["!"])$/;"	d
+LOCKED_PASSWD_PREFIX	configure.ac	/^	AC_DEFINE([LOCKED_PASSWD_PREFIX], ["!"],$/;"	d
+LOCKED_PASSWD_PREFIX	configure.ac	/^	AC_DEFINE([LOCKED_PASSWD_PREFIX], ["*LOCKED*"], [Account locked with pw(1)])$/;"	d
+LOCKED_PASSWD_STRING	configure.ac	/^	*)	AC_DEFINE([LOCKED_PASSWD_STRING], ["*LK*"])$/;"	d
+LOCKED_PASSWD_STRING	configure.ac	/^	AC_DEFINE([LOCKED_PASSWD_STRING], ["*"],$/;"	d
+LOCKED_PASSWD_STRING	configure.ac	/^	AC_DEFINE([LOCKED_PASSWD_STRING], ["*LK*"])$/;"	d
+LOCKED_PASSWD_SUBSTR	configure.ac	/^			AC_DEFINE([LOCKED_PASSWD_SUBSTR], ["Nologin"],$/;"	d
+LOCK_EX	openbsd-compat/bsd-misc.h	/^# define LOCK_EX	/;"	d
+LOCK_NB	openbsd-compat/bsd-misc.h	/^# define LOCK_NB	/;"	d
+LOCK_ROUNDS	ssh-agent.c	/^#define LOCK_ROUNDS	/;"	d	file:
+LOCK_SALT_SIZE	ssh-agent.c	/^#define LOCK_SALT_SIZE	/;"	d	file:
+LOCK_SH	openbsd-compat/bsd-misc.h	/^# define LOCK_SH	/;"	d
+LOCK_SIZE	ssh-agent.c	/^#define LOCK_SIZE	/;"	d	file:
+LOCK_UN	openbsd-compat/bsd-misc.h	/^# define LOCK_UN	/;"	d
+LOGIN	sshd.8	/^.Sh LOGIN PROCESS$/;"	s
+LOGIN_NEEDS_UTMPX	configure.ac	/^	AC_DEFINE([LOGIN_NEEDS_UTMPX])$/;"	d
+LOGIN_NEEDS_UTMPX	configure.ac	/^	AC_DEFINE([LOGIN_NEEDS_UTMPX], [1],$/;"	d
+LOG_STDERR_VIS	log.c	/^#define LOG_STDERR_VIS	/;"	d	file:
+LOG_SYSLOG_VIS	log.c	/^#define LOG_SYSLOG_VIS	/;"	d	file:
+LOW_BIT_MASK	umac.c	/^#define LOW_BIT_MASK /;"	d	file:
+LS_LONG_VIEW	sftp.c	/^#define LS_LONG_VIEW	/;"	d	file:
+LS_NAME_SORT	sftp.c	/^#define LS_NAME_SORT	/;"	d	file:
+LS_NUMERIC_VIEW	sftp.c	/^#define LS_NUMERIC_VIEW	/;"	d	file:
+LS_REVERSE_SORT	sftp.c	/^#define LS_REVERSE_SORT	/;"	d	file:
+LS_SHORT_VIEW	sftp.c	/^#define LS_SHORT_VIEW	/;"	d	file:
+LS_SHOW_ALL	sftp.c	/^#define LS_SHOW_ALL	/;"	d	file:
+LS_SIZE_SORT	sftp.c	/^#define LS_SIZE_SORT	/;"	d	file:
+LS_SI_UNITS	sftp.c	/^#define LS_SI_UNITS	/;"	d	file:
+LS_TIME_SORT	sftp.c	/^#define LS_TIME_SORT	/;"	d	file:
+LTESTS	regress/Makefile	/^LTESTS= 	connect \\$/;"	m
+LTYPE_LOGIN	loginrec.h	/^#define LTYPE_LOGIN /;"	d
+LTYPE_LOGOUT	loginrec.h	/^#define LTYPE_LOGOUT /;"	d
+L_CERT	ssh.c	/^#define L_CERT(/;"	d	file:
+L_PUBKEY	ssh.c	/^#define L_PUBKEY(/;"	d	file:
+LargeSieve	moduli.c	/^static u_int32_t *LargeSieve, largewords, largetries, largenumbers;$/;"	v	typeref:typename:u_int32_t *	file:
+License	contrib/redhat/openssh.spec	/^License: BSD$/;"	t
+License	contrib/suse/openssh.spec	/^License:	BSD$/;"	t
+LogLevel	log.h	/^}       LogLevel;$/;"	t	typeref:enum:__anon0fdff11d0203
+MAC_SEP	mac.c	/^#define	MAC_SEP	/;"	d	file:
+MAGIC_PREAMBLE	sshsig.c	/^#define MAGIC_PREAMBLE	/;"	d	file:
+MAGIC_PREAMBLE_LEN	sshsig.c	/^#define MAGIC_PREAMBLE_LEN	/;"	d	file:
+MAKE_CLONE	openbsd-compat/sha2.c	/^#define MAKE_CLONE(/;"	d	file:
+MANFMT	Makefile.in	/^MANFMT=@MANFMT@$/;"	m
+MANFMT	configure.ac	/^AC_SUBST([MANFMT])$/;"	s
+MANPAGES	Makefile.in	/^MANPAGES	= moduli.5.out scp.1.out ssh-add.1.out ssh-agent.1.out ssh-keygen.1.out ssh-keyscan.1.o/;"	m
+MANPAGES_IN	Makefile.in	/^MANPAGES_IN	= moduli.5 scp.1 ssh-add.1 ssh-agent.1 ssh-keygen.1 ssh-keyscan.1 ssh.1 sshd.8 sftp-/;"	m
+MANTYPE	Makefile.in	/^MANTYPE		= @MANTYPE@$/;"	m
+MANTYPE	configure.ac	/^AC_SUBST([MANTYPE])$/;"	s
+MAP_ANON	defines.h	/^#define MAP_ANON /;"	d
+MAP_FAILED	defines.h	/^# define MAP_FAILED /;"	d
+MARK_BEGIN	sshkey.c	/^#define MARK_BEGIN	/;"	d	file:
+MARK_BEGIN_LEN	sshkey.c	/^#define MARK_BEGIN_LEN	/;"	d	file:
+MARK_END	sshkey.c	/^#define MARK_END	/;"	d	file:
+MARK_END_LEN	sshkey.c	/^#define MARK_END_LEN	/;"	d	file:
+MASK	openbsd-compat/pwcache.c	/^#define	MASK	/;"	d	file:
+MATCH_BOTH	auth2.c	/^#define MATCH_BOTH	/;"	d	file:
+MATCH_H	match.h	/^#define MATCH_H$/;"	d
+MATCH_METHOD	auth2.c	/^#define MATCH_METHOD	/;"	d	file:
+MATCH_NONE	auth2.c	/^#define MATCH_NONE	/;"	d	file:
+MATCH_PARTIAL	auth2.c	/^#define MATCH_PARTIAL	/;"	d	file:
+MAX	defines.h	/^# define MAX(/;"	d
+MAX	openbsd-compat/bsd-snprintf.c	/^# define MAX(/;"	d	file:
+MAXARGLEN	sftp.c	/^#define MAXARGLEN	/;"	d	file:
+MAXARGS	sftp.c	/^#define MAXARGS	/;"	d	file:
+MAXCON	ssh-keyscan.c	/^#define MAXCON /;"	d	file:
+MAXIMUM	misc.h	/^#define MAXIMUM(/;"	d
+MAXMAXFD	ssh-keyscan.c	/^#define MAXMAXFD /;"	d	file:
+MAXPATHLEN	defines.h	/^#  define MAXPATHLEN /;"	d
+MAXSYMLINKS	defines.h	/^# define MAXSYMLINKS /;"	d
+MAX_AGENT_IDENTITIES	authfd.c	/^#define MAX_AGENT_IDENTITIES	/;"	d	file:
+MAX_AGENT_REPLY_LEN	authfd.c	/^#define MAX_AGENT_REPLY_LEN	/;"	d	file:
+MAX_CANON_DOMAINS	readconf.h	/^#define MAX_CANON_DOMAINS	/;"	d
+MAX_DIGITS	openbsd-compat/fmt_scaled.c	/^#define MAX_DIGITS /;"	d	file:
+MAX_DIR_DEPTH	sftp-client.c	/^#define MAX_DIR_DEPTH /;"	d	file:
+MAX_DISPLAYS	channels.c	/^#define MAX_DISPLAYS /;"	d	file:
+MAX_FIDO_DEVICES	sk-usbhid.c	/^#define MAX_FIDO_DEVICES	/;"	d	file:
+MAX_KEY_FILE_SIZE	authfile.c	/^#define MAX_KEY_FILE_SIZE	/;"	d	file:
+MAX_LISTEN_SOCKS	sshd.c	/^#define	MAX_LISTEN_SOCKS	/;"	d	file:
+MAX_MESSAGES	regress/misc/fuzz-harness/agent_fuzz_helper.c	/^#define MAX_MESSAGES /;"	d	file:
+MAX_MODIFICATIONS	regress/modpipe.c	/^#define MAX_MODIFICATIONS /;"	d	file:
+MAX_MSG_LENGTH	ssh-pkcs11-helper.c	/^#define MAX_MSG_LENGTH	/;"	d	file:
+MAX_OTHER_NAMES	sshconnect.c	/^#define MAX_OTHER_NAMES	/;"	d	file:
+MAX_PACKETS	packet.c	/^#define MAX_PACKETS	/;"	d	file:
+MAX_PASSWORD_LEN	auth-passwd.c	/^#define MAX_PASSWORD_LEN	/;"	d	file:
+MAX_PORTS	servconf.h	/^#define MAX_PORTS	/;"	d
+MAX_PROP	match.c	/^#define	MAX_PROP	/;"	d	file:
+MAX_SUBSYSTEMS	servconf.h	/^#define MAX_SUBSYSTEMS	/;"	d
+MAX_WINSIZE	progressmeter.c	/^#define MAX_WINSIZE /;"	d	file:
+MAYBE_DUP	channels.c	/^#define MAYBE_DUP(/;"	d	file:
+MA_DQUOTE	sftp.c	/^	enum { MA_START, MA_SQUOTE, MA_DQUOTE, MA_UNQUOTED } state, q;$/;"	e	enum:makeargv::__anon1b9787330103	file:
+MA_SQUOTE	sftp.c	/^	enum { MA_START, MA_SQUOTE, MA_DQUOTE, MA_UNQUOTED } state, q;$/;"	e	enum:makeargv::__anon1b9787330103	file:
+MA_START	sftp.c	/^	enum { MA_START, MA_SQUOTE, MA_DQUOTE, MA_UNQUOTED } state, q;$/;"	e	enum:makeargv::__anon1b9787330103	file:
+MA_UNQUOTED	sftp.c	/^	enum { MA_START, MA_SQUOTE, MA_DQUOTE, MA_UNQUOTED } state, q;$/;"	e	enum:makeargv::__anon1b9787330103	file:
+MD5Context	openbsd-compat/md5.h	/^typedef struct MD5Context {$/;"	s
+MD5Final	openbsd-compat/md5.c	/^MD5Final(unsigned char digest[MD5_DIGEST_LENGTH], MD5_CTX *ctx)$/;"	f	typeref:typename:void
+MD5Init	openbsd-compat/md5.c	/^MD5Init(MD5_CTX *ctx)$/;"	f	typeref:typename:void
+MD5Pad	openbsd-compat/md5.c	/^MD5Pad(MD5_CTX *ctx)$/;"	f	typeref:typename:void
+MD5STEP	openbsd-compat/md5.c	/^#define MD5STEP(/;"	d	file:
+MD5Transform	openbsd-compat/md5.c	/^MD5Transform(u_int32_t state[4], const u_int8_t block[MD5_BLOCK_LENGTH])$/;"	f	typeref:typename:void
+MD5Update	openbsd-compat/md5.c	/^MD5Update(MD5_CTX *ctx, const unsigned char *input, size_t len)$/;"	f	typeref:typename:void
+MD5_BLOCK_LENGTH	openbsd-compat/md5.h	/^#define	MD5_BLOCK_LENGTH	/;"	d
+MD5_CTX	openbsd-compat/md5.h	/^} MD5_CTX;$/;"	t	typeref:struct:MD5Context
+MD5_DIGEST_LENGTH	openbsd-compat/md5.h	/^#define	MD5_DIGEST_LENGTH	/;"	d
+MD5_DIGEST_STRING_LENGTH	openbsd-compat/md5.h	/^#define	MD5_DIGEST_STRING_LENGTH	/;"	d
+MEGA	openbsd-compat/fmt_scaled.c	/^	NONE = 0, KILO = 1, MEGA = 2, GIGA = 3, TERA = 4, PETA = 5, EXA = 6$/;"	e	enum:__anondc0b1e130103	file:
+META	openbsd-compat/glob.c	/^#define	META(/;"	d	file:
+MIN	defines.h	/^# define MIN(/;"	d
+MINIMUM	misc.h	/^#define MINIMUM(/;"	d
+MINIMUM	openbsd-compat/bcrypt_pbkdf.c	/^#define	MINIMUM(/;"	d	file:
+MINIMUM	openbsd-compat/xcrypt.c	/^#define MINIMUM(/;"	d	file:
+MINIMUM	regress/unittests/test_helper/test_helper.c	/^#define MINIMUM(/;"	d	file:
+MINUTES	misc.c	/^#define MINUTES	/;"	d	file:
+MIN_FAIL_DELAY_SECONDS	auth2.c	/^#define MIN_FAIL_DELAY_SECONDS /;"	d	file:
+MIN_READ_SIZE	sftp-client.c	/^#define MIN_READ_SIZE	/;"	d	file:
+MIN_SIZEOF	loginrec.c	/^#define MIN_SIZEOF(/;"	d	file:
+MKBN	regress/unittests/sshbuf/test_sshbuf_getput_crypto.c	/^#define MKBN(/;"	d	file:
+MKDIR_P	Makefile.in	/^MKDIR_P=@MKDIR_P@$/;"	m
+MKDIR_P	contrib/cygwin/Makefile	/^MKDIR_P=$(srcdir)\/mkinstalldirs$/;"	m
+MKTEMP_DIR	openbsd-compat/mktemp.c	/^#define MKTEMP_DIR	/;"	d	file:
+MKTEMP_FILE	openbsd-compat/mktemp.c	/^#define MKTEMP_FILE	/;"	d	file:
+MKTEMP_NAME	openbsd-compat/mktemp.c	/^#define MKTEMP_NAME	/;"	d	file:
+MM_HOSTKEY	monitor_wrap.h	/^enum mm_keytype { MM_NOKEY, MM_HOSTKEY, MM_USERKEY };$/;"	e	enum:mm_keytype
+MM_MEMSIZE	monitor.c	/^#define MM_MEMSIZE	/;"	d	file:
+MM_NOKEY	monitor_wrap.h	/^enum mm_keytype { MM_NOKEY, MM_HOSTKEY, MM_USERKEY };$/;"	e	enum:mm_keytype
+MM_USERKEY	monitor_wrap.h	/^enum mm_keytype { MM_NOKEY, MM_HOSTKEY, MM_USERKEY };$/;"	e	enum:mm_keytype
+MNAMELEN	openbsd-compat/bsd-statvfs.c	/^# define MNAMELEN /;"	d	file:
+MODE_IN	kex.h	/^	MODE_IN,$/;"	e	enum:kex_modes
+MODE_MAX	kex.h	/^	MODE_MAX$/;"	e	enum:kex_modes
+MODE_OUT	kex.h	/^	MODE_OUT,$/;"	e	enum:kex_modes
+MODE_SCP	scp.c	/^	MODE_SCP,$/;"	e	enum:scp_mode_e	file:
+MODE_SFTP	scp.c	/^	MODE_SFTP$/;"	e	enum:scp_mode_e	file:
+MODULI	ssh-keygen.1	/^.Sh MODULI GENERATION$/;"	s
+MODULI_TESTS_COMPOSITE	dh.h	/^#define MODULI_TESTS_COMPOSITE	/;"	d
+MODULI_TESTS_ELLIPTIC	dh.h	/^#define MODULI_TESTS_ELLIPTIC	/;"	d
+MODULI_TESTS_JACOBI	dh.h	/^#define MODULI_TESTS_JACOBI	/;"	d
+MODULI_TESTS_MILLER_RABIN	dh.h	/^#define MODULI_TESTS_MILLER_RABIN	/;"	d
+MODULI_TESTS_SIEVE	dh.h	/^#define MODULI_TESTS_SIEVE	/;"	d
+MODULI_TESTS_UNTESTED	dh.h	/^#define MODULI_TESTS_UNTESTED	/;"	d
+MODULI_TYPE_SAFE	dh.h	/^#define MODULI_TYPE_SAFE	/;"	d
+MODULI_TYPE_SCHNORR	dh.h	/^#define MODULI_TYPE_SCHNORR	/;"	d
+MODULI_TYPE_SOPHIE_GERMAIN	dh.h	/^#define MODULI_TYPE_SOPHIE_GERMAIN	/;"	d
+MODULI_TYPE_STRONG	dh.h	/^#define MODULI_TYPE_STRONG	/;"	d
+MODULI_TYPE_UNKNOWN	dh.h	/^#define MODULI_TYPE_UNKNOWN	/;"	d
+MODULI_TYPE_UNSTRUCTURED	dh.h	/^#define MODULI_TYPE_UNSTRUCTURED	/;"	d
+MOD_AND_OR	regress/modpipe.c	/^	enum { MOD_XOR, MOD_AND_OR } what;$/;"	e	enum:modification::__anonde2ca40e0103	file:
+MOD_XOR	regress/modpipe.c	/^	enum { MOD_XOR, MOD_AND_OR } what;$/;"	e	enum:modification::__anonde2ca40e0103	file:
+MONITOR_ANS_AUTH2_READ_BANNER	monitor.h	/^	MONITOR_REQ_AUTH2_READ_BANNER = 10, MONITOR_ANS_AUTH2_READ_BANNER = 11,$/;"	e	enum:monitor_reqtype
+MONITOR_ANS_AUTHPASSWORD	monitor.h	/^	MONITOR_REQ_AUTHPASSWORD = 12, MONITOR_ANS_AUTHPASSWORD = 13,$/;"	e	enum:monitor_reqtype
+MONITOR_ANS_BSDAUTHQUERY	monitor.h	/^	MONITOR_REQ_BSDAUTHQUERY = 14, MONITOR_ANS_BSDAUTHQUERY = 15,$/;"	e	enum:monitor_reqtype
+MONITOR_ANS_BSDAUTHRESPOND	monitor.h	/^	MONITOR_REQ_BSDAUTHRESPOND = 16, MONITOR_ANS_BSDAUTHRESPOND = 17,$/;"	e	enum:monitor_reqtype
+MONITOR_ANS_GSSCHECKMIC	monitor.h	/^	MONITOR_REQ_GSSCHECKMIC = 48, MONITOR_ANS_GSSCHECKMIC = 49,$/;"	e	enum:monitor_reqtype
+MONITOR_ANS_GSSSETUP	monitor.h	/^	MONITOR_REQ_GSSSETUP = 42, MONITOR_ANS_GSSSETUP = 43,$/;"	e	enum:monitor_reqtype
+MONITOR_ANS_GSSSTEP	monitor.h	/^	MONITOR_REQ_GSSSTEP = 44, MONITOR_ANS_GSSSTEP = 45,$/;"	e	enum:monitor_reqtype
+MONITOR_ANS_GSSUSEROK	monitor.h	/^	MONITOR_REQ_GSSUSEROK = 46, MONITOR_ANS_GSSUSEROK = 47,$/;"	e	enum:monitor_reqtype
+MONITOR_ANS_KEYALLOWED	monitor.h	/^	MONITOR_REQ_KEYALLOWED = 22, MONITOR_ANS_KEYALLOWED = 23,$/;"	e	enum:monitor_reqtype
+MONITOR_ANS_KEYVERIFY	monitor.h	/^	MONITOR_REQ_KEYVERIFY = 24, MONITOR_ANS_KEYVERIFY = 25,$/;"	e	enum:monitor_reqtype
+MONITOR_ANS_MODULI	monitor.h	/^	MONITOR_REQ_MODULI = 0, MONITOR_ANS_MODULI = 1,$/;"	e	enum:monitor_reqtype
+MONITOR_ANS_PAM_ACCOUNT	monitor.h	/^	MONITOR_REQ_PAM_ACCOUNT = 102, MONITOR_ANS_PAM_ACCOUNT = 103,$/;"	e	enum:monitor_reqtype
+MONITOR_ANS_PAM_FREE_CTX	monitor.h	/^	MONITOR_REQ_PAM_FREE_CTX = 110, MONITOR_ANS_PAM_FREE_CTX = 111,$/;"	e	enum:monitor_reqtype
+MONITOR_ANS_PAM_INIT_CTX	monitor.h	/^	MONITOR_REQ_PAM_INIT_CTX = 104, MONITOR_ANS_PAM_INIT_CTX = 105,$/;"	e	enum:monitor_reqtype
+MONITOR_ANS_PAM_QUERY	monitor.h	/^	MONITOR_REQ_PAM_QUERY = 106, MONITOR_ANS_PAM_QUERY = 107,$/;"	e	enum:monitor_reqtype
+MONITOR_ANS_PAM_RESPOND	monitor.h	/^	MONITOR_REQ_PAM_RESPOND = 108, MONITOR_ANS_PAM_RESPOND = 109,$/;"	e	enum:monitor_reqtype
+MONITOR_ANS_PTY	monitor.h	/^	MONITOR_REQ_PTY = 28, MONITOR_ANS_PTY = 29,$/;"	e	enum:monitor_reqtype
+MONITOR_ANS_PWNAM	monitor.h	/^	MONITOR_REQ_PWNAM = 8, MONITOR_ANS_PWNAM = 9,$/;"	e	enum:monitor_reqtype
+MONITOR_ANS_RSACHALLENGE	monitor.h	/^	MONITOR_REQ_RSACHALLENGE = 38, MONITOR_ANS_RSACHALLENGE = 39,$/;"	e	enum:monitor_reqtype
+MONITOR_ANS_RSAKEYALLOWED	monitor.h	/^	MONITOR_REQ_RSAKEYALLOWED = 36, MONITOR_ANS_RSAKEYALLOWED = 37,$/;"	e	enum:monitor_reqtype
+MONITOR_ANS_RSARESPONSE	monitor.h	/^	MONITOR_REQ_RSARESPONSE = 40, MONITOR_ANS_RSARESPONSE = 41,$/;"	e	enum:monitor_reqtype
+MONITOR_ANS_SESSKEY	monitor.h	/^	MONITOR_REQ_SESSKEY = 32, MONITOR_ANS_SESSKEY = 33,$/;"	e	enum:monitor_reqtype
+MONITOR_ANS_SIGN	monitor.h	/^	MONITOR_REQ_SIGN = 6, MONITOR_ANS_SIGN = 7,$/;"	e	enum:monitor_reqtype
+MONITOR_REQ_AUDIT_COMMAND	monitor.h	/^	MONITOR_REQ_AUDIT_EVENT = 112, MONITOR_REQ_AUDIT_COMMAND = 113,$/;"	e	enum:monitor_reqtype
+MONITOR_REQ_AUDIT_EVENT	monitor.h	/^	MONITOR_REQ_AUDIT_EVENT = 112, MONITOR_REQ_AUDIT_COMMAND = 113,$/;"	e	enum:monitor_reqtype
+MONITOR_REQ_AUTH2_READ_BANNER	monitor.h	/^	MONITOR_REQ_AUTH2_READ_BANNER = 10, MONITOR_ANS_AUTH2_READ_BANNER = 11,$/;"	e	enum:monitor_reqtype
+MONITOR_REQ_AUTHPASSWORD	monitor.h	/^	MONITOR_REQ_AUTHPASSWORD = 12, MONITOR_ANS_AUTHPASSWORD = 13,$/;"	e	enum:monitor_reqtype
+MONITOR_REQ_AUTHSERV	monitor.h	/^	MONITOR_REQ_AUTHSERV = 4,$/;"	e	enum:monitor_reqtype
+MONITOR_REQ_BSDAUTHQUERY	monitor.h	/^	MONITOR_REQ_BSDAUTHQUERY = 14, MONITOR_ANS_BSDAUTHQUERY = 15,$/;"	e	enum:monitor_reqtype
+MONITOR_REQ_BSDAUTHRESPOND	monitor.h	/^	MONITOR_REQ_BSDAUTHRESPOND = 16, MONITOR_ANS_BSDAUTHRESPOND = 17,$/;"	e	enum:monitor_reqtype
+MONITOR_REQ_FREE	monitor.h	/^	MONITOR_REQ_FREE = 2,$/;"	e	enum:monitor_reqtype
+MONITOR_REQ_GSSCHECKMIC	monitor.h	/^	MONITOR_REQ_GSSCHECKMIC = 48, MONITOR_ANS_GSSCHECKMIC = 49,$/;"	e	enum:monitor_reqtype
+MONITOR_REQ_GSSSETUP	monitor.h	/^	MONITOR_REQ_GSSSETUP = 42, MONITOR_ANS_GSSSETUP = 43,$/;"	e	enum:monitor_reqtype
+MONITOR_REQ_GSSSTEP	monitor.h	/^	MONITOR_REQ_GSSSTEP = 44, MONITOR_ANS_GSSSTEP = 45,$/;"	e	enum:monitor_reqtype
+MONITOR_REQ_GSSUSEROK	monitor.h	/^	MONITOR_REQ_GSSUSEROK = 46, MONITOR_ANS_GSSUSEROK = 47,$/;"	e	enum:monitor_reqtype
+MONITOR_REQ_KEYALLOWED	monitor.h	/^	MONITOR_REQ_KEYALLOWED = 22, MONITOR_ANS_KEYALLOWED = 23,$/;"	e	enum:monitor_reqtype
+MONITOR_REQ_KEYEXPORT	monitor.h	/^	MONITOR_REQ_KEYEXPORT = 26,$/;"	e	enum:monitor_reqtype
+MONITOR_REQ_KEYVERIFY	monitor.h	/^	MONITOR_REQ_KEYVERIFY = 24, MONITOR_ANS_KEYVERIFY = 25,$/;"	e	enum:monitor_reqtype
+MONITOR_REQ_MODULI	monitor.h	/^	MONITOR_REQ_MODULI = 0, MONITOR_ANS_MODULI = 1,$/;"	e	enum:monitor_reqtype
+MONITOR_REQ_PAM_ACCOUNT	monitor.h	/^	MONITOR_REQ_PAM_ACCOUNT = 102, MONITOR_ANS_PAM_ACCOUNT = 103,$/;"	e	enum:monitor_reqtype
+MONITOR_REQ_PAM_FREE_CTX	monitor.h	/^	MONITOR_REQ_PAM_FREE_CTX = 110, MONITOR_ANS_PAM_FREE_CTX = 111,$/;"	e	enum:monitor_reqtype
+MONITOR_REQ_PAM_INIT_CTX	monitor.h	/^	MONITOR_REQ_PAM_INIT_CTX = 104, MONITOR_ANS_PAM_INIT_CTX = 105,$/;"	e	enum:monitor_reqtype
+MONITOR_REQ_PAM_QUERY	monitor.h	/^	MONITOR_REQ_PAM_QUERY = 106, MONITOR_ANS_PAM_QUERY = 107,$/;"	e	enum:monitor_reqtype
+MONITOR_REQ_PAM_RESPOND	monitor.h	/^	MONITOR_REQ_PAM_RESPOND = 108, MONITOR_ANS_PAM_RESPOND = 109,$/;"	e	enum:monitor_reqtype
+MONITOR_REQ_PAM_START	monitor.h	/^	MONITOR_REQ_PAM_START = 100,$/;"	e	enum:monitor_reqtype
+MONITOR_REQ_PTY	monitor.h	/^	MONITOR_REQ_PTY = 28, MONITOR_ANS_PTY = 29,$/;"	e	enum:monitor_reqtype
+MONITOR_REQ_PTYCLEANUP	monitor.h	/^	MONITOR_REQ_PTYCLEANUP = 30,$/;"	e	enum:monitor_reqtype
+MONITOR_REQ_PWNAM	monitor.h	/^	MONITOR_REQ_PWNAM = 8, MONITOR_ANS_PWNAM = 9,$/;"	e	enum:monitor_reqtype
+MONITOR_REQ_RSACHALLENGE	monitor.h	/^	MONITOR_REQ_RSACHALLENGE = 38, MONITOR_ANS_RSACHALLENGE = 39,$/;"	e	enum:monitor_reqtype
+MONITOR_REQ_RSAKEYALLOWED	monitor.h	/^	MONITOR_REQ_RSAKEYALLOWED = 36, MONITOR_ANS_RSAKEYALLOWED = 37,$/;"	e	enum:monitor_reqtype
+MONITOR_REQ_RSARESPONSE	monitor.h	/^	MONITOR_REQ_RSARESPONSE = 40, MONITOR_ANS_RSARESPONSE = 41,$/;"	e	enum:monitor_reqtype
+MONITOR_REQ_SESSID	monitor.h	/^	MONITOR_REQ_SESSID = 34,$/;"	e	enum:monitor_reqtype
+MONITOR_REQ_SESSKEY	monitor.h	/^	MONITOR_REQ_SESSKEY = 32, MONITOR_ANS_SESSKEY = 33,$/;"	e	enum:monitor_reqtype
+MONITOR_REQ_SIGN	monitor.h	/^	MONITOR_REQ_SIGN = 6, MONITOR_ANS_SIGN = 7,$/;"	e	enum:monitor_reqtype
+MONITOR_REQ_TERM	monitor.h	/^	MONITOR_REQ_TERM = 50,$/;"	e	enum:monitor_reqtype
+MON_ALOG	monitor.c	/^#define MON_ALOG	/;"	d	file:
+MON_AUTH	monitor.c	/^#define MON_AUTH	/;"	d	file:
+MON_AUTHDECIDE	monitor.c	/^#define MON_AUTHDECIDE	/;"	d	file:
+MON_ISAUTH	monitor.c	/^#define MON_ISAUTH	/;"	d	file:
+MON_ONCE	monitor.c	/^#define MON_ONCE	/;"	d	file:
+MON_PERMIT	monitor.c	/^#define MON_PERMIT	/;"	d	file:
+MRK_CA	hostfile.h	/^	MRK_ERROR, MRK_NONE, MRK_REVOKE, MRK_CA$/;"	e	enum:__anon547b26990203
+MRK_ERROR	hostfile.h	/^	MRK_ERROR, MRK_NONE, MRK_REVOKE, MRK_CA$/;"	e	enum:__anon547b26990203
+MRK_NONE	hostfile.h	/^	MRK_ERROR, MRK_NONE, MRK_REVOKE, MRK_CA$/;"	e	enum:__anon547b26990203
+MRK_REVOKE	hostfile.h	/^	MRK_ERROR, MRK_NONE, MRK_REVOKE, MRK_CA$/;"	e	enum:__anon547b26990203
+MSGBUFSIZ	log.c	/^#define MSGBUFSIZ /;"	d	file:
+MUL64	umac.c	/^#define MUL64(/;"	d	file:
+MUL_NO_OVERFLOW	openbsd-compat/reallocarray.c	/^#define MUL_NO_OVERFLOW	/;"	d	file:
+MUL_NO_OVERFLOW	openbsd-compat/recallocarray.c	/^#define MUL_NO_OVERFLOW /;"	d	file:
+MUX_C_ALIVE_CHECK	mux.c	/^#define MUX_C_ALIVE_CHECK	/;"	d	file:
+MUX_C_CLOSE_FWD	mux.c	/^#define MUX_C_CLOSE_FWD	/;"	d	file:
+MUX_C_NEW_SESSION	mux.c	/^#define MUX_C_NEW_SESSION	/;"	d	file:
+MUX_C_NEW_STDIO_FWD	mux.c	/^#define MUX_C_NEW_STDIO_FWD	/;"	d	file:
+MUX_C_OPEN_FWD	mux.c	/^#define MUX_C_OPEN_FWD	/;"	d	file:
+MUX_C_PROXY	mux.c	/^#define MUX_C_PROXY	/;"	d	file:
+MUX_C_STOP_LISTENING	mux.c	/^#define MUX_C_STOP_LISTENING	/;"	d	file:
+MUX_C_TERMINATE	mux.c	/^#define MUX_C_TERMINATE	/;"	d	file:
+MUX_FWD_DYNAMIC	mux.c	/^#define MUX_FWD_DYNAMIC /;"	d	file:
+MUX_FWD_LOCAL	mux.c	/^#define MUX_FWD_LOCAL /;"	d	file:
+MUX_FWD_REMOTE	mux.c	/^#define MUX_FWD_REMOTE /;"	d	file:
+MUX_MAX_ENV_VARS	mux.c	/^#define MUX_MAX_ENV_VARS	/;"	d	file:
+MUX_MSG_HELLO	mux.c	/^#define MUX_MSG_HELLO	/;"	d	file:
+MUX_S_ALIVE	mux.c	/^#define MUX_S_ALIVE	/;"	d	file:
+MUX_S_EXIT_MESSAGE	mux.c	/^#define MUX_S_EXIT_MESSAGE	/;"	d	file:
+MUX_S_FAILURE	mux.c	/^#define MUX_S_FAILURE	/;"	d	file:
+MUX_S_OK	mux.c	/^#define MUX_S_OK	/;"	d	file:
+MUX_S_PERMISSION_DENIED	mux.c	/^#define MUX_S_PERMISSION_DENIED	/;"	d	file:
+MUX_S_PROXY	mux.c	/^#define MUX_S_PROXY	/;"	d	file:
+MUX_S_REMOTE_PORT	mux.c	/^#define MUX_S_REMOTE_PORT	/;"	d	file:
+MUX_S_SESSION_OPENED	mux.c	/^#define MUX_S_SESSION_OPENED	/;"	d	file:
+MUX_S_TTY_ALLOC_FAIL	mux.c	/^#define MUX_S_TTY_ALLOC_FAIL	/;"	d	file:
+M_ALL	openbsd-compat/glob.c	/^#define	M_ALL	/;"	d	file:
+M_ASCII	openbsd-compat/glob.c	/^#define	M_ASCII	/;"	d	file:
+M_CLASS	openbsd-compat/glob.c	/^#define	M_CLASS	/;"	d	file:
+M_CP_INTOPT	servconf.c	/^#define M_CP_INTOPT(/;"	d	file:
+M_CP_STRARRAYOPT	monitor.c	/^#define M_CP_STRARRAYOPT(/;"	d	file:
+M_CP_STRARRAYOPT	monitor_wrap.c	/^#define M_CP_STRARRAYOPT(/;"	d	file:
+M_CP_STRARRAYOPT	servconf.c	/^#define M_CP_STRARRAYOPT(/;"	d	file:
+M_CP_STROPT	monitor.c	/^#define M_CP_STROPT(/;"	d	file:
+M_CP_STROPT	monitor_wrap.c	/^#define M_CP_STROPT(/;"	d	file:
+M_CP_STROPT	servconf.c	/^#define M_CP_STROPT(/;"	d	file:
+M_END	openbsd-compat/glob.c	/^#define	M_END	/;"	d	file:
+M_MASK	openbsd-compat/glob.c	/^#define	M_MASK	/;"	d	file:
+M_NOT	openbsd-compat/glob.c	/^#define	M_NOT	/;"	d	file:
+M_ONE	openbsd-compat/glob.c	/^#define	M_ONE	/;"	d	file:
+M_PROTECT	openbsd-compat/glob.c	/^#define	M_PROTECT	/;"	d	file:
+M_QUOTE	openbsd-compat/glob.c	/^#define	M_QUOTE	/;"	d	file:
+M_RNG	openbsd-compat/glob.c	/^#define	M_RNG	/;"	d	file:
+M_SET	openbsd-compat/glob.c	/^#define	M_SET	/;"	d	file:
+Maj	openbsd-compat/sha2.c	/^#define Maj(/;"	d	file:
+NAME	contrib/ssh-copy-id.1	/^.Sh NAME$/;"	s
+NAME	moduli.5	/^.Sh NAME$/;"	s
+NAME	scp.1	/^.Sh NAME$/;"	s
+NAME	sftp-server.8	/^.Sh NAME$/;"	s
+NAME	sftp.1	/^.Sh NAME$/;"	s
+NAME	ssh-add.1	/^.Sh NAME$/;"	s
+NAME	ssh-agent.1	/^.Sh NAME$/;"	s
+NAME	ssh-keygen.1	/^.Sh NAME$/;"	s
+NAME	ssh-keyscan.1	/^.Sh NAME$/;"	s
+NAME	ssh-keysign.8	/^.Sh NAME$/;"	s
+NAME	ssh-pkcs11-helper.8	/^.Sh NAME$/;"	s
+NAME	ssh-sk-helper.8	/^.Sh NAME$/;"	s
+NAME	ssh.1	/^.Sh NAME$/;"	s
+NAME	ssh_config.5	/^.Sh NAME$/;"	s
+NAME	sshd.8	/^.Sh NAME$/;"	s
+NAME	sshd_config.5	/^.Sh NAME$/;"	s
+NAMLEN	openbsd-compat/bsd-closefrom.c	/^# define NAMLEN(/;"	d	file:
+NCACHE	openbsd-compat/pwcache.c	/^#define	NCACHE	/;"	d	file:
+NCCLASSES	openbsd-compat/charclass.h	/^#define NCCLASSES	/;"	d
+NCMP	sftp.c	/^#define NCMP(/;"	d	file:
+NEED_SETPGRP	configure.ac	/^	AC_DEFINE([NEED_SETPGRP], [1], [Need setpgrp to acquire controlling tty])$/;"	d
+NEED_SETPGRP	configure.ac	/^	AC_DEFINE([NEED_SETPGRP], [1], [Need setpgrp to for controlling tty])$/;"	d
+NFDBITS	defines.h	/^# define	NFDBITS /;"	d
+NGROUPS_MAX	defines.h	/^#define NGROUPS_MAX /;"	d
+NGROUPS_MAX	openbsd-compat/bsd-nextstep.h	/^#define NGROUPS_MAX /;"	d
+NI_MAXHOST	openbsd-compat/fake-rfc2553.h	/^# define NI_MAXHOST /;"	d
+NI_MAXSERV	openbsd-compat/fake-rfc2553.h	/^# define NI_MAXSERV /;"	d
+NI_NAMEREQD	openbsd-compat/fake-rfc2553.h	/^# define NI_NAMEREQD /;"	d
+NI_NUMERICHOST	openbsd-compat/fake-rfc2553.h	/^# define NI_NUMERICHOST /;"	d
+NI_NUMERICSERV	openbsd-compat/fake-rfc2553.h	/^# define NI_NUMERICSERV /;"	d
+NKEYS	kex.c	/^#define NKEYS	/;"	d	file:
+NL	openbsd-compat/bsd-cygwin_util.c	/^#define NL(/;"	d	file:
+NOARGS	sftp.c	/^#define NOARGS	/;"	d	file:
+NOMAN	regress/misc/sk-dummy/Makefile	/^NOMAN=$/;"	m
+NONE	openbsd-compat/fmt_scaled.c	/^	NONE = 0, KILO = 1, MEGA = 2, GIGA = 3, TERA = 4, PETA = 5, EXA = 6$/;"	e	enum:__anondc0b1e130103	file:
+NOPIC	regress/unittests/test_helper/Makefile	/^NOPIC=	yes$/;"	m
+NOPROFILE	regress/unittests/test_helper/Makefile	/^NOPROFILE= yes$/;"	m
+NOT	openbsd-compat/glob.c	/^#define	NOT	/;"	d	file:
+NO_BINARY_OPEN	openbsd-compat/bsd-cygwin_util.c	/^#define NO_BINARY_OPEN	/;"	d	file:
+NO_UID_RESTORATION_TEST	configure.ac	/^	AC_DEFINE([NO_UID_RESTORATION_TEST], [1],$/;"	d
+NO_X11_UNIX_SOCKETS	configure.ac	/^	AC_DEFINE([NO_X11_UNIX_SOCKETS])$/;"	d
+NO_X11_UNIX_SOCKETS	configure.ac	/^	AC_DEFINE([NO_X11_UNIX_SOCKETS], [1],$/;"	d
+NPORTS	openbsd-compat/bindresvport.c	/^#define NPORTS	/;"	d	file:
+NTESTS	regress/unittests/bitmap/tests.c	/^#define NTESTS /;"	d	file:
+NTOHDIGEST	openbsd-compat/sha1.h	/^#define NTOHDIGEST(/;"	d
+NULL_PTR	pkcs11.h	/^#define NULL_PTR /;"	d
+NUM_CHARS	openbsd-compat/mktemp.c	/^#define NUM_CHARS	/;"	d	file:
+NUM_FAST_BASE64_TESTS	regress/unittests/sshkey/test_fuzz.c	/^#define NUM_FAST_BASE64_TESTS	/;"	d	file:
+NUM_FUZZ_TESTS	regress/unittests/sshbuf/test_sshbuf_fuzz.c	/^#define NUM_FUZZ_TESTS /;"	d	file:
+NUM_KEYTYPES	ssh-keysign.c	/^#define NUM_KEYTYPES /;"	d	file:
+NUM_OPENS	openbsd-compat/regress/closefromtest.c	/^#define NUM_OPENS /;"	d	file:
+NUM_SOCKS	channels.c	/^#define	NUM_SOCKS	/;"	d	file:
+Name	contrib/redhat/openssh.spec	/^Name: openssh$/;"	t
+Name	contrib/suse/openssh.spec	/^Name:		openssh$/;"	t
+Nflag	regress/netcat.c	/^int	Nflag;					\/* shutdown() network socket *\/$/;"	v	typeref:typename:int
+Nr	rijndael.h	/^	int	Nr;		\/* key-length-dependent number of rounds *\/$/;"	m	struct:__anona08d75440108	typeref:typename:int
+OPENBSD	openbsd-compat/Makefile.in	/^OPENBSD=arc4random.o \\$/;"	m
+OPENBSD_AF_INET	openbsd-compat/port-net.c	/^#define OPENBSD_AF_INET	/;"	d	file:
+OPENBSD_AF_INET6	openbsd-compat/port-net.c	/^#define OPENBSD_AF_INET6	/;"	d	file:
+OPENSSH_AESCTR_H	cipher-aesctr.h	/^#define OPENSSH_AESCTR_H$/;"	d
+OPENSSL	regress/misc/sk-dummy/Makefile	/^OPENSSL?=	yes$/;"	m
+OPENSSL_DSA_MAX_MODULUS_BITS	openbsd-compat/openssl-compat.h	/^# define OPENSSL_DSA_MAX_MODULUS_BITS	/;"	d
+OPENSSL_HAS_ECC	configure.ac	/^		AC_DEFINE(OPENSSL_HAS_ECC, [1], [OpenSSL has ECC])$/;"	d
+OPENSSL_HAS_NISTP256	configure.ac	/^		AC_DEFINE([OPENSSL_HAS_NISTP256], [1],$/;"	d
+OPENSSL_HAS_NISTP384	configure.ac	/^		AC_DEFINE([OPENSSL_HAS_NISTP384], [1], [libcrypto has NID_secp384r1])$/;"	d
+OPENSSL_HAS_NISTP521	configure.ac	/^		AC_DEFINE([OPENSSL_HAS_NISTP521], [1], [libcrypto has NID_secp521r1])$/;"	d
+OPENSSL_NO_SHA	regress/misc/sk-dummy/sk-dummy.c	/^#define OPENSSL_NO_SHA$/;"	d	file:
+OPENSSL_PRNG_ONLY	configure.ac	/^	AC_DEFINE([OPENSSL_PRNG_ONLY], [1],$/;"	d
+OPENSSL_RSA_MAX_MODULUS_BITS	openbsd-compat/openssl-compat.h	/^# define OPENSSL_RSA_MAX_MODULUS_BITS	/;"	d
+OPENSSL_VERSION	openbsd-compat/openssl-compat.h	/^# define OPENSSL_VERSION	/;"	d
+OPEN_MAX	openbsd-compat/bsd-closefrom.c	/^# define OPEN_MAX	/;"	d	file:
+OPTFLAG_AND	auth-options.c	/^#define OPTFLAG_AND(/;"	d	file:
+OPTFLAG_OR	auth-options.c	/^#define OPTFLAG_OR(/;"	d	file:
+OPTIONS_CRITICAL	auth-options.c	/^#define OPTIONS_CRITICAL	/;"	d	file:
+OPTIONS_CRITICAL	ssh-keygen.c	/^#define OPTIONS_CRITICAL	/;"	d	file:
+OPTIONS_EXTENSIONS	auth-options.c	/^#define OPTIONS_EXTENSIONS	/;"	d	file:
+OPTIONS_EXTENSIONS	ssh-keygen.c	/^#define OPTIONS_EXTENSIONS	/;"	d	file:
+OPTSCALAR	auth-options.c	/^#define OPTSCALAR(/;"	d	file:
+OPTSTRING	auth-options.c	/^#define OPTSTRING(/;"	d	file:
+OPT_FLAG	auth-options.c	/^#define OPT_FLAG(/;"	d	file:
+OSSH_ALIGNBYTES	defines.h	/^#define OSSH_ALIGNBYTES	/;"	d
+OSSH_CHECK_CFLAG_COMPILE	m4/openssh.m4	/^AC_DEFUN([OSSH_CHECK_CFLAG_COMPILE], [{$/;"	m
+OSSH_CHECK_CFLAG_LINK	m4/openssh.m4	/^AC_DEFUN([OSSH_CHECK_CFLAG_LINK], [{$/;"	m
+OSSH_CHECK_HEADER_FOR_FIELD	m4/openssh.m4	/^AC_DEFUN([OSSH_CHECK_HEADER_FOR_FIELD], [$/;"	m
+OSSH_CHECK_LDFLAG_LINK	m4/openssh.m4	/^AC_DEFUN([OSSH_CHECK_LDFLAG_LINK], [{$/;"	m
+O_NOCTTY	openbsd-compat/bsd-openpty.c	/^#define O_NOCTTY /;"	d	file:
+O_NOCTTY	sshpty.c	/^#define O_NOCTTY /;"	d	file:
+O_NONBLOCK	defines.h	/^# define O_NONBLOCK /;"	d
+Obsoletes	contrib/redhat/openssh.spec	/^Obsoletes: ssh$/;"	t
+Obsoletes	contrib/redhat/openssh.spec	/^Obsoletes: ssh-clients$/;"	t
+Obsoletes	contrib/redhat/openssh.spec	/^Obsoletes: ssh-extras$/;"	t
+Obsoletes	contrib/redhat/openssh.spec	/^Obsoletes: ssh-server$/;"	t
+Obsoletes	contrib/suse/openssh.spec	/^Obsoletes:	ssh$/;"	t
+Obsoletes	contrib/suse/openssh.spec	/^Obsoletes:	ssh-extras$/;"	t
+Oflag	regress/netcat.c	/^int	Oflag;					\/* TCP send buffer size *\/$/;"	v	typeref:typename:int
+OpCodes	readconf.c	/^} OpCodes;$/;"	t	typeref:enum:__anon7d31da180103	file:
+OpenSSH	configure.ac	/^AC_INIT([OpenSSH], [Portable], [openssh-unix-dev@mindrot.org])$/;"	p
+OpenSSL_version	openbsd-compat/openssl-compat.h	/^# define OpenSSL_version(/;"	d
+OpenSSL_version_num	openbsd-compat/openssl-compat.h	/^# define OpenSSL_version_num	/;"	d
+Options	readconf.h	/^}       Options;$/;"	t	typeref:struct:__anon7d31da1d0108
+P	openbsd-compat/blf.h	/^	u_int32_t P[BLF_N + 2];	\/* Subkeys *\/$/;"	m	struct:BlowfishContext	typeref:typename:u_int32_t[]
+P11HELPER_OBJS	Makefile.in	/^P11HELPER_OBJS=	ssh-pkcs11-helper.o ssh-pkcs11.o $(SKOBJS)$/;"	m
+PACKET_H	packet.h	/^#define PACKET_H$/;"	d
+PACKET_MAX_SIZE	packet.c	/^#define PACKET_MAX_SIZE /;"	d	file:
+PADDING	openbsd-compat/md5.c	/^static u_int8_t PADDING[MD5_BLOCK_LENGTH] = {$/;"	v	typeref:typename:u_int8_t[]	file:
+PADDING	progressmeter.c	/^#define PADDING /;"	d	file:
+PAM_ENV_DENYLIST	session.c	/^#define PAM_ENV_DENYLIST /;"	d	file:
+PAM_MSG_MEMBER	auth-pam.c	/^# define PAM_MSG_MEMBER(/;"	d	file:
+PAM_SUN_CODEBASE	configure.ac	/^		AC_DEFINE([PAM_SUN_CODEBASE], [1],$/;"	d
+PAM_SUN_CODEBASE	configure.ac	/^	AC_DEFINE([PAM_SUN_CODEBASE])$/;"	d
+PAM_TTY_KLUDGE	configure.ac	/^	AC_DEFINE([PAM_TTY_KLUDGE])$/;"	d
+PAM_TTY_KLUDGE	configure.ac	/^	AC_DEFINE([PAM_TTY_KLUDGE], [1],$/;"	d
+PAPPEND	sftp-server.c	/^#define PAPPEND(/;"	d	file:
+PASSWD_NEEDS_USERNAME	configure.ac	/^	AC_DEFINE([PASSWD_NEEDS_USERNAME])$/;"	d
+PASSWD_NEEDS_USERNAME	configure.ac	/^	AC_DEFINE([PASSWD_NEEDS_USERNAME], [1], [must supply username to passwd$/;"	d
+PASSWD_NEEDS_USERNAME	configure.ac	/^	AC_DEFINE([PASSWD_NEEDS_USERNAME], [1], [must supply username to passwd])$/;"	d
+PATHS	Makefile.in	/^PATHS= -DSSHDIR=\\"$(sysconfdir)\\" \\$/;"	m
+PATHSUBS	Makefile.in	/^PATHSUBS	= \\$/;"	m
+PATH_MAX	defines.h	/^# define PATH_MAX /;"	d
+PATH_MAX_SUN	readconf.h	/^#define PATH_MAX_SUN	/;"	d
+PATTERNS	ssh_config.5	/^.Sh PATTERNS$/;"	s
+PAUSE_BEFORE_LOGOUT	logintest.c	/^#define PAUSE_BEFORE_LOGOUT /;"	d	file:
+PEEK_U16	sshbuf.h	/^#define PEEK_U16(/;"	d
+PEEK_U32	sshbuf.h	/^#define PEEK_U32(/;"	d
+PEEK_U64	sshbuf.h	/^#define PEEK_U64(/;"	d
+PERMITOPEN_ANY	servconf.h	/^#define PERMITOPEN_ANY	/;"	d
+PERMITOPEN_NONE	servconf.h	/^#define PERMITOPEN_NONE	/;"	d
+PERMIT_FORCED_ONLY	servconf.h	/^#define	PERMIT_FORCED_ONLY	/;"	d
+PERMIT_NO	servconf.h	/^#define	PERMIT_NO	/;"	d
+PERMIT_NOT_SET	servconf.h	/^#define	PERMIT_NOT_SET	/;"	d
+PERMIT_NO_PASSWD	servconf.h	/^#define	PERMIT_NO_PASSWD	/;"	d
+PERMIT_YES	servconf.h	/^#define	PERMIT_YES	/;"	d
+PETA	openbsd-compat/fmt_scaled.c	/^	NONE = 0, KILO = 1, MEGA = 2, GIGA = 3, TERA = 4, PETA = 5, EXA = 6$/;"	e	enum:__anondc0b1e130103	file:
+PICFLAG	Makefile.in	/^PICFLAG=@PICFLAG@$/;"	m
+PICFLAG	configure.ac	/^AC_SUBST([PICFLAG])$/;"	s
+PICFLAG	openbsd-compat/Makefile.in	/^PICFLAG=@PICFLAG@$/;"	m
+PKCS11_H	pkcs11.h	/^#define PKCS11_H /;"	d
+PKG_CONFIG	contrib/Makefile	/^PKG_CONFIG = pkg-config$/;"	m
+PLATFORM_SYS_DIR_UID	configure.ac	/^	AC_DEFINE([PLATFORM_SYS_DIR_UID], 2, [System dirs owned by bin (uid 2)])$/;"	d
+PLUS	chacha.c	/^#define PLUS(/;"	d	file:
+PLUS	openbsd-compat/chacha_private.h	/^#define PLUS(/;"	d
+PLUSONE	chacha.c	/^#define PLUSONE(/;"	d	file:
+PLUSONE	openbsd-compat/chacha_private.h	/^#define PLUSONE(/;"	d
+POKE_U16	sshbuf.h	/^#define POKE_U16(/;"	d
+POKE_U32	sshbuf.h	/^#define POKE_U32(/;"	d
+POKE_U64	sshbuf.h	/^#define POKE_U64(/;"	d
+POLLERR	openbsd-compat/bsd-poll.h	/^#define	POLLERR	/;"	d
+POLLHUP	openbsd-compat/bsd-poll.h	/^#define	POLLHUP	/;"	d
+POLLIN	openbsd-compat/bsd-poll.h	/^#define	POLLIN	/;"	d
+POLLNVAL	openbsd-compat/bsd-poll.h	/^#define	POLLNVAL	/;"	d
+POLLOUT	openbsd-compat/bsd-poll.h	/^#define	POLLOUT	/;"	d
+POLLPRI	openbsd-compat/bsd-poll.h	/^#define	POLLPRI	/;"	d
+POLL_NETIN	regress/netcat.c	/^#define POLL_NETIN /;"	d	file:
+POLL_NETOUT	regress/netcat.c	/^#define POLL_NETOUT /;"	d	file:
+POLL_SLEEP_NS	sk-usbhid.c	/^#define POLL_SLEEP_NS	/;"	d	file:
+POLL_STDIN	regress/netcat.c	/^#define POLL_STDIN /;"	d	file:
+POLL_STDOUT	regress/netcat.c	/^#define POLL_STDOUT /;"	d	file:
+POLY1305_H	poly1305.h	/^#define POLY1305_H$/;"	d
+POLY1305_KEYLEN	poly1305.h	/^#define POLY1305_KEYLEN	/;"	d
+POLY1305_TAGLEN	poly1305.h	/^#define POLY1305_TAGLEN	/;"	d
+PORTS	openbsd-compat/Makefile.in	/^PORTS=	port-aix.o \\$/;"	m
+PORT_MAX	regress/netcat.c	/^#define PORT_MAX	/;"	d	file:
+PORT_MAX_LEN	regress/netcat.c	/^#define PORT_MAX_LEN	/;"	d	file:
+PORT_STREAMLOCAL	misc.h	/^#define PORT_STREAMLOCAL	/;"	d
+POW10	openbsd-compat/bsd-snprintf.c	/^static LDOUBLE POW10(int val)$/;"	f	typeref:typename:LDOUBLE	file:
+PREPARE	regress/unittests/authopt/tests.c	/^#define PREPARE(/;"	d	file:
+PRINT	sshkey-xmss.c	/^#define PRINT(/;"	d	file:
+PRINT_ERROR	openbsd-compat/getopt_long.c	/^#define PRINT_ERROR	/;"	d	file:
+PRIVSEP	monitor_wrap.h	/^#define PRIVSEP(/;"	d
+PRIVSEP_NOSANDBOX	servconf.h	/^#define PRIVSEP_NOSANDBOX	/;"	d
+PRIVSEP_OFF	servconf.h	/^#define PRIVSEP_OFF	/;"	d
+PRIVSEP_ON	servconf.h	/^#define PRIVSEP_ON	/;"	d
+PRIVSEP_PATH	Makefile.in	/^PRIVSEP_PATH=@PRIVSEP_PATH@$/;"	m
+PRIVSEP_PATH	configure.ac	/^AC_SUBST([PRIVSEP_PATH])$/;"	s
+PRIVSEP_PATH	contrib/cygwin/Makefile	/^PRIVSEP_PATH=\/var\/empty$/;"	m
+PRIV_DSA	regress/misc/fuzz-harness/fixed-keys.h	/^#define PRIV_DSA /;"	d
+PRIV_ECDSA	regress/misc/fuzz-harness/fixed-keys.h	/^#define PRIV_ECDSA /;"	d
+PRIV_ECDSA_SK	regress/misc/fuzz-harness/fixed-keys.h	/^#define PRIV_ECDSA_SK /;"	d
+PRIV_ED25519	regress/misc/fuzz-harness/fixed-keys.h	/^#define PRIV_ED25519 /;"	d
+PRIV_ED25519_SK	regress/misc/fuzz-harness/fixed-keys.h	/^#define PRIV_ED25519_SK /;"	d
+PRIV_RSA	regress/misc/fuzz-harness/fixed-keys.h	/^#define PRIV_RSA /;"	d
+PROG	regress/misc/sk-dummy/Makefile	/^PROG=	sk-dummy.so$/;"	m
+PROG	regress/unittests/authopt/Makefile	/^PROG=test_authopt$/;"	m
+PROG	regress/unittests/bitmap/Makefile	/^PROG=test_bitmap$/;"	m
+PROG	regress/unittests/conversion/Makefile	/^PROG=test_conversion$/;"	m
+PROG	regress/unittests/hostkeys/Makefile	/^PROG=test_hostkeys$/;"	m
+PROG	regress/unittests/kex/Makefile	/^PROG=test_kex$/;"	m
+PROG	regress/unittests/match/Makefile	/^PROG=test_match$/;"	m
+PROG	regress/unittests/misc/Makefile	/^PROG=test_misc$/;"	m
+PROG	regress/unittests/sshbuf/Makefile	/^PROG=test_sshbuf$/;"	m
+PROG	regress/unittests/sshkey/Makefile	/^PROG=test_sshkey$/;"	m
+PROG	regress/unittests/sshsig/Makefile	/^PROG=test_sshsig$/;"	m
+PROG	regress/unittests/utf8/Makefile	/^PROG=test_utf8$/;"	m
+PROMPT_CONFIRM	contrib/gnome-ssh-askpass2.c	/^#define PROMPT_CONFIRM	/;"	d	file:
+PROMPT_CONFIRM	contrib/gnome-ssh-askpass3.c	/^#define PROMPT_CONFIRM	/;"	d	file:
+PROMPT_ENTRY	contrib/gnome-ssh-askpass2.c	/^#define PROMPT_ENTRY	/;"	d	file:
+PROMPT_ENTRY	contrib/gnome-ssh-askpass3.c	/^#define PROMPT_ENTRY	/;"	d	file:
+PROMPT_NONE	contrib/gnome-ssh-askpass2.c	/^#define PROMPT_NONE	/;"	d	file:
+PROMPT_NONE	contrib/gnome-ssh-askpass3.c	/^#define PROMPT_NONE	/;"	d	file:
+PROPOSAL_COMP_ALGS_CTOS	kex.h	/^	PROPOSAL_COMP_ALGS_CTOS,$/;"	e	enum:kex_init_proposals
+PROPOSAL_COMP_ALGS_STOC	kex.h	/^	PROPOSAL_COMP_ALGS_STOC,$/;"	e	enum:kex_init_proposals
+PROPOSAL_ENC_ALGS_CTOS	kex.h	/^	PROPOSAL_ENC_ALGS_CTOS,$/;"	e	enum:kex_init_proposals
+PROPOSAL_ENC_ALGS_STOC	kex.h	/^	PROPOSAL_ENC_ALGS_STOC,$/;"	e	enum:kex_init_proposals
+PROPOSAL_KEX_ALGS	kex.h	/^	PROPOSAL_KEX_ALGS,$/;"	e	enum:kex_init_proposals
+PROPOSAL_LANG_CTOS	kex.h	/^	PROPOSAL_LANG_CTOS,$/;"	e	enum:kex_init_proposals
+PROPOSAL_LANG_STOC	kex.h	/^	PROPOSAL_LANG_STOC,$/;"	e	enum:kex_init_proposals
+PROPOSAL_MAC_ALGS_CTOS	kex.h	/^	PROPOSAL_MAC_ALGS_CTOS,$/;"	e	enum:kex_init_proposals
+PROPOSAL_MAC_ALGS_STOC	kex.h	/^	PROPOSAL_MAC_ALGS_STOC,$/;"	e	enum:kex_init_proposals
+PROPOSAL_MAX	kex.h	/^	PROPOSAL_MAX$/;"	e	enum:kex_init_proposals
+PROPOSAL_SERVER_HOST_KEY_ALGS	kex.h	/^	PROPOSAL_SERVER_HOST_KEY_ALGS,$/;"	e	enum:kex_init_proposals
+PROTOCOL_MAJOR_1	ssh.h	/^#define PROTOCOL_MAJOR_1	/;"	d
+PROTOCOL_MAJOR_2	ssh.h	/^#define PROTOCOL_MAJOR_2	/;"	d
+PROTOCOL_MINOR_1	ssh.h	/^#define PROTOCOL_MINOR_1	/;"	d
+PROTOCOL_MINOR_2	ssh.h	/^#define PROTOCOL_MINOR_2	/;"	d
+PTY_ZEROREAD	configure.ac	/^	AC_DEFINE([PTY_ZEROREAD], [1], [read(1) can return 0 for a non-closed fd])$/;"	d
+PUBKEYAUTH_TOUCH_REQUIRED	servconf.h	/^#define PUBKEYAUTH_TOUCH_REQUIRED	/;"	d
+PUBKEYAUTH_VERIFY_REQUIRED	servconf.h	/^#define PUBKEYAUTH_VERIFY_REQUIRED	/;"	d
+PUB_DSA	regress/misc/fuzz-harness/fixed-keys.h	/^#define PUB_DSA /;"	d
+PUB_ECDSA	regress/misc/fuzz-harness/fixed-keys.h	/^#define PUB_ECDSA /;"	d
+PUB_ECDSA_SK	regress/misc/fuzz-harness/fixed-keys.h	/^#define PUB_ECDSA_SK /;"	d
+PUB_ED25519	regress/misc/fuzz-harness/fixed-keys.h	/^#define PUB_ED25519 /;"	d
+PUB_ED25519_SK	regress/misc/fuzz-harness/fixed-keys.h	/^#define PUB_ED25519_SK /;"	d
+PUB_RSA	regress/misc/fuzz-harness/fixed-keys.h	/^#define PUB_RSA /;"	d
+PUTPW	monitor.c	/^#define PUTPW(/;"	d	file:
+PUTU32	rijndael.c	/^#define PUTU32(/;"	d	file:
+PUT_32BIT_LE	openbsd-compat/md5.c	/^#define PUT_32BIT_LE(/;"	d	file:
+PUT_64BIT_LE	openbsd-compat/md5.c	/^#define PUT_64BIT_LE(/;"	d	file:
+Pad64	openbsd-compat/base64.c	/^static const char Pad64 = '=';$/;"	v	typeref:typename:const char	file:
+Pflag	regress/netcat.c	/^char   *Pflag;					\/* Proxy username *\/$/;"	v	typeref:typename:char *
+Portable OpenSSH	README.md	/^# Portable OpenSSH$/;"	c
+PreReq	contrib/redhat/openssh.spec	/^PreReq: initscripts >= 5.00$/;"	t
+PreReq	contrib/suse/openssh.spec	/^PreReq:		openssl$/;"	t
+Provides	contrib/suse/openssh.spec	/^Provides:	openssh:${_libdir}\/ssh\/ssh-askpass$/;"	t
+Provides	contrib/suse/openssh.spec	/^Provides:	ssh$/;"	t
+PublicKeys_bytes	sntrup761.c	/^#define PublicKeys_bytes /;"	d	file:
+QLINESIZE	moduli.c	/^#define QLINESIZE	/;"	d	file:
+QSIZE_MINIMUM	moduli.c	/^#define QSIZE_MINIMUM	/;"	d	file:
+QUARTERROUND	chacha.c	/^#define QUARTERROUND(/;"	d	file:
+QUARTERROUND	openbsd-compat/chacha_private.h	/^#define QUARTERROUND(/;"	d
+QUESTION	openbsd-compat/glob.c	/^#define	QUESTION	/;"	d	file:
+QUOTE	misc.c	/^#define QUOTE	/;"	d	file:
+QUOTE	openbsd-compat/glob.c	/^#define	QUOTE	/;"	d	file:
+R	openbsd-compat/sha2.c	/^#define R(/;"	d	file:
+R0	openbsd-compat/sha1.c	/^#define R0(/;"	d	file:
+R1	openbsd-compat/sha1.c	/^#define R1(/;"	d	file:
+R2	openbsd-compat/sha1.c	/^#define R2(/;"	d	file:
+R3	openbsd-compat/sha1.c	/^#define R3(/;"	d	file:
+R3_fromRq	sntrup761.c	/^static void R3_fromRq(small *out,const Fq *r)$/;"	f	typeref:typename:void	file:
+R3_mult	sntrup761.c	/^static void R3_mult(small *h,const small *f,const small *g)$/;"	f	typeref:typename:void	file:
+R3_recip	sntrup761.c	/^static int R3_recip(small *out,const small *in)$/;"	f	typeref:typename:int	file:
+R4	openbsd-compat/sha1.c	/^#define R4(/;"	d	file:
+RANDOM_SEED_SIZE	entropy.c	/^#define RANDOM_SEED_SIZE /;"	d	file:
+RANGE	openbsd-compat/glob.c	/^#define	RANGE	/;"	d	file:
+RANGE_ERROR	openbsd-compat/fnmatch.c	/^#define	RANGE_ERROR	/;"	d	file:
+RANGE_MATCH	openbsd-compat/fnmatch.c	/^#define	RANGE_MATCH	/;"	d	file:
+RANGE_NOMATCH	openbsd-compat/fnmatch.c	/^#define	RANGE_NOMATCH	/;"	d	file:
+RANLIB	Makefile.in	/^RANLIB=@RANLIB@$/;"	m
+RANLIB	openbsd-compat/Makefile.in	/^RANLIB=@RANLIB@$/;"	m
+RBRACE	openbsd-compat/glob.c	/^#define	RBRACE	/;"	d	file:
+RBRACKET	openbsd-compat/glob.c	/^#define	RBRACKET	/;"	d	file:
+RBUFLN	auth-rhosts.c	/^#define RBUFLN /;"	d	file:
+RB_AUGMENT	openbsd-compat/sys-tree.h	/^#define RB_AUGMENT(/;"	d
+RB_BLACK	openbsd-compat/sys-tree.h	/^#define RB_BLACK	/;"	d
+RB_COLOR	openbsd-compat/sys-tree.h	/^#define RB_COLOR(/;"	d
+RB_EMPTY	openbsd-compat/sys-tree.h	/^#define RB_EMPTY(/;"	d
+RB_ENTRY	openbsd-compat/sys-tree.h	/^#define RB_ENTRY(/;"	d
+RB_FIND	openbsd-compat/sys-tree.h	/^#define RB_FIND(/;"	d
+RB_FOREACH	openbsd-compat/sys-tree.h	/^#define RB_FOREACH(/;"	d
+RB_FOREACH_REVERSE	openbsd-compat/sys-tree.h	/^#define RB_FOREACH_REVERSE(/;"	d
+RB_FOREACH_REVERSE_SAFE	openbsd-compat/sys-tree.h	/^#define RB_FOREACH_REVERSE_SAFE(/;"	d
+RB_FOREACH_SAFE	openbsd-compat/sys-tree.h	/^#define RB_FOREACH_SAFE(/;"	d
+RB_GENERATE	openbsd-compat/sys-tree.h	/^#define	RB_GENERATE(/;"	d
+RB_GENERATE_INTERNAL	openbsd-compat/sys-tree.h	/^#define RB_GENERATE_INTERNAL(/;"	d
+RB_GENERATE_STATIC	openbsd-compat/sys-tree.h	/^#define	RB_GENERATE_STATIC(/;"	d
+RB_HEAD	openbsd-compat/sys-tree.h	/^#define RB_HEAD(/;"	d
+RB_INF	openbsd-compat/sys-tree.h	/^#define RB_INF	/;"	d
+RB_INIT	openbsd-compat/sys-tree.h	/^#define RB_INIT(/;"	d
+RB_INITIALIZER	openbsd-compat/sys-tree.h	/^#define RB_INITIALIZER(/;"	d
+RB_INSERT	openbsd-compat/sys-tree.h	/^#define RB_INSERT(/;"	d
+RB_LEFT	openbsd-compat/sys-tree.h	/^#define RB_LEFT(/;"	d
+RB_MAX	openbsd-compat/sys-tree.h	/^#define RB_MAX(/;"	d
+RB_MIN	openbsd-compat/sys-tree.h	/^#define RB_MIN(/;"	d
+RB_NEGINF	openbsd-compat/sys-tree.h	/^#define RB_NEGINF	/;"	d
+RB_NEXT	openbsd-compat/sys-tree.h	/^#define RB_NEXT(/;"	d
+RB_NFIND	openbsd-compat/sys-tree.h	/^#define RB_NFIND(/;"	d
+RB_PARENT	openbsd-compat/sys-tree.h	/^#define RB_PARENT(/;"	d
+RB_PREV	openbsd-compat/sys-tree.h	/^#define RB_PREV(/;"	d
+RB_PROTOTYPE	openbsd-compat/sys-tree.h	/^#define	RB_PROTOTYPE(/;"	d
+RB_PROTOTYPE_INTERNAL	openbsd-compat/sys-tree.h	/^#define RB_PROTOTYPE_INTERNAL(/;"	d
+RB_PROTOTYPE_STATIC	openbsd-compat/sys-tree.h	/^#define	RB_PROTOTYPE_STATIC(/;"	d
+RB_RED	openbsd-compat/sys-tree.h	/^#define RB_RED	/;"	d
+RB_REMOVE	openbsd-compat/sys-tree.h	/^#define RB_REMOVE(/;"	d
+RB_RIGHT	openbsd-compat/sys-tree.h	/^#define RB_RIGHT(/;"	d
+RB_ROOT	openbsd-compat/sys-tree.h	/^#define RB_ROOT(/;"	d
+RB_ROTATE_LEFT	openbsd-compat/sys-tree.h	/^#define RB_ROTATE_LEFT(/;"	d
+RB_ROTATE_RIGHT	openbsd-compat/sys-tree.h	/^#define RB_ROTATE_RIGHT(/;"	d
+RB_SET	openbsd-compat/sys-tree.h	/^#define RB_SET(/;"	d
+RB_SET_BLACKRED	openbsd-compat/sys-tree.h	/^#define RB_SET_BLACKRED(/;"	d
+RDONLY	sshconnect.c	/^#define RDONLY	/;"	d	file:
+RDRW	sshconnect.c	/^#define RDRW	/;"	d	file:
+READCONF_H	readconf.h	/^#define READCONF_H$/;"	d
+READCONF_MAX_DEPTH	readconf.c	/^#define READCONF_MAX_DEPTH	/;"	d	file:
+REEXEC_CONFIG_PASS_FD	sshd.c	/^#define REEXEC_CONFIG_PASS_FD	/;"	d	file:
+REEXEC_DEVCRYPTO_RESERVED_FD	sshd.c	/^#define REEXEC_DEVCRYPTO_RESERVED_FD	/;"	d	file:
+REEXEC_MIN_FREE_FD	openbsd-compat/bsd-pselect.c	/^#define REEXEC_MIN_FREE_FD /;"	d	file:
+REEXEC_MIN_FREE_FD	sshd.c	/^#define REEXEC_MIN_FREE_FD	/;"	d	file:
+REEXEC_STARTUP_PIPE_FD	sshd.c	/^#define REEXEC_STARTUP_PIPE_FD	/;"	d	file:
+REGISTRY_SIZE	openbsd-compat/port-aix.h	/^# define REGISTRY_SIZE	/;"	d
+REGRESSLIBS	Makefile.in	/^REGRESSLIBS=libssh.a $(LIBCOMPAT)$/;"	m
+REGRESS_FAIL_EARLY	regress/unittests/Makefile	/^REGRESS_FAIL_EARLY?=	yes$/;"	m
+REGRESS_TARGETS	regress/Makefile	/^REGRESS_TARGETS=	t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12$/;"	m
+REGRESS_TARGETS	regress/unittests/authopt/Makefile	/^REGRESS_TARGETS=run-regress-${PROG}$/;"	m
+REGRESS_TARGETS	regress/unittests/bitmap/Makefile	/^REGRESS_TARGETS=run-regress-${PROG}$/;"	m
+REGRESS_TARGETS	regress/unittests/conversion/Makefile	/^REGRESS_TARGETS=run-regress-${PROG}$/;"	m
+REGRESS_TARGETS	regress/unittests/hostkeys/Makefile	/^REGRESS_TARGETS=run-regress-${PROG}$/;"	m
+REGRESS_TARGETS	regress/unittests/kex/Makefile	/^REGRESS_TARGETS=run-regress-${PROG}$/;"	m
+REGRESS_TARGETS	regress/unittests/match/Makefile	/^REGRESS_TARGETS=run-regress-${PROG}$/;"	m
+REGRESS_TARGETS	regress/unittests/misc/Makefile	/^REGRESS_TARGETS=run-regress-${PROG}$/;"	m
+REGRESS_TARGETS	regress/unittests/sshkey/Makefile	/^REGRESS_TARGETS=run-regress-${PROG}$/;"	m
+REGRESS_TARGETS	regress/unittests/sshsig/Makefile	/^REGRESS_TARGETS=run-regress-${PROG}$/;"	m
+REGRESS_TARGETS	regress/unittests/utf8/Makefile	/^REGRESS_TARGETS=run-regress-${PROG}$/;"	m
+REKEY_BASE	openbsd-compat/arc4random.c	/^#define REKEY_BASE	/;"	d	file:
+REMOTE	sftp.c	/^#define REMOTE	/;"	d	file:
+REQUEST_TTY_AUTO	readconf.h	/^#define REQUEST_TTY_AUTO	/;"	d
+REQUEST_TTY_FORCE	readconf.h	/^#define REQUEST_TTY_FORCE	/;"	d
+REQUEST_TTY_NO	readconf.h	/^#define REQUEST_TTY_NO	/;"	d
+REQUEST_TTY_YES	readconf.h	/^#define REQUEST_TTY_YES	/;"	d
+RESET_ARGV	regress/unittests/misc/test_argv.c	/^#define RESET_ARGV(/;"	d	file:
+REVOKE_MARKER	hostfile.h	/^#define REVOKE_MARKER	/;"	d
+RIJNDAEL_BLOCKSIZE	cipher-aes.c	/^#define RIJNDAEL_BLOCKSIZE /;"	d	file:
+ROQUIET	sshconnect.c	/^#define ROQUIET	/;"	d	file:
+ROTATE	chacha.c	/^#define ROTATE(/;"	d	file:
+ROTATE	openbsd-compat/chacha_private.h	/^#define ROTATE(/;"	d
+ROTL32	chacha.c	/^#define ROTL32(/;"	d	file:
+ROTL32	openbsd-compat/chacha_private.h	/^#define ROTL32(/;"	d
+ROUND	openbsd-compat/bsd-snprintf.c	/^static LLONG ROUND(LDOUBLE value)$/;"	f	typeref:typename:LLONG	file:
+ROUND256	openbsd-compat/sha2.c	/^#define ROUND256(/;"	d	file:
+ROUND256_0_TO_15	openbsd-compat/sha2.c	/^#define ROUND256_0_TO_15(/;"	d	file:
+ROUND512	openbsd-compat/sha2.c	/^#define ROUND512(/;"	d	file:
+ROUND512_0_TO_15	openbsd-compat/sha2.c	/^#define ROUND512_0_TO_15(/;"	d	file:
+ROUNDUP	misc.h	/^#define ROUNDUP(/;"	d
+RPP_ECHO_OFF	openbsd-compat/readpassphrase.h	/^#define RPP_ECHO_OFF /;"	d
+RPP_ECHO_ON	openbsd-compat/readpassphrase.h	/^#define RPP_ECHO_ON /;"	d
+RPP_FORCELOWER	openbsd-compat/readpassphrase.h	/^#define RPP_FORCELOWER /;"	d
+RPP_FORCEUPPER	openbsd-compat/readpassphrase.h	/^#define RPP_FORCEUPPER /;"	d
+RPP_REQUIRE_TTY	openbsd-compat/readpassphrase.h	/^#define RPP_REQUIRE_TTY /;"	d
+RPP_SEVENBIT	openbsd-compat/readpassphrase.h	/^#define RPP_SEVENBIT /;"	d
+RPP_STDIN	openbsd-compat/readpassphrase.h	/^#define RPP_STDIN /;"	d
+RP_ALLOW_EOF	misc.h	/^#define RP_ALLOW_EOF	/;"	d
+RP_ALLOW_STDIN	misc.h	/^#define RP_ALLOW_STDIN	/;"	d
+RP_ASK_PERMISSION	readpass.c	/^#define RP_ASK_PERMISSION	/;"	d	file:
+RP_ECHO	misc.h	/^#define RP_ECHO	/;"	d
+RP_USE_ASKPASS	misc.h	/^#define RP_USE_ASKPASS	/;"	d
+RRSET_VALIDATED	openbsd-compat/getrrsetbyname.h	/^# define RRSET_VALIDATED	/;"	d
+RSA	sshkey.h	/^# define RSA	/;"	d
+RSA_SIGN_ALG	sshsig.c	/^#define RSA_SIGN_ALG	/;"	d	file:
+RSA_SIGN_ALLOWED	sshsig.c	/^#define RSA_SIGN_ALLOWED	/;"	d	file:
+RSA_get0_crt_params	openbsd-compat/libressl-api-compat.c	/^RSA_get0_crt_params(const RSA *r, const BIGNUM **dmp1, const BIGNUM **dmq1,$/;"	f	typeref:typename:void
+RSA_get0_factors	openbsd-compat/libressl-api-compat.c	/^RSA_get0_factors(const RSA *r, const BIGNUM **p, const BIGNUM **q)$/;"	f	typeref:typename:void
+RSA_get0_key	openbsd-compat/libressl-api-compat.c	/^RSA_get0_key(const RSA *r, const BIGNUM **n, const BIGNUM **e, const BIGNUM **d)$/;"	f	typeref:typename:void
+RSA_meth_dup	openbsd-compat/libressl-api-compat.c	/^RSA_meth_dup(const RSA_METHOD *meth)$/;"	f	typeref:typename:RSA_METHOD *
+RSA_meth_free	openbsd-compat/libressl-api-compat.c	/^RSA_meth_free(RSA_METHOD *meth)$/;"	f	typeref:typename:void
+RSA_meth_get_finish	openbsd-compat/libressl-api-compat.c	/^(*RSA_meth_get_finish(const RSA_METHOD *meth))(RSA *rsa)$/;"	f	typeref:typename:int (*)(RSA * rsa)
+RSA_meth_set1_name	openbsd-compat/libressl-api-compat.c	/^RSA_meth_set1_name(RSA_METHOD *meth, const char *name)$/;"	f	typeref:typename:int
+RSA_meth_set_finish	openbsd-compat/libressl-api-compat.c	/^RSA_meth_set_finish(RSA_METHOD *meth, int (*finish)(RSA *rsa))$/;"	f	typeref:typename:int
+RSA_meth_set_priv_dec	openbsd-compat/libressl-api-compat.c	/^RSA_meth_set_priv_dec(RSA_METHOD *meth, int (*priv_dec)(int flen,$/;"	f	typeref:typename:int
+RSA_meth_set_priv_enc	openbsd-compat/libressl-api-compat.c	/^RSA_meth_set_priv_enc(RSA_METHOD *meth, int (*priv_enc)(int flen,$/;"	f	typeref:typename:int
+RSA_set0_crt_params	openbsd-compat/libressl-api-compat.c	/^RSA_set0_crt_params(RSA *r, BIGNUM *dmp1, BIGNUM *dmq1, BIGNUM *iqmp)$/;"	f	typeref:typename:int
+RSA_set0_factors	openbsd-compat/libressl-api-compat.c	/^RSA_set0_factors(RSA *r, BIGNUM *p, BIGNUM *q)$/;"	f	typeref:typename:int
+RSA_set0_key	openbsd-compat/libressl-api-compat.c	/^RSA_set0_key(RSA *r, BIGNUM *n, BIGNUM *e, BIGNUM *d)$/;"	f	typeref:typename:int
+RSBUFSZ	openbsd-compat/arc4random.c	/^#define RSBUFSZ	/;"	d	file:
+Release	contrib/redhat/openssh.spec	/^Release: %{rel}$/;"	t
+Release	contrib/redhat/openssh.spec	/^Release: %{rel}rescue$/;"	t
+Release	contrib/suse/openssh.spec	/^Release:	1$/;"	t
+Reporting OpenSSH Security Issues	SECURITY.md	/^# Reporting OpenSSH Security Issues$/;"	c
+Reporting bugs	README.md	/^## Reporting bugs$/;"	s	chapter:Portable OpenSSH
+Requires	contrib/redhat/openssh.spec	/^Requires: \/etc\/pam.d\/system-auth$/;"	t
+Requires	contrib/redhat/openssh.spec	/^Requires: initscripts >= 5.20$/;"	t
+Requires	contrib/redhat/openssh.spec	/^Requires: openssh = %{version}-%{release}$/;"	t
+Requires	contrib/redhat/openssh.spec	/^Requires: openssh = %{version}-%{release}, chkconfig >= 0.9$/;"	t
+Requires	contrib/suse/openssh.spec	/^Requires:	openssh = %{version}$/;"	t
+Right	sntrup761.c	/^static Fq Right(int8 T)$/;"	f	typeref:typename:Fq	file:
+Round	sntrup761.c	/^static void Round(Fq *out,const Fq *a)$/;"	f	typeref:typename:void	file:
+Rounded_bytes	sntrup761.c	/^#define Rounded_bytes /;"	d	file:
+Rounded_decode	sntrup761.c	/^static void Rounded_decode(Fq *r,const unsigned char *s)$/;"	f	typeref:typename:void	file:
+Rounded_encode	sntrup761.c	/^static void Rounded_encode(unsigned char *s,const Fq *r)$/;"	f	typeref:typename:void	file:
+Rq_bytes	sntrup761.c	/^#define Rq_bytes /;"	d	file:
+Rq_decode	sntrup761.c	/^static void Rq_decode(Fq *r,const unsigned char *s)$/;"	f	typeref:typename:void	file:
+Rq_encode	sntrup761.c	/^static void Rq_encode(unsigned char *s,const Fq *r)$/;"	f	typeref:typename:void	file:
+Rq_mult3	sntrup761.c	/^static void Rq_mult3(Fq *h,const Fq *f)$/;"	f	typeref:typename:void	file:
+Rq_mult_small	sntrup761.c	/^static void Rq_mult_small(Fq *h,const Fq *f,const small *g)$/;"	f	typeref:typename:void	file:
+Rq_recip3	sntrup761.c	/^static int Rq_recip3(Fq *out,const small *in)$/;"	f	typeref:typename:int	file:
+S	openbsd-compat/blf.h	/^	u_int32_t S[4][256];	\/* S-Boxes *\/$/;"	m	struct:BlowfishContext	typeref:typename:u_int32_t[4][256]
+S32	openbsd-compat/sha2.c	/^#define S32(/;"	d	file:
+S64	openbsd-compat/sha2.c	/^#define S64(/;"	d	file:
+SALT_LEN	sshkey.c	/^#define SALT_LEN	/;"	d	file:
+SANDBOX_CAPSICUM	configure.ac	/^       AC_DEFINE([SANDBOX_CAPSICUM], [1], [Sandbox using capsicum])$/;"	d
+SANDBOX_DARWIN	configure.ac	/^	AC_DEFINE([SANDBOX_DARWIN], [1], [Sandbox using Darwin sandbox_init(3)])$/;"	d
+SANDBOX_NULL	configure.ac	/^	AC_DEFINE([SANDBOX_NULL], [1], [no privsep sandboxing])$/;"	d
+SANDBOX_PLEDGE	configure.ac	/^	AC_DEFINE([SANDBOX_PLEDGE], [1], [Sandbox using pledge(2)])$/;"	d
+SANDBOX_RLIMIT	configure.ac	/^	AC_DEFINE([SANDBOX_RLIMIT], [1], [Sandbox using setrlimit(2)])$/;"	d
+SANDBOX_SECCOMP_FILTER	configure.ac	/^	AC_DEFINE([SANDBOX_SECCOMP_FILTER], [1], [Sandbox using seccomp filter])$/;"	d
+SANDBOX_SECCOMP_FILTER_DEBUG	sandbox-seccomp-filter.c	/^#define SANDBOX_SECCOMP_FILTER_DEBUG /;"	d	file:
+SANDBOX_SKIP_RLIMIT_NOFILE	configure.ac	/^	AC_DEFINE([SANDBOX_SKIP_RLIMIT_NOFILE], [1],$/;"	d
+SANDBOX_SOLARIS	configure.ac	/^	AC_DEFINE([SANDBOX_SOLARIS], [1], [Sandbox using Solaris\/Illumos privileges])$/;"	d
+SANDBOX_SYSTRACE	configure.ac	/^	AC_DEFINE([SANDBOX_SYSTRACE], [1], [Sandbox using systrace(4)])$/;"	d
+SAVED_IDS_WORK_WITH_SETEUID	uidswap.c	/^#define SAVED_IDS_WORK_WITH_SETEUID$/;"	d	file:
+SC25519_H	sc25519.h	/^#define SC25519_H$/;"	d
+SCALE_LENGTH	openbsd-compat/fmt_scaled.c	/^#define	SCALE_LENGTH /;"	d	file:
+SCP_OBJS	Makefile.in	/^SCP_OBJS=	scp.o progressmeter.o $(SFTP_CLIENT_OBJS)$/;"	m
+SCREWUP	scp.c	/^#define	SCREWUP(/;"	d	file:
+SC_ALLOW	sandbox-seccomp-filter.c	/^#define SC_ALLOW(/;"	d	file:
+SC_ALLOW_ARG	sandbox-seccomp-filter.c	/^#define SC_ALLOW_ARG(/;"	d	file:
+SC_ALLOW_ARG_MASK	sandbox-seccomp-filter.c	/^#define SC_ALLOW_ARG_MASK(/;"	d	file:
+SC_DENY	sandbox-seccomp-filter.c	/^#define SC_DENY(/;"	d	file:
+SECCOMP_AUDIT_ARCH	configure.ac	/^		AC_DEFINE_UNQUOTED([SECCOMP_AUDIT_ARCH], [$seccomp_audit_arch],$/;"	d
+SECCOMP_FILTER_FAIL	sandbox-seccomp-filter.c	/^# define SECCOMP_FILTER_FAIL /;"	d	file:
+SECCOMP_FILTER_FAIL	sandbox-seccomp-filter.c	/^#define SECCOMP_FILTER_FAIL /;"	d	file:
+SECONDS	misc.c	/^#define SECONDS	/;"	d	file:
+SED	Makefile.in	/^SED=@SED@$/;"	m
+SEE	moduli.5	/^.Sh SEE ALSO$/;"	s
+SEE	scp.1	/^.Sh SEE ALSO$/;"	s
+SEE	sftp-server.8	/^.Sh SEE ALSO$/;"	s
+SEE	sftp.1	/^.Sh SEE ALSO$/;"	s
+SEE	ssh-add.1	/^.Sh SEE ALSO$/;"	s
+SEE	ssh-agent.1	/^.Sh SEE ALSO$/;"	s
+SEE	ssh-keygen.1	/^.Sh SEE ALSO$/;"	s
+SEE	ssh-keyscan.1	/^.Sh SEE ALSO$/;"	s
+SEE	ssh-keysign.8	/^.Sh SEE ALSO$/;"	s
+SEE	ssh-pkcs11-helper.8	/^.Sh SEE ALSO$/;"	s
+SEE	ssh-sk-helper.8	/^.Sh SEE ALSO$/;"	s
+SEE	ssh.1	/^.Sh SEE ALSO$/;"	s
+SEE	ssh_config.5	/^.Sh SEE ALSO$/;"	s
+SEE	sshd.8	/^.Sh SEE ALSO$/;"	s
+SEE	sshd_config.5	/^.Sh SEE ALSO$/;"	s
+SEE ALSO	contrib/ssh-copy-id.1	/^.Sh "SEE ALSO"$/;"	s
+SELECT_MS	sk-usbhid.c	/^#define SELECT_MS	/;"	d	file:
+SEP	match.c	/^#define	SEP	/;"	d	file:
+SEP	openbsd-compat/glob.c	/^#define	SEP	/;"	d	file:
+SERVCONF_H	servconf.h	/^#define SERVCONF_H$/;"	d
+SERVCONF_MAX_DEPTH	servconf.c	/^#define SERVCONF_MAX_DEPTH	/;"	d	file:
+SERVERLOOP_H	serverloop.h	/^#define SERVERLOOP_H$/;"	d
+SESSION_H	session.h	/^#define SESSION_H$/;"	d
+SESSION_TYPE_DEFAULT	readconf.h	/^#define SESSION_TYPE_DEFAULT	/;"	d
+SESSION_TYPE_NONE	readconf.h	/^#define SESSION_TYPE_NONE	/;"	d
+SESSION_TYPE_SUBSYSTEM	readconf.h	/^#define SESSION_TYPE_SUBSYSTEM	/;"	d
+SETEUID_BREAKS_SETUID	configure.ac	/^	AC_DEFINE([SETEUID_BREAKS_SETUID])$/;"	d
+SETEUID_BREAKS_SETUID	configure.ac	/^	AC_DEFINE([SETEUID_BREAKS_SETUID], [1],$/;"	d
+SFTPSERVER_OBJS	Makefile.in	/^SFTPSERVER_OBJS=sftp-common.o sftp-server.o sftp-server-main.o$/;"	m
+SFTP_CLIENT_OBJS	Makefile.in	/^SFTP_CLIENT_OBJS=sftp-common.o sftp-client.o sftp-glob.o$/;"	m
+SFTP_DIRECTORY_CHARS	sftp-client.c	/^# define SFTP_DIRECTORY_CHARS /;"	d	file:
+SFTP_DIRENT	sftp-client.h	/^struct SFTP_DIRENT {$/;"	s
+SFTP_DIRENT	sftp-client.h	/^typedef struct SFTP_DIRENT SFTP_DIRENT;$/;"	t	typeref:struct:SFTP_DIRENT
+SFTP_EXT_COPY_DATA	sftp-client.c	/^#define SFTP_EXT_COPY_DATA	/;"	d	file:
+SFTP_EXT_FSTATVFS	sftp-client.c	/^#define SFTP_EXT_FSTATVFS	/;"	d	file:
+SFTP_EXT_FSYNC	sftp-client.c	/^#define SFTP_EXT_FSYNC	/;"	d	file:
+SFTP_EXT_GETUSERSGROUPS_BY_ID	sftp-client.c	/^#define SFTP_EXT_GETUSERSGROUPS_BY_ID	/;"	d	file:
+SFTP_EXT_HARDLINK	sftp-client.c	/^#define SFTP_EXT_HARDLINK	/;"	d	file:
+SFTP_EXT_LIMITS	sftp-client.c	/^#define SFTP_EXT_LIMITS	/;"	d	file:
+SFTP_EXT_LSETSTAT	sftp-client.c	/^#define SFTP_EXT_LSETSTAT	/;"	d	file:
+SFTP_EXT_PATH_EXPAND	sftp-client.c	/^#define SFTP_EXT_PATH_EXPAND	/;"	d	file:
+SFTP_EXT_POSIX_RENAME	sftp-client.c	/^#define SFTP_EXT_POSIX_RENAME	/;"	d	file:
+SFTP_EXT_STATVFS	sftp-client.c	/^#define SFTP_EXT_STATVFS	/;"	d	file:
+SFTP_MAX_MSG_LENGTH	sftp-common.h	/^#define SFTP_MAX_MSG_LENGTH	/;"	d
+SFTP_MAX_READ_LENGTH	sftp-server.c	/^#define SFTP_MAX_READ_LENGTH /;"	d	file:
+SFTP_OBJS	Makefile.in	/^SFTP_OBJS=	sftp.o sftp-usergroup.o progressmeter.o $(SFTP_CLIENT_OBJS)$/;"	m
+SFTP_OPENDIR	sftp-glob.c	/^struct SFTP_OPENDIR {$/;"	s	file:
+SFTP_PRINT	sftp-client.h	/^#define SFTP_PRINT	/;"	d
+SFTP_PROGRESS_ONLY	sftp-client.h	/^#define SFTP_PROGRESS_ONLY	/;"	d
+SFTP_QUIET	sftp-client.h	/^#define SFTP_QUIET	/;"	d
+SFTP_SERVER	Makefile.in	/^SFTP_SERVER=$(libexecdir)\/sftp-server$/;"	m
+SHA1Final	openbsd-compat/sha1.c	/^SHA1Final(u_int8_t digest[SHA1_DIGEST_LENGTH], SHA1_CTX *context)$/;"	f	typeref:typename:void
+SHA1Init	openbsd-compat/sha1.c	/^SHA1Init(SHA1_CTX *context)$/;"	f	typeref:typename:void
+SHA1Pad	openbsd-compat/sha1.c	/^SHA1Pad(SHA1_CTX *context)$/;"	f	typeref:typename:void
+SHA1Transform	openbsd-compat/sha1.c	/^SHA1Transform(u_int32_t state[5], const u_int8_t buffer[SHA1_BLOCK_LENGTH])$/;"	f	typeref:typename:void
+SHA1Update	openbsd-compat/sha1.c	/^SHA1Update(SHA1_CTX *context, const u_int8_t *data, size_t len)$/;"	f	typeref:typename:void
+SHA1_BLOCK_LENGTH	openbsd-compat/sha1.h	/^#define	SHA1_BLOCK_LENGTH	/;"	d
+SHA1_CTX	openbsd-compat/sha1.h	/^} SHA1_CTX;$/;"	t	typeref:struct:__anonad849d930108
+SHA1_DIGEST_LENGTH	openbsd-compat/sha1.h	/^#define	SHA1_DIGEST_LENGTH	/;"	d
+SHA1_DIGEST_STRING_LENGTH	openbsd-compat/sha1.h	/^#define	SHA1_DIGEST_STRING_LENGTH	/;"	d
+SHA224_BLOCK_LENGTH	openbsd-compat/sha2.h	/^#define SHA224_BLOCK_LENGTH	/;"	d
+SHA224_DIGEST_LENGTH	openbsd-compat/sha2.h	/^#define SHA224_DIGEST_LENGTH	/;"	d
+SHA224_DIGEST_STRING_LENGTH	openbsd-compat/sha2.h	/^#define SHA224_DIGEST_STRING_LENGTH	/;"	d
+SHA224_SHORT_BLOCK_LENGTH	openbsd-compat/sha2.c	/^#define SHA224_SHORT_BLOCK_LENGTH	/;"	d	file:
+SHA256Final	openbsd-compat/sha2.c	/^SHA256Final(u_int8_t digest[SHA256_DIGEST_LENGTH], SHA2_CTX *context)$/;"	f	typeref:typename:void
+SHA256Init	openbsd-compat/sha2.c	/^SHA256Init(SHA2_CTX *context)$/;"	f	typeref:typename:void
+SHA256Pad	openbsd-compat/sha2.c	/^SHA256Pad(SHA2_CTX *context)$/;"	f	typeref:typename:void
+SHA256Transform	openbsd-compat/sha2.c	/^SHA256Transform(u_int32_t state[8], const u_int8_t data[SHA256_BLOCK_LENGTH])$/;"	f	typeref:typename:void
+SHA256Update	openbsd-compat/sha2.c	/^SHA256Update(SHA2_CTX *context, const u_int8_t *data, size_t len)$/;"	f	typeref:typename:void
+SHA256_BLOCK_LENGTH	digest-libc.c	/^#define SHA256_BLOCK_LENGTH /;"	d	file:
+SHA256_BLOCK_LENGTH	openbsd-compat/sha2.h	/^#define SHA256_BLOCK_LENGTH	/;"	d
+SHA256_DIGEST_LENGTH	openbsd-compat/sha2.h	/^#define SHA256_DIGEST_LENGTH	/;"	d
+SHA256_DIGEST_STRING_LENGTH	openbsd-compat/sha2.h	/^#define SHA256_DIGEST_STRING_LENGTH	/;"	d
+SHA256_SHORT_BLOCK_LENGTH	openbsd-compat/sha2.c	/^#define SHA256_SHORT_BLOCK_LENGTH	/;"	d	file:
+SHA2_CTX	openbsd-compat/sha2.h	/^} SHA2_CTX;$/;"	t	typeref:struct:_SHA2_CTX
+SHA2_UNROLL_TRANSFORM	openbsd-compat/sha2.c	/^#define SHA2_UNROLL_TRANSFORM$/;"	d	file:
+SHA384Final	openbsd-compat/sha2.c	/^SHA384Final(u_int8_t digest[SHA384_DIGEST_LENGTH], SHA2_CTX *context)$/;"	f	typeref:typename:void
+SHA384Init	openbsd-compat/sha2.c	/^SHA384Init(SHA2_CTX *context)$/;"	f	typeref:typename:void
+SHA384Pad	openbsd-compat/sha2.c	/^SHA384Pad(SHA2_CTX *context)$/;"	f	typeref:typename:void
+SHA384Transform	openbsd-compat/sha2.c	/^SHA384Transform(u_int64_t state[8], const u_int8_t data[SHA512_BLOCK_LENGTH])$/;"	f	typeref:typename:void
+SHA384Update	openbsd-compat/sha2.c	/^SHA384Update(SHA2_CTX *context, const u_int8_t *data, size_t len)$/;"	f	typeref:typename:void
+SHA384_BLOCK_LENGTH	digest-libc.c	/^#define SHA384_BLOCK_LENGTH /;"	d	file:
+SHA384_BLOCK_LENGTH	openbsd-compat/sha2.h	/^#define SHA384_BLOCK_LENGTH	/;"	d
+SHA384_DIGEST_LENGTH	openbsd-compat/sha2.h	/^#define SHA384_DIGEST_LENGTH	/;"	d
+SHA384_DIGEST_STRING_LENGTH	openbsd-compat/sha2.h	/^#define SHA384_DIGEST_STRING_LENGTH	/;"	d
+SHA384_SHORT_BLOCK_LENGTH	openbsd-compat/sha2.c	/^#define SHA384_SHORT_BLOCK_LENGTH	/;"	d	file:
+SHA512Final	openbsd-compat/sha2.c	/^SHA512Final(u_int8_t digest[SHA512_DIGEST_LENGTH], SHA2_CTX *context)$/;"	f	typeref:typename:void
+SHA512Init	openbsd-compat/sha2.c	/^SHA512Init(SHA2_CTX *context)$/;"	f	typeref:typename:void
+SHA512Pad	openbsd-compat/sha2.c	/^SHA512Pad(SHA2_CTX *context)$/;"	f	typeref:typename:void
+SHA512Transform	openbsd-compat/sha2.c	/^SHA512Transform(u_int64_t state[8], const u_int8_t data[SHA512_BLOCK_LENGTH])$/;"	f	typeref:typename:void
+SHA512Update	openbsd-compat/sha2.c	/^SHA512Update(SHA2_CTX *context, const u_int8_t *data, size_t len)$/;"	f	typeref:typename:void
+SHA512_256_BLOCK_LENGTH	openbsd-compat/sha2.h	/^#define SHA512_256_BLOCK_LENGTH	/;"	d
+SHA512_256_DIGEST_LENGTH	openbsd-compat/sha2.h	/^#define SHA512_256_DIGEST_LENGTH	/;"	d
+SHA512_256_DIGEST_STRING_LENGTH	openbsd-compat/sha2.h	/^#define SHA512_256_DIGEST_STRING_LENGTH	/;"	d
+SHA512_BLOCK_LENGTH	digest-libc.c	/^#define SHA512_BLOCK_LENGTH /;"	d	file:
+SHA512_BLOCK_LENGTH	openbsd-compat/sha2.h	/^#define SHA512_BLOCK_LENGTH	/;"	d
+SHA512_DIGEST_LENGTH	openbsd-compat/bcrypt_pbkdf.c	/^#define SHA512_DIGEST_LENGTH /;"	d	file:
+SHA512_DIGEST_LENGTH	openbsd-compat/sha2.h	/^#define SHA512_DIGEST_LENGTH	/;"	d
+SHA512_DIGEST_STRING_LENGTH	openbsd-compat/sha2.h	/^#define SHA512_DIGEST_STRING_LENGTH	/;"	d
+SHA512_SHORT_BLOCK_LENGTH	openbsd-compat/sha2.c	/^#define SHA512_SHORT_BLOCK_LENGTH	/;"	d	file:
+SHELL	Makefile.in	/^SHELL=@SH@$/;"	m
+SHIFT_BIT	moduli.c	/^#define SHIFT_BIT	/;"	d	file:
+SHIFT_BYTE	moduli.c	/^#define SHIFT_BYTE	/;"	d	file:
+SHIFT_MEGABYTE	moduli.c	/^#define SHIFT_MEGABYTE	/;"	d	file:
+SHIFT_MEGAWORD	moduli.c	/^#define SHIFT_MEGAWORD	/;"	d	file:
+SHIFT_WORD	moduli.c	/^#define SHIFT_WORD	/;"	d	file:
+SHUT_RD	defines.h	/^  SHUT_RD = 0,		\/* No more receptions.  *\/$/;"	e	enum:__anon515363f90103
+SHUT_RD	defines.h	/^# define SHUT_RD /;"	d
+SHUT_RDWR	defines.h	/^  SHUT_RDWR			\/* No more receptions or transmissions.  *\/$/;"	e	enum:__anon515363f90103
+SHUT_RDWR	defines.h	/^# define SHUT_RDWR /;"	d
+SHUT_WR	defines.h	/^  SHUT_WR,			\/* No more transmissions.  *\/$/;"	e	enum:__anon515363f90103
+SHUT_WR	defines.h	/^# define SHUT_WR /;"	d
+SIGBLOB_LEN	ssh-dss.c	/^#define SIGBLOB_LEN	/;"	d	file:
+SIG_BLOCK	openbsd-compat/sigact.h	/^#define SIG_BLOCK /;"	d
+SIG_SETMASK	openbsd-compat/sigact.h	/^#define SIG_SETMASK /;"	d
+SIG_UNBLOCK	openbsd-compat/sigact.h	/^#define SIG_UNBLOCK /;"	d
+SIG_VERSION	sshsig.c	/^#define SIG_VERSION	/;"	d	file:
+SIMPLEQ_CONCAT	openbsd-compat/sys-queue.h	/^#define SIMPLEQ_CONCAT(/;"	d
+SIMPLEQ_EMPTY	openbsd-compat/sys-queue.h	/^#define	SIMPLEQ_EMPTY(/;"	d
+SIMPLEQ_END	openbsd-compat/sys-queue.h	/^#define	SIMPLEQ_END(/;"	d
+SIMPLEQ_ENTRY	openbsd-compat/sys-queue.h	/^#define SIMPLEQ_ENTRY(/;"	d
+SIMPLEQ_FIRST	openbsd-compat/sys-queue.h	/^#define	SIMPLEQ_FIRST(/;"	d
+SIMPLEQ_FOREACH	openbsd-compat/sys-queue.h	/^#define SIMPLEQ_FOREACH(/;"	d
+SIMPLEQ_FOREACH_SAFE	openbsd-compat/sys-queue.h	/^#define	SIMPLEQ_FOREACH_SAFE(/;"	d
+SIMPLEQ_HEAD	openbsd-compat/sys-queue.h	/^#define SIMPLEQ_HEAD(/;"	d
+SIMPLEQ_HEAD_INITIALIZER	openbsd-compat/sys-queue.h	/^#define SIMPLEQ_HEAD_INITIALIZER(/;"	d
+SIMPLEQ_INIT	openbsd-compat/sys-queue.h	/^#define	SIMPLEQ_INIT(/;"	d
+SIMPLEQ_INSERT_AFTER	openbsd-compat/sys-queue.h	/^#define SIMPLEQ_INSERT_AFTER(/;"	d
+SIMPLEQ_INSERT_HEAD	openbsd-compat/sys-queue.h	/^#define SIMPLEQ_INSERT_HEAD(/;"	d
+SIMPLEQ_INSERT_TAIL	openbsd-compat/sys-queue.h	/^#define SIMPLEQ_INSERT_TAIL(/;"	d
+SIMPLEQ_NEXT	openbsd-compat/sys-queue.h	/^#define	SIMPLEQ_NEXT(/;"	d
+SIMPLEQ_REMOVE_AFTER	openbsd-compat/sys-queue.h	/^#define SIMPLEQ_REMOVE_AFTER(/;"	d
+SIMPLEQ_REMOVE_HEAD	openbsd-compat/sys-queue.h	/^#define SIMPLEQ_REMOVE_HEAD(/;"	d
+SIZE761	sntrup761.c	/^#define SIZE761$/;"	d	file:
+SIZE_MAX	defines.h	/^#define SIZE_MAX /;"	d
+SIZE_T_MAX	defines.h	/^# define SIZE_T_MAX /;"	d
+SIZE_T_MAX	defines.h	/^#define SIZE_T_MAX /;"	d
+SKHELPER_OBJS	Makefile.in	/^SKHELPER_OBJS=	ssh-sk-helper.o ssh-sk.o sk-usbhid.o$/;"	m
+SKOBJS	Makefile.in	/^SKOBJS=	ssh-sk-client.o$/;"	m
+SK_DUMMY_LIBRARY	Makefile.in	/^SK_DUMMY_LIBRARY=@SK_DUMMY_LIBRARY@$/;"	m
+SK_DUMMY_LIBRARY	configure.ac	/^	AC_SUBST(SK_DUMMY_LIBRARY, [""])$/;"	s
+SK_DUMMY_LIBRARY	configure.ac	/^	AC_SUBST(SK_DUMMY_LIBRARY, [regress\/misc\/sk-dummy\/sk-dummy.so])$/;"	s
+SK_DUMMY_OBJS	Makefile.in	/^SK_DUMMY_OBJS=\\$/;"	m
+SK_NULL_OBJS	regress/misc/fuzz-harness/Makefile	/^SK_NULL_OBJS=ssh-sk-null.o$/;"	m
+SLASH	openbsd-compat/glob.c	/^#define	SLASH	/;"	d	file:
+SLIST_EMPTY	openbsd-compat/sys-queue.h	/^#define	SLIST_EMPTY(/;"	d
+SLIST_END	openbsd-compat/sys-queue.h	/^#define	SLIST_END(/;"	d
+SLIST_ENTRY	openbsd-compat/sys-queue.h	/^#define SLIST_ENTRY(/;"	d
+SLIST_FIRST	openbsd-compat/sys-queue.h	/^#define	SLIST_FIRST(/;"	d
+SLIST_FOREACH	openbsd-compat/sys-queue.h	/^#define	SLIST_FOREACH(/;"	d
+SLIST_FOREACH_SAFE	openbsd-compat/sys-queue.h	/^#define	SLIST_FOREACH_SAFE(/;"	d
+SLIST_HEAD	openbsd-compat/sys-queue.h	/^#define SLIST_HEAD(/;"	d
+SLIST_HEAD_INITIALIZER	openbsd-compat/sys-queue.h	/^#define	SLIST_HEAD_INITIALIZER(/;"	d
+SLIST_INIT	openbsd-compat/sys-queue.h	/^#define	SLIST_INIT(/;"	d
+SLIST_INSERT_AFTER	openbsd-compat/sys-queue.h	/^#define	SLIST_INSERT_AFTER(/;"	d
+SLIST_INSERT_HEAD	openbsd-compat/sys-queue.h	/^#define	SLIST_INSERT_HEAD(/;"	d
+SLIST_NEXT	openbsd-compat/sys-queue.h	/^#define	SLIST_NEXT(/;"	d
+SLIST_REMOVE	openbsd-compat/sys-queue.h	/^#define SLIST_REMOVE(/;"	d
+SLIST_REMOVE_AFTER	openbsd-compat/sys-queue.h	/^#define	SLIST_REMOVE_AFTER(/;"	d
+SLIST_REMOVE_HEAD	openbsd-compat/sys-queue.h	/^#define	SLIST_REMOVE_HEAD(/;"	d
+SMALL_MAXIMUM	moduli.c	/^#define SMALL_MAXIMUM	/;"	d	file:
+SNTRUP	sntrup761.c	/^#define SNTRUP /;"	d	file:
+SOCKS_CONNECT	regress/netcat.c	/^#define SOCKS_CONNECT	/;"	d	file:
+SOCKS_DOMAIN	regress/netcat.c	/^#define SOCKS_DOMAIN	/;"	d	file:
+SOCKS_IPV4	regress/netcat.c	/^#define SOCKS_IPV4	/;"	d	file:
+SOCKS_IPV6	regress/netcat.c	/^#define SOCKS_IPV6	/;"	d	file:
+SOCKS_NOAUTH	regress/netcat.c	/^#define SOCKS_NOAUTH	/;"	d	file:
+SOCKS_NOMETHOD	regress/netcat.c	/^#define SOCKS_NOMETHOD	/;"	d	file:
+SOCKS_PORT	regress/netcat.c	/^#define SOCKS_PORT	/;"	d	file:
+SOCKS_V4	regress/netcat.c	/^#define SOCKS_V4	/;"	d	file:
+SOCKS_V5	regress/netcat.c	/^#define SOCKS_V5	/;"	d	file:
+SORT_FLAGS	sftp.c	/^#define SORT_FLAGS	/;"	d	file:
+SPLAY_ASSEMBLE	openbsd-compat/sys-tree.h	/^#define SPLAY_ASSEMBLE(/;"	d
+SPLAY_EMPTY	openbsd-compat/sys-tree.h	/^#define SPLAY_EMPTY(/;"	d
+SPLAY_ENTRY	openbsd-compat/sys-tree.h	/^#define SPLAY_ENTRY(/;"	d
+SPLAY_FIND	openbsd-compat/sys-tree.h	/^#define SPLAY_FIND(/;"	d
+SPLAY_FOREACH	openbsd-compat/sys-tree.h	/^#define SPLAY_FOREACH(/;"	d
+SPLAY_GENERATE	openbsd-compat/sys-tree.h	/^#define SPLAY_GENERATE(/;"	d
+SPLAY_HEAD	openbsd-compat/sys-tree.h	/^#define SPLAY_HEAD(/;"	d
+SPLAY_INF	openbsd-compat/sys-tree.h	/^#define SPLAY_INF	/;"	d
+SPLAY_INIT	openbsd-compat/sys-tree.h	/^#define SPLAY_INIT(/;"	d
+SPLAY_INITIALIZER	openbsd-compat/sys-tree.h	/^#define SPLAY_INITIALIZER(/;"	d
+SPLAY_INSERT	openbsd-compat/sys-tree.h	/^#define SPLAY_INSERT(/;"	d
+SPLAY_LEFT	openbsd-compat/sys-tree.h	/^#define SPLAY_LEFT(/;"	d
+SPLAY_LINKLEFT	openbsd-compat/sys-tree.h	/^#define SPLAY_LINKLEFT(/;"	d
+SPLAY_LINKRIGHT	openbsd-compat/sys-tree.h	/^#define SPLAY_LINKRIGHT(/;"	d
+SPLAY_MAX	openbsd-compat/sys-tree.h	/^#define SPLAY_MAX(/;"	d
+SPLAY_MIN	openbsd-compat/sys-tree.h	/^#define SPLAY_MIN(/;"	d
+SPLAY_NEGINF	openbsd-compat/sys-tree.h	/^#define SPLAY_NEGINF	/;"	d
+SPLAY_NEXT	openbsd-compat/sys-tree.h	/^#define SPLAY_NEXT(/;"	d
+SPLAY_PROTOTYPE	openbsd-compat/sys-tree.h	/^#define SPLAY_PROTOTYPE(/;"	d
+SPLAY_REMOVE	openbsd-compat/sys-tree.h	/^#define SPLAY_REMOVE(/;"	d
+SPLAY_RIGHT	openbsd-compat/sys-tree.h	/^#define SPLAY_RIGHT(/;"	d
+SPLAY_ROOT	openbsd-compat/sys-tree.h	/^#define SPLAY_ROOT(/;"	d
+SPLAY_ROTATE_LEFT	openbsd-compat/sys-tree.h	/^#define SPLAY_ROTATE_LEFT(/;"	d
+SPLAY_ROTATE_RIGHT	openbsd-compat/sys-tree.h	/^#define SPLAY_ROTATE_RIGHT(/;"	d
+SPT_NONE	openbsd-compat/setproctitle.c	/^#define SPT_NONE	/;"	d	file:
+SPT_PADCHAR	openbsd-compat/setproctitle.c	/^# define SPT_PADCHAR	/;"	d	file:
+SPT_PSTAT	openbsd-compat/setproctitle.c	/^#define SPT_PSTAT	/;"	d	file:
+SPT_REUSEARGV	openbsd-compat/setproctitle.c	/^#define SPT_REUSEARGV	/;"	d	file:
+SPT_TYPE	configure.ac	/^	AC_DEFINE([SPT_TYPE], [SPT_PSTAT])$/;"	d
+SPT_TYPE	configure.ac	/^	AC_DEFINE([SPT_TYPE], [SPT_REUSEARGV])$/;"	d
+SPT_TYPE	configure.ac	/^	AC_DEFINE([SPT_TYPE], [SPT_REUSEARGV],$/;"	d
+SPT_TYPE	openbsd-compat/setproctitle.c	/^# define SPT_TYPE	/;"	d	file:
+SRCS	regress/misc/sk-dummy/Makefile	/^SRCS=sk-dummy.c$/;"	m
+SRCS	regress/unittests/authopt/Makefile	/^SRCS=tests.c$/;"	m
+SRCS	regress/unittests/bitmap/Makefile	/^SRCS=tests.c$/;"	m
+SRCS	regress/unittests/conversion/Makefile	/^SRCS=tests.c$/;"	m
+SRCS	regress/unittests/hostkeys/Makefile	/^SRCS=tests.c test_iterate.c$/;"	m
+SRCS	regress/unittests/kex/Makefile	/^SRCS=tests.c test_kex.c$/;"	m
+SRCS	regress/unittests/match/Makefile	/^SRCS=tests.c$/;"	m
+SRCS	regress/unittests/misc/Makefile	/^SRCS=tests.c$/;"	m
+SRCS	regress/unittests/sshbuf/Makefile	/^SRCS=tests.c$/;"	m
+SRCS	regress/unittests/sshkey/Makefile	/^SRCS=tests.c test_sshkey.c test_file.c test_fuzz.c common.c$/;"	m
+SRCS	regress/unittests/sshsig/Makefile	/^SRCS=tests.c$/;"	m
+SRCS	regress/unittests/test_helper/Makefile	/^SRCS=	test_helper.c fuzz.c$/;"	m
+SRCS	regress/unittests/utf8/Makefile	/^SRCS=tests.c$/;"	m
+SSH private key string	regress/unittests/sshsig/webauthn.html	/^<h2>SSH private key string<\/h2>$/;"	i
+SSH pubkey blob	regress/unittests/sshsig/webauthn.html	/^<h2>SSH pubkey blob<\/h2>$/;"	i
+SSH pubkey string	regress/unittests/sshsig/webauthn.html	/^<h2>SSH pubkey string<\/h2>$/;"	i
+SSH-BASED	ssh.1	/^.Sh SSH-BASED VIRTUAL PRIVATE NETWORKS$/;"	s
+SSH2_AGENTC_ADD_IDENTITY	authfd.h	/^#define SSH2_AGENTC_ADD_IDENTITY	/;"	d
+SSH2_AGENTC_ADD_ID_CONSTRAINED	authfd.h	/^#define SSH2_AGENTC_ADD_ID_CONSTRAINED	/;"	d
+SSH2_AGENTC_REMOVE_ALL_IDENTITIES	authfd.h	/^#define SSH2_AGENTC_REMOVE_ALL_IDENTITIES	/;"	d
+SSH2_AGENTC_REMOVE_IDENTITY	authfd.h	/^#define SSH2_AGENTC_REMOVE_IDENTITY	/;"	d
+SSH2_AGENTC_REQUEST_IDENTITIES	authfd.h	/^#define SSH2_AGENTC_REQUEST_IDENTITIES	/;"	d
+SSH2_AGENTC_SIGN_REQUEST	authfd.h	/^#define SSH2_AGENTC_SIGN_REQUEST	/;"	d
+SSH2_AGENT_FAILURE	authfd.h	/^#define SSH2_AGENT_FAILURE	/;"	d
+SSH2_AGENT_IDENTITIES_ANSWER	authfd.h	/^#define SSH2_AGENT_IDENTITIES_ANSWER	/;"	d
+SSH2_AGENT_SIGN_RESPONSE	authfd.h	/^#define SSH2_AGENT_SIGN_RESPONSE	/;"	d
+SSH2_CERT_TYPE_HOST	ssh2.h	/^#define SSH2_CERT_TYPE_HOST	/;"	d
+SSH2_CERT_TYPE_USER	ssh2.h	/^#define SSH2_CERT_TYPE_USER	/;"	d
+SSH2_DISCONNECT_AUTH_CANCELLED_BY_USER	ssh2.h	/^#define SSH2_DISCONNECT_AUTH_CANCELLED_BY_USER	/;"	d
+SSH2_DISCONNECT_BY_APPLICATION	ssh2.h	/^#define SSH2_DISCONNECT_BY_APPLICATION	/;"	d
+SSH2_DISCONNECT_COMPRESSION_ERROR	ssh2.h	/^#define SSH2_DISCONNECT_COMPRESSION_ERROR	/;"	d
+SSH2_DISCONNECT_CONNECTION_LOST	ssh2.h	/^#define SSH2_DISCONNECT_CONNECTION_LOST	/;"	d
+SSH2_DISCONNECT_HOST_AUTHENTICATION_FAILED	ssh2.h	/^#define SSH2_DISCONNECT_HOST_AUTHENTICATION_FAILED	/;"	d
+SSH2_DISCONNECT_HOST_KEY_NOT_VERIFIABLE	ssh2.h	/^#define SSH2_DISCONNECT_HOST_KEY_NOT_VERIFIABLE	/;"	d
+SSH2_DISCONNECT_HOST_NOT_ALLOWED_TO_CONNECT	ssh2.h	/^#define SSH2_DISCONNECT_HOST_NOT_ALLOWED_TO_CONNECT	/;"	d
+SSH2_DISCONNECT_ILLEGAL_USER_NAME	ssh2.h	/^#define SSH2_DISCONNECT_ILLEGAL_USER_NAME	/;"	d
+SSH2_DISCONNECT_KEY_EXCHANGE_FAILED	ssh2.h	/^#define SSH2_DISCONNECT_KEY_EXCHANGE_FAILED	/;"	d
+SSH2_DISCONNECT_MAC_ERROR	ssh2.h	/^#define SSH2_DISCONNECT_MAC_ERROR	/;"	d
+SSH2_DISCONNECT_NO_MORE_AUTH_METHODS_AVAILABLE	ssh2.h	/^#define SSH2_DISCONNECT_NO_MORE_AUTH_METHODS_AVAILABLE	/;"	d
+SSH2_DISCONNECT_PROTOCOL_ERROR	ssh2.h	/^#define SSH2_DISCONNECT_PROTOCOL_ERROR	/;"	d
+SSH2_DISCONNECT_PROTOCOL_VERSION_NOT_SUPPORTED	ssh2.h	/^#define SSH2_DISCONNECT_PROTOCOL_VERSION_NOT_SUPPORTED	/;"	d
+SSH2_DISCONNECT_RESERVED	ssh2.h	/^#define SSH2_DISCONNECT_RESERVED	/;"	d
+SSH2_DISCONNECT_SERVICE_NOT_AVAILABLE	ssh2.h	/^#define SSH2_DISCONNECT_SERVICE_NOT_AVAILABLE	/;"	d
+SSH2_DISCONNECT_TOO_MANY_CONNECTIONS	ssh2.h	/^#define SSH2_DISCONNECT_TOO_MANY_CONNECTIONS	/;"	d
+SSH2_EXTENDED_DATA_STDERR	ssh2.h	/^#define SSH2_EXTENDED_DATA_STDERR	/;"	d
+SSH2_FILEXFER_ATTR_ACMODTIME	sftp.h	/^#define SSH2_FILEXFER_ATTR_ACMODTIME	/;"	d
+SSH2_FILEXFER_ATTR_EXTENDED	sftp.h	/^#define SSH2_FILEXFER_ATTR_EXTENDED	/;"	d
+SSH2_FILEXFER_ATTR_PERMISSIONS	sftp.h	/^#define SSH2_FILEXFER_ATTR_PERMISSIONS	/;"	d
+SSH2_FILEXFER_ATTR_SIZE	sftp.h	/^#define SSH2_FILEXFER_ATTR_SIZE	/;"	d
+SSH2_FILEXFER_ATTR_UIDGID	sftp.h	/^#define SSH2_FILEXFER_ATTR_UIDGID	/;"	d
+SSH2_FILEXFER_VERSION	sftp.h	/^#define	SSH2_FILEXFER_VERSION	/;"	d
+SSH2_FXE_STATVFS_ST_NOSUID	sftp.h	/^#define SSH2_FXE_STATVFS_ST_NOSUID	/;"	d
+SSH2_FXE_STATVFS_ST_RDONLY	sftp.h	/^#define SSH2_FXE_STATVFS_ST_RDONLY	/;"	d
+SSH2_FXF_APPEND	sftp.h	/^#define SSH2_FXF_APPEND	/;"	d
+SSH2_FXF_CREAT	sftp.h	/^#define SSH2_FXF_CREAT	/;"	d
+SSH2_FXF_EXCL	sftp.h	/^#define SSH2_FXF_EXCL	/;"	d
+SSH2_FXF_READ	sftp.h	/^#define SSH2_FXF_READ	/;"	d
+SSH2_FXF_TRUNC	sftp.h	/^#define SSH2_FXF_TRUNC	/;"	d
+SSH2_FXF_WRITE	sftp.h	/^#define SSH2_FXF_WRITE	/;"	d
+SSH2_FXP_ATTRS	sftp.h	/^#define SSH2_FXP_ATTRS	/;"	d
+SSH2_FXP_CLOSE	sftp.h	/^#define SSH2_FXP_CLOSE	/;"	d
+SSH2_FXP_DATA	sftp.h	/^#define SSH2_FXP_DATA	/;"	d
+SSH2_FXP_EXTENDED	sftp.h	/^#define SSH2_FXP_EXTENDED	/;"	d
+SSH2_FXP_EXTENDED_REPLY	sftp.h	/^#define SSH2_FXP_EXTENDED_REPLY	/;"	d
+SSH2_FXP_FSETSTAT	sftp.h	/^#define SSH2_FXP_FSETSTAT	/;"	d
+SSH2_FXP_FSTAT	sftp.h	/^#define SSH2_FXP_FSTAT	/;"	d
+SSH2_FXP_HANDLE	sftp.h	/^#define SSH2_FXP_HANDLE	/;"	d
+SSH2_FXP_INIT	sftp.h	/^#define SSH2_FXP_INIT	/;"	d
+SSH2_FXP_LSTAT	sftp.h	/^#define SSH2_FXP_LSTAT	/;"	d
+SSH2_FXP_MKDIR	sftp.h	/^#define SSH2_FXP_MKDIR	/;"	d
+SSH2_FXP_NAME	sftp.h	/^#define SSH2_FXP_NAME	/;"	d
+SSH2_FXP_OPEN	sftp.h	/^#define SSH2_FXP_OPEN	/;"	d
+SSH2_FXP_OPENDIR	sftp.h	/^#define SSH2_FXP_OPENDIR	/;"	d
+SSH2_FXP_READ	sftp.h	/^#define SSH2_FXP_READ	/;"	d
+SSH2_FXP_READDIR	sftp.h	/^#define SSH2_FXP_READDIR	/;"	d
+SSH2_FXP_READLINK	sftp.h	/^#define SSH2_FXP_READLINK	/;"	d
+SSH2_FXP_REALPATH	sftp.h	/^#define SSH2_FXP_REALPATH	/;"	d
+SSH2_FXP_REMOVE	sftp.h	/^#define SSH2_FXP_REMOVE	/;"	d
+SSH2_FXP_RENAME	sftp.h	/^#define SSH2_FXP_RENAME	/;"	d
+SSH2_FXP_RMDIR	sftp.h	/^#define SSH2_FXP_RMDIR	/;"	d
+SSH2_FXP_SETSTAT	sftp.h	/^#define SSH2_FXP_SETSTAT	/;"	d
+SSH2_FXP_STAT	sftp.h	/^#define SSH2_FXP_STAT	/;"	d
+SSH2_FXP_STATUS	sftp.h	/^#define SSH2_FXP_STATUS	/;"	d
+SSH2_FXP_STAT_VERSION_0	sftp.h	/^#define SSH2_FXP_STAT_VERSION_0	/;"	d
+SSH2_FXP_SYMLINK	sftp.h	/^#define SSH2_FXP_SYMLINK	/;"	d
+SSH2_FXP_VERSION	sftp.h	/^#define SSH2_FXP_VERSION	/;"	d
+SSH2_FXP_WRITE	sftp.h	/^#define SSH2_FXP_WRITE	/;"	d
+SSH2_FX_BAD_MESSAGE	sftp.h	/^#define SSH2_FX_BAD_MESSAGE	/;"	d
+SSH2_FX_CONNECTION_LOST	sftp.h	/^#define SSH2_FX_CONNECTION_LOST	/;"	d
+SSH2_FX_EOF	sftp.h	/^#define SSH2_FX_EOF	/;"	d
+SSH2_FX_FAILURE	sftp.h	/^#define SSH2_FX_FAILURE	/;"	d
+SSH2_FX_MAX	sftp.h	/^#define SSH2_FX_MAX	/;"	d
+SSH2_FX_NO_CONNECTION	sftp.h	/^#define SSH2_FX_NO_CONNECTION	/;"	d
+SSH2_FX_NO_SUCH_FILE	sftp.h	/^#define SSH2_FX_NO_SUCH_FILE	/;"	d
+SSH2_FX_OK	sftp.h	/^#define SSH2_FX_OK	/;"	d
+SSH2_FX_OP_UNSUPPORTED	sftp.h	/^#define SSH2_FX_OP_UNSUPPORTED	/;"	d
+SSH2_FX_PERMISSION_DENIED	sftp.h	/^#define SSH2_FX_PERMISSION_DENIED	/;"	d
+SSH2_MSG_CHANNEL_CLOSE	ssh2.h	/^#define SSH2_MSG_CHANNEL_CLOSE	/;"	d
+SSH2_MSG_CHANNEL_DATA	ssh2.h	/^#define SSH2_MSG_CHANNEL_DATA	/;"	d
+SSH2_MSG_CHANNEL_EOF	ssh2.h	/^#define SSH2_MSG_CHANNEL_EOF	/;"	d
+SSH2_MSG_CHANNEL_EXTENDED_DATA	ssh2.h	/^#define SSH2_MSG_CHANNEL_EXTENDED_DATA	/;"	d
+SSH2_MSG_CHANNEL_FAILURE	ssh2.h	/^#define SSH2_MSG_CHANNEL_FAILURE	/;"	d
+SSH2_MSG_CHANNEL_OPEN	ssh2.h	/^#define SSH2_MSG_CHANNEL_OPEN	/;"	d
+SSH2_MSG_CHANNEL_OPEN_CONFIRMATION	ssh2.h	/^#define SSH2_MSG_CHANNEL_OPEN_CONFIRMATION	/;"	d
+SSH2_MSG_CHANNEL_OPEN_FAILURE	ssh2.h	/^#define SSH2_MSG_CHANNEL_OPEN_FAILURE	/;"	d
+SSH2_MSG_CHANNEL_REQUEST	ssh2.h	/^#define SSH2_MSG_CHANNEL_REQUEST	/;"	d
+SSH2_MSG_CHANNEL_SUCCESS	ssh2.h	/^#define SSH2_MSG_CHANNEL_SUCCESS	/;"	d
+SSH2_MSG_CHANNEL_WINDOW_ADJUST	ssh2.h	/^#define SSH2_MSG_CHANNEL_WINDOW_ADJUST	/;"	d
+SSH2_MSG_CONNECTION_MAX	ssh2.h	/^#define SSH2_MSG_CONNECTION_MAX	/;"	d
+SSH2_MSG_CONNECTION_MIN	ssh2.h	/^#define SSH2_MSG_CONNECTION_MIN	/;"	d
+SSH2_MSG_DEBUG	ssh2.h	/^#define SSH2_MSG_DEBUG	/;"	d
+SSH2_MSG_DISCONNECT	ssh2.h	/^#define SSH2_MSG_DISCONNECT	/;"	d
+SSH2_MSG_EXT_INFO	ssh2.h	/^#define SSH2_MSG_EXT_INFO	/;"	d
+SSH2_MSG_GLOBAL_REQUEST	ssh2.h	/^#define SSH2_MSG_GLOBAL_REQUEST	/;"	d
+SSH2_MSG_IGNORE	ssh2.h	/^#define SSH2_MSG_IGNORE	/;"	d
+SSH2_MSG_KEXDH_INIT	ssh2.h	/^#define SSH2_MSG_KEXDH_INIT	/;"	d
+SSH2_MSG_KEXDH_REPLY	ssh2.h	/^#define SSH2_MSG_KEXDH_REPLY	/;"	d
+SSH2_MSG_KEXINIT	ssh2.h	/^#define SSH2_MSG_KEXINIT	/;"	d
+SSH2_MSG_KEX_DH_GEX_GROUP	ssh2.h	/^#define SSH2_MSG_KEX_DH_GEX_GROUP	/;"	d
+SSH2_MSG_KEX_DH_GEX_INIT	ssh2.h	/^#define SSH2_MSG_KEX_DH_GEX_INIT	/;"	d
+SSH2_MSG_KEX_DH_GEX_REPLY	ssh2.h	/^#define SSH2_MSG_KEX_DH_GEX_REPLY	/;"	d
+SSH2_MSG_KEX_DH_GEX_REQUEST	ssh2.h	/^#define SSH2_MSG_KEX_DH_GEX_REQUEST	/;"	d
+SSH2_MSG_KEX_DH_GEX_REQUEST_OLD	ssh2.h	/^#define SSH2_MSG_KEX_DH_GEX_REQUEST_OLD	/;"	d
+SSH2_MSG_KEX_ECDH_INIT	ssh2.h	/^#define SSH2_MSG_KEX_ECDH_INIT	/;"	d
+SSH2_MSG_KEX_ECDH_REPLY	ssh2.h	/^#define SSH2_MSG_KEX_ECDH_REPLY	/;"	d
+SSH2_MSG_LOCAL_MAX	ssh2.h	/^#define SSH2_MSG_LOCAL_MAX	/;"	d
+SSH2_MSG_LOCAL_MIN	ssh2.h	/^#define SSH2_MSG_LOCAL_MIN	/;"	d
+SSH2_MSG_MAX	ssh2.h	/^#define SSH2_MSG_MAX	/;"	d
+SSH2_MSG_MIN	ssh2.h	/^#define SSH2_MSG_MIN	/;"	d
+SSH2_MSG_NEWKEYS	ssh2.h	/^#define SSH2_MSG_NEWKEYS	/;"	d
+SSH2_MSG_REQUEST_FAILURE	ssh2.h	/^#define SSH2_MSG_REQUEST_FAILURE	/;"	d
+SSH2_MSG_REQUEST_SUCCESS	ssh2.h	/^#define SSH2_MSG_REQUEST_SUCCESS	/;"	d
+SSH2_MSG_RESERVED_MAX	ssh2.h	/^#define SSH2_MSG_RESERVED_MAX	/;"	d
+SSH2_MSG_RESERVED_MIN	ssh2.h	/^#define SSH2_MSG_RESERVED_MIN	/;"	d
+SSH2_MSG_SERVICE_ACCEPT	ssh2.h	/^#define SSH2_MSG_SERVICE_ACCEPT	/;"	d
+SSH2_MSG_SERVICE_REQUEST	ssh2.h	/^#define SSH2_MSG_SERVICE_REQUEST	/;"	d
+SSH2_MSG_TRANSPORT_MAX	ssh2.h	/^#define SSH2_MSG_TRANSPORT_MAX	/;"	d
+SSH2_MSG_TRANSPORT_MIN	ssh2.h	/^#define SSH2_MSG_TRANSPORT_MIN	/;"	d
+SSH2_MSG_UNIMPLEMENTED	ssh2.h	/^#define SSH2_MSG_UNIMPLEMENTED	/;"	d
+SSH2_MSG_USERAUTH_BANNER	ssh2.h	/^#define SSH2_MSG_USERAUTH_BANNER	/;"	d
+SSH2_MSG_USERAUTH_FAILURE	ssh2.h	/^#define SSH2_MSG_USERAUTH_FAILURE	/;"	d
+SSH2_MSG_USERAUTH_GSSAPI_ERROR	ssh-gss.h	/^#define SSH2_MSG_USERAUTH_GSSAPI_ERROR	/;"	d
+SSH2_MSG_USERAUTH_GSSAPI_ERRTOK	ssh-gss.h	/^#define SSH2_MSG_USERAUTH_GSSAPI_ERRTOK	/;"	d
+SSH2_MSG_USERAUTH_GSSAPI_EXCHANGE_COMPLETE	ssh-gss.h	/^#define SSH2_MSG_USERAUTH_GSSAPI_EXCHANGE_COMPLETE	/;"	d
+SSH2_MSG_USERAUTH_GSSAPI_MIC	ssh-gss.h	/^#define SSH2_MSG_USERAUTH_GSSAPI_MIC	/;"	d
+SSH2_MSG_USERAUTH_GSSAPI_RESPONSE	ssh-gss.h	/^#define SSH2_MSG_USERAUTH_GSSAPI_RESPONSE	/;"	d
+SSH2_MSG_USERAUTH_GSSAPI_TOKEN	ssh-gss.h	/^#define SSH2_MSG_USERAUTH_GSSAPI_TOKEN	/;"	d
+SSH2_MSG_USERAUTH_INFO_REQUEST	ssh2.h	/^#define SSH2_MSG_USERAUTH_INFO_REQUEST	/;"	d
+SSH2_MSG_USERAUTH_INFO_RESPONSE	ssh2.h	/^#define SSH2_MSG_USERAUTH_INFO_RESPONSE	/;"	d
+SSH2_MSG_USERAUTH_MAX	ssh2.h	/^#define SSH2_MSG_USERAUTH_MAX	/;"	d
+SSH2_MSG_USERAUTH_MIN	ssh2.h	/^#define SSH2_MSG_USERAUTH_MIN	/;"	d
+SSH2_MSG_USERAUTH_PASSWD_CHANGEREQ	ssh2.h	/^#define SSH2_MSG_USERAUTH_PASSWD_CHANGEREQ	/;"	d
+SSH2_MSG_USERAUTH_PER_METHOD_MAX	ssh2.h	/^#define SSH2_MSG_USERAUTH_PER_METHOD_MAX	/;"	d
+SSH2_MSG_USERAUTH_PER_METHOD_MIN	ssh2.h	/^#define SSH2_MSG_USERAUTH_PER_METHOD_MIN	/;"	d
+SSH2_MSG_USERAUTH_PK_OK	ssh2.h	/^#define SSH2_MSG_USERAUTH_PK_OK	/;"	d
+SSH2_MSG_USERAUTH_REQUEST	ssh2.h	/^#define SSH2_MSG_USERAUTH_REQUEST	/;"	d
+SSH2_MSG_USERAUTH_SUCCESS	ssh2.h	/^#define SSH2_MSG_USERAUTH_SUCCESS	/;"	d
+SSH2_OPEN_ADMINISTRATIVELY_PROHIBITED	ssh2.h	/^#define SSH2_OPEN_ADMINISTRATIVELY_PROHIBITED	/;"	d
+SSH2_OPEN_CONNECT_FAILED	ssh2.h	/^#define SSH2_OPEN_CONNECT_FAILED	/;"	d
+SSH2_OPEN_RESOURCE_SHORTAGE	ssh2.h	/^#define SSH2_OPEN_RESOURCE_SHORTAGE	/;"	d
+SSH2_OPEN_UNKNOWN_CHANNEL_TYPE	ssh2.h	/^#define SSH2_OPEN_UNKNOWN_CHANNEL_TYPE	/;"	d
+SSHADD_OBJS	Makefile.in	/^SSHADD_OBJS=	ssh-add.o $(SKOBJS)$/;"	m
+SSHAGENT_OBJS	Makefile.in	/^SSHAGENT_OBJS=	ssh-agent.o ssh-pkcs11-client.o $(SKOBJS)$/;"	m
+SSHBUF_ABORT	sshbuf.h	/^#  define SSHBUF_ABORT(/;"	d
+SSHBUF_DBG	sshbuf.h	/^#  define SSHBUF_DBG(/;"	d
+SSHBUF_INTERNAL	regress/unittests/sshbuf/test_sshbuf.c	/^#define SSHBUF_INTERNAL /;"	d	file:
+SSHBUF_INTERNAL	regress/unittests/sshbuf/test_sshbuf_fixed.c	/^#define SSHBUF_INTERNAL /;"	d	file:
+SSHBUF_INTERNAL	regress/unittests/sshkey/test_sshkey.c	/^#define SSHBUF_INTERNAL /;"	d	file:
+SSHBUF_INTERNAL	sshbuf-getput-basic.c	/^#define SSHBUF_INTERNAL$/;"	d	file:
+SSHBUF_INTERNAL	sshbuf-getput-crypto.c	/^#define SSHBUF_INTERNAL$/;"	d	file:
+SSHBUF_INTERNAL	sshbuf-misc.c	/^#define SSHBUF_INTERNAL$/;"	d	file:
+SSHBUF_INTERNAL	sshbuf.c	/^#define SSHBUF_INTERNAL$/;"	d	file:
+SSHBUF_MAX_BIGNUM	sshbuf.h	/^#define SSHBUF_MAX_BIGNUM	/;"	d
+SSHBUF_MAX_ECPOINT	sshbuf.h	/^#define SSHBUF_MAX_ECPOINT	/;"	d
+SSHBUF_PACK_MIN	sshbuf.h	/^# define SSHBUF_PACK_MIN	/;"	d
+SSHBUF_REFS_MAX	sshbuf.h	/^#define SSHBUF_REFS_MAX	/;"	d
+SSHBUF_SIZE_INC	sshbuf.h	/^# define SSHBUF_SIZE_INC	/;"	d
+SSHBUF_SIZE_INIT	sshbuf.h	/^# define SSHBUF_SIZE_INIT	/;"	d
+SSHBUF_SIZE_MAX	sshbuf.h	/^#define SSHBUF_SIZE_MAX	/;"	d
+SSHBUF_TELL	sshbuf.h	/^#  define SSHBUF_TELL(/;"	d
+SSHCFG_ALL	servconf.c	/^#define SSHCFG_ALL	/;"	d	file:
+SSHCFG_GLOBAL	servconf.c	/^#define SSHCFG_GLOBAL	/;"	d	file:
+SSHCFG_MATCH	servconf.c	/^#define SSHCFG_MATCH	/;"	d	file:
+SSHCFG_MATCH_ONLY	servconf.c	/^#define SSHCFG_MATCH_ONLY	/;"	d	file:
+SSHCFG_NEVERMATCH	servconf.c	/^#define SSHCFG_NEVERMATCH	/;"	d	file:
+SSHCONF_CHECKPERM	readconf.h	/^#define SSHCONF_CHECKPERM	/;"	d
+SSHCONF_FINAL	readconf.h	/^#define SSHCONF_FINAL	/;"	d
+SSHCONF_NEVERMATCH	readconf.h	/^#define SSHCONF_NEVERMATCH	/;"	d
+SSHCONF_USERCONF	readconf.h	/^#define SSHCONF_USERCONF	/;"	d
+SSHCTL_MASTER_ASK	readconf.h	/^#define SSHCTL_MASTER_ASK	/;"	d
+SSHCTL_MASTER_AUTO	readconf.h	/^#define SSHCTL_MASTER_AUTO	/;"	d
+SSHCTL_MASTER_AUTO_ASK	readconf.h	/^#define SSHCTL_MASTER_AUTO_ASK	/;"	d
+SSHCTL_MASTER_NO	readconf.h	/^#define SSHCTL_MASTER_NO	/;"	d
+SSHCTL_MASTER_YES	readconf.h	/^#define SSHCTL_MASTER_YES	/;"	d
+SSHDIR	pathnames.h	/^#define SSHDIR	/;"	d
+SSHDLIBS	Makefile.in	/^SSHDLIBS=@SSHDLIBS@$/;"	m
+SSHDLIBS	configure.ac	/^AC_SUBST([SSHDLIBS])$/;"	s
+SSHDOBJS	Makefile.in	/^SSHDOBJS=sshd.o auth-rhosts.o auth-passwd.o \\$/;"	m
+SSHD_ACQUIRES_CTTY	configure.ac	/^	AC_DEFINE([SSHD_ACQUIRES_CTTY])$/;"	d
+SSHD_ACQUIRES_CTTY	configure.ac	/^	AC_DEFINE([SSHD_ACQUIRES_CTTY], [1],$/;"	d
+SSHD_MAXSTARTUPS_LOG_INTERVAL	sshd.c	/^#define SSHD_MAXSTARTUPS_LOG_INTERVAL	/;"	d	file:
+SSHD_PAM_SERVICE	auth-pam.c	/^# define SSHD_PAM_SERVICE	/;"	d	file:
+SSHFP_HASH_MAX	dns.h	/^	SSHFP_HASH_MAX = 3$/;"	e	enum:sshfp_hashes
+SSHFP_HASH_RESERVED	dns.h	/^	SSHFP_HASH_RESERVED = 0,$/;"	e	enum:sshfp_hashes
+SSHFP_HASH_SHA1	dns.h	/^	SSHFP_HASH_SHA1 = 1,$/;"	e	enum:sshfp_hashes
+SSHFP_HASH_SHA256	dns.h	/^	SSHFP_HASH_SHA256 = 2,$/;"	e	enum:sshfp_hashes
+SSHFP_KEY_DSA	dns.h	/^	SSHFP_KEY_DSA = 2,$/;"	e	enum:sshfp_types
+SSHFP_KEY_ECDSA	dns.h	/^	SSHFP_KEY_ECDSA = 3,$/;"	e	enum:sshfp_types
+SSHFP_KEY_ED25519	dns.h	/^	SSHFP_KEY_ED25519 = 4,$/;"	e	enum:sshfp_types
+SSHFP_KEY_RESERVED	dns.h	/^	SSHFP_KEY_RESERVED = 0,$/;"	e	enum:sshfp_types
+SSHFP_KEY_RSA	dns.h	/^	SSHFP_KEY_RSA = 1,$/;"	e	enum:sshfp_types
+SSHFP_KEY_XMSS	dns.h	/^	SSHFP_KEY_XMSS = 5$/;"	e	enum:sshfp_types
+SSHKEYGEN_OBJS	Makefile.in	/^SSHKEYGEN_OBJS=	ssh-keygen.o sshsig.o $(SKOBJS)$/;"	m
+SSHKEYSCAN_OBJS	Makefile.in	/^SSHKEYSCAN_OBJS=ssh-keyscan.o $(SKOBJS)$/;"	m
+SSHKEYSIGN_OBJS	Makefile.in	/^SSHKEYSIGN_OBJS=ssh-keysign.o readconf.o uidswap.o $(SKOBJS)$/;"	m
+SSHKEY_CERT_MAX_PRINCIPALS	sshkey.h	/^#define SSHKEY_CERT_MAX_PRINCIPALS	/;"	d
+SSHKEY_FLAG_EXT	sshkey.h	/^#define SSHKEY_FLAG_EXT	/;"	d
+SSHKEY_H	sshkey.h	/^#define SSHKEY_H$/;"	d
+SSHKEY_INTERNAL	ssh-dss.c	/^#define SSHKEY_INTERNAL$/;"	d	file:
+SSHKEY_INTERNAL	ssh-ecdsa-sk.c	/^#define SSHKEY_INTERNAL$/;"	d	file:
+SSHKEY_INTERNAL	ssh-ecdsa.c	/^#define SSHKEY_INTERNAL$/;"	d	file:
+SSHKEY_INTERNAL	ssh-ed25519-sk.c	/^#define SSHKEY_INTERNAL$/;"	d	file:
+SSHKEY_INTERNAL	ssh-ed25519.c	/^#define SSHKEY_INTERNAL$/;"	d	file:
+SSHKEY_INTERNAL	ssh-rsa.c	/^#define SSHKEY_INTERNAL$/;"	d	file:
+SSHKEY_INTERNAL	ssh-xmss.c	/^#define SSHKEY_INTERNAL$/;"	d	file:
+SSHKEY_INTERNAL	sshkey.c	/^#define SSHKEY_INTERNAL$/;"	d	file:
+SSHKEY_PRIVATE_OPENSSH	sshkey.h	/^	SSHKEY_PRIVATE_OPENSSH = 0,$/;"	e	enum:sshkey_private_format
+SSHKEY_PRIVATE_PEM	sshkey.h	/^	SSHKEY_PRIVATE_PEM = 1,$/;"	e	enum:sshkey_private_format
+SSHKEY_PRIVATE_PKCS8	sshkey.h	/^	SSHKEY_PRIVATE_PKCS8 = 2,$/;"	e	enum:sshkey_private_format
+SSHKEY_SERIALIZE_DEFAULT	sshkey.h	/^	SSHKEY_SERIALIZE_DEFAULT = 0,$/;"	e	enum:sshkey_serialize_rep
+SSHKEY_SERIALIZE_FULL	sshkey.h	/^	SSHKEY_SERIALIZE_FULL = 2,	\/* include keys for saving to disk *\/$/;"	e	enum:sshkey_serialize_rep
+SSHKEY_SERIALIZE_INFO	sshkey.h	/^	SSHKEY_SERIALIZE_INFO = 254,	\/* minimal information *\/$/;"	e	enum:sshkey_serialize_rep
+SSHKEY_SERIALIZE_SHIELD	sshkey.h	/^	SSHKEY_SERIALIZE_SHIELD = 3,	\/* everything, for encrypting in ram *\/$/;"	e	enum:sshkey_serialize_rep
+SSHKEY_SERIALIZE_STATE	sshkey.h	/^	SSHKEY_SERIALIZE_STATE = 1,	\/* only state is serialized *\/$/;"	e	enum:sshkey_serialize_rep
+SSHKEY_SHIELD_CIPHER	sshkey.c	/^#define SSHKEY_SHIELD_CIPHER	/;"	d	file:
+SSHKEY_SHIELD_PREKEY_HASH	sshkey.c	/^#define SSHKEY_SHIELD_PREKEY_HASH	/;"	d	file:
+SSHKEY_SHIELD_PREKEY_LEN	sshkey.c	/^#define SSHKEY_SHIELD_PREKEY_LEN	/;"	d	file:
+SSHKEY_XMSS_H	sshkey-xmss.h	/^#define SSHKEY_XMSS_H$/;"	d
+SSHMAC_H	mac.h	/^#define SSHMAC_H$/;"	d
+SSHMUX_COMMAND_ALIVE_CHECK	clientloop.h	/^#define SSHMUX_COMMAND_ALIVE_CHECK	/;"	d
+SSHMUX_COMMAND_CANCEL_FWD	clientloop.h	/^#define SSHMUX_COMMAND_CANCEL_FWD	/;"	d
+SSHMUX_COMMAND_FORWARD	clientloop.h	/^#define SSHMUX_COMMAND_FORWARD	/;"	d
+SSHMUX_COMMAND_OPEN	clientloop.h	/^#define SSHMUX_COMMAND_OPEN	/;"	d
+SSHMUX_COMMAND_PROXY	clientloop.h	/^#define SSHMUX_COMMAND_PROXY	/;"	d
+SSHMUX_COMMAND_STDIO_FWD	clientloop.h	/^#define SSHMUX_COMMAND_STDIO_FWD	/;"	d
+SSHMUX_COMMAND_STOP	clientloop.h	/^#define SSHMUX_COMMAND_STOP	/;"	d
+SSHMUX_COMMAND_TERMINATE	clientloop.h	/^#define SSHMUX_COMMAND_TERMINATE	/;"	d
+SSHMUX_VER	clientloop.h	/^#define SSHMUX_VER	/;"	d
+SSHOBJS	Makefile.in	/^SSHOBJS= ssh.o readconf.o clientloop.o sshtty.o \\$/;"	m
+SSHPAM_CHAUTHTOK_NEEDS_RUID	configure.ac	/^	AC_DEFINE([SSHPAM_CHAUTHTOK_NEEDS_RUID], [1],$/;"	d
+SSHRC	sshd.8	/^.Sh SSHRC$/;"	s
+SSHREL	regress/misc/sk-dummy/Makefile	/^SSHREL=..\/..\/..\/..\/..\/usr.bin\/ssh$/;"	m
+SSHSIG_H	sshsig.h	/^#define SSHSIG_H$/;"	d
+SSH_AGENTC_ADD_RSA_IDENTITY	authfd.h	/^#define SSH_AGENTC_ADD_RSA_IDENTITY	/;"	d
+SSH_AGENTC_ADD_RSA_ID_CONSTRAINED	authfd.h	/^#define SSH_AGENTC_ADD_RSA_ID_CONSTRAINED	/;"	d
+SSH_AGENTC_ADD_SMARTCARD_KEY	authfd.h	/^#define SSH_AGENTC_ADD_SMARTCARD_KEY	/;"	d
+SSH_AGENTC_ADD_SMARTCARD_KEY_CONSTRAINED	authfd.h	/^#define SSH_AGENTC_ADD_SMARTCARD_KEY_CONSTRAINED /;"	d
+SSH_AGENTC_EXTENSION	authfd.h	/^#define SSH_AGENTC_EXTENSION	/;"	d
+SSH_AGENTC_LOCK	authfd.h	/^#define SSH_AGENTC_LOCK	/;"	d
+SSH_AGENTC_REMOVE_ALL_RSA_IDENTITIES	authfd.h	/^#define SSH_AGENTC_REMOVE_ALL_RSA_IDENTITIES	/;"	d
+SSH_AGENTC_REMOVE_RSA_IDENTITY	authfd.h	/^#define SSH_AGENTC_REMOVE_RSA_IDENTITY	/;"	d
+SSH_AGENTC_REMOVE_SMARTCARD_KEY	authfd.h	/^#define SSH_AGENTC_REMOVE_SMARTCARD_KEY	/;"	d
+SSH_AGENTC_REQUEST_RSA_IDENTITIES	authfd.h	/^#define SSH_AGENTC_REQUEST_RSA_IDENTITIES	/;"	d
+SSH_AGENTC_RSA_CHALLENGE	authfd.h	/^#define SSH_AGENTC_RSA_CHALLENGE	/;"	d
+SSH_AGENTC_UNLOCK	authfd.h	/^#define SSH_AGENTC_UNLOCK	/;"	d
+SSH_AGENTPID_ENV_NAME	ssh.h	/^#define SSH_AGENTPID_ENV_NAME	/;"	d
+SSH_AGENT_CONSTRAIN_CONFIRM	authfd.h	/^#define	SSH_AGENT_CONSTRAIN_CONFIRM	/;"	d
+SSH_AGENT_CONSTRAIN_EXTENSION	authfd.h	/^#define	SSH_AGENT_CONSTRAIN_EXTENSION	/;"	d
+SSH_AGENT_CONSTRAIN_LIFETIME	authfd.h	/^#define	SSH_AGENT_CONSTRAIN_LIFETIME	/;"	d
+SSH_AGENT_CONSTRAIN_MAXSIGN	authfd.h	/^#define	SSH_AGENT_CONSTRAIN_MAXSIGN	/;"	d
+SSH_AGENT_FAILURE	authfd.h	/^#define SSH_AGENT_FAILURE	/;"	d
+SSH_AGENT_MIN_FDS	ssh-agent.c	/^#define SSH_AGENT_MIN_FDS /;"	d	file:
+SSH_AGENT_OLD_SIGNATURE	authfd.h	/^#define	SSH_AGENT_OLD_SIGNATURE	/;"	d
+SSH_AGENT_RSA_IDENTITIES_ANSWER	authfd.h	/^#define SSH_AGENT_RSA_IDENTITIES_ANSWER	/;"	d
+SSH_AGENT_RSA_RESPONSE	authfd.h	/^#define SSH_AGENT_RSA_RESPONSE	/;"	d
+SSH_AGENT_RSA_SHA2_256	authfd.h	/^#define	SSH_AGENT_RSA_SHA2_256	/;"	d
+SSH_AGENT_RSA_SHA2_512	authfd.h	/^#define	SSH_AGENT_RSA_SHA2_512	/;"	d
+SSH_AGENT_SUCCESS	authfd.h	/^#define SSH_AGENT_SUCCESS	/;"	d
+SSH_ALLOWED_CA_SIGALGS	myproposal.h	/^#define	SSH_ALLOWED_CA_SIGALGS	/;"	d
+SSH_ASKPASS_ENV	ssh.h	/^#define SSH_ASKPASS_ENV	/;"	d
+SSH_ASKPASS_REQUIRE_ENV	ssh.h	/^#define SSH_ASKPASS_REQUIRE_ENV	/;"	d
+SSH_AUDIT_EVENTS	defines.h	/^# define SSH_AUDIT_EVENTS$/;"	d
+SSH_AUDIT_UNKNOWN	audit.h	/^	SSH_AUDIT_UNKNOWN$/;"	e	enum:ssh_audit_event_type
+SSH_AUTHFILE_CIPHER	ssh.h	/^#define SSH_AUTHFILE_CIPHER	/;"	d
+SSH_AUTHOPT_ENV_MAX	auth-options.h	/^#define SSH_AUTHOPT_ENV_MAX	/;"	d
+SSH_AUTHOPT_PERMIT_MAX	auth-options.h	/^#define SSH_AUTHOPT_PERMIT_MAX	/;"	d
+SSH_AUTHSOCKET_ENV_NAME	ssh.h	/^#define SSH_AUTHSOCKET_ENV_NAME /;"	d
+SSH_AUTH_FAIL_GSSAPI	audit.h	/^	SSH_AUTH_FAIL_GSSAPI,$/;"	e	enum:ssh_audit_event_type
+SSH_AUTH_FAIL_HOSTBASED	audit.h	/^	SSH_AUTH_FAIL_HOSTBASED,	\/* ssh2 hostbased or ssh1 rhostsrsa *\/$/;"	e	enum:ssh_audit_event_type
+SSH_AUTH_FAIL_KBDINT	audit.h	/^	SSH_AUTH_FAIL_KBDINT,	\/* keyboard-interactive or challenge-response *\/$/;"	e	enum:ssh_audit_event_type
+SSH_AUTH_FAIL_NONE	audit.h	/^	SSH_AUTH_FAIL_NONE,$/;"	e	enum:ssh_audit_event_type
+SSH_AUTH_FAIL_PASSWD	audit.h	/^	SSH_AUTH_FAIL_PASSWD,$/;"	e	enum:ssh_audit_event_type
+SSH_AUTH_FAIL_PUBKEY	audit.h	/^	SSH_AUTH_FAIL_PUBKEY,	\/* ssh2 pubkey or ssh1 rsa *\/$/;"	e	enum:ssh_audit_event_type
+SSH_AUTH_SUCCESS	audit.h	/^	SSH_AUTH_SUCCESS,$/;"	e	enum:ssh_audit_event_type
+SSH_BUG_BIGENDIANAES	compat.h	/^#define SSH_BUG_BIGENDIANAES	/;"	d
+SSH_BUG_CURVE25519PAD	compat.h	/^#define SSH_BUG_CURVE25519PAD	/;"	d
+SSH_BUG_DEBUG	compat.h	/^#define SSH_BUG_DEBUG	/;"	d
+SSH_BUG_DHGEX_LARGE	compat.h	/^#define SSH_BUG_DHGEX_LARGE	/;"	d
+SSH_BUG_DYNAMIC_RPORT	compat.h	/^#define SSH_BUG_DYNAMIC_RPORT	/;"	d
+SSH_BUG_EXTEOF	compat.h	/^#define SSH_BUG_EXTEOF	/;"	d
+SSH_BUG_HOSTKEYS	compat.h	/^#define SSH_BUG_HOSTKEYS	/;"	d
+SSH_BUG_IGNOREMSG	compat.h	/^#define SSH_BUG_IGNOREMSG	/;"	d
+SSH_BUG_NOREKEY	compat.h	/^#define SSH_BUG_NOREKEY	/;"	d
+SSH_BUG_PASSWORDPAD	compat.h	/^#define SSH_BUG_PASSWORDPAD	/;"	d
+SSH_BUG_PROBE	compat.h	/^#define SSH_BUG_PROBE	/;"	d
+SSH_BUG_RSASIGMD5	compat.h	/^#define SSH_BUG_RSASIGMD5	/;"	d
+SSH_BUG_SCANNER	compat.h	/^#define SSH_BUG_SCANNER	/;"	d
+SSH_BUG_SIGTYPE	compat.h	/^#define SSH_BUG_SIGTYPE	/;"	d
+SSH_BUG_SIGTYPE74	compat.h	/^#define SSH_BUG_SIGTYPE74	/;"	d
+SSH_BUG_UTF8TTYMODE	compat.h	/^#define SSH_BUG_UTF8TTYMODE	/;"	d
+SSH_CANONICALISE_ALWAYS	readconf.h	/^#define SSH_CANONICALISE_ALWAYS	/;"	d
+SSH_CANONICALISE_NO	readconf.h	/^#define SSH_CANONICALISE_NO	/;"	d
+SSH_CANONICALISE_YES	readconf.h	/^#define SSH_CANONICALISE_YES	/;"	d
+SSH_CHANNEL_ABANDONED	channels.h	/^#define SSH_CHANNEL_ABANDONED	/;"	d
+SSH_CHANNEL_AUTH_SOCKET	channels.h	/^#define SSH_CHANNEL_AUTH_SOCKET	/;"	d
+SSH_CHANNEL_CLOSED	channels.h	/^#define SSH_CHANNEL_CLOSED	/;"	d
+SSH_CHANNEL_CONNECTING	channels.h	/^#define SSH_CHANNEL_CONNECTING	/;"	d
+SSH_CHANNEL_DYNAMIC	channels.h	/^#define SSH_CHANNEL_DYNAMIC	/;"	d
+SSH_CHANNEL_LARVAL	channels.h	/^#define SSH_CHANNEL_LARVAL	/;"	d
+SSH_CHANNEL_MAX_TYPE	channels.h	/^#define SSH_CHANNEL_MAX_TYPE	/;"	d
+SSH_CHANNEL_MUX_CLIENT	channels.h	/^#define SSH_CHANNEL_MUX_CLIENT	/;"	d
+SSH_CHANNEL_MUX_LISTENER	channels.h	/^#define SSH_CHANNEL_MUX_LISTENER	/;"	d
+SSH_CHANNEL_MUX_PROXY	channels.h	/^#define SSH_CHANNEL_MUX_PROXY	/;"	d
+SSH_CHANNEL_OPEN	channels.h	/^#define SSH_CHANNEL_OPEN	/;"	d
+SSH_CHANNEL_OPENING	channels.h	/^#define SSH_CHANNEL_OPENING	/;"	d
+SSH_CHANNEL_PORT_LISTENER	channels.h	/^#define SSH_CHANNEL_PORT_LISTENER	/;"	d
+SSH_CHANNEL_RDYNAMIC_FINISH	channels.h	/^#define SSH_CHANNEL_RDYNAMIC_FINISH	/;"	d
+SSH_CHANNEL_RDYNAMIC_OPEN	channels.h	/^#define SSH_CHANNEL_RDYNAMIC_OPEN	/;"	d
+SSH_CHANNEL_RPORT_LISTENER	channels.h	/^#define SSH_CHANNEL_RPORT_LISTENER	/;"	d
+SSH_CHANNEL_RUNIX_LISTENER	channels.h	/^#define SSH_CHANNEL_RUNIX_LISTENER	/;"	d
+SSH_CHANNEL_UNIX_LISTENER	channels.h	/^#define SSH_CHANNEL_UNIX_LISTENER	/;"	d
+SSH_CHANNEL_X11_LISTENER	channels.h	/^#define SSH_CHANNEL_X11_LISTENER	/;"	d
+SSH_CHANNEL_X11_OPEN	channels.h	/^#define SSH_CHANNEL_X11_OPEN	/;"	d
+SSH_CHANNEL_ZOMBIE	channels.h	/^#define SSH_CHANNEL_ZOMBIE	/;"	d
+SSH_CHAN_IO_EFD	channels.h	/^#define SSH_CHAN_IO_EFD	/;"	d
+SSH_CHAN_IO_EFD_R	channels.h	/^#define SSH_CHAN_IO_EFD_R	/;"	d
+SSH_CHAN_IO_EFD_W	channels.h	/^#define SSH_CHAN_IO_EFD_W	/;"	d
+SSH_CHAN_IO_RFD	channels.h	/^#define SSH_CHAN_IO_RFD	/;"	d
+SSH_CHAN_IO_SOCK	channels.h	/^#define SSH_CHAN_IO_SOCK	/;"	d
+SSH_CHAN_IO_SOCK_R	channels.h	/^#define SSH_CHAN_IO_SOCK_R	/;"	d
+SSH_CHAN_IO_SOCK_W	channels.h	/^#define SSH_CHAN_IO_SOCK_W	/;"	d
+SSH_CHAN_IO_WFD	channels.h	/^#define SSH_CHAN_IO_WFD	/;"	d
+SSH_COM_AGENT2_FAILURE	authfd.h	/^#define SSH_COM_AGENT2_FAILURE	/;"	d
+SSH_COM_PRIVATE_BEGIN	ssh-keygen.c	/^#define SSH_COM_PRIVATE_BEGIN	/;"	d	file:
+SSH_COM_PRIVATE_KEY_MAGIC	ssh-keygen.c	/^#define	SSH_COM_PRIVATE_KEY_MAGIC	/;"	d	file:
+SSH_COM_PUBLIC_BEGIN	ssh-keygen.c	/^#define SSH_COM_PUBLIC_BEGIN	/;"	d	file:
+SSH_COM_PUBLIC_END	ssh-keygen.c	/^#define SSH_COM_PUBLIC_END	/;"	d	file:
+SSH_CONNECTION_ABANDON	audit.h	/^	SSH_CONNECTION_ABANDON,	\/* closed without completing auth *\/$/;"	e	enum:ssh_audit_event_type
+SSH_CONNECTION_CLOSE	audit.h	/^	SSH_CONNECTION_CLOSE,	\/* closed after attempting auth or session *\/$/;"	e	enum:ssh_audit_event_type
+SSH_DEFAULT_PORT	ssh.h	/^#define SSH_DEFAULT_PORT	/;"	d
+SSH_DIGEST	mac.c	/^#define SSH_DIGEST	/;"	d	file:
+SSH_DIGEST_MAX	digest.h	/^#define SSH_DIGEST_MAX	/;"	d
+SSH_DIGEST_MAX_LENGTH	digest.h	/^#define SSH_DIGEST_MAX_LENGTH	/;"	d
+SSH_DIGEST_MD5	digest.h	/^#define SSH_DIGEST_MD5	/;"	d
+SSH_DIGEST_SHA1	digest.h	/^#define SSH_DIGEST_SHA1	/;"	d
+SSH_DIGEST_SHA256	digest.h	/^#define SSH_DIGEST_SHA256	/;"	d
+SSH_DIGEST_SHA384	digest.h	/^#define SSH_DIGEST_SHA384	/;"	d
+SSH_DIGEST_SHA512	digest.h	/^#define SSH_DIGEST_SHA512	/;"	d
+SSH_DONT_OVERLOAD_OPENSSL_FUNCS	openbsd-compat/openssl-compat.c	/^#define SSH_DONT_OVERLOAD_OPENSSL_FUNCS$/;"	d	file:
+SSH_ERR_AGENT_COMMUNICATION	ssherr.h	/^#define SSH_ERR_AGENT_COMMUNICATION	/;"	d
+SSH_ERR_AGENT_FAILURE	ssherr.h	/^#define SSH_ERR_AGENT_FAILURE	/;"	d
+SSH_ERR_AGENT_NOT_PRESENT	ssherr.h	/^#define SSH_ERR_AGENT_NOT_PRESENT	/;"	d
+SSH_ERR_AGENT_NO_IDENTITIES	ssherr.h	/^#define SSH_ERR_AGENT_NO_IDENTITIES	/;"	d
+SSH_ERR_ALLOC_FAIL	ssherr.h	/^#define SSH_ERR_ALLOC_FAIL	/;"	d
+SSH_ERR_BIGNUM_IS_NEGATIVE	ssherr.h	/^#define SSH_ERR_BIGNUM_IS_NEGATIVE	/;"	d
+SSH_ERR_BIGNUM_TOO_LARGE	ssherr.h	/^#define SSH_ERR_BIGNUM_TOO_LARGE	/;"	d
+SSH_ERR_BUFFER_READ_ONLY	ssherr.h	/^#define SSH_ERR_BUFFER_READ_ONLY	/;"	d
+SSH_ERR_CONN_CLOSED	ssherr.h	/^#define SSH_ERR_CONN_CLOSED	/;"	d
+SSH_ERR_CONN_CORRUPT	ssherr.h	/^#define SSH_ERR_CONN_CORRUPT	/;"	d
+SSH_ERR_CONN_TIMEOUT	ssherr.h	/^#define SSH_ERR_CONN_TIMEOUT	/;"	d
+SSH_ERR_DEVICE_NOT_FOUND	ssherr.h	/^#define SSH_ERR_DEVICE_NOT_FOUND	/;"	d
+SSH_ERR_DH_GEX_OUT_OF_RANGE	ssherr.h	/^#define SSH_ERR_DH_GEX_OUT_OF_RANGE	/;"	d
+SSH_ERR_DISCONNECTED	ssherr.h	/^#define SSH_ERR_DISCONNECTED	/;"	d
+SSH_ERR_ECPOINT_TOO_LARGE	ssherr.h	/^#define SSH_ERR_ECPOINT_TOO_LARGE	/;"	d
+SSH_ERR_EC_CURVE_INVALID	ssherr.h	/^#define SSH_ERR_EC_CURVE_INVALID	/;"	d
+SSH_ERR_EC_CURVE_MISMATCH	ssherr.h	/^#define SSH_ERR_EC_CURVE_MISMATCH	/;"	d
+SSH_ERR_EXPECTED_CERT	ssherr.h	/^#define SSH_ERR_EXPECTED_CERT	/;"	d
+SSH_ERR_FEATURE_UNSUPPORTED	ssherr.h	/^#define SSH_ERR_FEATURE_UNSUPPORTED	/;"	d
+SSH_ERR_FILE_CHANGED	ssherr.h	/^#define SSH_ERR_FILE_CHANGED	/;"	d
+SSH_ERR_INTERNAL_ERROR	ssherr.h	/^#define SSH_ERR_INTERNAL_ERROR	/;"	d
+SSH_ERR_INVALID_ARGUMENT	ssherr.h	/^#define SSH_ERR_INVALID_ARGUMENT	/;"	d
+SSH_ERR_INVALID_FORMAT	ssherr.h	/^#define SSH_ERR_INVALID_FORMAT	/;"	d
+SSH_ERR_KEY_BAD_PERMISSIONS	ssherr.h	/^#define SSH_ERR_KEY_BAD_PERMISSIONS	/;"	d
+SSH_ERR_KEY_BITS_MISMATCH	ssherr.h	/^#define SSH_ERR_KEY_BITS_MISMATCH	/;"	d
+SSH_ERR_KEY_CERT_INVALID	ssherr.h	/^#define SSH_ERR_KEY_CERT_INVALID	/;"	d
+SSH_ERR_KEY_CERT_INVALID_SIGN_KEY	ssherr.h	/^#define SSH_ERR_KEY_CERT_INVALID_SIGN_KEY	/;"	d
+SSH_ERR_KEY_CERT_MISMATCH	ssherr.h	/^#define SSH_ERR_KEY_CERT_MISMATCH	/;"	d
+SSH_ERR_KEY_CERT_UNKNOWN_TYPE	ssherr.h	/^#define SSH_ERR_KEY_CERT_UNKNOWN_TYPE	/;"	d
+SSH_ERR_KEY_INVALID_EC_VALUE	ssherr.h	/^#define SSH_ERR_KEY_INVALID_EC_VALUE	/;"	d
+SSH_ERR_KEY_LACKS_CERTBLOB	ssherr.h	/^#define SSH_ERR_KEY_LACKS_CERTBLOB	/;"	d
+SSH_ERR_KEY_LENGTH	ssherr.h	/^#define SSH_ERR_KEY_LENGTH	/;"	d
+SSH_ERR_KEY_NOT_FOUND	ssherr.h	/^#define SSH_ERR_KEY_NOT_FOUND	/;"	d
+SSH_ERR_KEY_REVOKED	ssherr.h	/^#define SSH_ERR_KEY_REVOKED	/;"	d
+SSH_ERR_KEY_TYPE_MISMATCH	ssherr.h	/^#define SSH_ERR_KEY_TYPE_MISMATCH	/;"	d
+SSH_ERR_KEY_TYPE_UNKNOWN	ssherr.h	/^#define SSH_ERR_KEY_TYPE_UNKNOWN	/;"	d
+SSH_ERR_KEY_UNKNOWN_CIPHER	ssherr.h	/^#define SSH_ERR_KEY_UNKNOWN_CIPHER	/;"	d
+SSH_ERR_KEY_WRONG_PASSPHRASE	ssherr.h	/^#define SSH_ERR_KEY_WRONG_PASSPHRASE	/;"	d
+SSH_ERR_KRL_BAD_MAGIC	ssherr.h	/^#define SSH_ERR_KRL_BAD_MAGIC	/;"	d
+SSH_ERR_LIBCRYPTO_ERROR	ssherr.h	/^#define SSH_ERR_LIBCRYPTO_ERROR	/;"	d
+SSH_ERR_MAC_INVALID	ssherr.h	/^#define SSH_ERR_MAC_INVALID	/;"	d
+SSH_ERR_MESSAGE_INCOMPLETE	ssherr.h	/^#define SSH_ERR_MESSAGE_INCOMPLETE	/;"	d
+SSH_ERR_NEED_REKEY	ssherr.h	/^#define SSH_ERR_NEED_REKEY	/;"	d
+SSH_ERR_NO_BUFFER_SPACE	ssherr.h	/^#define SSH_ERR_NO_BUFFER_SPACE	/;"	d
+SSH_ERR_NO_CIPHER_ALG_MATCH	ssherr.h	/^#define SSH_ERR_NO_CIPHER_ALG_MATCH	/;"	d
+SSH_ERR_NO_COMPRESS_ALG_MATCH	ssherr.h	/^#define SSH_ERR_NO_COMPRESS_ALG_MATCH	/;"	d
+SSH_ERR_NO_HOSTKEY_ALG_MATCH	ssherr.h	/^#define SSH_ERR_NO_HOSTKEY_ALG_MATCH	/;"	d
+SSH_ERR_NO_HOSTKEY_LOADED	ssherr.h	/^#define SSH_ERR_NO_HOSTKEY_LOADED	/;"	d
+SSH_ERR_NO_KEX_ALG_MATCH	ssherr.h	/^#define SSH_ERR_NO_KEX_ALG_MATCH	/;"	d
+SSH_ERR_NO_MAC_ALG_MATCH	ssherr.h	/^#define SSH_ERR_NO_MAC_ALG_MATCH	/;"	d
+SSH_ERR_NO_PROTOCOL_VERSION	ssherr.h	/^#define SSH_ERR_NO_PROTOCOL_VERSION	/;"	d
+SSH_ERR_NUMBER_TOO_LARGE	ssherr.h	/^#define SSH_ERR_NUMBER_TOO_LARGE	/;"	d
+SSH_ERR_PASSPHRASE_TOO_SHORT	ssherr.h	/^#define SSH_ERR_PASSPHRASE_TOO_SHORT	/;"	d
+SSH_ERR_PROTOCOL_ERROR	ssherr.h	/^#define SSH_ERR_PROTOCOL_ERROR	/;"	d
+SSH_ERR_PROTOCOL_MISMATCH	ssherr.h	/^#define SSH_ERR_PROTOCOL_MISMATCH	/;"	d
+SSH_ERR_SIGNATURE_INVALID	ssherr.h	/^#define SSH_ERR_SIGNATURE_INVALID	/;"	d
+SSH_ERR_SIGN_ALG_UNSUPPORTED	ssherr.h	/^#define SSH_ERR_SIGN_ALG_UNSUPPORTED	/;"	d
+SSH_ERR_STRING_TOO_LARGE	ssherr.h	/^#define SSH_ERR_STRING_TOO_LARGE	/;"	d
+SSH_ERR_SUCCESS	ssherr.h	/^#define SSH_ERR_SUCCESS	/;"	d
+SSH_ERR_SYSTEM_ERROR	ssherr.h	/^#define SSH_ERR_SYSTEM_ERROR	/;"	d
+SSH_ERR_UNEXPECTED_TRAILING_DATA	ssherr.h	/^#define SSH_ERR_UNEXPECTED_TRAILING_DATA	/;"	d
+SSH_ESCAPECHAR_NONE	ssh.h	/^#define SSH_ESCAPECHAR_NONE	/;"	d
+SSH_FIDO_INIT_ARG	sk-usbhid.c	/^#define SSH_FIDO_INIT_ARG	/;"	d	file:
+SSH_FP_BASE64	sshkey.h	/^	SSH_FP_BASE64,$/;"	e	enum:sshkey_fp_rep
+SSH_FP_BUBBLEBABBLE	sshkey.h	/^	SSH_FP_BUBBLEBABBLE,$/;"	e	enum:sshkey_fp_rep
+SSH_FP_DEFAULT	sshkey.h	/^	SSH_FP_DEFAULT = 0,$/;"	e	enum:sshkey_fp_rep
+SSH_FP_HASH_DEFAULT	sshkey.h	/^#define SSH_FP_HASH_DEFAULT	/;"	d
+SSH_FP_HEX	sshkey.h	/^	SSH_FP_HEX,$/;"	e	enum:sshkey_fp_rep
+SSH_FP_RANDOMART	sshkey.h	/^	SSH_FP_RANDOMART$/;"	e	enum:sshkey_fp_rep
+SSH_GSS_OIDTYPE	ssh-gss.h	/^#define SSH_GSS_OIDTYPE /;"	d
+SSH_INVALID_USER	audit.h	/^	SSH_INVALID_USER,$/;"	e	enum:ssh_audit_event_type
+SSH_IOBUFSZ	configure.ac	/^	AC_DEFINE([SSH_IOBUFSZ], [65535], [Windows is sensitive to read buffer size])$/;"	d
+SSH_IOBUFSZ	defines.h	/^# define SSH_IOBUFSZ /;"	d
+SSH_KEYSIGN	Makefile.in	/^SSH_KEYSIGN=$(libexecdir)\/ssh-keysign$/;"	m
+SSH_KEY_BITS_RESERVED	ssh.h	/^#define SSH_KEY_BITS_RESERVED	/;"	d
+SSH_KEY_MAX_SIGN_DATA_SIZE	sshkey.h	/^#define SSH_KEY_MAX_SIGN_DATA_SIZE	/;"	d
+SSH_KNOWN_HOSTS	sshd.8	/^.Sh SSH_KNOWN_HOSTS FILE FORMAT$/;"	s
+SSH_LISTEN_BACKLOG	ssh.h	/^#define SSH_LISTEN_BACKLOG	/;"	d
+SSH_LOGIN_EXCEED_MAXTRIES	audit.h	/^	SSH_LOGIN_EXCEED_MAXTRIES,$/;"	e	enum:ssh_audit_event_type
+SSH_LOGIN_ROOT_DENIED	audit.h	/^	SSH_LOGIN_ROOT_DENIED,$/;"	e	enum:ssh_audit_event_type
+SSH_LOG_H	log.h	/^#define SSH_LOG_H$/;"	d
+SSH_MAX_BANNER_LEN	ssh.h	/^#define SSH_MAX_BANNER_LEN	/;"	d
+SSH_MAX_CERTIFICATE_FILES	ssh.h	/^#define SSH_MAX_CERTIFICATE_FILES	/;"	d
+SSH_MAX_HOSTS_FILES	readconf.h	/^#define SSH_MAX_HOSTS_FILES	/;"	d
+SSH_MAX_IDENTITY_FILES	ssh.h	/^#define SSH_MAX_IDENTITY_FILES	/;"	d
+SSH_MAX_PRE_BANNER_LINES	ssh.h	/^#define SSH_MAX_PRE_BANNER_LINES	/;"	d
+SSH_MSG_H	msg.h	/^#define SSH_MSG_H$/;"	d
+SSH_MSG_NONE	ssh2.h	/^#define SSH_MSG_NONE	/;"	d
+SSH_NEW_OPENSSH	compat.h	/^#define SSH_NEW_OPENSSH	/;"	d
+SSH_NOLOGIN	audit.h	/^	SSH_NOLOGIN,		\/* denied by \/etc\/nologin, not implemented *\/$/;"	e	enum:ssh_audit_event_type
+SSH_OLD_DHGEX	compat.h	/^#define SSH_OLD_DHGEX	/;"	d
+SSH_OLD_FORWARD_ADDR	compat.h	/^#define SSH_OLD_FORWARD_ADDR	/;"	d
+SSH_OLD_SESSIONID	compat.h	/^#define SSH_OLD_SESSIONID	/;"	d
+SSH_OPENSSL_VERSION	sshkey.h	/^#define SSH_OPENSSL_VERSION /;"	d
+SSH_PKCS11_ERR_GENERIC	ssh-pkcs11.h	/^#define	SSH_PKCS11_ERR_GENERIC	/;"	d
+SSH_PKCS11_ERR_LOGIN_FAIL	ssh-pkcs11.h	/^#define	SSH_PKCS11_ERR_LOGIN_FAIL	/;"	d
+SSH_PKCS11_ERR_NO_SLOTS	ssh-pkcs11.h	/^#define	SSH_PKCS11_ERR_NO_SLOTS	/;"	d
+SSH_PKCS11_ERR_PIN_LOCKED	ssh-pkcs11.h	/^#define	SSH_PKCS11_ERR_PIN_LOCKED	/;"	d
+SSH_PKCS11_ERR_PIN_REQUIRED	ssh-pkcs11.h	/^#define	SSH_PKCS11_ERR_PIN_REQUIRED	/;"	d
+SSH_PKCS11_HELPER	Makefile.in	/^SSH_PKCS11_HELPER=$(libexecdir)\/ssh-pkcs11-helper$/;"	m
+SSH_PORTABLE	version.h	/^#define SSH_PORTABLE	/;"	d
+SSH_PRIVSEP_USER	Makefile.in	/^SSH_PRIVSEP_USER=@SSH_PRIVSEP_USER@$/;"	m
+SSH_PRIVSEP_USER	configure.ac	/^	AC_DEFINE_UNQUOTED([SSH_PRIVSEP_USER], ["$SSH_PRIVSEP_USER"],$/;"	d
+SSH_PRIVSEP_USER	configure.ac	/^	AC_DEFINE_UNQUOTED([SSH_PRIVSEP_USER], [CYGWIN_SSH_PRIVSEP_USER],$/;"	d
+SSH_PRIVSEP_USER	configure.ac	/^AC_SUBST([SSH_PRIVSEP_USER])$/;"	s
+SSH_PRIVSEP_USER	ssh.h	/^#define SSH_PRIVSEP_USER	/;"	d
+SSH_PROGRAM	Makefile.in	/^SSH_PROGRAM=@bindir@\/ssh$/;"	m
+SSH_PUBKEY_AUTH_ALL	readconf.h	/^#define SSH_PUBKEY_AUTH_ALL	/;"	d
+SSH_PUBKEY_AUTH_HBOUND	readconf.h	/^#define SSH_PUBKEY_AUTH_HBOUND	/;"	d
+SSH_PUBKEY_AUTH_NO	readconf.h	/^#define SSH_PUBKEY_AUTH_NO	/;"	d
+SSH_PUBKEY_AUTH_UNBOUND	readconf.h	/^#define SSH_PUBKEY_AUTH_UNBOUND	/;"	d
+SSH_RANDOM_DEV	openbsd-compat/bsd-getentropy.c	/^# define SSH_RANDOM_DEV /;"	d	file:
+SSH_RELEASE	version.h	/^#define SSH_RELEASE	/;"	d
+SSH_RSA_MINIMUM_MODULUS_SIZE	sshkey.h	/^#define SSH_RSA_MINIMUM_MODULUS_SIZE	/;"	d
+SSH_SELINUX_UNCONFINED_TYPE	openbsd-compat/port-linux.c	/^# define SSH_SELINUX_UNCONFINED_TYPE /;"	d	file:
+SSH_SERVICE_NAME	ssh.h	/^#define SSH_SERVICE_NAME	/;"	d
+SSH_SESSION_KEY_LENGTH	ssh.h	/^#define SSH_SESSION_KEY_LENGTH	/;"	d
+SSH_SIG	session.c	/^#define SSH_SIG(/;"	d	file:
+SSH_SK_ECDSA	sk-api.h	/^#define SSH_SK_ECDSA	/;"	d
+SSH_SK_ED25519	sk-api.h	/^#define SSH_SK_ED25519	/;"	d
+SSH_SK_ERR_CREDENTIAL_EXISTS	sk-api.h	/^#define SSH_SK_ERR_CREDENTIAL_EXISTS	/;"	d
+SSH_SK_ERR_DEVICE_NOT_FOUND	sk-api.h	/^#define SSH_SK_ERR_DEVICE_NOT_FOUND	/;"	d
+SSH_SK_ERR_GENERAL	sk-api.h	/^#define SSH_SK_ERR_GENERAL	/;"	d
+SSH_SK_ERR_PIN_REQUIRED	sk-api.h	/^#define SSH_SK_ERR_PIN_REQUIRED	/;"	d
+SSH_SK_ERR_UNSUPPORTED	sk-api.h	/^#define SSH_SK_ERR_UNSUPPORTED	/;"	d
+SSH_SK_FORCE_OPERATION	sk-api.h	/^#define SSH_SK_FORCE_OPERATION	/;"	d
+SSH_SK_HELPER	Makefile.in	/^SSH_SK_HELPER=$(libexecdir)\/ssh-sk-helper$/;"	m
+SSH_SK_HELPER_ENROLL	ssh-sk.h	/^#define SSH_SK_HELPER_ENROLL	/;"	d
+SSH_SK_HELPER_ERROR	ssh-sk.h	/^#define SSH_SK_HELPER_ERROR	/;"	d
+SSH_SK_HELPER_LOAD_RESIDENT	ssh-sk.h	/^#define SSH_SK_HELPER_LOAD_RESIDENT	/;"	d
+SSH_SK_HELPER_SIGN	ssh-sk.h	/^#define SSH_SK_HELPER_SIGN	/;"	d
+SSH_SK_HELPER_VERSION	ssh-sk.h	/^#define SSH_SK_HELPER_VERSION	/;"	d
+SSH_SK_RESIDENT_KEY	sk-api.h	/^#define SSH_SK_RESIDENT_KEY	/;"	d
+SSH_SK_USER_PRESENCE_REQD	sk-api.h	/^#define SSH_SK_USER_PRESENCE_REQD	/;"	d
+SSH_SK_USER_VERIFICATION_REQD	sk-api.h	/^#define SSH_SK_USER_VERIFICATION_REQD	/;"	d
+SSH_SK_VERSION_MAJOR	sk-api.h	/^#define SSH_SK_VERSION_MAJOR	/;"	d
+SSH_SK_VERSION_MAJOR_MASK	sk-api.h	/^#define SSH_SK_VERSION_MAJOR_MASK	/;"	d
+SSH_SOCKS5_AUTHDONE	channels.c	/^#define SSH_SOCKS5_AUTHDONE	/;"	d	file:
+SSH_SOCKS5_CONNECT	channels.c	/^#define SSH_SOCKS5_CONNECT	/;"	d	file:
+SSH_SOCKS5_DOMAIN	channels.c	/^#define SSH_SOCKS5_DOMAIN	/;"	d	file:
+SSH_SOCKS5_IPV4	channels.c	/^#define SSH_SOCKS5_IPV4	/;"	d	file:
+SSH_SOCKS5_IPV6	channels.c	/^#define SSH_SOCKS5_IPV6	/;"	d	file:
+SSH_SOCKS5_NOAUTH	channels.c	/^#define SSH_SOCKS5_NOAUTH	/;"	d	file:
+SSH_SOCKS5_SUCCESS	channels.c	/^#define SSH_SOCKS5_SUCCESS	/;"	d	file:
+SSH_STRICT_HOSTKEY_ASK	readconf.h	/^#define SSH_STRICT_HOSTKEY_ASK	/;"	d
+SSH_STRICT_HOSTKEY_NEW	readconf.h	/^#define SSH_STRICT_HOSTKEY_NEW	/;"	d
+SSH_STRICT_HOSTKEY_OFF	readconf.h	/^#define SSH_STRICT_HOSTKEY_OFF	/;"	d
+SSH_STRICT_HOSTKEY_YES	readconf.h	/^#define SSH_STRICT_HOSTKEY_YES	/;"	d
+SSH_SUBPROCESS_PRESERVE_ENV	misc.h	/^#define	SSH_SUBPROCESS_PRESERVE_ENV	/;"	d
+SSH_SUBPROCESS_STDERR_DISCARD	misc.h	/^#define	SSH_SUBPROCESS_STDERR_DISCARD	/;"	d
+SSH_SUBPROCESS_STDOUT_CAPTURE	misc.h	/^#define	SSH_SUBPROCESS_STDOUT_CAPTURE	/;"	d
+SSH_SUBPROCESS_STDOUT_DISCARD	misc.h	/^#define	SSH_SUBPROCESS_STDOUT_DISCARD	/;"	d
+SSH_SUBPROCESS_UNSAFE_PATH	misc.h	/^#define	SSH_SUBPROCESS_UNSAFE_PATH	/;"	d
+SSH_SYSFDMAX	defines.h	/^# define SSH_SYSFDMAX /;"	d
+SSH_TIME_T_MAX	defines.h	/^# define SSH_TIME_T_MAX /;"	d
+SSH_TTYMODE_IUTF8	ttymodes.c	/^#define SSH_TTYMODE_IUTF8 /;"	d	file:
+SSH_TUNID_ANY	misc.h	/^#define SSH_TUNID_ANY	/;"	d
+SSH_TUNID_ERR	misc.h	/^#define SSH_TUNID_ERR	/;"	d
+SSH_TUNID_MAX	misc.h	/^#define SSH_TUNID_MAX	/;"	d
+SSH_TUNMODE_DEFAULT	misc.h	/^#define SSH_TUNMODE_DEFAULT	/;"	d
+SSH_TUNMODE_ETHERNET	misc.h	/^#define SSH_TUNMODE_ETHERNET	/;"	d
+SSH_TUNMODE_NO	misc.h	/^#define SSH_TUNMODE_NO	/;"	d
+SSH_TUNMODE_POINTOPOINT	misc.h	/^#define SSH_TUNMODE_POINTOPOINT	/;"	d
+SSH_TUNMODE_YES	misc.h	/^#define SSH_TUNMODE_YES	/;"	d
+SSH_TUN_COMPAT_AF	configure.ac	/^		AC_DEFINE([SSH_TUN_COMPAT_AF], [1],$/;"	d
+SSH_TUN_COMPAT_AF	configure.ac	/^	AC_DEFINE([SSH_TUN_COMPAT_AF], [1],$/;"	d
+SSH_TUN_FILTER	openbsd-compat/port-net.h	/^# define SSH_TUN_FILTER$/;"	d
+SSH_TUN_FREEBSD	configure.ac	/^	AC_DEFINE([SSH_TUN_FREEBSD], [1], [Open tunnel devices the FreeBSD way])$/;"	d
+SSH_TUN_LINUX	configure.ac	/^		AC_DEFINE([SSH_TUN_LINUX], [1],$/;"	d
+SSH_TUN_NO_L2	configure.ac	/^	    AC_DEFINE([SSH_TUN_NO_L2], [1], [No layer 2 tunnel support]))$/;"	d
+SSH_TUN_OPENBSD	configure.ac	/^	AC_DEFINE([SSH_TUN_OPENBSD], [1], [Open tunnel devices the OpenBSD way])$/;"	d
+SSH_TUN_PREPEND_AF	configure.ac	/^		AC_DEFINE([SSH_TUN_PREPEND_AF], [1],$/;"	d
+SSH_TUN_PREPEND_AF	configure.ac	/^	AC_DEFINE([SSH_TUN_PREPEND_AF], [1],$/;"	d
+SSH_UMAC	mac.c	/^#define SSH_UMAC	/;"	d	file:
+SSH_UMAC128	mac.c	/^#define SSH_UMAC128	/;"	d	file:
+SSH_UPDATE_HOSTKEYS_ASK	readconf.h	/^#define SSH_UPDATE_HOSTKEYS_ASK	/;"	d
+SSH_UPDATE_HOSTKEYS_NO	readconf.h	/^#define SSH_UPDATE_HOSTKEYS_NO	/;"	d
+SSH_UPDATE_HOSTKEYS_YES	readconf.h	/^#define SSH_UPDATE_HOSTKEYS_YES	/;"	d
+SSH_VERSION	version.h	/^#define SSH_VERSION	/;"	d
+SSH_X11_PROTO	clientloop.c	/^#define SSH_X11_PROTO	/;"	d	file:
+SSH_X11_VALID_DISPLAY_CHARS	clientloop.c	/^#define SSH_X11_VALID_DISPLAY_CHARS /;"	d	file:
+SSH_XMSS_K2_MAGIC	sshkey-xmss.c	/^#define SSH_XMSS_K2_MAGIC	/;"	d	file:
+SSIZE_MAX	defines.h	/^#define SSIZE_MAX /;"	d
+SSL_ERR_CHECK	regress/unittests/test_helper/test_helper.h	/^#define SSL_ERR_CHECK(/;"	d
+STALL_TIME	progressmeter.c	/^#define STALL_TIME /;"	d	file:
+STANDARDS	moduli.5	/^.Sh STANDARDS$/;"	s
+STANDARDS	ssh.1	/^.Sh STANDARDS$/;"	s
+STAR	openbsd-compat/glob.c	/^#define	STAR	/;"	d	file:
+STARTPORT	openbsd-compat/bindresvport.c	/^#define STARTPORT /;"	d	file:
+STARTUP_SCRIPT_SHELL	configure.ac	/^	AC_SUBST([STARTUP_SCRIPT_SHELL], [\/bin\/sh])$/;"	s
+STARTUP_SCRIPT_SHELL	configure.ac	/^	AC_SUBST([STARTUP_SCRIPT_SHELL], [\/sbin\/sh])$/;"	s
+START_STRING	regress/unittests/misc/test_hpdelim.c	/^#define START_STRING(/;"	d	file:
+START_STRING	regress/unittests/misc/test_strdelim.c	/^#define START_STRING(/;"	d	file:
+STDERR_FILENO	defines.h	/^# define STDERR_FILENO /;"	d
+STDIN_FILENO	defines.h	/^# define STDIN_FILENO /;"	d
+STDOUT_FILENO	defines.h	/^# define STDOUT_FILENO /;"	d
+STORE_UINT32_BIG	umac.c	/^#define STORE_UINT32_BIG(/;"	d	file:
+STORE_UINT32_REVERSED	umac.c	/^#define STORE_UINT32_REVERSED(/;"	d	file:
+STREAMS	umac.c	/^#define STREAMS /;"	d	file:
+STRING_TEST	regress/unittests/authopt/tests.c	/^#define STRING_TEST(/;"	d	file:
+STRIP_OPT	Makefile.in	/^STRIP_OPT=@STRIP_OPT@$/;"	m
+STRIP_OPT	configure.ac	/^AC_SUBST([STRIP_OPT])$/;"	s
+STR_EQ	regress/unittests/authopt/tests.c	/^#define STR_EQ(/;"	d	file:
+ST_NOSUID	openbsd-compat/bsd-statvfs.h	/^#define ST_NOSUID	/;"	d
+ST_RDONLY	openbsd-compat/bsd-statvfs.h	/^#define ST_RDONLY	/;"	d
+SUBDIR	regress/misc/Makefile	/^SUBDIR=		sk-dummy$/;"	m
+SUBDIR	regress/unittests/Makefile	/^SUBDIR=	test_helper sshbuf sshkey bitmap kex hostkeys utf8 match conversion$/;"	m
+SUBSYSTEM_EXT	session.c	/^#define SUBSYSTEM_EXT	/;"	d	file:
+SUBSYSTEM_INT_SFTP	session.c	/^#define SUBSYSTEM_INT_SFTP	/;"	d	file:
+SUBSYSTEM_INT_SFTP_ERROR	session.c	/^#define SUBSYSTEM_INT_SFTP_ERROR	/;"	d	file:
+SUBSYSTEM_NONE	session.c	/^#define SUBSYSTEM_NONE	/;"	d	file:
+SUN_LEN	regress/netcat.c	/^#define SUN_LEN(/;"	d	file:
+SUPERUSER_PATH	defines.h	/^# define SUPERUSER_PATH	/;"	d
+SUPPRESS_MUXCLIENT	clientloop.c	/^#define SUPPRESS_MUXCLIENT	/;"	d	file:
+SUPPRESS_MUXMASTER	clientloop.c	/^#define SUPPRESS_MUXMASTER	/;"	d	file:
+SUPPRESS_NEVER	clientloop.c	/^#define SUPPRESS_NEVER	/;"	d	file:
+SUPPRESS_SYSLOG	clientloop.c	/^#define SUPPRESS_SYSLOG	/;"	d	file:
+SYMLOOP_MAX	sftp-realpath.c	/^# define SYMLOOP_MAX /;"	d	file:
+SYNOPSIS	contrib/ssh-copy-id.1	/^.Sh SYNOPSIS$/;"	s
+SYNOPSIS	scp.1	/^.Sh SYNOPSIS$/;"	s
+SYNOPSIS	sftp-server.8	/^.Sh SYNOPSIS$/;"	s
+SYNOPSIS	sftp.1	/^.Sh SYNOPSIS$/;"	s
+SYNOPSIS	ssh-add.1	/^.Sh SYNOPSIS$/;"	s
+SYNOPSIS	ssh-agent.1	/^.Sh SYNOPSIS$/;"	s
+SYNOPSIS	ssh-keygen.1	/^.Sh SYNOPSIS$/;"	s
+SYNOPSIS	ssh-keyscan.1	/^.Sh SYNOPSIS$/;"	s
+SYNOPSIS	ssh-keysign.8	/^.Sh SYNOPSIS$/;"	s
+SYNOPSIS	ssh-pkcs11-helper.8	/^.Sh SYNOPSIS$/;"	s
+SYNOPSIS	ssh-sk-helper.8	/^.Sh SYNOPSIS$/;"	s
+SYNOPSIS	ssh.1	/^.Sh SYNOPSIS$/;"	s
+SYNOPSIS	sshd.8	/^.Sh SYNOPSIS$/;"	s
+SYSLOG_FACILITY_AUTH	log.h	/^	SYSLOG_FACILITY_AUTH,$/;"	e	enum:__anon0fdff11d0103
+SYSLOG_FACILITY_AUTHPRIV	log.h	/^	SYSLOG_FACILITY_AUTHPRIV,$/;"	e	enum:__anon0fdff11d0103
+SYSLOG_FACILITY_DAEMON	log.h	/^	SYSLOG_FACILITY_DAEMON,$/;"	e	enum:__anon0fdff11d0103
+SYSLOG_FACILITY_LOCAL0	log.h	/^	SYSLOG_FACILITY_LOCAL0,$/;"	e	enum:__anon0fdff11d0103
+SYSLOG_FACILITY_LOCAL1	log.h	/^	SYSLOG_FACILITY_LOCAL1,$/;"	e	enum:__anon0fdff11d0103
+SYSLOG_FACILITY_LOCAL2	log.h	/^	SYSLOG_FACILITY_LOCAL2,$/;"	e	enum:__anon0fdff11d0103
+SYSLOG_FACILITY_LOCAL3	log.h	/^	SYSLOG_FACILITY_LOCAL3,$/;"	e	enum:__anon0fdff11d0103
+SYSLOG_FACILITY_LOCAL4	log.h	/^	SYSLOG_FACILITY_LOCAL4,$/;"	e	enum:__anon0fdff11d0103
+SYSLOG_FACILITY_LOCAL5	log.h	/^	SYSLOG_FACILITY_LOCAL5,$/;"	e	enum:__anon0fdff11d0103
+SYSLOG_FACILITY_LOCAL6	log.h	/^	SYSLOG_FACILITY_LOCAL6,$/;"	e	enum:__anon0fdff11d0103
+SYSLOG_FACILITY_LOCAL7	log.h	/^	SYSLOG_FACILITY_LOCAL7,$/;"	e	enum:__anon0fdff11d0103
+SYSLOG_FACILITY_NOT_SET	log.h	/^	SYSLOG_FACILITY_NOT_SET = -1$/;"	e	enum:__anon0fdff11d0103
+SYSLOG_FACILITY_USER	log.h	/^	SYSLOG_FACILITY_USER,$/;"	e	enum:__anon0fdff11d0103
+SYSLOG_LEVEL_DEBUG1	log.h	/^	SYSLOG_LEVEL_DEBUG1,$/;"	e	enum:__anon0fdff11d0203
+SYSLOG_LEVEL_DEBUG2	log.h	/^	SYSLOG_LEVEL_DEBUG2,$/;"	e	enum:__anon0fdff11d0203
+SYSLOG_LEVEL_DEBUG3	log.h	/^	SYSLOG_LEVEL_DEBUG3,$/;"	e	enum:__anon0fdff11d0203
+SYSLOG_LEVEL_ERROR	log.h	/^	SYSLOG_LEVEL_ERROR,$/;"	e	enum:__anon0fdff11d0203
+SYSLOG_LEVEL_FATAL	log.h	/^	SYSLOG_LEVEL_FATAL,$/;"	e	enum:__anon0fdff11d0203
+SYSLOG_LEVEL_INFO	log.h	/^	SYSLOG_LEVEL_INFO,$/;"	e	enum:__anon0fdff11d0203
+SYSLOG_LEVEL_NOT_SET	log.h	/^	SYSLOG_LEVEL_NOT_SET = -1$/;"	e	enum:__anon0fdff11d0203
+SYSLOG_LEVEL_QUIET	log.h	/^	SYSLOG_LEVEL_QUIET,$/;"	e	enum:__anon0fdff11d0203
+SYSLOG_LEVEL_VERBOSE	log.h	/^	SYSLOG_LEVEL_VERBOSE,$/;"	e	enum:__anon0fdff11d0203
+SYSLOG_R_SAFE_IN_SIGHAND	configure.ac	/^	AC_DEFINE([SYSLOG_R_SAFE_IN_SIGHAND], [1],$/;"	d
+SYS_RDOMAIN_LINUX	configure.ac	/^	    AC_DEFINE([SYS_RDOMAIN_LINUX], [1],$/;"	d
+S_IFSOCK	defines.h	/^# define S_IFSOCK /;"	d
+S_IRGRP	defines.h	/^# define S_IRGRP	/;"	d
+S_IROTH	defines.h	/^# define S_IROTH	/;"	d
+S_IRUSR	defines.h	/^# define S_IRUSR	/;"	d
+S_IRWXG	defines.h	/^# define S_IRWXG	/;"	d
+S_IRWXO	defines.h	/^# define S_IRWXO	/;"	d
+S_IRWXU	defines.h	/^# define S_IRWXU	/;"	d
+S_ISDIR	defines.h	/^# define S_ISDIR(/;"	d
+S_ISLNK	defines.h	/^# define S_ISLNK(/;"	d
+S_ISREG	defines.h	/^# define S_ISREG(/;"	d
+S_IWGRP	defines.h	/^# define S_IWGRP	/;"	d
+S_IWOTH	defines.h	/^# define S_IWOTH	/;"	d
+S_IWUSR	defines.h	/^# define S_IWUSR	/;"	d
+S_IXGRP	defines.h	/^# define S_IXGRP	/;"	d
+S_IXOTH	defines.h	/^# define S_IXOTH	/;"	d
+S_IXUSR	defines.h	/^# define S_IXUSR	/;"	d
+SecretKeys_bytes	sntrup761.c	/^#define SecretKeys_bytes /;"	d	file:
+Seeds_bytes	sntrup761.c	/^#define Seeds_bytes /;"	d	file:
+Seeds_random	sntrup761.c	/^static void Seeds_random(unsigned char *s)$/;"	f	typeref:typename:void	file:
+Sensitive	sshconnect.h	/^struct Sensitive {$/;"	s
+Sensitive	sshconnect.h	/^typedef struct Sensitive Sensitive;$/;"	t	typeref:struct:Sensitive
+ServerOpCodes	servconf.c	/^} ServerOpCodes;$/;"	t	typeref:enum:__anon9b33d3bc0103	file:
+ServerOptions	servconf.h	/^}       ServerOptions;$/;"	t	typeref:struct:__anon9b33d3c10108
+Session	session.h	/^struct Session {$/;"	s
+Session	session.h	/^typedef struct Session Session;$/;"	t	typeref:struct:Session
+SetAuditFunc	audit-bsm.c	/^#define SetAuditFunc(/;"	d	file:
+SetAuditFuncText	audit-bsm.c	/^#define SetAuditFuncText	/;"	d	file:
+Sflag	regress/netcat.c	/^int	Sflag;					\/* TCP MD5 signature option *\/$/;"	v	typeref:typename:int
+Short_fromlist	sntrup761.c	/^static void Short_fromlist(small *out,const uint32 *in)$/;"	f	typeref:typename:void	file:
+Short_random	sntrup761.c	/^static void Short_random(small *out)$/;"	f	typeref:typename:void	file:
+Sigma0_256	openbsd-compat/sha2.c	/^#define Sigma0_256(/;"	d	file:
+Sigma0_512	openbsd-compat/sha2.c	/^#define Sigma0_512(/;"	d	file:
+Sigma1_256	openbsd-compat/sha2.c	/^#define Sigma1_256(/;"	d	file:
+Sigma1_512	openbsd-compat/sha2.c	/^#define Sigma1_512(/;"	d	file:
+SmallSieve	moduli.c	/^static u_int32_t *SmallSieve, smallbits, smallbase;$/;"	v	typeref:typename:u_int32_t *	file:
+Small_bytes	sntrup761.c	/^#define Small_bytes /;"	d	file:
+Small_decode	sntrup761.c	/^static void Small_decode(small *f,const unsigned char *s)$/;"	f	typeref:typename:void	file:
+Small_encode	sntrup761.c	/^static void Small_encode(unsigned char *s,const small *f)$/;"	f	typeref:typename:void	file:
+Small_random	sntrup761.c	/^static void Small_random(small *out)$/;"	f	typeref:typename:void	file:
+SocketEntry	ssh-agent.c	/^} SocketEntry;$/;"	t	typeref:struct:socket_entry	file:
+Source0	contrib/redhat/openssh.spec	/^Source0: https:\/\/ftp.openbsd.org\/pub\/OpenBSD\/OpenSSH\/portable\/openssh-%{version}.tar.gz$/;"	t
+Source0	contrib/suse/openssh.spec	/^Source0:	openssh-%{version}.tar.gz$/;"	t
+Source1	contrib/redhat/openssh.spec	/^Source1: http:\/\/www.jmknoble.net\/software\/x11-ssh-askpass\/x11-ssh-askpass-%{aversion}.tar.g/;"	t
+Source1	contrib/suse/openssh.spec	/^Source1:	x11-ssh-askpass-%{xversion}.tar.gz$/;"	t
+Stable Releases	README.md	/^## Stable Releases$/;"	s	chapter:Portable OpenSSH
+Stat	sftp-server.c	/^struct Stat {$/;"	s	file:
+Stat	sftp-server.c	/^typedef struct Stat Stat;$/;"	t	typeref:struct:Stat	file:
+Summary	contrib/redhat/openssh.spec	/^Summary: A passphrase dialog for OpenSSH and X.$/;"	t
+Summary	contrib/redhat/openssh.spec	/^Summary: A passphrase dialog for OpenSSH, X, and GNOME.$/;"	t
+Summary	contrib/redhat/openssh.spec	/^Summary: OpenSSH clients.$/;"	t
+Summary	contrib/redhat/openssh.spec	/^Summary: The OpenSSH implementation of SSH protocol version 2.$/;"	t
+Summary	contrib/redhat/openssh.spec	/^Summary: The OpenSSH server daemon.$/;"	t
+Summary	contrib/suse/openssh.spec	/^Summary:	A passphrase dialog for OpenSSH and the X window System.$/;"	t
+Summary	contrib/suse/openssh.spec	/^Summary:	OpenSSH, a free Secure Shell (SSH) protocol implementation$/;"	t
+SyslogFacility	log.h	/^}       SyslogFacility;$/;"	t	typeref:enum:__anon0fdff11d0103
+TAILQ_CONCAT	openbsd-compat/sys-queue.h	/^#define TAILQ_CONCAT(/;"	d
+TAILQ_EMPTY	openbsd-compat/sys-queue.h	/^#define	TAILQ_EMPTY(/;"	d
+TAILQ_END	openbsd-compat/sys-queue.h	/^#define	TAILQ_END(/;"	d
+TAILQ_ENTRY	openbsd-compat/sys-queue.h	/^#define TAILQ_ENTRY(/;"	d
+TAILQ_FIRST	openbsd-compat/sys-queue.h	/^#define	TAILQ_FIRST(/;"	d
+TAILQ_FOREACH	openbsd-compat/sys-queue.h	/^#define TAILQ_FOREACH(/;"	d
+TAILQ_FOREACH_REVERSE	openbsd-compat/sys-queue.h	/^#define TAILQ_FOREACH_REVERSE(/;"	d
+TAILQ_FOREACH_REVERSE_SAFE	openbsd-compat/sys-queue.h	/^#define	TAILQ_FOREACH_REVERSE_SAFE(/;"	d
+TAILQ_FOREACH_SAFE	openbsd-compat/sys-queue.h	/^#define	TAILQ_FOREACH_SAFE(/;"	d
+TAILQ_HEAD	openbsd-compat/sys-queue.h	/^#define TAILQ_HEAD(/;"	d
+TAILQ_HEAD_INITIALIZER	openbsd-compat/sys-queue.h	/^#define TAILQ_HEAD_INITIALIZER(/;"	d
+TAILQ_INIT	openbsd-compat/sys-queue.h	/^#define	TAILQ_INIT(/;"	d
+TAILQ_INSERT_AFTER	openbsd-compat/sys-queue.h	/^#define TAILQ_INSERT_AFTER(/;"	d
+TAILQ_INSERT_BEFORE	openbsd-compat/sys-queue.h	/^#define	TAILQ_INSERT_BEFORE(/;"	d
+TAILQ_INSERT_HEAD	openbsd-compat/sys-queue.h	/^#define TAILQ_INSERT_HEAD(/;"	d
+TAILQ_INSERT_TAIL	openbsd-compat/sys-queue.h	/^#define TAILQ_INSERT_TAIL(/;"	d
+TAILQ_LAST	openbsd-compat/sys-queue.h	/^#define TAILQ_LAST(/;"	d
+TAILQ_NEXT	openbsd-compat/sys-queue.h	/^#define	TAILQ_NEXT(/;"	d
+TAILQ_PREV	openbsd-compat/sys-queue.h	/^#define TAILQ_PREV(/;"	d
+TAILQ_REMOVE	openbsd-compat/sys-queue.h	/^#define TAILQ_REMOVE(/;"	d
+TAILQ_REPLACE	openbsd-compat/sys-queue.h	/^#define TAILQ_REPLACE(/;"	d
+TARGETS	Makefile.in	/^TARGETS=ssh$(EXEEXT) sshd$(EXEEXT) ssh-add$(EXEEXT) ssh-keygen$(EXEEXT) ssh-keyscan${EXEEXT} ssh/;"	m
+TARGETS	regress/misc/fuzz-harness/Makefile	/^TARGETS=pubkey_fuzz sig_fuzz authopt_fuzz authkeys_fuzz sshsig_fuzz \\$/;"	m
+TCP	ssh.1	/^.Sh TCP FORWARDING$/;"	s
+TCSASOFT	openbsd-compat/readpassphrase.c	/^# define TCSASOFT /;"	d	file:
+TEMPCHARS	openbsd-compat/mktemp.c	/^#define TEMPCHARS	/;"	d	file:
+TERA	openbsd-compat/fmt_scaled.c	/^	NONE = 0, KILO = 1, MEGA = 2, GIGA = 3, TERA = 4, PETA = 5, EXA = 6$/;"	e	enum:__anondc0b1e130103	file:
+TESTLIBS	Makefile.in	/^TESTLIBS=$(LIBS) $(CHANNELLIBS)$/;"	m
+TESTPROGS	openbsd-compat/regress/Makefile.in	/^TESTPROGS=closefromtest$(EXEEXT) snprintftest$(EXEEXT) strduptest$(EXEEXT) \\$/;"	m
+TEST_CHECK	regress/unittests/test_helper/test_helper.c	/^#define TEST_CHECK(/;"	d	file:
+TEST_CHECK_INT	regress/unittests/test_helper/test_helper.c	/^#define TEST_CHECK_INT(/;"	d	file:
+TEST_DONE	regress/unittests/test_helper/test_helper.h	/^#define TEST_DONE(/;"	d
+TEST_ENV	regress/Makefile	/^TEST_ENV=      "MALLOC_OPTIONS=CFGJRSUX"$/;"	m
+TEST_EQ	regress/unittests/test_helper/test_helper.h	/^	TEST_EQ, TEST_NE, TEST_LT, TEST_LE, TEST_GT, TEST_GE$/;"	e	enum:test_predicate
+TEST_GE	regress/unittests/test_helper/test_helper.h	/^	TEST_EQ, TEST_NE, TEST_LT, TEST_LE, TEST_GT, TEST_GE$/;"	e	enum:test_predicate
+TEST_GT	regress/unittests/test_helper/test_helper.h	/^	TEST_EQ, TEST_NE, TEST_LT, TEST_LE, TEST_GT, TEST_GE$/;"	e	enum:test_predicate
+TEST_LE	regress/unittests/test_helper/test_helper.h	/^	TEST_EQ, TEST_NE, TEST_LT, TEST_LE, TEST_GT, TEST_GE$/;"	e	enum:test_predicate
+TEST_LT	regress/unittests/test_helper/test_helper.h	/^	TEST_EQ, TEST_NE, TEST_LT, TEST_LE, TEST_GT, TEST_GE$/;"	e	enum:test_predicate
+TEST_MALLOC_OPTIONS	configure.ac	/^AC_SUBST([TEST_MALLOC_OPTIONS], [$TEST_MALLOC_OPTIONS])$/;"	s
+TEST_MAXIMUM	moduli.c	/^#define TEST_MAXIMUM	/;"	d	file:
+TEST_MINIMUM	moduli.c	/^#define TEST_MINIMUM	/;"	d	file:
+TEST_NE	regress/unittests/test_helper/test_helper.h	/^	TEST_EQ, TEST_NE, TEST_LT, TEST_LE, TEST_GT, TEST_GE$/;"	e	enum:test_predicate
+TEST_ONERROR	regress/unittests/test_helper/test_helper.h	/^#define TEST_ONERROR(/;"	d
+TEST_POWER	moduli.c	/^#define TEST_POWER	/;"	d	file:
+TEST_SHELL	Makefile.in	/^TEST_SHELL=@TEST_SHELL@$/;"	m
+TEST_SHELL	configure.ac	/^AC_SUBST([TEST_SHELL], [sh])$/;"	s
+TEST_SSH_IPV6	configure.ac	/^AC_SUBST([TEST_SSH_IPV6], [$TEST_SSH_IPV6])$/;"	s
+TEST_SSH_SSHKEYGEN	regress/Makefile	/^TEST_SSH_SSHKEYGEN?=ssh-keygen$/;"	m
+TEST_SSH_UTF8	configure.ac	/^AC_SUBST([TEST_SSH_UTF8], [$TEST_SSH_UTF8])$/;"	s
+TEST_START	regress/unittests/test_helper/test_helper.h	/^#define TEST_START(/;"	d
+TF_BUFS	misc.c	/^#define TF_BUFS	/;"	d	file:
+TF_LEN	misc.c	/^#define TF_LEN	/;"	d	file:
+TILDE	openbsd-compat/glob.c	/^#define	TILDE	/;"	d	file:
+TIME	sshd_config.5	/^.Sh TIME FORMATS$/;"	s
+TIMESPEC_TO_TIMEVAL	defines.h	/^#define	TIMESPEC_TO_TIMEVAL(/;"	d
+TIMEVAL_TO_TIMESPEC	defines.h	/^#define	TIMEVAL_TO_TIMESPEC(/;"	d
+TINY_NUMBER	moduli.c	/^#define TINY_NUMBER	/;"	d	file:
+TMPFILE	openbsd-compat/regress/utimensattest.c	/^#define TMPFILE /;"	d	file:
+TMPFILE2	openbsd-compat/regress/utimensattest.c	/^#define TMPFILE2 /;"	d	file:
+TM_YEAR_BASE	openbsd-compat/strptime.c	/^#define TM_YEAR_BASE /;"	d	file:
+TOKENS	ssh_config.5	/^.Sh TOKENS$/;"	s
+TOKENS	sshd_config.5	/^.Sh TOKENS$/;"	s
+TOOLARGE	openbsd-compat/strtonum.c	/^#define TOOLARGE	/;"	d	file:
+TOOSMALL	openbsd-compat/strtonum.c	/^#define TOOSMALL	/;"	d	file:
+TRIAL_MINIMUM	moduli.c	/^#define TRIAL_MINIMUM	/;"	d	file:
+TRUE	pkcs11.h	/^#define TRUE /;"	d
+TTYCHAR	ttymodes.c	/^#define TTYCHAR(/;"	d	file:
+TTYMODE	ttymodes.c	/^#define TTYMODE(/;"	d	file:
+TTYSZ	session.h	/^#define TTYSZ /;"	d
+TTY_OP_END	ttymodes.c	/^#define TTY_OP_END	/;"	d	file:
+TTY_OP_ISPEED	ttymodes.c	/^#define TTY_OP_ISPEED	/;"	d	file:
+TTY_OP_OSPEED	ttymodes.c	/^#define TTY_OP_OSPEED	/;"	d	file:
+TUN_CTRL_DEV	openbsd-compat/port-net.c	/^#define TUN_CTRL_DEV /;"	d	file:
+TWO_WEEKS	auth-passwd.c	/^#define TWO_WEEKS	/;"	d	file:
+TYPE_OVERFLOW	scp.c	/^#define TYPE_OVERFLOW(/;"	d	file:
+TYPE_SOCKLEN_T	m4/openssh.m4	/^AC_DEFUN([TYPE_SOCKLEN_T],$/;"	m
+T_RRSIG	openbsd-compat/getrrsetbyname.h	/^#define T_RRSIG /;"	d
+Te0	rijndael.c	/^static const u32 Te0[256] = {$/;"	v	typeref:typename:const u32[256]	file:
+Te1	rijndael.c	/^static const u32 Te1[256] = {$/;"	v	typeref:typename:const u32[256]	file:
+Te2	rijndael.c	/^static const u32 Te2[256] = {$/;"	v	typeref:typename:const u32[256]	file:
+Te3	rijndael.c	/^static const u32 Te3[256] = {$/;"	v	typeref:typename:const u32[256]	file:
+Tflag	regress/netcat.c	/^int	Tflag = -1;				\/* IP Type of Service *\/$/;"	v	typeref:typename:int
+Tflag	scp.c	/^int Tflag, pflag, iamremote, iamrecursive, targetshouldbedirectory;$/;"	v	typeref:typename:int
+TinySieve	moduli.c	/^static u_int32_t *TinySieve, tinybits;$/;"	v	typeref:typename:u_int32_t *	file:
+Top	sntrup761.c	/^static int8 Top(Fq C)$/;"	f	typeref:typename:int8	file:
+Top_bytes	sntrup761.c	/^#define Top_bytes /;"	d	file:
+Top_decode	sntrup761.c	/^static void Top_decode(int8 *T,const unsigned char *s)$/;"	f	typeref:typename:void	file:
+Top_encode	sntrup761.c	/^static void Top_encode(unsigned char *s,const int8 *T)$/;"	f	typeref:typename:void	file:
+U32C	chacha.c	/^#define U32C(/;"	d	file:
+U32C	openbsd-compat/chacha_private.h	/^#define U32C(/;"	d
+U32TO8_LE	poly1305.c	/^#define U32TO8_LE(/;"	d	file:
+U32TO8_LITTLE	chacha.c	/^#define U32TO8_LITTLE(/;"	d	file:
+U32TO8_LITTLE	openbsd-compat/chacha_private.h	/^#define U32TO8_LITTLE(/;"	d
+U32V	chacha.c	/^#define U32V(/;"	d	file:
+U32V	openbsd-compat/chacha_private.h	/^#define U32V(/;"	d
+U8C	chacha.c	/^#define U8C(/;"	d	file:
+U8C	openbsd-compat/chacha_private.h	/^#define U8C(/;"	d
+U8TO32_LE	poly1305.c	/^#define U8TO32_LE(/;"	d	file:
+U8TO32_LITTLE	chacha.c	/^#define U8TO32_LITTLE(/;"	d	file:
+U8TO32_LITTLE	openbsd-compat/chacha_private.h	/^#define U8TO32_LITTLE(/;"	d
+U8V	chacha.c	/^#define U8V(/;"	d	file:
+U8V	openbsd-compat/chacha_private.h	/^#define U8V(/;"	d
+UC	openbsd-compat/inet_ntoa.c	/^#define	UC(/;"	d	file:
+UINT16	umac.c	/^typedef u_int16_t	UINT16; \/* 2 byte   *\/$/;"	t	typeref:typename:u_int16_t	file:
+UINT32	umac.c	/^typedef u_int32_t	UINT32; \/* 4 byte   *\/$/;"	t	typeref:typename:u_int32_t	file:
+UINT32_MAX	defines.h	/^#    define UINT32_MAX	/;"	d
+UINT64	umac.c	/^typedef u_int64_t	UINT64; \/* 8 bytes  *\/$/;"	t	typeref:typename:u_int64_t	file:
+UINT8	umac.c	/^typedef u_int8_t	UINT8;  \/* 1 byte   *\/$/;"	t	typeref:typename:u_int8_t	file:
+ULLONG_MAX	defines.h	/^# define ULLONG_MAX /;"	d
+UMAC_KEY_LEN	umac.c	/^#define UMAC_KEY_LEN /;"	d	file:
+UMAC_OUTPUT_LEN	umac.c	/^#define UMAC_OUTPUT_LEN /;"	d	file:
+UMAC_OUTPUT_LEN	umac128.c	/^#define UMAC_OUTPUT_LEN	/;"	d	file:
+UNDERSCORE	openbsd-compat/glob.c	/^#define	UNDERSCORE	/;"	d	file:
+UNITTESTS_TEST_AUTHOPT_OBJS	Makefile.in	/^UNITTESTS_TEST_AUTHOPT_OBJS=\\$/;"	m
+UNITTESTS_TEST_BITMAP_OBJS	Makefile.in	/^UNITTESTS_TEST_BITMAP_OBJS=\\$/;"	m
+UNITTESTS_TEST_CONVERSION_OBJS	Makefile.in	/^UNITTESTS_TEST_CONVERSION_OBJS=\\$/;"	m
+UNITTESTS_TEST_HELPER_OBJS	Makefile.in	/^UNITTESTS_TEST_HELPER_OBJS=\\$/;"	m
+UNITTESTS_TEST_HOSTKEYS_OBJS	Makefile.in	/^UNITTESTS_TEST_HOSTKEYS_OBJS=\\$/;"	m
+UNITTESTS_TEST_KEX_OBJS	Makefile.in	/^UNITTESTS_TEST_KEX_OBJS=\\$/;"	m
+UNITTESTS_TEST_MATCH_OBJS	Makefile.in	/^UNITTESTS_TEST_MATCH_OBJS=\\$/;"	m
+UNITTESTS_TEST_MISC_OBJS	Makefile.in	/^UNITTESTS_TEST_MISC_OBJS=\\$/;"	m
+UNITTESTS_TEST_SSHBUF_OBJS	Makefile.in	/^UNITTESTS_TEST_SSHBUF_OBJS=\\$/;"	m
+UNITTESTS_TEST_SSHKEY_OBJS	Makefile.in	/^UNITTESTS_TEST_SSHKEY_OBJS=\\$/;"	m
+UNITTESTS_TEST_SSHSIG_OBJS	Makefile.in	/^UNITTESTS_TEST_SSHSIG_OBJS=\\$/;"	m
+UNITTESTS_TEST_UTF8_OBJS	Makefile.in	/^UNITTESTS_TEST_UTF8_OBJS=\\$/;"	m
+UNIXWARE_LONG_PASSWORDS	configure.ac	/^	AC_DEFINE([UNIXWARE_LONG_PASSWORDS], [1], [Support passwords > 8 chars])$/;"	d
+UNIX_DG_TMP_SOCKET_SIZE	regress/netcat.c	/^#define UNIX_DG_TMP_SOCKET_SIZE	/;"	d	file:
+UNLEN	openbsd-compat/bsd-cygwin_util.h	/^#define UNLEN /;"	d
+UNSUPPORTED_ALGORITHMS	configure.ac	/^AC_SUBST([UNSUPPORTED_ALGORITHMS], [$unsupported_algorithms])$/;"	s
+UNVIS_END	openbsd-compat/vis.h	/^#define	UNVIS_END	/;"	d
+UNVIS_ERROR	openbsd-compat/vis.h	/^#define	UNVIS_ERROR	/;"	d
+UNVIS_NOCHAR	openbsd-compat/vis.h	/^#define	UNVIS_NOCHAR	/;"	d
+UNVIS_SYNBAD	openbsd-compat/vis.h	/^#define	UNVIS_SYNBAD	/;"	d
+UNVIS_VALID	openbsd-compat/vis.h	/^#define	UNVIS_VALID	/;"	d
+UNVIS_VALIDPUSH	openbsd-compat/vis.h	/^#define	UNVIS_VALIDPUSH	/;"	d
+UPDATE_INTERVAL	progressmeter.c	/^#define UPDATE_INTERVAL /;"	d	file:
+UPDATE_MATCH_STATUS	regress/unittests/hostkeys/test_iterate.c	/^#define UPDATE_MATCH_STATUS(/;"	d	file:
+URL	contrib/redhat/openssh.spec	/^URL: https:\/\/www.openssh.com\/portable.html$/;"	t
+URL	contrib/suse/openssh.spec	/^URL:		https:\/\/www.openssh.com\/$/;"	t
+USERNAME	regress/Makefile	/^USERNAME=		${LOGNAME}$/;"	m
+USER_PATH	configure.ac	/^	AC_DEFINE_UNQUOTED([USER_PATH], ["$user_path"], [Specify default $PATH])$/;"	d
+USE_AIX_KRB_NAME	openbsd-compat/port-aix.h	/^# define USE_AIX_KRB_NAME$/;"	d
+USE_BTMP	configure.ac	/^		AC_DEFINE([USE_BTMP], [1], [Use btmp to log bad logins])$/;"	d
+USE_BTMP	configure.ac	/^	AC_DEFINE([USE_BTMP])$/;"	d
+USE_BTMP	configure.ac	/^	AC_DEFINE([USE_BTMP], [1], [Use btmp to log bad logins])$/;"	d
+USE_GETGRSET	openbsd-compat/port-aix.h	/^# define USE_GETGRSET$/;"	d
+USE_LASTLOG	defines.h	/^#  define USE_LASTLOG$/;"	d
+USE_LIBC_SHA2	regress/misc/sk-dummy/sk-dummy.c	/^#define USE_LIBC_SHA2	/;"	d	file:
+USE_LIBIAF	defines.h	/^# define USE_LIBIAF$/;"	d
+USE_LOGIN	defines.h	/^#  define USE_LOGIN$/;"	d
+USE_PIPES	configure.ac	/^	AC_DEFINE([USE_PIPES])$/;"	d
+USE_PIPES	configure.ac	/^	AC_DEFINE([USE_PIPES], [1], [Use PIPES instead of a socketpair()])$/;"	d
+USE_PIPES	session.c	/^#define USE_PIPES /;"	d	file:
+USE_SHADOW	defines.h	/^# define USE_SHADOW$/;"	d
+USE_SNTRUP761X25519	defines.h	/^# define USE_SNTRUP761X25519 /;"	d
+USE_SYSTEM_GLOB	defines.h	/^# define USE_SYSTEM_GLOB$/;"	d
+USE_UTMP	defines.h	/^#    define USE_UTMP$/;"	d
+USE_UTMPX	defines.h	/^#    define USE_UTMPX$/;"	d
+USE_WTMP	defines.h	/^#    define USE_WTMP$/;"	d
+USE_WTMPX	defines.h	/^#    define USE_WTMPX$/;"	d
+UTMPX_USE_LIBRARY	loginrec.c	/^#  define UTMPX_USE_LIBRARY$/;"	d	file:
+UTMP_FILE	defines.h	/^#      define UTMP_FILE /;"	d
+UTMP_FILE	defines.h	/^#    define UTMP_FILE /;"	d
+UTMP_USE_LIBRARY	loginrec.c	/^#  define UTMP_USE_LIBRARY$/;"	d	file:
+UT_LINESIZE	defines.h	/^# define UT_LINESIZE /;"	d
+UWORD	umac.c	/^typedef unsigned int	UWORD;  \/* Register *\/$/;"	t	typeref:typename:unsigned int	file:
+VALID_CIDR_CHARS	addrmatch.c	/^#define VALID_CIDR_CHARS /;"	d	file:
+VA_COPY	openbsd-compat/openbsd-compat.h	/^#   define VA_COPY(/;"	d
+VA_COPY	openbsd-compat/openbsd-compat.h	/^#  define VA_COPY(/;"	d
+VERIFYING	ssh.1	/^.Sh VERIFYING HOST KEYS$/;"	s
+VIEW_FLAGS	sftp.c	/^#define VIEW_FLAGS	/;"	d	file:
+VIS_ALL	openbsd-compat/vis.h	/^#define	VIS_ALL	/;"	d
+VIS_CSTYLE	openbsd-compat/vis.h	/^#define	VIS_CSTYLE	/;"	d
+VIS_DQ	openbsd-compat/vis.h	/^#define	VIS_DQ	/;"	d
+VIS_GLOB	openbsd-compat/vis.h	/^#define	VIS_GLOB	/;"	d
+VIS_NL	openbsd-compat/vis.h	/^#define	VIS_NL	/;"	d
+VIS_NOSLASH	openbsd-compat/vis.h	/^#define	VIS_NOSLASH	/;"	d
+VIS_OCTAL	openbsd-compat/vis.h	/^#define	VIS_OCTAL	/;"	d
+VIS_SAFE	openbsd-compat/vis.h	/^#define	VIS_SAFE	/;"	d
+VIS_SP	openbsd-compat/vis.h	/^#define	VIS_SP	/;"	d
+VIS_TAB	openbsd-compat/vis.h	/^#define	VIS_TAB	/;"	d
+VIS_WHITE	openbsd-compat/vis.h	/^#define	VIS_WHITE	/;"	d
+VPATH	Makefile.in	/^VPATH=@srcdir@$/;"	m
+VPATH	openbsd-compat/Makefile.in	/^VPATH=@srcdir@$/;"	m
+VPATH	openbsd-compat/regress/Makefile.in	/^VPATH=@srcdir@$/;"	m
+Version	contrib/redhat/openssh.spec	/^Version: %{ver}$/;"	t
+Version	contrib/suse/openssh.spec	/^Version:	9.1p1$/;"	t
+WARNINGS	regress/misc/sk-dummy/Makefile	/^WARNINGS=Yes$/;"	m
+WCOREDUMP	openbsd-compat/bsd-waitpid.h	/^#define WCOREDUMP(/;"	d
+WCOREDUMP	session.c	/^# define WCOREDUMP(/;"	d	file:
+WCOREFLAG	openbsd-compat/bsd-waitpid.h	/^#define WCOREFLAG	/;"	d
+WEBAUTHN_0	ssh-ecdsa-sk.c	/^#define WEBAUTHN_0	/;"	d	file:
+WEBAUTHN_1	ssh-ecdsa-sk.c	/^#define WEBAUTHN_1	/;"	d	file:
+WEBAUTHN_2	ssh-ecdsa-sk.c	/^#define WEBAUTHN_2	/;"	d	file:
+WEEKS	misc.c	/^#define WEEKS	/;"	d	file:
+WENV_SIZ	openbsd-compat/bsd-cygwin_util.c	/^#define WENV_SIZ /;"	d	file:
+WEXITSTATUS	openbsd-compat/bsd-waitpid.h	/^#define WEXITSTATUS(/;"	d
+WHITESPACE	misc.c	/^#define WHITESPACE /;"	d	file:
+WHITESPACE	readconf.c	/^#define WHITESPACE /;"	d	file:
+WHITESPACE	servconf.c	/^#define WHITESPACE /;"	d	file:
+WHITESPACE	sftp.c	/^#define WHITESPACE /;"	d	file:
+WIFEXITED	openbsd-compat/bsd-waitpid.h	/^#define WIFEXITED(/;"	d
+WIFSIGNALED	openbsd-compat/bsd-waitpid.h	/^#define WIFSIGNALED(/;"	d
+WIFSTOPPED	openbsd-compat/bsd-waitpid.h	/^#define WIFSTOPPED(/;"	d
+WILL	regress/netcat.c	/^#define WILL	/;"	d	file:
+WINDOWMASK	fe25519.c	/^#define WINDOWMASK /;"	d	file:
+WINDOWSIZE	fe25519.c	/^#define WINDOWSIZE /;"	d	file:
+WITH_ABBREV_NO_TTY	configure.ac	/^	AC_DEFINE([WITH_ABBREV_NO_TTY])$/;"	d
+WITH_ABBREV_NO_TTY	configure.ac	/^	AC_DEFINE([WITH_ABBREV_NO_TTY], [1],$/;"	d
+WITH_IRIX_ARRAY	configure.ac	/^	AC_DEFINE([WITH_IRIX_ARRAY], [1],$/;"	d
+WITH_IRIX_AUDIT	configure.ac	/^	AC_DEFINE([WITH_IRIX_AUDIT], [1],$/;"	d
+WITH_IRIX_PROJECT	configure.ac	/^	AC_DEFINE([WITH_IRIX_PROJECT], [1],$/;"	d
+WITH_OPENSSL	configure.ac	/^	AC_DEFINE_UNQUOTED([WITH_OPENSSL], [1], [use libcrypto for cryptography])$/;"	d
+WITH_ZLIB	configure.ac	/^    AC_DEFINE([WITH_ZLIB], [1], [Enable zlib])$/;"	d
+WONT	regress/netcat.c	/^#define WONT	/;"	d	file:
+WOTS_H	xmss_wots.h	/^#define WOTS_H$/;"	d
+WTERMSIG	openbsd-compat/bsd-waitpid.h	/^#define WTERMSIG(/;"	d
+WTMP_FILE	defines.h	/^#      define WTMP_FILE /;"	d
+WTMP_FILE	defines.h	/^#    define WTMP_FILE /;"	d
+Weightw_mask	sntrup761.c	/^static int Weightw_mask(small *r)$/;"	f	typeref:typename:int	file:
+Werror	configure.ac	/^AC_ARG_WITH([Werror],$/;"	w
+X11	ssh.1	/^.Sh X11 FORWARDING$/;"	s
+X11_TIMEOUT_SLACK	clientloop.c	/^#define X11_TIMEOUT_SLACK	/;"	d	file:
+XAUTH_PATH	Makefile.in	/^XAUTH_PATH=@XAUTH_PATH@$/;"	m
+XAUTH_PATH	configure.ac	/^	AC_DEFINE_UNQUOTED([XAUTH_PATH], ["$xauth_path"],$/;"	d
+XAUTH_PATH	configure.ac	/^	AC_SUBST([XAUTH_PATH])$/;"	s
+XDecrypt	sntrup761.c	/^#define XDecrypt /;"	d	file:
+XEncrypt	sntrup761.c	/^static void XEncrypt(Fq *B,int8 *T,const int8 *r,const unsigned char *S,const Fq *A)$/;"	f	typeref:typename:void	file:
+XKeyGen	sntrup761.c	/^static void XKeyGen(unsigned char *S,Fq *A,small *a)$/;"	f	typeref:typename:void	file:
+XMSS_CIPHERNAME	sshkey-xmss.c	/^#define XMSS_CIPHERNAME	/;"	d	file:
+XMSS_COMMONS_H	xmss_commons.h	/^#define XMSS_COMMONS_H$/;"	d
+XMSS_DEFAULT_NAME	sshkey-xmss.h	/^#define XMSS_DEFAULT_NAME	/;"	d
+XMSS_H	xmss_fast.h	/^#define XMSS_H$/;"	d
+XMSS_MAGIC	sshkey-xmss.c	/^#define XMSS_MAGIC	/;"	d	file:
+XMSS_OBJS	Makefile.in	/^XMSS_OBJS=\\$/;"	m
+XMSS_SHA2_256_W16_H10_NAME	sshkey-xmss.h	/^#define XMSS_SHA2_256_W16_H10_NAME	/;"	d
+XMSS_SHA2_256_W16_H16_NAME	sshkey-xmss.h	/^#define XMSS_SHA2_256_W16_H16_NAME	/;"	d
+XMSS_SHA2_256_W16_H20_NAME	sshkey-xmss.h	/^#define XMSS_SHA2_256_W16_H20_NAME	/;"	d
+XOR	chacha.c	/^#define XOR(/;"	d	file:
+XOR	openbsd-compat/chacha_private.h	/^#define XOR(/;"	d
+XSIMPLEQ_EMPTY	openbsd-compat/sys-queue.h	/^#define	XSIMPLEQ_EMPTY(/;"	d
+XSIMPLEQ_END	openbsd-compat/sys-queue.h	/^#define	XSIMPLEQ_END(/;"	d
+XSIMPLEQ_ENTRY	openbsd-compat/sys-queue.h	/^#define XSIMPLEQ_ENTRY(/;"	d
+XSIMPLEQ_FIRST	openbsd-compat/sys-queue.h	/^#define	XSIMPLEQ_FIRST(/;"	d
+XSIMPLEQ_FOREACH	openbsd-compat/sys-queue.h	/^#define XSIMPLEQ_FOREACH(/;"	d
+XSIMPLEQ_FOREACH_SAFE	openbsd-compat/sys-queue.h	/^#define	XSIMPLEQ_FOREACH_SAFE(/;"	d
+XSIMPLEQ_HEAD	openbsd-compat/sys-queue.h	/^#define XSIMPLEQ_HEAD(/;"	d
+XSIMPLEQ_INIT	openbsd-compat/sys-queue.h	/^#define	XSIMPLEQ_INIT(/;"	d
+XSIMPLEQ_INSERT_AFTER	openbsd-compat/sys-queue.h	/^#define XSIMPLEQ_INSERT_AFTER(/;"	d
+XSIMPLEQ_INSERT_HEAD	openbsd-compat/sys-queue.h	/^#define XSIMPLEQ_INSERT_HEAD(/;"	d
+XSIMPLEQ_INSERT_TAIL	openbsd-compat/sys-queue.h	/^#define XSIMPLEQ_INSERT_TAIL(/;"	d
+XSIMPLEQ_NEXT	openbsd-compat/sys-queue.h	/^#define	XSIMPLEQ_NEXT(/;"	d
+XSIMPLEQ_REMOVE_AFTER	openbsd-compat/sys-queue.h	/^#define XSIMPLEQ_REMOVE_AFTER(/;"	d
+XSIMPLEQ_REMOVE_HEAD	openbsd-compat/sys-queue.h	/^#define XSIMPLEQ_REMOVE_HEAD(/;"	d
+XSIMPLEQ_XOR	openbsd-compat/sys-queue.h	/^#define XSIMPLEQ_XOR(/;"	d
+X_UNIX_PATH	defines.h	/^#    define X_UNIX_PATH /;"	d
+ZDecrypt	sntrup761.c	/^static void ZDecrypt(Inputs r,const unsigned char *C,const unsigned char *sk)$/;"	f	typeref:typename:void	file:
+ZDecrypt	sntrup761.c	/^static void ZDecrypt(Inputs r,const unsigned char *c,const unsigned char *sk)$/;"	f	typeref:typename:void	file:
+ZEncrypt	sntrup761.c	/^static void ZEncrypt(unsigned char *C,const Inputs r,const unsigned char *pk)$/;"	f	typeref:typename:void	file:
+ZEncrypt	sntrup761.c	/^static void ZEncrypt(unsigned char *c,const Inputs r,const unsigned char *pk)$/;"	f	typeref:typename:void	file:
+ZKeyGen	sntrup761.c	/^static void ZKeyGen(unsigned char *pk,unsigned char *sk)$/;"	f	typeref:typename:void	file:
+_ADDR_H	addr.h	/^#define _ADDR_H$/;"	d
+_ALT_E	openbsd-compat/strptime.c	/^#define _ALT_E	/;"	d	file:
+_ALT_O	openbsd-compat/strptime.c	/^#define _ALT_O	/;"	d	file:
+_ARC4_ATFORK	openbsd-compat/arc4random.h	/^#define _ARC4_ATFORK(/;"	d
+_ARC4_LOCK	openbsd-compat/arc4random.h	/^#define _ARC4_LOCK(/;"	d
+_ARC4_UNLOCK	openbsd-compat/arc4random.h	/^#define _ARC4_UNLOCK(/;"	d
+_ATOMICIO_H	atomicio.h	/^#define _ATOMICIO_H$/;"	d
+_BITMAP_H	bitmap.h	/^#define _BITMAP_H$/;"	d
+_BLF_H_	openbsd-compat/blf.h	/^#define _BLF_H_$/;"	d
+_BSD_BASE64_H	openbsd-compat/base64.h	/^#define _BSD_BASE64_H$/;"	d
+_BSD_CYGWIN_UTIL_H	openbsd-compat/bsd-cygwin_util.h	/^#define _BSD_CYGWIN_UTIL_H$/;"	d
+_BSD_MISC_H	openbsd-compat/bsd-misc.h	/^#define _BSD_MISC_H$/;"	d
+_BSD_SIGNAL_H	openbsd-compat/bsd-signal.h	/^#define _BSD_SIGNAL_H$/;"	d
+_BSD_WAITPID_H	openbsd-compat/bsd-waitpid.h	/^#define _BSD_WAITPID_H$/;"	d
+_CANOHOST_H	canohost.h	/^#define _CANOHOST_H$/;"	d
+_CK_DECLARE_FUNCTION	pkcs11.h	/^#define _CK_DECLARE_FUNCTION(/;"	d
+_COMPAT_GLOB_H_	openbsd-compat/glob.h	/^#define	_COMPAT_GLOB_H_$/;"	d
+_COMPAT_POLL_H_	openbsd-compat/bsd-poll.h	/^#define	_COMPAT_POLL_H_$/;"	d
+_DEFINES_H	defines.h	/^#define _DEFINES_H$/;"	d
+_DIGEST_H	digest.h	/^#define _DIGEST_H$/;"	d
+_EOF	buildpkg.sh.in	/^	cat > space << _EOF$/;"	h
+_EOF	buildpkg.sh.in	/^	cat >> request << _EOF$/;"	h
+_EOF	buildpkg.sh.in	/^[ -x \/usr\/bin\/ckyorn ]  ||  cat >> request << _EOF$/;"	h
+_EOF	buildpkg.sh.in	/^cat > pkginfo << _EOF$/;"	h
+_EOF	buildpkg.sh.in	/^cat > postinstall << _EOF$/;"	h
+_EOF	buildpkg.sh.in	/^cat > postremove << _EOF$/;"	h
+_EOF	buildpkg.sh.in	/^cat > preinstall << _EOF$/;"	h
+_EOF	buildpkg.sh.in	/^cat > preremove << _EOF$/;"	h
+_EOF	buildpkg.sh.in	/^cat > request << _EOF$/;"	h
+_EOF	buildpkg.sh.in	/^cat >> $FAKE_ROOT\/pkginfo << _EOF$/;"	h
+_EOF	buildpkg.sh.in	/^cat >> postinstall << _EOF$/;"	h
+_EOF	buildpkg.sh.in	/^cat >> postremove << _EOF$/;"	h
+_EOF	buildpkg.sh.in	/^cat >> preinstall << _EOF$/;"	h
+_EOF	buildpkg.sh.in	/^cat >> preremove << _EOF$/;"	h
+_EOF	buildpkg.sh.in	/^cat >> request << _EOF$/;"	h
+_EOF	buildpkg.sh.in	/^cat >mk-proto.awk << _EOF$/;"	h
+_EOF	regress/agent-restrict.sh	/^	cat << _EOF > $MULTIHOP_RUN$/;"	h
+_EOF	regress/agent-restrict.sh	/^	cat << _EOF >> $OBJ\/ssh_proxy$/;"	h
+_EOF	regress/agent-restrict.sh	/^	cat << _EOF >> $OBJ\/ssh_proxy_noid$/;"	h
+_EOF	regress/agent-restrict.sh	/^	cat << _EOF >> $OBJ\/sshd_proxy_host_$h$/;"	h
+_EOF	regress/agent-restrict.sh	/^cat << _EOF > $OBJ\/ssh_proxy$/;"	h
+_EOF	regress/cfginclude.sh	/^cat > $OBJ\/ssh_config.i << _EOF$/;"	h
+_EOF	regress/cfginclude.sh	/^cat > $OBJ\/ssh_config.i.0 << _EOF$/;"	h
+_EOF	regress/cfginclude.sh	/^cat > $OBJ\/ssh_config.i.1 << _EOF$/;"	h
+_EOF	regress/cfginclude.sh	/^cat > $OBJ\/ssh_config.i.2 << _EOF$/;"	h
+_EOF	regress/cfginclude.sh	/^cat > $OBJ\/ssh_config.i.3 << _EOF$/;"	h
+_EOF	regress/cfginclude.sh	/^cat > $OBJ\/ssh_config.i.x << _EOF$/;"	h
+_EOF	regress/keys-command.sh	/^cat << _EOF | $SUDO sh -c "rm -f '$KEY_COMMAND' ; cat > '$KEY_COMMAND'"$/;"	h
+_EOF	regress/knownhosts-command.sh	/^	cat > $OBJ\/knownhosts_command << _EOF$/;"	h
+_EOF	regress/knownhosts-command.sh	/^cat > $OBJ\/knownhosts_command << _EOF$/;"	h
+_EOF	regress/principals-command.sh	/^cat << _EOF | $SUDO sh -c "cat > '$PRINCIPALS_COMMAND'"$/;"	h
+_EOF	regress/servcfginclude.sh	/^cat > $OBJ\/sshd_config.i << _EOF$/;"	h
+_EOF	regress/servcfginclude.sh	/^cat > $OBJ\/sshd_config.i.0 << _EOF$/;"	h
+_EOF	regress/servcfginclude.sh	/^cat > $OBJ\/sshd_config.i.1 << _EOF$/;"	h
+_EOF	regress/servcfginclude.sh	/^cat > $OBJ\/sshd_config.i.2 << _EOF$/;"	h
+_EOF	regress/servcfginclude.sh	/^cat > $OBJ\/sshd_config.i.3 << _EOF$/;"	h
+_EOF	regress/servcfginclude.sh	/^cat > $OBJ\/sshd_config.i.x << _EOF$/;"	h
+_FAKE_QUEUE_H_	openbsd-compat/sys-queue.h	/^#define	_FAKE_QUEUE_H_$/;"	d
+_FAKE_RFC2553_H	openbsd-compat/fake-rfc2553.h	/^#define _FAKE_RFC2553_H$/;"	d
+_FNMATCH_H_	openbsd-compat/fnmatch.h	/^#define	_FNMATCH_H_$/;"	d
+_GETOPT_DEFINED_	openbsd-compat/getopt.h	/^#define _GETOPT_DEFINED_$/;"	d
+_GETOPT_H_	openbsd-compat/getopt.h	/^#define _GETOPT_H_$/;"	d
+_GETRRSETBYNAME_H	openbsd-compat/getrrsetbyname.h	/^#define _GETRRSETBYNAME_H$/;"	d
+_GNU_SOURCE	includes.h	/^#define _GNU_SOURCE /;"	d
+_HAVE_LOGINREC_H_	loginrec.h	/^#define _HAVE_LOGINREC_H_$/;"	d
+_HMAC_H	hmac.h	/^#define _HMAC_H$/;"	d
+_KRL_H	krl.h	/^#define _KRL_H$/;"	d
+_LEGAL_ALT	openbsd-compat/strptime.c	/^#define	_LEGAL_ALT(/;"	d	file:
+_MD5_H_	openbsd-compat/md5.h	/^#define _MD5_H_$/;"	d
+_MISC_H	misc.h	/^#define _MISC_H$/;"	d
+_MM_FDPASS_H_	monitor_fdpass.h	/^#define _MM_FDPASS_H_$/;"	d
+_MM_WRAP_H_	monitor_wrap.h	/^#define _MM_WRAP_H_$/;"	d
+_MONITOR_H_	monitor.h	/^#define _MONITOR_H_$/;"	d
+_NEXT_POSIX_H	openbsd-compat/bsd-nextstep.h	/^#define _NEXT_POSIX_H$/;"	d
+_NSIG	openbsd-compat/bsd-signal.h	/^#  define _NSIG /;"	d
+_OPENBSD_COMPAT_H	openbsd-compat/openbsd-compat.h	/^#define _OPENBSD_COMPAT_H$/;"	d
+_OPENSSL_COMPAT_H	openbsd-compat/openssl-compat.h	/^#define _OPENSSL_COMPAT_H$/;"	d
+_PATH_BSHELL	defines.h	/^# define _PATH_BSHELL /;"	d
+_PATH_BTMP	configure.ac	/^	AC_DEFINE([_PATH_BTMP], ["\/var\/log\/btmp"], [log for bad login attempts])$/;"	d
+_PATH_BTMP	defines.h	/^# define _PATH_BTMP /;"	d
+_PATH_CP	pathnames.h	/^#define _PATH_CP	/;"	d
+_PATH_DEVNULL	defines.h	/^# define _PATH_DEVNULL /;"	d
+_PATH_DH_MODULI	pathnames.h	/^#define _PATH_DH_MODULI	/;"	d
+_PATH_HOST_CONFIG_FILE	pathnames.h	/^#define _PATH_HOST_CONFIG_FILE	/;"	d
+_PATH_HOST_DSA_KEY_FILE	pathnames.h	/^#define _PATH_HOST_DSA_KEY_FILE	/;"	d
+_PATH_HOST_ECDSA_KEY_FILE	pathnames.h	/^#define _PATH_HOST_ECDSA_KEY_FILE	/;"	d
+_PATH_HOST_ED25519_KEY_FILE	pathnames.h	/^#define _PATH_HOST_ED25519_KEY_FILE	/;"	d
+_PATH_HOST_RSA_KEY_FILE	pathnames.h	/^#define _PATH_HOST_RSA_KEY_FILE	/;"	d
+_PATH_HOST_XMSS_KEY_FILE	pathnames.h	/^#define _PATH_HOST_XMSS_KEY_FILE	/;"	d
+_PATH_LS	pathnames.h	/^#define _PATH_LS	/;"	d
+_PATH_MAILDIR	defines.h	/^# define _PATH_MAILDIR /;"	d
+_PATH_NOLOGIN	defines.h	/^# define _PATH_NOLOGIN /;"	d
+_PATH_PASSWD_PROG	configure.ac	/^	AC_DEFINE_UNQUOTED([_PATH_PASSWD_PROG], ["$PATH_PASSWD_PROG"],$/;"	d
+_PATH_PASSWD_PROG	pathnames.h	/^#define _PATH_PASSWD_PROG /;"	d
+_PATH_PRIVSEP_CHROOT_DIR	pathnames.h	/^#define _PATH_PRIVSEP_CHROOT_DIR	/;"	d
+_PATH_RHOSTS_EQUIV	pathnames.h	/^#define _PATH_RHOSTS_EQUIV	/;"	d
+_PATH_SERVER_CONFIG_FILE	pathnames.h	/^#define _PATH_SERVER_CONFIG_FILE	/;"	d
+_PATH_SFTP_SERVER	pathnames.h	/^#define _PATH_SFTP_SERVER	/;"	d
+_PATH_SSH_ASKPASS_DEFAULT	pathnames.h	/^#define _PATH_SSH_ASKPASS_DEFAULT	/;"	d
+_PATH_SSH_CLIENT_ID_DSA	pathnames.h	/^#define _PATH_SSH_CLIENT_ID_DSA	/;"	d
+_PATH_SSH_CLIENT_ID_ECDSA	pathnames.h	/^#define _PATH_SSH_CLIENT_ID_ECDSA	/;"	d
+_PATH_SSH_CLIENT_ID_ECDSA_SK	pathnames.h	/^#define _PATH_SSH_CLIENT_ID_ECDSA_SK	/;"	d
+_PATH_SSH_CLIENT_ID_ED25519	pathnames.h	/^#define _PATH_SSH_CLIENT_ID_ED25519	/;"	d
+_PATH_SSH_CLIENT_ID_ED25519_SK	pathnames.h	/^#define _PATH_SSH_CLIENT_ID_ED25519_SK	/;"	d
+_PATH_SSH_CLIENT_ID_RSA	pathnames.h	/^#define _PATH_SSH_CLIENT_ID_RSA	/;"	d
+_PATH_SSH_CLIENT_ID_XMSS	pathnames.h	/^#define _PATH_SSH_CLIENT_ID_XMSS	/;"	d
+_PATH_SSH_DAEMON_PID_FILE	pathnames.h	/^#define _PATH_SSH_DAEMON_PID_FILE	/;"	d
+_PATH_SSH_HOSTS_EQUIV	pathnames.h	/^#define _PATH_SSH_HOSTS_EQUIV	/;"	d
+_PATH_SSH_KEY_SIGN	pathnames.h	/^#define _PATH_SSH_KEY_SIGN	/;"	d
+_PATH_SSH_PIDDIR	configure.ac	/^AC_DEFINE_UNQUOTED([_PATH_SSH_PIDDIR], ["$piddir"],$/;"	d
+_PATH_SSH_PIDDIR	pathnames.h	/^#define _PATH_SSH_PIDDIR	/;"	d
+_PATH_SSH_PKCS11_HELPER	pathnames.h	/^#define _PATH_SSH_PKCS11_HELPER	/;"	d
+_PATH_SSH_PROGRAM	pathnames.h	/^#define _PATH_SSH_PROGRAM	/;"	d
+_PATH_SSH_SK_HELPER	pathnames.h	/^#define _PATH_SSH_SK_HELPER	/;"	d
+_PATH_SSH_SYSTEM_HOSTFILE	pathnames.h	/^#define _PATH_SSH_SYSTEM_HOSTFILE	/;"	d
+_PATH_SSH_SYSTEM_HOSTFILE2	pathnames.h	/^#define _PATH_SSH_SYSTEM_HOSTFILE2	/;"	d
+_PATH_SSH_SYSTEM_RC	pathnames.h	/^#define _PATH_SSH_SYSTEM_RC	/;"	d
+_PATH_SSH_USER_CONFFILE	pathnames.h	/^#define _PATH_SSH_USER_CONFFILE	/;"	d
+_PATH_SSH_USER_DIR	pathnames.h	/^#define _PATH_SSH_USER_DIR	/;"	d
+_PATH_SSH_USER_HOSTFILE	pathnames.h	/^#define _PATH_SSH_USER_HOSTFILE	/;"	d
+_PATH_SSH_USER_HOSTFILE2	pathnames.h	/^#define _PATH_SSH_USER_HOSTFILE2	/;"	d
+_PATH_SSH_USER_PERMITTED_KEYS	pathnames.h	/^#define _PATH_SSH_USER_PERMITTED_KEYS	/;"	d
+_PATH_SSH_USER_PERMITTED_KEYS2	pathnames.h	/^#define _PATH_SSH_USER_PERMITTED_KEYS2	/;"	d
+_PATH_SSH_USER_RC	pathnames.h	/^#define _PATH_SSH_USER_RC	/;"	d
+_PATH_STDPATH	defines.h	/^# define _PATH_STDPATH /;"	d
+_PATH_TTY	defines.h	/^# define _PATH_TTY /;"	d
+_PATH_UNIX_X	defines.h	/^#define _PATH_UNIX_X /;"	d
+_PATH_UNIX_X	pathnames.h	/^#define _PATH_UNIX_X /;"	d
+_PATH_XAUTH	defines.h	/^#define _PATH_XAUTH /;"	d
+_PATH_XAUTH	pathnames.h	/^#define _PATH_XAUTH	/;"	d
+_PORT_IRIX_H	openbsd-compat/port-irix.h	/^#define _PORT_IRIX_H$/;"	d
+_PORT_LINUX_H	openbsd-compat/port-linux.h	/^#define _PORT_LINUX_H$/;"	d
+_PORT_TUN_H	openbsd-compat/port-net.h	/^#define _PORT_TUN_H$/;"	d
+_POSIX_VDISABLE	openbsd-compat/readpassphrase.c	/^#  define _POSIX_VDISABLE /;"	d	file:
+_PRIVATE_RIJNDAEL_H	rijndael.h	/^#define _PRIVATE_RIJNDAEL_H$/;"	d
+_Q_INVALID	openbsd-compat/sys-queue.h	/^#define _Q_INVALID /;"	d
+_Q_INVALIDATE	openbsd-compat/sys-queue.h	/^#define _Q_INVALIDATE(/;"	d
+_RANDOMS_H	entropy.h	/^#define _RANDOMS_H$/;"	d
+_READPASSPHRASE_H_	openbsd-compat/readpassphrase.h	/^#define _READPASSPHRASE_H_$/;"	d
+_SA	addr.c	/^#define _SA(/;"	d	file:
+_SFTP_CLIENT_H	sftp-client.h	/^#define _SFTP_CLIENT_H$/;"	d
+_SHA1_H	openbsd-compat/sha1.h	/^#define _SHA1_H$/;"	d
+_SHA2_CTX	openbsd-compat/sha2.h	/^typedef struct _SHA2_CTX {$/;"	s
+_SIGACTION_H	openbsd-compat/sigact.h	/^#define _SIGACTION_H$/;"	d
+_SK_API_H	sk-api.h	/^#define _SK_API_H /;"	d
+_SSHBUF_H	sshbuf.h	/^#define _SSHBUF_H$/;"	d
+_SSHERR_H	ssherr.h	/^#define _SSHERR_H$/;"	d
+_SSHSHA2_H	openbsd-compat/sha2.h	/^#define _SSHSHA2_H$/;"	d
+_SSH_AUDIT_H	audit.h	/^# define _SSH_AUDIT_H$/;"	d
+_SSH_GSS_H	ssh-gss.h	/^#define _SSH_GSS_H$/;"	d
+_SSH_SK_H	ssh-sk.h	/^#define _SSH_SK_H /;"	d
+_SS_MAXSIZE	openbsd-compat/fake-rfc2553.h	/^# define	_SS_MAXSIZE	/;"	d
+_SS_PADSIZE	openbsd-compat/fake-rfc2553.h	/^# define       _SS_PADSIZE /;"	d
+_STRUCT_WINSIZE	defines.h	/^#define _STRUCT_WINSIZE$/;"	d
+_SYS_TREE_H_	openbsd-compat/sys-tree.h	/^#define	_SYS_TREE_H_$/;"	d
+_S_IWUSR	defines.h	/^# define _S_IWUSR	/;"	d
+_TEST_HELPER_H	regress/unittests/test_helper/test_helper.h	/^#define _TEST_HELPER_H$/;"	d
+_THREAD_PRIVATE	openbsd-compat/getrrsetbyname.c	/^#define _THREAD_PRIVATE(/;"	d	file:
+_VIS_H_	openbsd-compat/vis.h	/^#define	_VIS_H_$/;"	d
+_W_INT	openbsd-compat/bsd-waitpid.h	/^#define _W_INT(/;"	d
+__APPLE_PRIVPTY__	sshpty.c	/^#  define __APPLE_PRIVPTY__$/;"	d	file:
+__BIT_TYPES_DEFINED__	defines.h	/^#define __BIT_TYPES_DEFINED__$/;"	d
+__BSD_VISIBLE	openbsd-compat/fnmatch.h	/^#define __BSD_VISIBLE /;"	d
+__CMSG_ALIGN	defines.h	/^#define	__CMSG_ALIGN(/;"	d
+__LITTLE_ENDIAN__	umac.c	/^#define __LITTLE_ENDIAN__ /;"	d	file:
+__P	defines.h	/^# define __P(/;"	d
+__anon08acf23e010a	monitor_fdpass.c	/^	union {$/;"	u	function:mm_send_fd	file:
+__anon08acf23e020a	monitor_fdpass.c	/^	union {$/;"	u	function:mm_receive_fd	file:
+__anon0dce19420108	misc.c	/^	struct {$/;"	s	function:vdollar_percent_expand	file:
+__anon0dce19420208	misc.c	/^static const struct {$/;"	s	file:
+__anon0fdff1180108	log.c	/^static struct {$/;"	s	file:
+__anon0fdff1180208	log.c	/^static struct {$/;"	s	file:
+__anon0fdff11d0103	log.h	/^typedef enum {$/;"	g
+__anon0fdff11d0203	log.h	/^typedef enum {$/;"	g
+__anon0fea4b47010a	mac.c	/^	static union {$/;"	u	function:mac_compute	file:
+__anon0ff59c300108	mux.c	/^static const struct {$/;"	s	file:
+__anon10582e5c0108	scp.c	/^typedef struct {$/;"	s	file:
+__anon159640840108	sftp-glob.c	/^static struct {$/;"	s	file:
+__anon1a06beec0108	fe25519.h	/^{$/;"	s
+__anon1b9787330103	sftp.c	/^	enum { MA_START, MA_SQUOTE, MA_DQUOTE, MA_UNQUOTED } state, q;$/;"	g	function:makeargv	file:
+__anon1c7bfe280108	sshd.c	/^struct {$/;"	s	file:
+__anon1dbf9ce30108	ssh-gss.h	/^typedef struct {$/;"	s
+__anon1dbf9ce30208	ssh-gss.h	/^typedef struct {$/;"	s
+__anon1dbf9ce30308	ssh-gss.h	/^typedef struct {$/;"	s
+__anon20b5e17c0108	umac.c	/^typedef struct {$/;"	s	file:
+__anon20b5e17c020a	umac.c	/^    union {$/;"	u	function:pdf_gen_xor	file:
+__anon20b5e17c0308	umac.c	/^typedef struct {$/;"	s	file:
+__anon22bef5f30108	xmss_fast.h	/^typedef struct{$/;"	s
+__anon22bef5f30208	xmss_fast.h	/^typedef struct{$/;"	s
+__anon22bef5f30308	xmss_fast.h	/^typedef struct{$/;"	s
+__anon22bef5f30408	xmss_fast.h	/^typedef struct{$/;"	s
+__anon22bef5f30508	xmss_fast.h	/^typedef struct {$/;"	s
+__anon24519b1f0108	session.h	/^	struct {$/;"	s	struct:Session
+__anon2bd4d2370108	sc25519.h	/^{$/;"	s
+__anon2bd4d2370208	sc25519.h	/^{$/;"	s
+__anon2cdfc23f010a	regress/netcat.c	/^	union {$/;"	u	function:fdpass	file:
+__anon400d1e3a0108	compat.c	/^	static struct {$/;"	s	function:compat_banner	file:
+__anon4a95a8cb0103	dispatch.h	/^enum {$/;"	g
+__anon4b6487d20108	xmss_wots.h	/^typedef struct {$/;"	s
+__anon515363f90103	defines.h	/^{$/;"	g
+__anon547b26990103	hostfile.h	/^typedef enum {$/;"	g
+__anon547b26990203	hostfile.h	/^typedef enum {$/;"	g
+__anon596ef7b80108	openbsd-compat/chacha_private.h	/^{$/;"	s
+__anon7d31da180103	readconf.c	/^typedef enum {$/;"	g	file:
+__anon7d31da180208	readconf.c	/^static struct {$/;"	s	file:
+__anon7d31da1d0108	readconf.h	/^typedef struct {$/;"	s
+__anon8408cfa30108	openbsd-compat/port-linux.c	/^struct {$/;"	s	file:
+__anon8e832fe80108	ge25519.c	/^{$/;"	s	file:
+__anon8e832fe80208	ge25519.c	/^{$/;"	s	file:
+__anon8e832fe80308	ge25519.c	/^{$/;"	s	file:
+__anon8e832fed0108	ge25519.h	/^{$/;"	s
+__anon91d795ca0108	openbsd-compat/glob.h	/^typedef struct {$/;"	s
+__anon9b33d3bc0103	servconf.c	/^typedef enum {$/;"	g	file:
+__anon9b33d3bc0208	servconf.c	/^static struct {$/;"	s	file:
+__anon9b33d3bc0308	servconf.c	/^static struct {$/;"	s	file:
+__anon9b33d3c10108	servconf.h	/^typedef struct {$/;"	s
+__anon9cc534940103	ssh-keygen.c	/^enum {$/;"	g	file:
+__anon9cc534940208	ssh-keygen.c	/^	struct {$/;"	s	function:do_gen_all_hostkeys	file:
+__anona08d75440108	rijndael.h	/^typedef struct {$/;"	s
+__anona16508200103	ssh-agent.c	/^typedef enum {$/;"	g	file:
+__anonacf84e910108	openbsd-compat/inet_ntop.c	/^	struct { int base, len; } best, cur;$/;"	s	function:inet_ntop6	file:
+__anonad849d8e010a	openbsd-compat/sha1.c	/^typedef union {$/;"	u	file:
+__anonad849d930108	openbsd-compat/sha1.h	/^typedef struct {$/;"	s
+__anonad84a1d4010a	openbsd-compat/sha2.h	/^	union {$/;"	u	struct:_SHA2_CTX
+__anonb8c1f4220108	channels.c	/^	struct {$/;"	s	function:channel_decode_socks4	file:
+__anonb8c1f4220208	channels.c	/^	struct {$/;"	s	function:channel_decode_socks5	file:
+__anond4ee95b70103	sftp-server.c	/^enum {$/;"	g	file:
+__anondc0b1e130103	openbsd-compat/fmt_scaled.c	/^typedef enum {$/;"	g	file:
+__anonde2ca40e0103	regress/modpipe.c	/^	enum { MOD_XOR, MOD_AND_OR } what;$/;"	g	struct:modification	file:
+__anonf16dbd56010a	addr.h	/^	union {$/;"	u	struct:xaddr
+__asan_default_options	openbsd-compat/bsd-misc.c	/^const char *__asan_default_options(void) {$/;"	f	typeref:typename:const char *
+__attribute__	defines.h	/^# define __attribute__(/;"	d
+__attribute__	openbsd-compat/sys-tree.h	/^# define __attribute__(/;"	d
+__b64_ntop	openbsd-compat/base64.h	/^# define __b64_ntop(/;"	d
+__b64_pton	openbsd-compat/base64.h	/^# define __b64_pton(/;"	d
+__bounded__	defines.h	/^# define __bounded__(/;"	d
+__findenv	openbsd-compat/setenv.c	/^__findenv(const char *name, int len, int *offset)$/;"	f	typeref:typename:char *	file:
+__func__	defines.h	/^#  define __func__ /;"	d
+__match_pattern	openbsd-compat/bsd-cygwin_util.c	/^__match_pattern (const wchar_t *s, const wchar_t *pattern)$/;"	f	typeref:typename:int	file:
+__msan_default_options	openbsd-compat/bsd-misc.c	/^const char *__msan_default_options(void) {$/;"	f	typeref:typename:const char *
+__nonnull__	defines.h	/^# define __nonnull__(/;"	d
+__predict_false	defines.h	/^#  define __predict_false(/;"	d
+__predict_true	defines.h	/^#  define __predict_true(/;"	d
+__progname	openbsd-compat/bsd-misc.c	/^char *__progname;$/;"	v	typeref:typename:char *
+__sentinel__	defines.h	/^# define __sentinel__$/;"	d
+__ss_pad2	openbsd-compat/fake-rfc2553.h	/^	char		__ss_pad2[_SS_PADSIZE];$/;"	m	struct:sockaddr_storage	typeref:typename:char[]
+_conv_num	openbsd-compat/strptime.c	/^_conv_num(const unsigned char **buf, int *dest, int llim, int ulim)$/;"	f	typeref:typename:int	file:
+_getentropy_fail	openbsd-compat/arc4random.h	/^_getentropy_fail(void)$/;"	f	typeref:typename:void
+_getlong	openbsd-compat/getrrsetbyname.c	/^#define _getlong(/;"	d	file:
+_getlong	openbsd-compat/getrrsetbyname.c	/^_getlong(const u_char *msgp)$/;"	f	typeref:typename:u_int32_t	file:
+_getshort	openbsd-compat/getrrsetbyname.c	/^#define _getshort(/;"	d	file:
+_getshort	openbsd-compat/getrrsetbyname.c	/^_getshort(const u_char *msgp)$/;"	f	typeref:typename:u_int16_t	file:
+_in_raw_mode	sshtty.c	/^static int _in_raw_mode = 0;$/;"	v	typeref:typename:int	file:
+_match_pattern	openbsd-compat/bsd-cygwin_util.c	/^_match_pattern(const char *s, const char *pattern)$/;"	f	typeref:typename:int	file:
+_res	openbsd-compat/getrrsetbyname.c	/^struct __res_state _res;$/;"	v	typeref:struct:__res_state
+_rs	openbsd-compat/arc4random.c	/^static struct _rs {$/;"	s	file:
+_rs_allocate	openbsd-compat/arc4random.h	/^_rs_allocate(struct _rs **rsp, struct _rsx **rsxp)$/;"	f	typeref:typename:int
+_rs_forkdetect	openbsd-compat/arc4random.h	/^_rs_forkdetect(void)$/;"	f	typeref:typename:void
+_rs_forked	openbsd-compat/arc4random.h	/^static volatile sig_atomic_t _rs_forked;$/;"	v	typeref:typename:volatile sig_atomic_t
+_rs_forkhandler	openbsd-compat/arc4random.h	/^_rs_forkhandler(void)$/;"	f	typeref:typename:void
+_rs_init	openbsd-compat/arc4random.c	/^_rs_init(u_char *buf, size_t n)$/;"	f	typeref:typename:void	file:
+_rs_random_buf	openbsd-compat/arc4random.c	/^_rs_random_buf(void *_buf, size_t n)$/;"	f	typeref:typename:void	file:
+_rs_random_u32	openbsd-compat/arc4random.c	/^_rs_random_u32(uint32_t *val)$/;"	f	typeref:typename:void	file:
+_rs_rekey	openbsd-compat/arc4random.c	/^_rs_rekey(u_char *dat, size_t datlen)$/;"	f	typeref:typename:void	file:
+_rs_stir	openbsd-compat/arc4random.c	/^_rs_stir(void)$/;"	f	typeref:typename:void	file:
+_rs_stir_if_needed	openbsd-compat/arc4random.c	/^_rs_stir_if_needed(size_t len)$/;"	f	typeref:typename:void	file:
+_rsx	openbsd-compat/arc4random.c	/^static struct _rsx {$/;"	s	file:
+_saved_tio	sshtty.c	/^static struct termios _saved_tio;$/;"	v	typeref:struct:termios	file:
+_ssh_compat_fflush	openbsd-compat/bsd-misc.c	/^int _ssh_compat_fflush(FILE *f)$/;"	f	typeref:typename:int
+_ssh_compat_getentropy	openbsd-compat/bsd-getentropy.c	/^_ssh_compat_getentropy(void *s, size_t len)$/;"	f	typeref:typename:int
+_ssh_exchange_banner	ssh_api.c	/^_ssh_exchange_banner(struct ssh *ssh)$/;"	f	typeref:typename:int
+_ssh_host_key_sign	ssh_api.c	/^_ssh_host_key_sign(struct ssh *ssh, struct sshkey *privkey,$/;"	f	typeref:typename:int
+_ssh_host_private_key	ssh_api.c	/^_ssh_host_private_key(int type, int nid, struct ssh *ssh)$/;"	f	typeref:struct:sshkey *
+_ssh_host_public_key	ssh_api.c	/^_ssh_host_public_key(int type, int nid, struct ssh *ssh)$/;"	f	typeref:struct:sshkey *
+_ssh_order_hostkeyalgs	ssh_api.c	/^_ssh_order_hostkeyalgs(struct ssh *ssh)$/;"	f	typeref:typename:int
+_ssh_read_banner	ssh_api.c	/^_ssh_read_banner(struct ssh *ssh, struct sshbuf *banner)$/;"	f	typeref:typename:int
+_ssh_send_banner	ssh_api.c	/^_ssh_send_banner(struct ssh *ssh, struct sshbuf *banner)$/;"	f	typeref:typename:int
+_ssh_verify_host_key	ssh_api.c	/^_ssh_verify_host_key(struct sshkey *hostkey, struct ssh *ssh)$/;"	f	typeref:typename:int
+_strptime	openbsd-compat/strptime.c	/^_strptime(const char *buf, const char *fmt, struct tm *tm, int initialize)$/;"	f	typeref:typename:char *	file:
+_sysconfdir	contrib/redhat/openssh.spec	/^%global _sysconfdir \/etc$/;"	g
+a	sftp-client.h	/^	Attrib a;$/;"	m	struct:SFTP_DIRENT	typeref:typename:Attrib
+a2port	misc.c	/^a2port(const char *s)$/;"	f	typeref:typename:int
+a2tun	misc.c	/^a2tun(const char *s, int *remote)$/;"	f	typeref:typename:int
+abandon_cb	channels.h	/^	channel_confirm_abandon_cb *abandon_cb;$/;"	m	struct:channel_confirm	typeref:typename:channel_confirm_abandon_cb *
+abs_top_builddir	Makefile.in	/^abs_top_builddir=@abs_top_builddir@$/;"	m
+abs_top_srcdir	Makefile.in	/^abs_top_srcdir=@abs_top_srcdir@$/;"	m
+abs_val	openbsd-compat/bsd-snprintf.c	/^static LDOUBLE abs_val(LDOUBLE value)$/;"	f	typeref:typename:LDOUBLE	file:
+ac_ctx	cipher.c	/^	struct aesctr_ctx ac_ctx; \/* XXX union with evp? *\/$/;"	m	struct:sshcipher_ctx	typeref:struct:aesctr_ctx	file:
+accept_env	servconf.h	/^	char   **accept_env;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:char **
+accumulate_host_timing_secret	sshd.c	/^accumulate_host_timing_secret(struct sshbuf *server_cfg,$/;"	f	typeref:typename:void	file:
+action	clientloop.c	/^	enum confirm_action action;$/;"	m	struct:channel_reply_ctx	typeref:enum:confirm_action	file:
+action	sandbox-systrace.c	/^	int action;$/;"	m	struct:sandbox_policy	typeref:typename:int	file:
+active_ktype	sshconnect2.c	/^	const char *active_ktype;$/;"	m	struct:cauthctxt	typeref:typename:const char *	file:
+active_test_name	regress/unittests/test_helper/test_helper.c	/^static char *active_test_name = NULL;$/;"	v	typeref:typename:char *	file:
+add	mdoc2man.awk	/^function add(str) {$/;"	f
+add	smult_curve25519_ref.c	/^static void add(unsigned int out[32],const unsigned int a[32],const unsigned int b[32])$/;"	f	typeref:typename:void	file:
+add_cert_option	ssh-keygen.c	/^add_cert_option(char *opt)$/;"	f	typeref:typename:void	file:
+add_certificate_file	readconf.c	/^add_certificate_file(Options *options, const char *path, int userprovided)$/;"	f	typeref:typename:void
+add_file	ssh-add.c	/^add_file(int agent_fd, const char *filename, int key_only, int qflag,$/;"	f	typeref:typename:int	file:
+add_host_to_hostfile	hostfile.c	/^add_host_to_hostfile(const char *filename, const char *host,$/;"	f	typeref:typename:int
+add_identity_file	readconf.c	/^add_identity_file(Options *options, const char *dir, const char *filename,$/;"	f	typeref:typename:void
+add_key	regress/misc/fuzz-harness/agent_fuzz_helper.c	/^add_key(const char *privkey, const char *certpath)$/;"	f	typeref:typename:void	file:
+add_key	ssh-pkcs11-helper.c	/^add_key(struct sshkey *k, char *name, char *label)$/;"	f	typeref:typename:void	file:
+add_keys_to_agent	readconf.h	/^	int	add_keys_to_agent;$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+add_keys_to_agent_lifespan	readconf.h	/^	int	add_keys_to_agent_lifespan;$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+add_listen_addr	servconf.c	/^add_listen_addr(ServerOptions *options, const char *addr,$/;"	f	typeref:typename:void	file:
+add_local_forward	readconf.c	/^add_local_forward(Options *options, const struct Forward *newfwd)$/;"	f	typeref:typename:void
+add_one_listen_addr	servconf.c	/^add_one_listen_addr(ServerOptions *options, const char *addr,$/;"	f	typeref:typename:void	file:
+add_p1p1	ge25519.c	/^static void add_p1p1(ge25519_p1p1 *r, const ge25519_p3 *p, const ge25519_p3 *q)$/;"	f	typeref:typename:void	file:
+add_remote_forward	readconf.c	/^add_remote_forward(Options *options, const struct Forward *newfwd)$/;"	f	typeref:typename:void
+addargs	misc.c	/^addargs(arglist *args, char *fmt, ...)$/;"	f	typeref:typename:void
+additional	openbsd-compat/getrrsetbyname.c	/^	struct dns_rr		*additional;$/;"	m	struct:dns_response	typeref:struct:dns_rr *	file:
+addr	servconf.h	/^	char *addr;$/;"	m	struct:queued_listenaddr	typeref:typename:char *
+addr	srclimit.c	/^	struct xaddr addr;$/;"	m	struct:child_info	typeref:struct:xaddr	file:
+addr16	addr.h	/^		u_int16_t		addr16[8];$/;"	m	union:xaddr::__anonf16dbd56010a	typeref:typename:u_int16_t[8]
+addr16	addr.h	/^#define addr16	/;"	d
+addr32	addr.h	/^		u_int32_t		addr32[4];$/;"	m	union:xaddr::__anonf16dbd56010a	typeref:typename:u_int32_t[4]
+addr32	addr.h	/^#define addr32	/;"	d
+addr8	addr.h	/^		u_int8_t		addr8[16];$/;"	m	union:xaddr::__anonf16dbd56010a	typeref:typename:u_int8_t[16]
+addr8	addr.h	/^#define addr8	/;"	d
+addr_and	addr.c	/^addr_and(struct xaddr *dst, const struct xaddr *a, const struct xaddr *b)$/;"	f	typeref:typename:int
+addr_cmp	addr.c	/^addr_cmp(const struct xaddr *a, const struct xaddr *b)$/;"	f	typeref:typename:int
+addr_host_is_all0s	addr.c	/^addr_host_is_all0s(const struct xaddr *a, u_int masklen)$/;"	f	typeref:typename:int
+addr_hostmask	addr.c	/^addr_hostmask(int af, u_int l, struct xaddr *n)$/;"	f	typeref:typename:int
+addr_invert	addr.c	/^addr_invert(struct xaddr *n)$/;"	f	typeref:typename:int
+addr_is_all0s	addr.c	/^addr_is_all0s(const struct xaddr *a)$/;"	f	typeref:typename:int
+addr_match_cidr_list	addrmatch.c	/^addr_match_cidr_list(const char *addr, const char *_list)$/;"	f	typeref:typename:int
+addr_match_list	addrmatch.c	/^addr_match_list(const char *addr, const char *_list)$/;"	f	typeref:typename:int
+addr_netmask	addr.c	/^addr_netmask(int af, u_int l, struct xaddr *n)$/;"	f	typeref:typename:int
+addr_netmatch	addr.c	/^addr_netmatch(const struct xaddr *host, const struct xaddr *net, u_int masklen)$/;"	f	typeref:typename:int
+addr_ntop	addr.c	/^addr_ntop(const struct xaddr *n, char *p, size_t len)$/;"	f	typeref:typename:int
+addr_pton	addr.c	/^addr_pton(const char *p, struct xaddr *n)$/;"	f	typeref:typename:int
+addr_pton_cidr	addr.c	/^addr_pton_cidr(const char *p, struct xaddr *n, u_int *l)$/;"	f	typeref:typename:int
+addr_sa_pton	addr.c	/^addr_sa_pton(const char *h, const char *s, struct sockaddr *sa, socklen_t slen)$/;"	f	typeref:typename:int
+addr_sa_to_xaddr	addr.c	/^addr_sa_to_xaddr(struct sockaddr *sa, socklen_t slen, struct xaddr *xa)$/;"	f	typeref:typename:int
+addr_to_byte	xmss_hash.c	/^unsigned char* addr_to_byte(unsigned char *bytes, const uint32_t addr[8]){$/;"	f	typeref:typename:unsigned char *
+addr_unicast_masklen	addr.c	/^addr_unicast_masklen(int af)$/;"	f	typeref:typename:int
+addr_xaddr_to_sa	addr.c	/^addr_xaddr_to_sa(const struct xaddr *xa, struct sockaddr *sa, socklen_t *len,$/;"	f	typeref:typename:int
+address	servconf.h	/^	const char *address;	\/* remote address *\/$/;"	m	struct:connection_info	typeref:typename:const char *
+address_family	readconf.h	/^	int     address_family;$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+address_family	servconf.h	/^	int	address_family;		\/* Address family used by the server. *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+addrinfo	openbsd-compat/fake-rfc2553.h	/^struct addrinfo {$/;"	s
+addrs	servconf.h	/^	struct addrinfo *addrs;$/;"	m	struct:listenaddr	typeref:struct:addrinfo *
+adm_forced_command	servconf.h	/^	char   *adm_forced_command;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:char *
+aes_encryption	umac.c	/^#define aes_encryption(/;"	d	file:
+aes_int_key	umac.c	/^typedef AES_KEY aes_int_key[1];$/;"	t	typeref:typename:AES_KEY[1]	file:
+aes_int_key	umac.c	/^typedef UINT8 aes_int_key[AES_ROUNDS+1][4][4];	\/* AES internal *\/$/;"	t	typeref:typename:UINT8[AES_ROUNDS+1][4][4]	file:
+aes_key_setup	umac.c	/^#define aes_key_setup(/;"	d	file:
+aes_nonce	sntrup761.c	/^static const unsigned char aes_nonce[16] = {0};$/;"	v	typeref:typename:const unsigned char[16]	file:
+aesctr_ctx	cipher-aesctr.h	/^typedef struct aesctr_ctx {$/;"	s
+aesctr_ctx	cipher-aesctr.h	/^} aesctr_ctx;$/;"	t	typeref:struct:aesctr_ctx
+aesctr_encrypt_bytes	cipher-aesctr.c	/^aesctr_encrypt_bytes(aesctr_ctx *x,const u8 *m,u8 *c,u32 bytes)$/;"	f	typeref:typename:void
+aesctr_inc	cipher-aesctr.c	/^aesctr_inc(u8 *ctr, u32 len)$/;"	f	typeref:typename:void	file:
+aesctr_ivsetup	cipher-aesctr.c	/^aesctr_ivsetup(aesctr_ctx *x,const u8 *iv)$/;"	f	typeref:typename:void
+aesctr_keysetup	cipher-aesctr.c	/^aesctr_keysetup(aesctr_ctx *x,const u8 *k,u32 kbits,u32 ivbits)$/;"	f	typeref:typename:void
+af	addr.h	/^	sa_family_t	af;$/;"	m	struct:xaddr	typeref:typename:sa_family_t
+after_authentication	packet.c	/^	int after_authentication;$/;"	m	struct:session_state	typeref:typename:int	file:
+after_poll	ssh-agent.c	/^after_poll(struct pollfd *pfd, size_t npfd, u_int maxfds)$/;"	f	typeref:typename:void	file:
+agent_decode_alg	ssh-agent.c	/^agent_decode_alg(struct sshkey *key, u_int flags)$/;"	f	typeref:typename:char *	file:
+agent_encode_alg	authfd.c	/^agent_encode_alg(const struct sshkey *key, const char *alg)$/;"	f	typeref:typename:u_int	file:
+agent_failed	authfd.c	/^#define agent_failed(/;"	d	file:
+agent_fd	sshconnect2.c	/^	int	agent_fd;		\/* >=0 if agent supports key *\/$/;"	m	struct:identity	typeref:typename:int	file:
+agent_fd	sshconnect2.c	/^	int agent_fd;$/;"	m	struct:cauthctxt	typeref:typename:int	file:
+agent_fuzz	regress/misc/fuzz-harness/Makefile	/^agent_fuzz: agent_fuzz.o agent_fuzz_helper.o sk-dummy.o ..\/..\/..\/ssh-sk.o $(COMMON_DEPS)$/;"	t
+agent_fuzz_helper.o	regress/misc/fuzz-harness/Makefile	/^agent_fuzz_helper.o: agent_fuzz_helper.c ..\/..\/..\/ssh-agent.c$/;"	t
+agent_signer	ssh-keygen.c	/^agent_signer(struct sshkey *key, u_char **sigp, size_t *lenp,$/;"	f	typeref:typename:int	file:
+ai	channels.h	/^	struct addrinfo *ai, *aitop;$/;"	m	struct:channel_connect	typeref:struct:addrinfo *
+ai_addr	openbsd-compat/fake-rfc2553.h	/^	struct sockaddr *ai_addr;	\/* binary address *\/$/;"	m	struct:addrinfo	typeref:struct:sockaddr *
+ai_addrlen	openbsd-compat/fake-rfc2553.h	/^	size_t	ai_addrlen;	\/* length of ai_addr *\/$/;"	m	struct:addrinfo	typeref:typename:size_t
+ai_canonname	openbsd-compat/fake-rfc2553.h	/^	char	*ai_canonname;	\/* canonical name for hostname *\/$/;"	m	struct:addrinfo	typeref:typename:char *
+ai_family	openbsd-compat/fake-rfc2553.h	/^	int	ai_family;	\/* PF_xxx *\/$/;"	m	struct:addrinfo	typeref:typename:int
+ai_flags	openbsd-compat/fake-rfc2553.h	/^	int	ai_flags;	\/* AI_PASSIVE, AI_CANONNAME *\/$/;"	m	struct:addrinfo	typeref:typename:int
+ai_next	openbsd-compat/fake-rfc2553.h	/^	struct addrinfo *ai_next;	\/* next structure in linked list *\/$/;"	m	struct:addrinfo	typeref:struct:addrinfo *
+ai_protocol	openbsd-compat/fake-rfc2553.h	/^	int	ai_protocol;	\/* 0 or IPPROTO_xxx for IPv4 and IPv6 *\/$/;"	m	struct:addrinfo	typeref:typename:int
+ai_socktype	openbsd-compat/fake-rfc2553.h	/^	int	ai_socktype;	\/* SOCK_xxx *\/$/;"	m	struct:addrinfo	typeref:typename:int
+aitop	channels.h	/^	struct addrinfo *ai, *aitop;$/;"	m	struct:channel_connect	typeref:struct:addrinfo *
+aix_krb5_get_principal_name	openbsd-compat/port-aix.c	/^aix_krb5_get_principal_name(const char *const_pw_name)$/;"	f	typeref:typename:char *
+aix_remove_embedded_newlines	openbsd-compat/port-aix.c	/^aix_remove_embedded_newlines(char *p)$/;"	f	typeref:typename:void
+aix_restoreauthdb	openbsd-compat/port-aix.c	/^aix_restoreauthdb(void)$/;"	f	typeref:typename:void
+aix_setauthdb	openbsd-compat/port-aix.c	/^aix_setauthdb(const char *user)$/;"	f	typeref:typename:void
+aix_usrinfo	openbsd-compat/port-aix.c	/^aix_usrinfo(struct passwd *pw)$/;"	f	typeref:typename:void
+aix_valid_authentications	openbsd-compat/port-aix.c	/^aix_valid_authentications(const char *user)$/;"	f	typeref:typename:int	file:
+alarm_fired	progressmeter.c	/^static volatile sig_atomic_t alarm_fired;$/;"	v	typeref:typename:volatile sig_atomic_t	file:
+alg	digest-libc.c	/^	int alg;$/;"	m	struct:ssh_digest_ctx	typeref:typename:int	file:
+alg	digest-openssl.c	/^	int alg;$/;"	m	struct:ssh_digest_ctx	typeref:typename:int	file:
+alg	hmac.c	/^	int			 alg;$/;"	m	struct:ssh_hmac_ctx	typeref:typename:int	file:
+alg	mac.c	/^	int		alg;$/;"	m	struct:macalg	typeref:typename:int	file:
+alg	sk-api.h	/^	uint32_t alg;$/;"	m	struct:sk_resident_key	typeref:typename:uint32_t
+align	umac.c	/^        UINT32 align;$/;"	m	union:pdf_gen_xor::__anon20b5e17c020a	typeref:typename:UINT32	file:
+all	Makefile.in	/^all: $(CONFIGFILES) $(MANPAGES) $(TARGETS)$/;"	t
+all	contrib/Makefile	/^all:$/;"	t
+all	contrib/cygwin/Makefile	/^all:$/;"	t
+all	openbsd-compat/Makefile.in	/^all: libopenbsd-compat.a$/;"	t
+all	openbsd-compat/regress/Makefile.in	/^all:	t-exec ${OTHERTESTS}$/;"	t
+all	regress/misc/fuzz-harness/Makefile	/^all: $(TARGETS)$/;"	t
+all_permitted	channels.c	/^	int all_permitted;$/;"	m	struct:permission_set	typeref:typename:int	file:
+alloc	sshbuf.h	/^	size_t alloc;		\/* Total bytes allocated to buf->d *\/$/;"	m	struct:sshbuf	typeref:typename:size_t
+allocated_port	misc.h	/^	int	  allocated_port;	\/* Dynamically allocated listen port *\/$/;"	m	struct:Forward	typeref:typename:int
+allocbuf	scp.c	/^allocbuf(BUF *bp, int fd, int blksize)$/;"	f	typeref:typename:BUF *
+allow_agent_forwarding	servconf.h	/^	int	allow_agent_forwarding;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+allow_groups	servconf.h	/^	char   **allow_groups;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:char **
+allow_streamlocal_forwarding	servconf.h	/^	int	allow_streamlocal_forwarding; \/* One of FORWARD_* *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+allow_tcp_forwarding	servconf.h	/^	int	allow_tcp_forwarding; \/* One of FORWARD_* *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+allow_update	sshkey-xmss.c	/^	u_char		allow_update;	\/* allow sshkey_xmss_update_state() *\/$/;"	m	struct:ssh_xmss_state	typeref:typename:u_char	file:
+allow_users	servconf.h	/^	char   **allow_users;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:char **
+allowed_cname	readconf.h	/^struct allowed_cname {$/;"	s
+allowed_providers	ssh-agent.c	/^static char *allowed_providers;$/;"	v	typeref:typename:char *	file:
+allowed_user	auth.c	/^allowed_user(struct ssh *ssh, struct passwd * pw)$/;"	f	typeref:typename:int
+always	Makefile.in	/^always:$/;"	t
+ambig	openbsd-compat/getopt_long.c	/^static const char ambig[] = "ambiguous option -- %.*s";$/;"	v	typeref:typename:const char[]	file:
+answer	openbsd-compat/getrrsetbyname.c	/^	struct dns_rr		*answer;$/;"	m	struct:dns_response	typeref:struct:dns_rr *	file:
+app_data	packet.h	/^	void *app_data;$/;"	m	struct:ssh	typeref:typename:void *
+append	scp.c	/^append(char *cp, char ***ap, size_t *np)$/;"	f	typeref:typename:int	file:
+append_hostkey_type	sshd.c	/^append_hostkey_type(struct sshbuf *b, const char *s)$/;"	f	typeref:typename:void	file:
+application	sk-api.h	/^	char *application;$/;"	m	struct:sk_resident_key	typeref:typename:char *
+arc4random	openbsd-compat/arc4random.c	/^arc4random(void)$/;"	f	typeref:typename:uint32_t
+arc4random_buf	openbsd-compat/arc4random.c	/^arc4random_buf(void *_buf, size_t n)$/;"	f	typeref:typename:void
+arc4random_buf	openbsd-compat/arc4random.c	/^arc4random_buf(void *buf, size_t n)$/;"	f	typeref:typename:void
+arc4random_stir	defines.h	/^# define arc4random_stir(/;"	d
+arc4random_stir	openbsd-compat/openbsd-compat.h	/^# define arc4random_stir(/;"	d
+arc4random_uniform	openbsd-compat/arc4random_uniform.c	/^arc4random_uniform(uint32_t upper_bound)$/;"	f	typeref:typename:uint32_t
+arg	readconf.c	/^	char *arg;$/;"	m	struct:fwdarg	typeref:typename:char *	file:
+arglist	misc.h	/^struct arglist {$/;"	s
+arglist	misc.h	/^typedef struct arglist arglist;$/;"	t	typeref:struct:arglist
+args	scp.c	/^arglist args;$/;"	v	typeref:typename:arglist
+argv0	log.c	/^static const char *argv0;$/;"	v	typeref:typename:const char *	file:
+argv_assemble	misc.c	/^argv_assemble(int argc, char **argv)$/;"	f	typeref:typename:char *
+argv_consume	misc.c	/^argv_consume(int *argcp)$/;"	f	typeref:typename:void
+argv_env_len	openbsd-compat/setproctitle.c	/^static size_t argv_env_len = 0;$/;"	v	typeref:typename:size_t	file:
+argv_free	misc.c	/^argv_free(char **av, int ac)$/;"	f	typeref:typename:void
+argv_next	misc.c	/^argv_next(int *argcp, char ***argvp)$/;"	f	typeref:typename:char *
+argv_split	misc.c	/^argv_split(const char *s, int *argcp, char ***argvp, int terminate_on_comment)$/;"	f	typeref:typename:int
+argv_start	openbsd-compat/setproctitle.c	/^static char *argv_start = NULL;$/;"	v	typeref:typename:char *	file:
+as	auth.h	/^	auth_session_t	*as;$/;"	m	struct:Authctxt	typeref:typename:auth_session_t *
+ask_filename	ssh-keygen.c	/^ask_filename(struct passwd *pw, const char *prompt)$/;"	f	typeref:typename:void	file:
+ask_permission	readpass.c	/^ask_permission(const char *fmt, ...)$/;"	f	typeref:typename:int
+askpass	contrib/redhat/openssh.spec	/^%package askpass$/;"	p	package:openssh
+askpass	contrib/suse/openssh.spec	/^%package	askpass$/;"	p	package:openssh
+askpass-gnome	contrib/redhat/openssh.spec	/^%package askpass-gnome$/;"	p	package:openssh
+asmprintf	utf8.c	/^asmprintf(char **outp, size_t sz, int *wp, const char *fmt, ...)$/;"	f	typeref:typename:int
+asprintf	openbsd-compat/bsd-asprintf.c	/^int asprintf(char **str, const char *fmt, ...)$/;"	f	typeref:typename:int
+assemble_algorithms	servconf.c	/^assemble_algorithms(ServerOptions *o)$/;"	f	typeref:typename:void	file:
+assert_bignum	regress/unittests/test_helper/test_helper.c	/^assert_bignum(const char *file, int line, const char *a1, const char *a2,$/;"	f	typeref:typename:void
+assert_char	regress/unittests/test_helper/test_helper.c	/^assert_char(const char *file, int line, const char *a1, const char *a2,$/;"	f	typeref:typename:void
+assert_int	regress/unittests/test_helper/test_helper.c	/^assert_int(const char *file, int line, const char *a1, const char *a2,$/;"	f	typeref:typename:void
+assert_long	regress/unittests/test_helper/test_helper.c	/^assert_long(const char *file, int line, const char *a1, const char *a2,$/;"	f	typeref:typename:void
+assert_long_long	regress/unittests/test_helper/test_helper.c	/^assert_long_long(const char *file, int line, const char *a1, const char *a2,$/;"	f	typeref:typename:void
+assert_mem	regress/unittests/test_helper/test_helper.c	/^assert_mem(const char *file, int line, const char *a1, const char *a2,$/;"	f	typeref:typename:void
+assert_mem_filled	regress/unittests/test_helper/test_helper.c	/^assert_mem_filled(const char *file, int line, const char *a1,$/;"	f	typeref:typename:void
+assert_ptr	regress/unittests/test_helper/test_helper.c	/^assert_ptr(const char *file, int line, const char *a1, const char *a2,$/;"	f	typeref:typename:void
+assert_size_t	regress/unittests/test_helper/test_helper.c	/^assert_size_t(const char *file, int line, const char *a1, const char *a2,$/;"	f	typeref:typename:void
+assert_string	regress/unittests/test_helper/test_helper.c	/^assert_string(const char *file, int line, const char *a1, const char *a2,$/;"	f	typeref:typename:void
+assert_u16	regress/unittests/test_helper/test_helper.c	/^assert_u16(const char *file, int line, const char *a1, const char *a2,$/;"	f	typeref:typename:void
+assert_u32	regress/unittests/test_helper/test_helper.c	/^assert_u32(const char *file, int line, const char *a1, const char *a2,$/;"	f	typeref:typename:void
+assert_u64	regress/unittests/test_helper/test_helper.c	/^assert_u64(const char *file, int line, const char *a1, const char *a2,$/;"	f	typeref:typename:void
+assert_u8	regress/unittests/test_helper/test_helper.c	/^assert_u8(const char *file, int line, const char *a1, const char *a2,$/;"	f	typeref:typename:void
+assert_u_int	regress/unittests/test_helper/test_helper.c	/^assert_u_int(const char *file, int line, const char *a1, const char *a2,$/;"	f	typeref:typename:void
+asserterror	regress/unittests/sshsig/webauthn.html	/^<span id="asserterror" style="color: #800; font-weight: bold;"><\/span>$/;"	I
+assertform	regress/unittests/sshsig/webauthn.html	/^<form id="assertform">$/;"	I
+assertresult	regress/unittests/sshsig/webauthn.html	/^<span id="assertresult" style="visibility: hidden;">$/;"	I
+assertresultauthdata	regress/unittests/sshsig/webauthn.html	/^<pre id="assertresultauthdata" style="color: #008; font-family: monospace;"><\/pre>$/;"	I
+assertresultauthdataraw	regress/unittests/sshsig/webauthn.html	/^<pre id="assertresultauthdataraw" style="color: #008; font-family: monospace;"><\/pre>$/;"	I
+assertresultjson	regress/unittests/sshsig/webauthn.html	/^<pre id="assertresultjson" style="color: #008; font-family: monospace;"><\/pre>$/;"	I
+assertresultsigraw	regress/unittests/sshsig/webauthn.html	/^<pre id="assertresultsigraw" style="color: #008; font-family: monospace;"><\/pre>$/;"	I
+assertresultsshsigb64	regress/unittests/sshsig/webauthn.html	/^<pre id="assertresultsshsigb64" style="color: #008; font-family: monospace;"><\/pre>$/;"	I
+assertresultsshsigraw	regress/unittests/sshsig/webauthn.html	/^<pre id="assertresultsshsigraw" style="color: #008; font-family: monospace;"><\/pre>$/;"	I
+assertsection	regress/unittests/sshsig/webauthn.html	/^<span id="assertsection" style="visibility: hidden;">$/;"	I
+assertsubmit	regress/unittests/sshsig/webauthn.html	/^<tr><td><\/td><td><input id="assertsubmit" type="submit" value="submit" \/><\/td><\/tr>$/;"	I
+atelnet	regress/netcat.c	/^atelnet(int nfd, unsigned char *buf, unsigned int size)$/;"	f	typeref:typename:void
+atime	scp.c	/^#define	atime	/;"	d	file:
+atime	sftp-common.h	/^	u_int32_t	atime;$/;"	m	struct:Attrib	typeref:typename:u_int32_t
+atoi_err	misc.c	/^atoi_err(const char *nptr, int *val)$/;"	f	typeref:typename:const char *
+atomicio	atomicio.c	/^atomicio(ssize_t (*f) (int, void *, size_t), int fd, void *_s, size_t n)$/;"	f	typeref:typename:size_t
+atomicio6	atomicio.c	/^atomicio6(ssize_t (*f) (int, void *, size_t), int fd, void *_s, size_t n,$/;"	f	typeref:typename:size_t
+atomiciov	atomicio.c	/^atomiciov(ssize_t (*f) (int, const struct iovec *, int), int fd,$/;"	f	typeref:typename:size_t
+atomiciov6	atomicio.c	/^atomiciov6(ssize_t (*f) (int, const struct iovec *, int), int fd,$/;"	f	typeref:typename:size_t
+attempt	auth.h	/^	int		 attempt;$/;"	m	struct:Authctxt	typeref:typename:int
+attempt_connect	regress/cert-hostkey.sh	/^attempt_connect() {$/;"	f
+attempt_kbdint	sshconnect2.c	/^	int attempt_kbdint;$/;"	m	struct:cauthctxt	typeref:typename:int	file:
+attempt_parse_blob	regress/unittests/sshbuf/test_sshbuf_getput_fuzz.c	/^attempt_parse_blob(u_char *blob, size_t len)$/;"	f	typeref:typename:void	file:
+attempt_passwd	sshconnect2.c	/^	int attempt_passwd;$/;"	m	struct:cauthctxt	typeref:typename:int	file:
+attestationObject	regress/unittests/sshsig/webauthn.html	/^<h2>attestationObject<\/h2>$/;"	i
+attestationObject raw	regress/unittests/sshsig/webauthn.html	/^<h2>attestationObject raw<\/h2>$/;"	i
+attestation_cert	sk-api.h	/^	uint8_t *attestation_cert;$/;"	m	struct:sk_enroll_response	typeref:typename:uint8_t *
+attestation_cert_len	sk-api.h	/^	size_t attestation_cert_len;$/;"	m	struct:sk_enroll_response	typeref:typename:size_t
+attrib	sftp-server.c	/^	Attrib attrib;$/;"	m	struct:Stat	typeref:typename:Attrib	file:
+attrib_clear	sftp-common.c	/^attrib_clear(Attrib *a)$/;"	f	typeref:typename:void
+attrib_to_stat	sftp-common.c	/^attrib_to_stat(const Attrib *a, struct stat *st)$/;"	f	typeref:typename:void
+attrib_to_ts	sftp-server.c	/^attrib_to_ts(const Attrib *a)$/;"	f	typeref:struct:timespec *	file:
+attrib_to_tv	sftp-server.c	/^attrib_to_tv(const Attrib *a)$/;"	f	typeref:struct:timeval *	file:
+atyp	channels.c	/^		u_int8_t atyp;$/;"	m	struct:channel_decode_socks5::__anonb8c1f4220208	typeref:typename:u_int8_t	file:
+audit	configure.ac	/^AC_ARG_WITH([audit],$/;"	w
+audit_classify_auth	audit.c	/^audit_classify_auth(const char *method)$/;"	f	typeref:typename:ssh_audit_event_t
+audit_connection_from	audit-bsm.c	/^audit_connection_from(const char *host, int port)$/;"	f	typeref:typename:void
+audit_connection_from	audit-linux.c	/^audit_connection_from(const char *host, int port)$/;"	f	typeref:typename:void
+audit_connection_from	audit.c	/^audit_connection_from(const char *host, int port)$/;"	f	typeref:typename:void
+audit_event	audit-bsm.c	/^audit_event(struct ssh *ssh, ssh_audit_event_t event)$/;"	f	typeref:typename:void
+audit_event	audit-linux.c	/^audit_event(struct ssh *ssh, ssh_audit_event_t event)$/;"	f	typeref:typename:void
+audit_event	audit.c	/^audit_event(struct ssh *ssh, ssh_audit_event_t event)$/;"	f	typeref:typename:void
+audit_event_lookup	audit.c	/^audit_event_lookup(ssh_audit_event_t ev)$/;"	f	typeref:typename:const char *
+audit_run_command	audit-bsm.c	/^audit_run_command(const char *command)$/;"	f	typeref:typename:void
+audit_run_command	audit-linux.c	/^audit_run_command(const char *command)$/;"	f	typeref:typename:void
+audit_run_command	audit.c	/^audit_run_command(const char *command)$/;"	f	typeref:typename:void
+audit_session_close	audit-bsm.c	/^audit_session_close(struct logininfo *li)$/;"	f	typeref:typename:void
+audit_session_close	audit-linux.c	/^audit_session_close(struct logininfo *li)$/;"	f	typeref:typename:void
+audit_session_close	audit.c	/^audit_session_close(struct logininfo *li)$/;"	f	typeref:typename:void
+audit_session_open	audit-bsm.c	/^audit_session_open(struct logininfo *li)$/;"	f	typeref:typename:void
+audit_session_open	audit-linux.c	/^audit_session_open(struct logininfo *li)$/;"	f	typeref:typename:void
+audit_session_open	audit.c	/^audit_session_open(struct logininfo *li)$/;"	f	typeref:typename:void
+audit_username	audit.c	/^audit_username(void)$/;"	f	typeref:typename:const char *
+aug_get_machine	audit-bsm.c	/^aug_get_machine(char *host, u_int32_t *addr, u_int32_t *type)$/;"	f	typeref:typename:int	file:
+auth	sshkey-xmss.c	/^	u_char		*auth;$/;"	m	struct:ssh_xmss_state	typeref:typename:u_char *	file:
+auth	xmss_fast.h	/^  unsigned char *auth;$/;"	m	struct:__anon22bef5f30508	typeref:typename:unsigned char *
+auth2_authctxt_reset_info	auth2.c	/^void auth2_authctxt_reset_info(Authctxt *authctxt)$/;"	f	typeref:typename:void
+auth2_challenge	auth2-chall.c	/^auth2_challenge(struct ssh *ssh, char *devs)$/;"	f	typeref:typename:int
+auth2_challenge_start	auth2-chall.c	/^auth2_challenge_start(struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+auth2_challenge_stop	auth2-chall.c	/^auth2_challenge_stop(struct ssh *ssh)$/;"	f	typeref:typename:void
+auth2_key_already_used	auth2.c	/^auth2_key_already_used(Authctxt *authctxt, const struct sshkey *key)$/;"	f	typeref:typename:int
+auth2_method_allowed	auth2.c	/^auth2_method_allowed(Authctxt *authctxt, const char *method,$/;"	f	typeref:typename:int
+auth2_methods_valid	auth2.c	/^auth2_methods_valid(const char *_methods, int need_enable)$/;"	f	typeref:typename:int
+auth2_read_banner	auth2.c	/^auth2_read_banner(void)$/;"	f	typeref:typename:char *
+auth2_record_info	auth2.c	/^auth2_record_info(Authctxt *authctxt, const char *fmt, ...)$/;"	f	typeref:typename:void
+auth2_record_key	auth2.c	/^auth2_record_key(Authctxt *authctxt, int authenticated,$/;"	f	typeref:typename:void
+auth2_setup_methods_lists	auth2.c	/^auth2_setup_methods_lists(Authctxt *authctxt)$/;"	f	typeref:typename:int
+auth2_update_methods_lists	auth2.c	/^auth2_update_methods_lists(Authctxt *authctxt, const char *method,$/;"	f	typeref:typename:int
+auth2_update_session_info	auth2.c	/^auth2_update_session_info(Authctxt *authctxt, const char *method,$/;"	f	typeref:typename:void
+authData	regress/unittests/sshsig/webauthn.html	/^<h2>authData<\/h2>$/;"	i
+authData raw	regress/unittests/sshsig/webauthn.html	/^<h2>authData raw<\/h2>$/;"	i
+auth_activate_options	auth.c	/^auth_activate_options(struct ssh *ssh, struct sshauthopt *opts)$/;"	f	typeref:typename:int
+auth_authorise_keyopts	auth2-pubkeyfile.c	/^auth_authorise_keyopts(struct passwd *pw, struct sshauthopt *opts,$/;"	f	typeref:typename:int
+auth_check_authkey_line	auth2-pubkeyfile.c	/^auth_check_authkey_line(struct passwd *pw, struct sshkey *key,$/;"	f	typeref:typename:int
+auth_check_authkeys_file	auth2-pubkeyfile.c	/^auth_check_authkeys_file(struct passwd *pw, FILE *f, char *file,$/;"	f	typeref:typename:int
+auth_check_principals_line	auth2-pubkeyfile.c	/^auth_check_principals_line(char *cp, const struct sshkey_cert *cert,$/;"	f	typeref:typename:int
+auth_data	session.h	/^	char	*auth_data;$/;"	m	struct:Session	typeref:typename:char *
+auth_debug	auth.c	/^static struct sshbuf *auth_debug;$/;"	v	typeref:struct:sshbuf *	file:
+auth_debug_add	auth.c	/^auth_debug_add(const char *fmt,...)$/;"	f	typeref:typename:void
+auth_debug_add	regress/misc/fuzz-harness/authkeys_fuzz.cc	/^void auth_debug_add(const char *fmt,...)$/;"	f	typeref:typename:void
+auth_debug_reset	auth.c	/^auth_debug_reset(void)$/;"	f	typeref:typename:void
+auth_debug_send	auth.c	/^auth_debug_send(struct ssh *ssh)$/;"	f	typeref:typename:void
+auth_display	session.h	/^	char	*auth_display;$/;"	m	struct:Session	typeref:typename:char *
+auth_get_canonical_hostname	auth.c	/^auth_get_canonical_hostname(struct ssh *ssh, int use_dns)$/;"	f	typeref:typename:const char *
+auth_info_file	session.c	/^static char *auth_info_file = NULL;$/;"	v	typeref:typename:char *	file:
+auth_input_request_forwarding	session.c	/^auth_input_request_forwarding(struct ssh *ssh, struct passwd * pw)$/;"	f	typeref:typename:int	file:
+auth_key_is_revoked	auth.c	/^auth_key_is_revoked(struct sshkey *key)$/;"	f	typeref:typename:int
+auth_krb5_password	auth-krb5.c	/^auth_krb5_password(Authctxt *authctxt, const char *password)$/;"	f	typeref:typename:int
+auth_len	cipher.c	/^	u_int	auth_len;$/;"	m	struct:sshcipher	typeref:typename:u_int	file:
+auth_log	auth.c	/^auth_log(struct ssh *ssh, int authenticated, int partial,$/;"	f	typeref:typename:void
+auth_log_authopts	auth.c	/^auth_log_authopts(const char *loc, const struct sshauthopt *opts, int do_remote)$/;"	f	typeref:typename:void
+auth_log_authopts	regress/misc/fuzz-harness/authkeys_fuzz.cc	/^auth_log_authopts(const char *loc, const struct sshauthopt *opts, int do_remote)$/;"	f	typeref:typename:void
+auth_maxtries_exceeded	auth.c	/^auth_maxtries_exceeded(struct ssh *ssh)$/;"	f	typeref:typename:void
+auth_method	monitor.c	/^static char *auth_method = "unknown";$/;"	v	typeref:typename:char *	file:
+auth_method_info	auth.h	/^	char		*auth_method_info;$/;"	m	struct:Authctxt	typeref:typename:char *
+auth_method_key	auth.h	/^	struct sshkey	*auth_method_key;$/;"	m	struct:Authctxt	typeref:struct:sshkey *
+auth_methods	auth.h	/^	char		**auth_methods;	\/* modified from server config *\/$/;"	m	struct:Authctxt	typeref:typename:char **
+auth_methods	servconf.h	/^	char   **auth_methods;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:char **
+auth_openfile	auth2-pubkeyfile.c	/^auth_openfile(const char *file, struct passwd *pw, int strict_modes,$/;"	f	typeref:typename:FILE *	file:
+auth_openkeyfile	auth2-pubkeyfile.c	/^auth_openkeyfile(const char *file, struct passwd *pw, int strict_modes)$/;"	f	typeref:typename:FILE *
+auth_openprincipals	auth2-pubkeyfile.c	/^auth_openprincipals(const char *file, struct passwd *pw, int strict_modes)$/;"	f	typeref:typename:FILE *
+auth_opts	sshd.c	/^struct sshauthopt *auth_opts = NULL;$/;"	v	typeref:struct:sshauthopt *
+auth_password	auth-passwd.c	/^auth_password(struct ssh *ssh, const char *password)$/;"	f	typeref:typename:int
+auth_process_principals	auth2-pubkeyfile.c	/^auth_process_principals(FILE *f, const char *file,$/;"	f	typeref:typename:int
+auth_proto	session.h	/^	char	*auth_proto;$/;"	m	struct:Session	typeref:typename:char *
+auth_restrict_session	auth.c	/^auth_restrict_session(struct ssh *ssh)$/;"	f	typeref:typename:void
+auth_rhosts2	auth-rhosts.c	/^auth_rhosts2(struct passwd *pw, const char *client_user, const char *hostname,$/;"	f	typeref:typename:int
+auth_root_allowed	auth.c	/^auth_root_allowed(struct ssh *ssh, const char *method)$/;"	f	typeref:typename:int
+auth_secure_path	regress/check-perm.c	/^auth_secure_path(const char *name, struct stat *stp, const char *pw_dir,$/;"	f	typeref:typename:int
+auth_shadow_acctexpired	auth-shadow.c	/^auth_shadow_acctexpired(struct spwd *spw)$/;"	f	typeref:typename:int
+auth_shadow_pwexpired	auth-shadow.c	/^auth_shadow_pwexpired(Authctxt *ctxt)$/;"	f	typeref:typename:int
+auth_sock	sshd.c	/^int auth_sock = -1;$/;"	v	typeref:typename:int
+auth_sock_cleanup_proc	session.c	/^auth_sock_cleanup_proc(struct passwd *pw)$/;"	f	typeref:typename:void	file:
+auth_sock_dir	session.c	/^static char *auth_sock_dir = NULL;$/;"	v	typeref:typename:char *	file:
+auth_sock_name	session.c	/^static char *auth_sock_name = NULL;$/;"	v	typeref:typename:char *	file:
+auth_submethod	monitor.c	/^static char *auth_submethod = NULL;$/;"	v	typeref:typename:char *	file:
+authctxt	monitor.c	/^static Authctxt *authctxt;$/;"	v	typeref:typename:Authctxt *	file:
+authctxt	packet.h	/^	void *authctxt;$/;"	m	struct:ssh	typeref:typename:void *
+authctxt	session.h	/^	Authctxt *authctxt;$/;"	m	struct:Session	typeref:typename:Authctxt *
+authdata	sk-api.h	/^	uint8_t *authdata;$/;"	m	struct:sk_enroll_response	typeref:typename:uint8_t *
+authdata_len	sk-api.h	/^	size_t authdata_len;$/;"	m	struct:sk_enroll_response	typeref:typename:size_t
+authenticated	auth.h	/^	int		 authenticated;	\/* authenticated and alarms cancelled *\/$/;"	m	struct:Authctxt	typeref:typename:int
+authenticatorData	regress/unittests/sshsig/webauthn.html	/^<h2>authenticatorData<\/h2>$/;"	i
+authenticatorData raw	regress/unittests/sshsig/webauthn.html	/^<h2>authenticatorData raw<\/h2>$/;"	i
+authkeys_fuzz	regress/misc/fuzz-harness/Makefile	/^authkeys_fuzz: authkeys_fuzz.o $(SK_NULL_OBJS) $(COMMON_DEPS)$/;"	t
+authlist	sshconnect2.c	/^	char *authlist;$/;"	m	struct:cauthctxt	typeref:typename:char *	file:
+authmethod_byname	auth2.c	/^authmethod_byname(const char *name)$/;"	f	typeref:typename:Authmethod *	file:
+authmethod_get	sshconnect2.c	/^authmethod_get(char *authlist)$/;"	f	typeref:typename:Authmethod *	file:
+authmethod_is_enabled	sshconnect2.c	/^authmethod_is_enabled(Authmethod *method)$/;"	f	typeref:typename:int	file:
+authmethod_lookup	auth2.c	/^authmethod_lookup(Authctxt *authctxt, const char *name)$/;"	f	typeref:typename:Authmethod *	file:
+authmethod_lookup	sshconnect2.c	/^authmethod_lookup(const char *name)$/;"	f	typeref:typename:Authmethod *	file:
+authmethods	auth2.c	/^Authmethod *authmethods[] = {$/;"	v	typeref:typename:Authmethod * []
+authmethods	sshconnect2.c	/^Authmethod authmethods[] = {$/;"	v	typeref:typename:Authmethod[]
+authmethods_get	auth2.c	/^authmethods_get(Authctxt *authctxt)$/;"	f	typeref:typename:char *	file:
+authmethods_get	sshconnect2.c	/^authmethods_get(void)$/;"	f	typeref:typename:char *	file:
+authopt_fuzz	regress/misc/fuzz-harness/Makefile	/^authopt_fuzz: authopt_fuzz.o $(SK_NULL_OBJS) $(COMMON_DEPS)$/;"	t
+authority	openbsd-compat/getrrsetbyname.c	/^	struct dns_rr		*authority;$/;"	m	struct:dns_response	typeref:struct:dns_rr *	file:
+authorized_keys_command	servconf.h	/^	char   *authorized_keys_command;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:char *
+authorized_keys_command_user	servconf.h	/^	char   *authorized_keys_command_user;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:char *
+authorized_keys_files	servconf.h	/^	char   **authorized_keys_files;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:char **
+authorized_principals_command	servconf.h	/^	char   *authorized_principals_command;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:char *
+authorized_principals_command_user	servconf.h	/^	char   *authorized_principals_command_user;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:char *
+authorized_principals_file	auth.c	/^authorized_principals_file(struct passwd *pw)$/;"	f	typeref:typename:char *
+authorized_principals_file	servconf.h	/^	char   *authorized_principals_file;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:char *
+aversion	contrib/redhat/openssh.spec	/^%global aversion 1.2.4.1$/;"	g
+b64_ntop	openbsd-compat/base64.c	/^b64_ntop(u_char const *src, size_t srclength, char *target, size_t targsize)$/;"	f	typeref:typename:int
+b64_pton	openbsd-compat/base64.c	/^b64_pton(char const *src, u_char *target, size_t targsize)$/;"	f	typeref:typename:int
+badarg	regress/unittests/utf8/tests.c	/^badarg(void)$/;"	f	typeref:typename:void	file:
+badport	regress/portnum.sh	/^badport() {$/;"	f
+banana	regress/unittests/sshkey/test_sshkey.c	/^banana(u_char *s, size_t l)$/;"	f	typeref:typename:void	file:
+bandwidth_limit	misc.c	/^bandwidth_limit(struct bwlimit *bw, size_t read_len)$/;"	f	typeref:typename:void
+bandwidth_limit_init	misc.c	/^bandwidth_limit_init(struct bwlimit *bw, u_int64_t kbps, size_t buflen)$/;"	f	typeref:typename:void
+banner	servconf.h	/^	char   *banner;			\/* SSH-2 banner message *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:char *
+barrett_reduce	sc25519.c	/^static void barrett_reduce(sc25519 *r, const crypto_uint32 x[64])$/;"	f	typeref:typename:void	file:
+base	openbsd-compat/inet_ntop.c	/^	struct { int base, len; } best, cur;$/;"	m	struct:inet_ntop6::__anonacf84e910108	typeref:typename:int	file:
+base_w	xmss_wots.c	/^static void base_w(int *output, const int out_len, const unsigned char *input, const wots_params/;"	f	typeref:typename:void	file:
+basename	openbsd-compat/basename.c	/^basename(const char *path)$/;"	f	typeref:typename:char *
+basic_tests	regress/cert-userkey.sh	/^basic_tests() {$/;"	f
+batch_flag	sshconnect2.c	/^	int	*batch_flag;	\/* flag in option struct that disables method *\/$/;"	m	struct:cauthmethod	typeref:typename:int *	file:
+batch_mode	readconf.h	/^	int     batch_mode;	\/* Batch mode: do not ask for passwords. *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+batchmode	sftp.c	/^int batchmode = 0;$/;"	v	typeref:typename:int
+baud_to_speed	ttymodes.c	/^baud_to_speed(int baud)$/;"	f	typeref:typename:speed_t	file:
+bcrypt_hash	openbsd-compat/bcrypt_pbkdf.c	/^bcrypt_hash(uint8_t *sha2pass, uint8_t *sha2salt, uint8_t *out)$/;"	f	typeref:typename:void	file:
+bcrypt_pbkdf	openbsd-compat/bcrypt_pbkdf.c	/^bcrypt_pbkdf(const char *pass, size_t passlen, const uint8_t *salt, size_t saltlen,$/;"	f	typeref:typename:int
+bds	sshkey-xmss.c	/^	bds_state	bds;$/;"	m	struct:ssh_xmss_state	typeref:typename:bds_state	file:
+bds_round	xmss_fast.c	/^static void bds_round(bds_state *state, const unsigned long leaf_idx, const unsigned char *sk_se/;"	f	typeref:typename:void	file:
+bds_state	xmss_fast.h	/^} bds_state;$/;"	t	typeref:struct:__anon22bef5f30508
+bds_state_update	xmss_fast.c	/^static char bds_state_update(bds_state *state, const unsigned char *sk_seed, const xmss_params */;"	f	typeref:typename:char	file:
+bds_treehash_update	xmss_fast.c	/^static char bds_treehash_update(bds_state *state, unsigned int updates, const unsigned char *sk_/;"	f	typeref:typename:char	file:
+be_verbose	logintest.c	/^int be_verbose = 0;$/;"	v	typeref:typename:int
+binary_open	openbsd-compat/bsd-cygwin_util.c	/^binary_open(const char *filename, int flags, ...)$/;"	f	typeref:typename:int
+bind_address	readconf.h	/^	char   *bind_address;	\/* local socket address for connection to sshd *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:char *
+bind_interface	readconf.h	/^	char   *bind_interface;	\/* local interface for bind address *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:char *
+bind_permitted	serverloop.c	/^bind_permitted(int port, uid_t uid)$/;"	f	typeref:typename:int	file:
+bindir	Makefile.in	/^bindir=@bindir@$/;"	m
+bindir	contrib/cygwin/Makefile	/^bindir=$(prefix)\/bin$/;"	m
+bindresvport_sa	openbsd-compat/bindresvport.c	/^bindresvport_sa(int sd, struct sockaddr *sa)$/;"	f	typeref:typename:int
+bitcount	openbsd-compat/sha2.h	/^	u_int64_t	bitcount[2];$/;"	m	struct:_SHA2_CTX	typeref:typename:u_int64_t[2]
+bitmap	bitmap.c	/^struct bitmap {$/;"	s	file:
+bitmap_clear_bit	bitmap.c	/^bitmap_clear_bit(struct bitmap *b, u_int n)$/;"	f	typeref:typename:void
+bitmap_free	bitmap.c	/^bitmap_free(struct bitmap *b)$/;"	f	typeref:typename:void
+bitmap_from_string	bitmap.c	/^bitmap_from_string(struct bitmap *b, const void *p, size_t l)$/;"	f	typeref:typename:int
+bitmap_nbits	bitmap.c	/^bitmap_nbits(struct bitmap *b)$/;"	f	typeref:typename:size_t
+bitmap_nbytes	bitmap.c	/^bitmap_nbytes(struct bitmap *b)$/;"	f	typeref:typename:size_t
+bitmap_new	bitmap.c	/^bitmap_new(void)$/;"	f	typeref:struct:bitmap *
+bitmap_set_bit	bitmap.c	/^bitmap_set_bit(struct bitmap *b, u_int n)$/;"	f	typeref:typename:int
+bitmap_test_bit	bitmap.c	/^bitmap_test_bit(struct bitmap *b, u_int n)$/;"	f	typeref:typename:int
+bitmap_to_string	bitmap.c	/^bitmap_to_string(struct bitmap *b, void *p, size_t l)$/;"	f	typeref:typename:int
+bitmap_zero	bitmap.c	/^bitmap_zero(struct bitmap *b)$/;"	f	typeref:typename:void
+blf_cbc_decrypt	openbsd-compat/blowfish.c	/^blf_cbc_decrypt(blf_ctx *c, u_int8_t *iva, u_int8_t *data, u_int32_t len)$/;"	f	typeref:typename:void
+blf_cbc_encrypt	openbsd-compat/blowfish.c	/^blf_cbc_encrypt(blf_ctx *c, u_int8_t *iv, u_int8_t *data, u_int32_t len)$/;"	f	typeref:typename:void
+blf_ctx	openbsd-compat/blf.h	/^} blf_ctx;$/;"	t	typeref:struct:BlowfishContext
+blf_dec	openbsd-compat/blowfish.c	/^blf_dec(blf_ctx *c, u_int32_t *data, u_int16_t blocks)$/;"	f	typeref:typename:void
+blf_ecb_decrypt	openbsd-compat/blowfish.c	/^blf_ecb_decrypt(blf_ctx *c, u_int8_t *data, u_int32_t len)$/;"	f	typeref:typename:void
+blf_ecb_encrypt	openbsd-compat/blowfish.c	/^blf_ecb_encrypt(blf_ctx *c, u_int8_t *data, u_int32_t len)$/;"	f	typeref:typename:void
+blf_enc	openbsd-compat/blowfish.c	/^blf_enc(blf_ctx *c, u_int32_t *data, u_int16_t blocks)$/;"	f	typeref:typename:void
+blf_key	openbsd-compat/blowfish.c	/^blf_key(blf_ctx *c, const u_int8_t *k, u_int16_t len)$/;"	f	typeref:typename:void
+blk	openbsd-compat/sha1.c	/^#define blk(/;"	d	file:
+blk0	openbsd-compat/sha1.c	/^# define blk0(/;"	d	file:
+blob	krl.c	/^	u_char *blob;$/;"	m	struct:revoked_blob	typeref:typename:u_char *	file:
+blob_cmp	krl.c	/^blob_cmp(struct revoked_blob *a, struct revoked_blob *b)$/;"	f	typeref:typename:int	file:
+blob_section	krl.c	/^blob_section(struct sshbuf *sect, struct revoked_blob_tree *target_tree,$/;"	f	typeref:typename:int	file:
+block_len	digest-libc.c	/^	size_t block_len;$/;"	m	struct:ssh_digest	typeref:typename:size_t	file:
+block_size	cipher.c	/^	u_int	block_size;$/;"	m	struct:sshcipher	typeref:typename:u_int	file:
+block_size	kex.h	/^	u_int	block_size;$/;"	m	struct:sshenc	typeref:typename:u_int
+blocks	packet.c	/^	u_int64_t blocks;$/;"	m	struct:packet_state	typeref:typename:u_int64_t	file:
+brace_expand	scp.c	/^brace_expand(const char *pattern, char ***patternsp, size_t *npatternsp)$/;"	f	typeref:typename:int	file:
+brace_expand_one	scp.c	/^brace_expand_one(const char *pattern, char ***patternsp, size_t *npatternsp,$/;"	f	typeref:typename:int	file:
+bsd-auth	configure.ac	/^AC_ARG_WITH([bsd-auth],$/;"	w
+bsdauth_device	auth-bsdauth.c	/^KbdintDevice bsdauth_device = {$/;"	v	typeref:typename:KbdintDevice
+bsdauth_free_ctx	auth-bsdauth.c	/^bsdauth_free_ctx(void *ctx)$/;"	f	typeref:typename:void	file:
+bsdauth_init_ctx	auth-bsdauth.c	/^bsdauth_init_ctx(Authctxt *authctxt)$/;"	f	typeref:typename:void *	file:
+bsdauth_query	auth-bsdauth.c	/^bsdauth_query(void *ctx, char **name, char **infotxt,$/;"	f	typeref:typename:int
+bsdauth_respond	auth-bsdauth.c	/^bsdauth_respond(void *ctx, u_int numresponses, char **responses)$/;"	f	typeref:typename:int
+bsm_audit_bad_login	audit-bsm.c	/^bsm_audit_bad_login(const char *what)$/;"	f	typeref:typename:void	file:
+bsm_audit_record	audit-bsm.c	/^bsm_audit_record(int typ, char *string, au_event_t event_no)$/;"	f	typeref:typename:void	file:
+bsm_audit_session_setup	audit-bsm.c	/^bsm_audit_session_setup(void)$/;"	f	typeref:typename:void	file:
+buf	hmac.c	/^	u_char			*buf;$/;"	m	struct:ssh_hmac_ctx	typeref:typename:u_char *	file:
+buf	monitor_fdpass.c	/^		char buf[CMSG_SPACE(sizeof(int))];$/;"	m	union:mm_receive_fd::__anon08acf23e020a	typeref:typename:char[]	file:
+buf	monitor_fdpass.c	/^		char buf[CMSG_SPACE(sizeof(int))];$/;"	m	union:mm_send_fd::__anon08acf23e010a	typeref:typename:char[]	file:
+buf	regress/netcat.c	/^		char buf[CMSG_SPACE(sizeof(int))];$/;"	m	union:fdpass::__anon2cdfc23f010a	typeref:typename:char[]	file:
+buf	scp.c	/^	char *buf;$/;"	m	struct:__anon10582e5c0108	typeref:typename:char *	file:
+buf_equal	ssh-agent.c	/^buf_equal(const struct sshbuf *a, const struct sshbuf *b)$/;"	f	typeref:typename:int	file:
+buf_len	hmac.c	/^	size_t			 buf_len;$/;"	m	struct:ssh_hmac_ctx	typeref:typename:size_t	file:
+buffer	openbsd-compat/md5.h	/^	u_int8_t buffer[MD5_BLOCK_LENGTH];	\/* input buffer *\/$/;"	m	struct:MD5Context	typeref:typename:u_int8_t[]
+buffer	openbsd-compat/sha1.h	/^    u_int8_t buffer[SHA1_BLOCK_LENGTH];$/;"	m	struct:__anonad849d930108	typeref:typename:u_int8_t[]
+buffer	openbsd-compat/sha2.h	/^	u_int8_t	buffer[SHA512_BLOCK_LENGTH];$/;"	m	struct:_SHA2_CTX	typeref:typename:u_int8_t[]
+buffer_get_bignum_bits	ssh-keygen.c	/^buffer_get_bignum_bits(struct sshbuf *b, BIGNUM *value)$/;"	f	typeref:typename:void	file:
+buflen	misc.h	/^	size_t buflen;$/;"	m	struct:bwlimit	typeref:typename:size_t
+bugs	compat.c	/^		int	bugs;$/;"	m	struct:compat_banner::__anon400d1e3a0108	typeref:typename:int	file:
+build6x	contrib/redhat/openssh.spec	/^%global build6x 0$/;"	g
+build6x	contrib/redhat/openssh.spec	/^%global build6x 1$/;"	g
+build_cert	regress/unittests/sshkey/test_sshkey.c	/^build_cert(struct sshbuf *b, struct sshkey *k, const char *type,$/;"	f	typeref:typename:void	file:
+build_ports	regress/netcat.c	/^build_ports(char *p)$/;"	f	typeref:typename:void
+build_x11_askpass	contrib/suse/openssh.spec	/^%define build_x11_askpass	1$/;"	m
+bwend	misc.h	/^	struct timeval bwstart, bwend;$/;"	m	struct:bwlimit	typeref:struct:timeval
+bwlimit	misc.h	/^struct bwlimit {$/;"	s
+bwlimit	scp.c	/^struct bwlimit bwlimit;$/;"	v	typeref:struct:bwlimit
+bwlimit_in	sftp-client.c	/^	struct bwlimit bwlimit_in, bwlimit_out;$/;"	m	struct:sftp_conn	typeref:struct:bwlimit	file:
+bwlimit_out	sftp-client.c	/^	struct bwlimit bwlimit_in, bwlimit_out;$/;"	m	struct:sftp_conn	typeref:struct:bwlimit	file:
+bwstart	misc.h	/^	struct timeval bwstart, bwend;$/;"	m	struct:bwlimit	typeref:struct:timeval
+bytes	packet.c	/^	u_int64_t bytes;$/;"	m	struct:packet_state	typeref:typename:u_int64_t	file:
+bytes_hashed	umac.c	/^    int bytes_hashed;       \/* Bytes (out of L1_KEY_LEN) incorporated.   *\/$/;"	m	struct:__anon20b5e17c0308	typeref:typename:int	file:
+bytes_per_second	progressmeter.c	/^static int bytes_per_second;	\/* current speed in bytes per second *\/$/;"	v	typeref:typename:int	file:
+bytes_read	sftp-server.c	/^	u_int64_t bytes_read, bytes_write;$/;"	m	struct:Handle	typeref:typename:u_int64_t	file:
+bytes_write	sftp-server.c	/^	u_int64_t bytes_read, bytes_write;$/;"	m	struct:Handle	typeref:typename:u_int64_t	file:
+bzero	openbsd-compat/bsd-misc.c	/^bzero(void *b, size_t n)$/;"	f	typeref:typename:void
+c	openbsd-compat/sha1.c	/^	u_int8_t c[64];$/;"	m	union:__anonad849d8e010a	typeref:typename:u_int8_t[64]	file:
+c	sftp.c	/^	const char *c;$/;"	m	struct:CMD	typeref:typename:const char *	file:
+c25519_client_key	kex.h	/^	u_char c25519_client_key[CURVE25519_SIZE]; \/* 25519 + KEM *\/$/;"	m	struct:kex	typeref:typename:u_char[]
+c25519_client_pubkey	kex.h	/^	u_char c25519_client_pubkey[CURVE25519_SIZE]; \/* 25519 *\/$/;"	m	struct:kex	typeref:typename:u_char[]
+c_data	ssh-keyscan.c	/^	char *c_data;		\/* Data read from this fd *\/$/;"	m	struct:Connection	typeref:typename:char *	file:
+c_done	ssh-keyscan.c	/^	sig_atomic_t c_done;	\/* SSH2 done *\/$/;"	m	struct:Connection	typeref:typename:sig_atomic_t	file:
+c_fd	ssh-keyscan.c	/^	int c_fd;		\/* Quick lookup: c->c_fd == c - fdcon *\/$/;"	m	struct:Connection	typeref:typename:int	file:
+c_keytype	ssh-keyscan.c	/^	int c_keytype;		\/* Only one of KT_* *\/$/;"	m	struct:Connection	typeref:typename:int	file:
+c_len	ssh-keyscan.c	/^	int c_len;		\/* Total bytes which must be read. *\/$/;"	m	struct:Connection	typeref:typename:int	file:
+c_name	ssh-keyscan.c	/^	char *c_name;		\/* Hostname of connection for errors *\/$/;"	m	struct:Connection	typeref:typename:char *	file:
+c_namebase	ssh-keyscan.c	/^	char *c_namebase;	\/* Address to free for c_name and c_namelist *\/$/;"	m	struct:Connection	typeref:typename:char *	file:
+c_namelist	ssh-keyscan.c	/^	char *c_namelist;	\/* Pointer to other possible addresses *\/$/;"	m	struct:Connection	typeref:typename:char *	file:
+c_off	ssh-keyscan.c	/^	int c_off;		\/* Length of data read so far. *\/$/;"	m	struct:Connection	typeref:typename:int	file:
+c_output_name	ssh-keyscan.c	/^	char *c_output_name;	\/* Hostname of connection for output *\/$/;"	m	struct:Connection	typeref:typename:char *	file:
+c_plen	ssh-keyscan.c	/^	int c_plen;		\/* Packet length field for ssh packet *\/$/;"	m	struct:Connection	typeref:typename:int	file:
+c_ssh	ssh-keyscan.c	/^	struct ssh *c_ssh;	\/* SSH-connection *\/$/;"	m	struct:Connection	typeref:struct:ssh *	file:
+c_status	ssh-keyscan.c	/^	u_char c_status;	\/* State of connection on this file desc. *\/$/;"	m	struct:Connection	typeref:typename:u_char	file:
+c_template	regress/misc/fuzz-harness/kex_fuzz.cc	/^	struct sshbuf *s_template, *c_template; \/* main copy of input *\/$/;"	m	struct:test_state	typeref:struct:sshbuf *	file:
+c_ts	ssh-keyscan.c	/^	struct timespec c_ts;	\/* Time at which connection gets aborted *\/$/;"	m	struct:Connection	typeref:struct:timespec	file:
+ca	sshsig.c	/^	int ca;$/;"	m	struct:sshsigopt	typeref:typename:int	file:
+ca_available	clientloop.c	/^	int ca_available;	\/* saw CA key for this host *\/$/;"	m	struct:hostkeys_update_ctx	typeref:typename:int	file:
+ca_key	krl.c	/^	struct sshkey *ca_key;$/;"	m	struct:revoked_certs	typeref:struct:sshkey *	file:
+ca_sign_algorithms	readconf.h	/^	char   *ca_sign_algorithms;	\/* Allowed CA signature algorithms *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:char *
+ca_sign_algorithms	servconf.h	/^	char   *ca_sign_algorithms;	\/* Allowed CA signature algorithms *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:char *
+cache	umac.c	/^    UINT8 cache[AES_BLOCK_LEN];  \/* Previous AES output is saved      *\/$/;"	m	struct:__anon20b5e17c0108	typeref:typename:UINT8[]	file:
+calloc	configure.ac	/^	AC_DEFINE(calloc, rpl_calloc,$/;"	d
+calloc	openbsd-compat/getrrsetbyname-ldns.c	/^#define calloc(/;"	d	file:
+can_expand_path	sftp-client.c	/^can_expand_path(struct sftp_conn *conn)$/;"	f	typeref:typename:int
+can_get_users_groups_by_id	sftp-client.c	/^can_get_users_groups_by_id(struct sftp_conn *conn)$/;"	f	typeref:typename:int
+can_output	progressmeter.c	/^can_output(void)$/;"	f	typeref:typename:int	file:
+canonical_domains	readconf.h	/^	char	*canonical_domains[MAX_CANON_DOMAINS];$/;"	m	struct:__anon7d31da1d0108	typeref:typename:char * []
+canonicalize_fallback_local	readconf.h	/^	int	canonicalize_fallback_local;$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+canonicalize_hostname	readconf.h	/^	int	canonicalize_hostname;$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+canonicalize_max_dots	readconf.h	/^	int	canonicalize_max_dots;$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+catman-do	Makefile.in	/^catman-do:$/;"	t
+cauthctxt	sshconnect2.c	/^struct cauthctxt {$/;"	s	file:
+cauthmethod	sshconnect2.c	/^struct cauthmethod {$/;"	s	file:
+cb	channels.h	/^	channel_confirm_cb *cb;$/;"	m	struct:channel_confirm	typeref:typename:channel_confirm_cb *
+cb	clientloop.c	/^	global_confirm_cb *cb;$/;"	m	struct:global_confirm	typeref:typename:global_confirm_cb *	file:
+cbctx	regress/unittests/hostkeys/test_iterate.c	/^struct cbctx {$/;"	s	file:
+cclass	openbsd-compat/charclass.h	/^static struct cclass {$/;"	s
+cclasses	openbsd-compat/charclass.h	/^} cclasses[] = {$/;"	v	typeref:struct:cclass[]
+cd	sshbuf.h	/^	const u_char *cd;	\/* Const data *\/$/;"	m	struct:sshbuf	typeref:typename:const u_char *
+cert	sshkey.c	/^	int cert;$/;"	m	struct:keytype	typeref:typename:int	file:
+cert	sshkey.h	/^	struct sshkey_cert *cert;$/;"	m	struct:sshkey	typeref:struct:sshkey_cert *
+cert_authority	auth-options.h	/^	int cert_authority;$/;"	m	struct:sshauthopt	typeref:typename:int
+cert_compare	sshkey.c	/^cert_compare(struct sshkey_cert *a, struct sshkey_cert *b)$/;"	f	typeref:typename:int	file:
+cert_ext	ssh-keygen.c	/^static struct cert_ext *cert_ext;$/;"	v	typeref:struct:cert_ext *	file:
+cert_ext	ssh-keygen.c	/^struct cert_ext {$/;"	s	file:
+cert_ext_add	ssh-keygen.c	/^cert_ext_add(const char *key, const char *value, int iscrit)$/;"	f	typeref:typename:void	file:
+cert_ext_cmp	ssh-keygen.c	/^cert_ext_cmp(const void *_a, const void *_b)$/;"	f	typeref:typename:int	file:
+cert_filter_principals	sshsig.c	/^cert_filter_principals(const char *path, u_long linenum,$/;"	f	typeref:typename:int	file:
+cert_free	sshkey.c	/^cert_free(struct sshkey_cert *cert)$/;"	f	typeref:typename:void	file:
+cert_key_id	ssh-keygen.c	/^static char *cert_key_id = NULL;$/;"	v	typeref:typename:char *	file:
+cert_key_type	ssh-keygen.c	/^static u_int cert_key_type = SSH2_CERT_TYPE_USER;$/;"	v	typeref:typename:u_int	file:
+cert_new	sshkey.c	/^cert_new(void)$/;"	f	typeref:struct:sshkey_cert *	file:
+cert_option_list	auth-options.c	/^cert_option_list(struct sshauthopt *opts, struct sshbuf *oblob,$/;"	f	typeref:typename:int	file:
+cert_parse	sshkey.c	/^cert_parse(struct sshbuf *b, struct sshkey *key, struct sshbuf *certbuf)$/;"	f	typeref:typename:int	file:
+cert_principals	auth-options.h	/^	char *cert_principals;$/;"	m	struct:sshauthopt	typeref:typename:char *
+cert_principals	ssh-keygen.c	/^static char *cert_principals = NULL;$/;"	v	typeref:typename:char *	file:
+cert_valid_from	ssh-keygen.c	/^static u_int64_t cert_valid_from = 0;$/;"	v	typeref:typename:u_int64_t	file:
+cert_valid_to	ssh-keygen.c	/^static u_int64_t cert_valid_to = ~0ULL;$/;"	v	typeref:typename:u_int64_t	file:
+certblob	sshkey.h	/^	struct sshbuf	*certblob; \/* Kept around for use on wire *\/$/;"	m	struct:sshkey_cert	typeref:struct:sshbuf *
+certflags_command	ssh-keygen.c	/^static char *certflags_command = NULL;$/;"	v	typeref:typename:char *	file:
+certflags_flags	ssh-keygen.c	/^static u_int32_t certflags_flags = CERTOPT_DEFAULT;$/;"	v	typeref:typename:u_int32_t	file:
+certflags_src_addr	ssh-keygen.c	/^static char *certflags_src_addr = NULL;$/;"	v	typeref:typename:char *	file:
+certificate_file_userprovided	readconf.h	/^	int	certificate_file_userprovided[SSH_MAX_CERTIFICATE_FILES];$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int[]
+certificate_files	readconf.h	/^	char	*certificate_files[SSH_MAX_CERTIFICATE_FILES];$/;"	m	struct:__anon7d31da1d0108	typeref:typename:char * []
+certificates	readconf.h	/^	struct sshkey *certificates[SSH_MAX_CERTIFICATE_FILES];$/;"	m	struct:__anon7d31da1d0108	typeref:struct:sshkey * []
+certtext	regress/misc/fuzz-harness/authkeys_fuzz.cc	/^const char *certtext = "ssh-ed25519-cert-v01@openssh.com AAAAIHNzaC1lZDI1NTE5LWNlcnQtdjAxQG9wZW5/;"	v	typeref:typename:const char *
+cfg	sshd.c	/^struct sshbuf *cfg;$/;"	v	typeref:struct:sshbuf *
+cfgetispeed	openbsd-compat/bsd-nextstep.c	/^speed_t cfgetispeed(const struct termios *t)$/;"	f	typeref:typename:speed_t
+cfgetospeed	openbsd-compat/bsd-nextstep.c	/^speed_t cfgetospeed(const struct termios *t)$/;"	f	typeref:typename:speed_t
+cflags	configure.ac	/^AC_ARG_WITH([cflags],$/;"	w
+cflags-after	configure.ac	/^AC_ARG_WITH([cflags-after],$/;"	w
+cfsetispeed	openbsd-compat/bsd-nextstep.c	/^cfsetispeed(struct termios *t, int speed)$/;"	f	typeref:typename:int
+cfsetospeed	openbsd-compat/bsd-nextstep.c	/^cfsetospeed(struct termios *t,int speed)$/;"	f	typeref:typename:int
+chacha_ctx	chacha.c	/^typedef struct chacha_ctx chacha_ctx;$/;"	t	typeref:struct:chacha_ctx	file:
+chacha_ctx	chacha.h	/^struct chacha_ctx {$/;"	s
+chacha_ctx	openbsd-compat/chacha_private.h	/^} chacha_ctx;$/;"	t	typeref:struct:__anon596ef7b80108
+chacha_encrypt_bytes	chacha.c	/^chacha_encrypt_bytes(chacha_ctx *x,const u8 *m,u8 *c,u32 bytes)$/;"	f	typeref:typename:void
+chacha_encrypt_bytes	openbsd-compat/chacha_private.h	/^chacha_encrypt_bytes(chacha_ctx *x,const u8 *m,u8 *c,u32 bytes)$/;"	f	typeref:typename:void
+chacha_ivsetup	chacha.c	/^chacha_ivsetup(chacha_ctx *x, const u8 *iv, const u8 *counter)$/;"	f	typeref:typename:void
+chacha_ivsetup	openbsd-compat/chacha_private.h	/^chacha_ivsetup(chacha_ctx *x,const u8 *iv)$/;"	f	typeref:typename:void
+chacha_keysetup	chacha.c	/^chacha_keysetup(chacha_ctx *x,const u8 *k,u32 kbits)$/;"	f	typeref:typename:void
+chacha_keysetup	openbsd-compat/chacha_private.h	/^chacha_keysetup(chacha_ctx *x,const u8 *k,u32 kbits)$/;"	f	typeref:typename:void
+chachapoly_crypt	cipher-chachapoly-libcrypto.c	/^chachapoly_crypt(struct chachapoly_ctx *ctx, u_int seqnr, u_char *dest,$/;"	f	typeref:typename:int
+chachapoly_crypt	cipher-chachapoly.c	/^chachapoly_crypt(struct chachapoly_ctx *ctx, u_int seqnr, u_char *dest,$/;"	f	typeref:typename:int
+chachapoly_ctx	cipher-chachapoly-libcrypto.c	/^struct chachapoly_ctx {$/;"	s	file:
+chachapoly_ctx	cipher-chachapoly.c	/^struct chachapoly_ctx {$/;"	s	file:
+chachapoly_free	cipher-chachapoly-libcrypto.c	/^chachapoly_free(struct chachapoly_ctx *cpctx)$/;"	f	typeref:typename:void
+chachapoly_free	cipher-chachapoly.c	/^chachapoly_free(struct chachapoly_ctx *cpctx)$/;"	f	typeref:typename:void
+chachapoly_get_length	cipher-chachapoly-libcrypto.c	/^chachapoly_get_length(struct chachapoly_ctx *ctx,$/;"	f	typeref:typename:int
+chachapoly_get_length	cipher-chachapoly.c	/^chachapoly_get_length(struct chachapoly_ctx *ctx,$/;"	f	typeref:typename:int
+chachapoly_new	cipher-chachapoly-libcrypto.c	/^chachapoly_new(const u_char *key, u_int keylen)$/;"	f	typeref:struct:chachapoly_ctx *
+chachapoly_new	cipher-chachapoly.c	/^chachapoly_new(const u_char *key, u_int keylen)$/;"	f	typeref:struct:chachapoly_ctx *
+chan_fn	channels.c	/^typedef void chan_fn(struct ssh *, Channel *c);$/;"	t	typeref:typename:void ()(struct ssh *,Channel * c)	file:
+chan_ibuf_empty	nchan.c	/^chan_ibuf_empty(struct ssh *ssh, Channel *c)$/;"	f	typeref:typename:void
+chan_is_dead	nchan.c	/^chan_is_dead(struct ssh *ssh, Channel *c, int do_send)$/;"	f	typeref:typename:int
+chan_mark_dead	nchan.c	/^chan_mark_dead(struct ssh *ssh, Channel *c)$/;"	f	typeref:typename:void
+chan_obuf_empty	nchan.c	/^chan_obuf_empty(struct ssh *ssh, Channel *c)$/;"	f	typeref:typename:void
+chan_rcvd_eow	nchan.c	/^chan_rcvd_eow(struct ssh *ssh, Channel *c)$/;"	f	typeref:typename:void
+chan_rcvd_ieof	nchan.c	/^chan_rcvd_ieof(struct ssh *ssh, Channel *c)$/;"	f	typeref:typename:void
+chan_rcvd_oclose	nchan.c	/^chan_rcvd_oclose(struct ssh *ssh, Channel *c)$/;"	f	typeref:typename:void
+chan_read_failed	nchan.c	/^chan_read_failed(struct ssh *ssh, Channel *c)$/;"	f	typeref:typename:void
+chan_send_close2	nchan.c	/^chan_send_close2(struct ssh *ssh, Channel *c)$/;"	f	typeref:typename:void	file:
+chan_send_eof2	nchan.c	/^chan_send_eof2(struct ssh *ssh, Channel *c)$/;"	f	typeref:typename:void	file:
+chan_send_eow2	nchan.c	/^chan_send_eow2(struct ssh *ssh, Channel *c)$/;"	f	typeref:typename:void	file:
+chan_set_istate	nchan.c	/^chan_set_istate(Channel *c, u_int next)$/;"	f	typeref:typename:void	file:
+chan_set_ostate	nchan.c	/^chan_set_ostate(Channel *c, u_int next)$/;"	f	typeref:typename:void	file:
+chan_shutdown_extended_read	nchan.c	/^chan_shutdown_extended_read(struct ssh *ssh, Channel *c)$/;"	f	typeref:typename:void	file:
+chan_shutdown_read	nchan.c	/^chan_shutdown_read(struct ssh *ssh, Channel *c)$/;"	f	typeref:typename:void	file:
+chan_shutdown_write	nchan.c	/^chan_shutdown_write(struct ssh *ssh, Channel *c)$/;"	f	typeref:typename:void	file:
+chan_write_failed	nchan.c	/^chan_write_failed(struct ssh *ssh, Channel *c)$/;"	f	typeref:typename:void
+chanctxt	packet.h	/^	struct ssh_channels *chanctxt;$/;"	m	struct:ssh	typeref:struct:ssh_channels *
+chanid	session.h	/^	int	chanid;$/;"	m	struct:Session	typeref:typename:int
+channel_add_permission	channels.c	/^channel_add_permission(struct ssh *ssh, int who, int where,$/;"	f	typeref:typename:void
+channel_after_poll	channels.c	/^channel_after_poll(struct ssh *ssh, struct pollfd *pfd, u_int npfd)$/;"	f	typeref:typename:void
+channel_before_prepare_io	channels.c	/^channel_before_prepare_io(struct ssh *ssh)$/;"	f	typeref:typename:void	file:
+channel_before_prepare_io_rdynamic	channels.c	/^channel_before_prepare_io_rdynamic(struct ssh *ssh, Channel *c)$/;"	f	typeref:typename:void	file:
+channel_by_id	channels.c	/^channel_by_id(struct ssh *ssh, int id)$/;"	f	typeref:typename:Channel *
+channel_by_remote_id	channels.c	/^channel_by_remote_id(struct ssh *ssh, u_int remote_id)$/;"	f	typeref:typename:Channel *
+channel_callback_fn	channels.h	/^typedef void channel_callback_fn(struct ssh *, int, void *);$/;"	t	typeref:typename:void ()(struct ssh *,int,void *)
+channel_cancel_cleanup	channels.c	/^channel_cancel_cleanup(struct ssh *ssh, int id)$/;"	f	typeref:typename:void
+channel_cancel_lport_listener	channels.c	/^channel_cancel_lport_listener(struct ssh *ssh,$/;"	f	typeref:typename:int
+channel_cancel_lport_listener_streamlocal	channels.c	/^channel_cancel_lport_listener_streamlocal(struct ssh *ssh, const char *path)$/;"	f	typeref:typename:int	file:
+channel_cancel_lport_listener_tcpip	channels.c	/^channel_cancel_lport_listener_tcpip(struct ssh *ssh,$/;"	f	typeref:typename:int	file:
+channel_cancel_rport_listener	channels.c	/^channel_cancel_rport_listener(struct ssh *ssh, struct Forward *fwd)$/;"	f	typeref:typename:int
+channel_cancel_rport_listener_streamlocal	channels.c	/^channel_cancel_rport_listener_streamlocal(struct ssh *ssh, const char *path)$/;"	f	typeref:typename:int	file:
+channel_cancel_rport_listener_tcpip	channels.c	/^channel_cancel_rport_listener_tcpip(struct ssh *ssh,$/;"	f	typeref:typename:int	file:
+channel_check_window	channels.c	/^channel_check_window(struct ssh *ssh, Channel *c)$/;"	f	typeref:typename:int	file:
+channel_clear_permission	channels.c	/^channel_clear_permission(struct ssh *ssh, int who, int where)$/;"	f	typeref:typename:void
+channel_close_all	channels.c	/^channel_close_all(struct ssh *ssh)$/;"	f	typeref:typename:void
+channel_close_fd	channels.c	/^channel_close_fd(struct ssh *ssh, Channel *c, int *fdp)$/;"	f	typeref:typename:int
+channel_close_fds	channels.c	/^channel_close_fds(struct ssh *ssh, Channel *c)$/;"	f	typeref:typename:void	file:
+channel_confirm	channels.h	/^struct channel_confirm {$/;"	s
+channel_confirm_abandon_cb	channels.h	/^typedef void channel_confirm_abandon_cb(struct ssh *, struct Channel *, void *);$/;"	t	typeref:typename:void ()(struct ssh *,struct Channel *,void *)
+channel_confirm_cb	channels.h	/^typedef void channel_confirm_cb(struct ssh *, int, struct Channel *, void *);$/;"	t	typeref:typename:void ()(struct ssh *,int,struct Channel *,void *)
+channel_connect	channels.h	/^struct channel_connect {$/;"	s
+channel_connect_by_listen_address	channels.c	/^channel_connect_by_listen_address(struct ssh *ssh, const char *listen_host,$/;"	f	typeref:typename:Channel *
+channel_connect_by_listen_path	channels.c	/^channel_connect_by_listen_path(struct ssh *ssh, const char *path,$/;"	f	typeref:typename:Channel *
+channel_connect_ctx_free	channels.c	/^channel_connect_ctx_free(struct channel_connect *cctx)$/;"	f	typeref:typename:void	file:
+channel_connect_stdio_fwd	channels.c	/^channel_connect_stdio_fwd(struct ssh *ssh,$/;"	f	typeref:typename:Channel *
+channel_connect_to_path	channels.c	/^channel_connect_to_path(struct ssh *ssh, const char *path,$/;"	f	typeref:typename:Channel *
+channel_connect_to_port	channels.c	/^channel_connect_to_port(struct ssh *ssh, const char *host, u_short port,$/;"	f	typeref:typename:Channel *
+channel_decode_socks4	channels.c	/^channel_decode_socks4(Channel *c, struct sshbuf *input, struct sshbuf *output)$/;"	f	typeref:typename:int	file:
+channel_decode_socks5	channels.c	/^channel_decode_socks5(Channel *c, struct sshbuf *input, struct sshbuf *output)$/;"	f	typeref:typename:int	file:
+channel_disable_admin	channels.c	/^channel_disable_admin(struct ssh *ssh, int where)$/;"	f	typeref:typename:void
+channel_filter_cleanup_fn	channels.h	/^typedef void channel_filter_cleanup_fn(struct ssh *, int, void *);$/;"	t	typeref:typename:void ()(struct ssh *,int,void *)
+channel_find_open	channels.c	/^channel_find_open(struct ssh *ssh)$/;"	f	typeref:typename:int
+channel_format_extended_usage	channels.c	/^channel_format_extended_usage(const Channel *c)$/;"	f	typeref:typename:const char *
+channel_format_status	channels.c	/^channel_format_status(const Channel *c)$/;"	f	typeref:typename:char *	file:
+channel_free	channels.c	/^channel_free(struct ssh *ssh, Channel *c)$/;"	f	typeref:typename:void
+channel_free_all	channels.c	/^channel_free_all(struct ssh *ssh)$/;"	f	typeref:typename:void
+channel_from_packet_id	channels.c	/^channel_from_packet_id(struct ssh *ssh, const char *where, const char *what)$/;"	f	typeref:typename:Channel *	file:
+channel_fwd_bind_addr	channels.c	/^channel_fwd_bind_addr(struct ssh *ssh, const char *listen_addr, int *wildcardp,$/;"	f	typeref:typename:const char *	file:
+channel_garbage_collect	channels.c	/^channel_garbage_collect(struct ssh *ssh, Channel *c)$/;"	f	typeref:typename:void	file:
+channel_handle_efd	channels.c	/^channel_handle_efd(struct ssh *ssh, Channel *c)$/;"	f	typeref:typename:int	file:
+channel_handle_efd_read	channels.c	/^channel_handle_efd_read(struct ssh *ssh, Channel *c)$/;"	f	typeref:typename:int	file:
+channel_handle_efd_write	channels.c	/^channel_handle_efd_write(struct ssh *ssh, Channel *c)$/;"	f	typeref:typename:int	file:
+channel_handle_rfd	channels.c	/^channel_handle_rfd(struct ssh *ssh, Channel *c)$/;"	f	typeref:typename:int	file:
+channel_handle_wfd	channels.c	/^channel_handle_wfd(struct ssh *ssh, Channel *c)$/;"	f	typeref:typename:int	file:
+channel_handler	channels.c	/^channel_handler(struct ssh *ssh, int table, time_t *unpause_secs)$/;"	f	typeref:typename:void	file:
+channel_handler_init	channels.c	/^channel_handler_init(struct ssh_channels *sc)$/;"	f	typeref:typename:void	file:
+channel_infilter_fn	channels.h	/^typedef int channel_infilter_fn(struct ssh *, struct Channel *, char *, int);$/;"	t	typeref:typename:int ()(struct ssh *,struct Channel *,char *,int)
+channel_init_channels	channels.c	/^channel_init_channels(struct ssh *ssh)$/;"	f	typeref:typename:void
+channel_input_data	channels.c	/^channel_input_data(int type, u_int32_t seq, struct ssh *ssh)$/;"	f	typeref:typename:int
+channel_input_extended_data	channels.c	/^channel_input_extended_data(int type, u_int32_t seq, struct ssh *ssh)$/;"	f	typeref:typename:int
+channel_input_ieof	channels.c	/^channel_input_ieof(int type, u_int32_t seq, struct ssh *ssh)$/;"	f	typeref:typename:int
+channel_input_oclose	channels.c	/^channel_input_oclose(int type, u_int32_t seq, struct ssh *ssh)$/;"	f	typeref:typename:int
+channel_input_open_confirmation	channels.c	/^channel_input_open_confirmation(int type, u_int32_t seq, struct ssh *ssh)$/;"	f	typeref:typename:int
+channel_input_open_failure	channels.c	/^channel_input_open_failure(int type, u_int32_t seq, struct ssh *ssh)$/;"	f	typeref:typename:int
+channel_input_status_confirm	channels.c	/^channel_input_status_confirm(int type, u_int32_t seq, struct ssh *ssh)$/;"	f	typeref:typename:int
+channel_input_window_adjust	channels.c	/^channel_input_window_adjust(int type, u_int32_t seq, struct ssh *ssh)$/;"	f	typeref:typename:int
+channel_lookup	channels.c	/^channel_lookup(struct ssh *ssh, int id)$/;"	f	typeref:typename:Channel *
+channel_new	channels.c	/^channel_new(struct ssh *ssh, char *ctype, int type, int rfd, int wfd, int efd,$/;"	f	typeref:typename:Channel *
+channel_not_very_much_buffered_data	channels.c	/^channel_not_very_much_buffered_data(struct ssh *ssh)$/;"	f	typeref:typename:int
+channel_open_fn	channels.h	/^typedef void channel_open_fn(struct ssh *, int, int, void *);$/;"	t	typeref:typename:void ()(struct ssh *,int,int,void *)
+channel_open_message	channels.c	/^channel_open_message(struct ssh *ssh)$/;"	f	typeref:typename:char *
+channel_outfilter_fn	channels.h	/^typedef u_char *channel_outfilter_fn(struct ssh *, struct Channel *,$/;"	t	typeref:typename:u_char * ()(struct ssh *,struct Channel *,u_char **,size_t *)
+channel_output_poll	channels.c	/^channel_output_poll(struct ssh *ssh)$/;"	f	typeref:typename:void
+channel_output_poll_extended_read	channels.c	/^channel_output_poll_extended_read(struct ssh *ssh, Channel *c)$/;"	f	typeref:typename:void	file:
+channel_output_poll_input_open	channels.c	/^channel_output_poll_input_open(struct ssh *ssh, Channel *c)$/;"	f	typeref:typename:void	file:
+channel_parse_id	channels.c	/^channel_parse_id(struct ssh *ssh, const char *where, const char *what)$/;"	f	typeref:typename:int	file:
+channel_permit_all	channels.c	/^channel_permit_all(struct ssh *ssh, int where)$/;"	f	typeref:typename:void
+channel_post	channels.c	/^	chan_fn **channel_post;$/;"	m	struct:ssh_channels	typeref:typename:chan_fn **	file:
+channel_post_auth_listener	channels.c	/^channel_post_auth_listener(struct ssh *ssh, Channel *c)$/;"	f	typeref:typename:void	file:
+channel_post_connecting	channels.c	/^channel_post_connecting(struct ssh *ssh, Channel *c)$/;"	f	typeref:typename:void	file:
+channel_post_mux_client	channels.c	/^channel_post_mux_client(struct ssh *ssh, Channel *c)$/;"	f	typeref:typename:void	file:
+channel_post_mux_client_read	channels.c	/^channel_post_mux_client_read(struct ssh *ssh, Channel *c)$/;"	f	typeref:typename:void	file:
+channel_post_mux_client_write	channels.c	/^channel_post_mux_client_write(struct ssh *ssh, Channel *c)$/;"	f	typeref:typename:void	file:
+channel_post_mux_listener	channels.c	/^channel_post_mux_listener(struct ssh *ssh, Channel *c)$/;"	f	typeref:typename:void	file:
+channel_post_open	channels.c	/^channel_post_open(struct ssh *ssh, Channel *c)$/;"	f	typeref:typename:void	file:
+channel_post_port_listener	channels.c	/^channel_post_port_listener(struct ssh *ssh, Channel *c)$/;"	f	typeref:typename:void	file:
+channel_post_x11_listener	channels.c	/^channel_post_x11_listener(struct ssh *ssh, Channel *c)$/;"	f	typeref:typename:void	file:
+channel_pre	channels.c	/^	chan_fn **channel_pre;$/;"	m	struct:ssh_channels	typeref:typename:chan_fn **	file:
+channel_pre_connecting	channels.c	/^channel_pre_connecting(struct ssh *ssh, Channel *c)$/;"	f	typeref:typename:void	file:
+channel_pre_dynamic	channels.c	/^channel_pre_dynamic(struct ssh *ssh, Channel *c)$/;"	f	typeref:typename:void	file:
+channel_pre_listener	channels.c	/^channel_pre_listener(struct ssh *ssh, Channel *c)$/;"	f	typeref:typename:void	file:
+channel_pre_mux_client	channels.c	/^channel_pre_mux_client(struct ssh *ssh, Channel *c)$/;"	f	typeref:typename:void	file:
+channel_pre_open	channels.c	/^channel_pre_open(struct ssh *ssh, Channel *c)$/;"	f	typeref:typename:void	file:
+channel_pre_x11_open	channels.c	/^channel_pre_x11_open(struct ssh *ssh, Channel *c)$/;"	f	typeref:typename:void	file:
+channel_prepare_poll	channels.c	/^channel_prepare_poll(struct ssh *ssh, struct pollfd **pfdp, u_int *npfd_allocp,$/;"	f	typeref:typename:void
+channel_prepare_pollfd	channels.c	/^channel_prepare_pollfd(Channel *c, u_int *next_pollfd,$/;"	f	typeref:typename:void	file:
+channel_proxy_downstream	channels.c	/^channel_proxy_downstream(struct ssh *ssh, Channel *downstream)$/;"	f	typeref:typename:int
+channel_proxy_upstream	channels.c	/^channel_proxy_upstream(Channel *c, int type, u_int32_t seq, struct ssh *ssh)$/;"	f	typeref:typename:int
+channel_register_cleanup	channels.c	/^channel_register_cleanup(struct ssh *ssh, int id,$/;"	f	typeref:typename:void
+channel_register_fds	channels.c	/^channel_register_fds(struct ssh *ssh, Channel *c, int rfd, int wfd, int efd,$/;"	f	typeref:typename:void	file:
+channel_register_filter	channels.c	/^channel_register_filter(struct ssh *ssh, int id, channel_infilter_fn *ifn,$/;"	f	typeref:typename:void
+channel_register_open_confirm	channels.c	/^channel_register_open_confirm(struct ssh *ssh, int id,$/;"	f	typeref:typename:void
+channel_register_status_confirm	channels.c	/^channel_register_status_confirm(struct ssh *ssh, int id,$/;"	f	typeref:typename:void
+channel_reply_ctx	clientloop.c	/^struct channel_reply_ctx {$/;"	s	file:
+channel_request_remote_forwarding	channels.c	/^channel_request_remote_forwarding(struct ssh *ssh, struct Forward *fwd)$/;"	f	typeref:typename:int
+channel_request_rforward_cancel	channels.c	/^channel_request_rforward_cancel(struct ssh *ssh, struct Forward *fwd)$/;"	f	typeref:typename:int
+channel_request_rforward_cancel_streamlocal	channels.c	/^channel_request_rforward_cancel_streamlocal(struct ssh *ssh, const char *path)$/;"	f	typeref:typename:int	file:
+channel_request_rforward_cancel_tcpip	channels.c	/^channel_request_rforward_cancel_tcpip(struct ssh *ssh,$/;"	f	typeref:typename:int	file:
+channel_request_start	channels.c	/^channel_request_start(struct ssh *ssh, int id, char *service, int wantconfirm)$/;"	f	typeref:typename:void
+channel_rfwd_bind_host	channels.c	/^channel_rfwd_bind_host(const char *listen_host)$/;"	f	typeref:typename:const char *	file:
+channel_send_open	channels.c	/^channel_send_open(struct ssh *ssh, int id)$/;"	f	typeref:typename:void
+channel_send_window_changes	channels.c	/^channel_send_window_changes(struct ssh *ssh)$/;"	f	typeref:typename:void
+channel_set_af	channels.c	/^channel_set_af(struct ssh *ssh, int af)$/;"	f	typeref:typename:void
+channel_set_fds	channels.c	/^channel_set_fds(struct ssh *ssh, int id, int rfd, int wfd, int efd,$/;"	f	typeref:typename:void
+channel_set_x11_refuse_time	channels.c	/^channel_set_x11_refuse_time(struct ssh *ssh, u_int refuse_time)$/;"	f	typeref:typename:void
+channel_setup_fwd_listener_streamlocal	channels.c	/^channel_setup_fwd_listener_streamlocal(struct ssh *ssh, int type,$/;"	f	typeref:typename:int	file:
+channel_setup_fwd_listener_tcpip	channels.c	/^channel_setup_fwd_listener_tcpip(struct ssh *ssh, int type,$/;"	f	typeref:typename:int	file:
+channel_setup_local_fwd_listener	channels.c	/^channel_setup_local_fwd_listener(struct ssh *ssh,$/;"	f	typeref:typename:int
+channel_setup_remote_fwd_listener	channels.c	/^channel_setup_remote_fwd_listener(struct ssh *ssh, struct Forward *fwd,$/;"	f	typeref:typename:int
+channel_still_open	channels.c	/^channel_still_open(struct ssh *ssh)$/;"	f	typeref:typename:int
+channel_stop_listening	channels.c	/^channel_stop_listening(struct ssh *ssh)$/;"	f	typeref:typename:void
+channel_table	channels.c	/^enum channel_table { CHAN_PRE, CHAN_POST };$/;"	g	file:
+channel_update_permission	channels.c	/^channel_update_permission(struct ssh *ssh, int idx, int newport)$/;"	f	typeref:typename:void
+channels	channels.c	/^	Channel **channels;$/;"	m	struct:ssh_channels	typeref:typename:Channel **	file:
+channels_alloc	channels.c	/^	u_int channels_alloc;$/;"	m	struct:ssh_channels	typeref:typename:u_int	file:
+char_to_int	openbsd-compat/bsd-snprintf.c	/^#define char_to_int(/;"	d	file:
+check	regress/dhgex.sh	/^check()$/;"	f
+check	regress/unittests/hostkeys/test_iterate.c	/^check(struct hostkey_foreach_line *l, void *_ctx)$/;"	f	typeref:typename:int	file:
+check-config	Makefile.in	/^check-config:$/;"	t
+check_agent_present	ssh.c	/^check_agent_present(void)$/;"	f	typeref:typename:void	file:
+check_allowed_keys_line	sshsig.c	/^check_allowed_keys_line(const char *path, u_long linenum, char *line,$/;"	f	typeref:typename:int	file:
+check_enroll_options	sk-usbhid.c	/^check_enroll_options(struct sk_option **options, char **devicep,$/;"	f	typeref:typename:int	file:
+check_find	regress/keygen-knownhosts.sh	/^check_find() {$/;"	f
+check_find_exit_code	regress/keygen-knownhosts.sh	/^check_find_exit_code() {$/;"	f
+check_fingerprint	regress/keygen-comment.sh	/^check_fingerprint () {$/;"	f
+check_follow_cname	ssh.c	/^check_follow_cname(int direct, char **namep, const char *cname)$/;"	f	typeref:typename:int	file:
+check_hashed_find	regress/keygen-knownhosts.sh	/^check_hashed_find() {$/;"	f
+check_host_ip	readconf.h	/^	int     check_host_ip;	\/* Also keep track of keys for IP address *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+check_host_key	sshconnect.c	/^check_host_key(char *hostname, const struct ssh_conn_info *cinfo,$/;"	f	typeref:typename:int	file:
+check_hostkeys_by_key_or_type	hostfile.c	/^check_hostkeys_by_key_or_type(struct hostkeys *hostkeys,$/;"	f	typeref:typename:HostStatus	file:
+check_ifaddrs	sshconnect.c	/^check_ifaddrs(const char *ifname, int af, const struct ifaddrs *ifaddrs,$/;"	f	typeref:typename:int	file:
+check_ip_options	sshd.c	/^check_ip_options(struct ssh *ssh)$/;"	f	typeref:typename:void	file:
+check_key_absent	regress/agent.sh	/^check_key_absent() {$/;"	f
+check_key_in_hostfiles	auth.c	/^check_key_in_hostfiles(struct passwd *pw, struct sshkey *key, const char *host,$/;"	f	typeref:typename:HostStatus
+check_key_in_hostkeys	hostfile.c	/^check_key_in_hostkeys(struct hostkeys *hostkeys, struct sshkey *key,$/;"	f	typeref:typename:HostStatus
+check_key_not_revoked	hostfile.c	/^check_key_not_revoked(struct hostkeys *hostkeys, struct sshkey *k)$/;"	f	typeref:typename:int	file:
+check_key_present	regress/agent.sh	/^check_key_present() {$/;"	f
+check_key_present	regress/hostkey-rotate.sh	/^check_key_present() {$/;"	f
+check_krl	regress/krl.sh	/^check_krl() {$/;"	f
+check_lfwd	regress/forward-control.sh	/^check_lfwd() {$/;"	f
+check_load	ssh.c	/^check_load(int r, struct sshkey **k, const char *path, const char *message)$/;"	f	typeref:typename:void	file:
+check_markers	hostfile.c	/^check_markers(char **cpp)$/;"	f	typeref:typename:HostkeyMarker	file:
+check_none	contrib/gnome-ssh-askpass2.c	/^check_none(GtkWidget *widget, GdkEventKey *event, gpointer dialog)$/;"	f	typeref:typename:gboolean	file:
+check_none	contrib/gnome-ssh-askpass3.c	/^check_none(GtkWidget *widget, GdkEventKey *event, gpointer dialog)$/;"	f	typeref:typename:gboolean	file:
+check_ntsec	openbsd-compat/bsd-cygwin_util.c	/^check_ntsec(const char *filename)$/;"	f	typeref:typename:int
+check_offset	sshbuf-getput-basic.c	/^check_offset(const struct sshbuf *buf, int wr, size_t offset, size_t len)$/;"	f	typeref:typename:int	file:
+check_old_keys_othernames	clientloop.c	/^check_old_keys_othernames(struct hostkeys_update_ctx *ctx)$/;"	f	typeref:typename:int	file:
+check_options	regress/misc/sk-dummy/sk-dummy.c	/^check_options(struct sk_option **options)$/;"	f	typeref:typename:int	file:
+check_parent_exists	ssh-agent.c	/^check_parent_exists(void)$/;"	f	typeref:typename:void	file:
+check_quietlogin	session.c	/^check_quietlogin(Session *s, const char *command)$/;"	f	typeref:typename:int
+check_rfwd	regress/forward-control.sh	/^check_rfwd() {$/;"	f
+check_rfwd_permission	channels.c	/^check_rfwd_permission(struct ssh *ssh, struct Forward *fwd)$/;"	f	typeref:typename:int	file:
+check_rhosts_file	auth-rhosts.c	/^check_rhosts_file(const char *filename, const char *hostname,$/;"	f	typeref:typename:int	file:
+check_roffset	sshbuf-getput-basic.c	/^check_roffset(const struct sshbuf *buf, size_t offset, size_t len,$/;"	f	typeref:typename:int	file:
+check_sig	regress/unittests/sshsig/tests.c	/^check_sig(const char *keyname, const char *signame, const struct sshbuf *msg,$/;"	f	typeref:typename:void	file:
+check_sign_load_resident_options	sk-usbhid.c	/^check_sign_load_resident_options(struct sk_option **options, char **devicep)$/;"	f	typeref:typename:int	file:
+check_sk_options	sk-usbhid.c	/^check_sk_options(fido_dev_t *dev, const char *opt, int *ret)$/;"	f	typeref:typename:int	file:
+check_valid_before	regress/key-options.sh	/^check_valid_before() {$/;"	f
+check_version	regress/proto-version.sh	/^check_version ()$/;"	f
+check_websafe_message_contents	ssh-agent.c	/^check_websafe_message_contents(struct sshkey *key, struct sshbuf *data)$/;"	f	typeref:typename:int	file:
+check_woffset	sshbuf-getput-basic.c	/^check_woffset(struct sshbuf *buf, size_t offset, size_t len, u_char **p)$/;"	f	typeref:typename:int	file:
+child	srclimit.c	/^} *child;$/;"	v	typeref:struct:child_info *
+child_close_fds	session.c	/^child_close_fds(struct ssh *ssh)$/;"	f	typeref:typename:void	file:
+child_get_env	session.c	/^child_get_env(char **env, const char *name)$/;"	f	typeref:typename:char *	file:
+child_info	srclimit.c	/^static struct child_info {$/;"	s	file:
+child_pid	sandbox-capsicum.c	/^	pid_t child_pid;$/;"	m	struct:ssh_sandbox	typeref:typename:pid_t	file:
+child_pid	sandbox-darwin.c	/^	pid_t child_pid;$/;"	m	struct:ssh_sandbox	typeref:typename:pid_t	file:
+child_pid	sandbox-pledge.c	/^	pid_t child_pid;$/;"	m	struct:ssh_sandbox	typeref:typename:pid_t	file:
+child_pid	sandbox-rlimit.c	/^	pid_t child_pid;$/;"	m	struct:ssh_sandbox	typeref:typename:pid_t	file:
+child_pid	sandbox-seccomp-filter.c	/^	pid_t child_pid;$/;"	m	struct:ssh_sandbox	typeref:typename:pid_t	file:
+child_pid	sandbox-systrace.c	/^	pid_t child_pid;$/;"	m	struct:ssh_sandbox	typeref:typename:pid_t	file:
+child_set_env	misc.c	/^child_set_env(char ***envp, u_int *envsizep, const char *name,$/;"	f	typeref:typename:void
+child_state	monitor.c	/^static struct sshbuf *child_state;$/;"	v	typeref:struct:sshbuf *	file:
+child_terminated	serverloop.c	/^static volatile sig_atomic_t child_terminated = 0;	\/* The child has terminated. *\/$/;"	v	typeref:typename:volatile sig_atomic_t	file:
+choose_comp	kex.c	/^choose_comp(struct sshcomp *comp, char *client, char *server)$/;"	f	typeref:typename:int	file:
+choose_dh	dh.c	/^choose_dh(int min, int wantbits, int max)$/;"	f	typeref:typename:DH *
+choose_enc	kex.c	/^choose_enc(struct sshenc *enc, char *client, char *server)$/;"	f	typeref:typename:int	file:
+choose_hostkeyalg	kex.c	/^choose_hostkeyalg(struct kex *k, char *client, char *server)$/;"	f	typeref:typename:int	file:
+choose_kex	kex.c	/^choose_kex(struct kex *k, char *client, char *server)$/;"	f	typeref:typename:int	file:
+choose_mac	kex.c	/^choose_mac(struct ssh *ssh, struct sshmac *mac, char *client, char *server)$/;"	f	typeref:typename:int	file:
+choose_next_state	krl.c	/^choose_next_state(int current_state, u_int64_t contig, int final,$/;"	f	typeref:typename:int	file:
+choose_t	ge25519.c	/^static void choose_t(ge25519_aff *t, unsigned long long pos, signed char b)$/;"	f	typeref:typename:void	file:
+chop	misc.c	/^chop(char *s)$/;"	f	typeref:typename:char *
+chroot_directory	servconf.h	/^	char   *chroot_directory;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:char *
+cid	mux.c	/^	u_int cid;	\/* channel id *\/$/;"	m	struct:mux_channel_confirm_ctx	typeref:typename:u_int	file:
+cin	regress/misc/fuzz-harness/kex_fuzz.cc	/^	struct sshbuf *sin, *cin; \/* input; setup per-test in do_kex_with_key *\/$/;"	m	struct:test_state	typeref:struct:sshbuf *	file:
+cipher	cipher.c	/^	const struct sshcipher *cipher;$/;"	m	struct:sshcipher_ctx	typeref:typename:const struct sshcipher *	file:
+cipher	kex.h	/^	const struct sshcipher *cipher;$/;"	m	struct:sshenc	typeref:typename:const struct sshcipher *
+cipher_alg_list	cipher.c	/^cipher_alg_list(char sep, int auth_only)$/;"	f	typeref:typename:char *
+cipher_authlen	cipher.c	/^cipher_authlen(const struct sshcipher *c)$/;"	f	typeref:typename:u_int
+cipher_blocksize	cipher.c	/^cipher_blocksize(const struct sshcipher *c)$/;"	f	typeref:typename:u_int
+cipher_by_name	cipher.c	/^cipher_by_name(const char *name)$/;"	f	typeref:typename:const struct sshcipher *
+cipher_crypt	cipher.c	/^cipher_crypt(struct sshcipher_ctx *cc, u_int seqnr, u_char *dest,$/;"	f	typeref:typename:int
+cipher_ctx_is_plaintext	cipher.c	/^cipher_ctx_is_plaintext(struct sshcipher_ctx *cc)$/;"	f	typeref:typename:u_int
+cipher_free	cipher.c	/^cipher_free(struct sshcipher_ctx *cc)$/;"	f	typeref:typename:void
+cipher_get_keyiv	cipher.c	/^cipher_get_keyiv(struct sshcipher_ctx *cc, u_char *iv, size_t len)$/;"	f	typeref:typename:int
+cipher_get_keyiv_len	cipher.c	/^cipher_get_keyiv_len(const struct sshcipher_ctx *cc)$/;"	f	typeref:typename:int
+cipher_get_length	cipher.c	/^cipher_get_length(struct sshcipher_ctx *cc, u_int *plenp, u_int seqnr,$/;"	f	typeref:typename:int
+cipher_init	cipher.c	/^cipher_init(struct sshcipher_ctx **ccp, const struct sshcipher *cipher,$/;"	f	typeref:typename:int
+cipher_is_cbc	cipher.c	/^cipher_is_cbc(const struct sshcipher *c)$/;"	f	typeref:typename:u_int
+cipher_ivlen	cipher.c	/^cipher_ivlen(const struct sshcipher *c)$/;"	f	typeref:typename:u_int
+cipher_keylen	cipher.c	/^cipher_keylen(const struct sshcipher *c)$/;"	f	typeref:typename:u_int
+cipher_seclen	cipher.c	/^cipher_seclen(const struct sshcipher *c)$/;"	f	typeref:typename:u_int
+cipher_set_keyiv	cipher.c	/^cipher_set_keyiv(struct sshcipher_ctx *cc, const u_char *iv, size_t len)$/;"	f	typeref:typename:int
+cipher_warning_done	packet.c	/^	int cipher_warning_done;$/;"	m	struct:session_state	typeref:typename:int	file:
+cipher_warning_message	cipher.c	/^cipher_warning_message(const struct sshcipher_ctx *cc)$/;"	f	typeref:typename:const char *
+ciphers	cipher.c	/^static const struct sshcipher ciphers[] = {$/;"	v	typeref:typename:const struct sshcipher[]	file:
+ciphers	readconf.h	/^	char   *ciphers;	\/* SSH2 ciphers in order of preference. *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:char *
+ciphers	servconf.h	/^	char   *ciphers;	\/* Supported SSH2 ciphers. *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:char *
+ciphers_valid	cipher.c	/^ciphers_valid(const char *names)$/;"	f	typeref:typename:int
+ck_attribute	pkcs11.h	/^#define ck_attribute /;"	d
+ck_attribute	pkcs11.h	/^struct ck_attribute$/;"	s
+ck_attribute_type_t	pkcs11.h	/^#define ck_attribute_type_t /;"	d
+ck_attribute_type_t	pkcs11.h	/^typedef unsigned long ck_attribute_type_t;$/;"	t	typeref:typename:unsigned long
+ck_c_initialize_args	pkcs11.h	/^#define ck_c_initialize_args /;"	d
+ck_c_initialize_args	pkcs11.h	/^struct ck_c_initialize_args$/;"	s
+ck_certificate_type_t	pkcs11.h	/^#define ck_certificate_type_t /;"	d
+ck_certificate_type_t	pkcs11.h	/^typedef unsigned long ck_certificate_type_t;$/;"	t	typeref:typename:unsigned long
+ck_createmutex_t	pkcs11.h	/^#define ck_createmutex_t /;"	d
+ck_createmutex_t	pkcs11.h	/^typedef ck_rv_t (*ck_createmutex_t) (void **mutex);$/;"	t	typeref:typename:ck_rv_t (*)(void ** mutex)
+ck_date	pkcs11.h	/^#define ck_date /;"	d
+ck_date	pkcs11.h	/^struct ck_date$/;"	s
+ck_destroymutex_t	pkcs11.h	/^#define ck_destroymutex_t /;"	d
+ck_destroymutex_t	pkcs11.h	/^typedef ck_rv_t (*ck_destroymutex_t) (void *mutex);$/;"	t	typeref:typename:ck_rv_t (*)(void * mutex)
+ck_flags_t	pkcs11.h	/^#define ck_flags_t /;"	d
+ck_flags_t	pkcs11.h	/^typedef unsigned long ck_flags_t;$/;"	t	typeref:typename:unsigned long
+ck_function_list	pkcs11.h	/^#define ck_function_list /;"	d
+ck_function_list	pkcs11.h	/^struct ck_function_list$/;"	s
+ck_hw_feature_type_t	pkcs11.h	/^#define ck_hw_feature_type_t /;"	d
+ck_hw_feature_type_t	pkcs11.h	/^typedef unsigned long ck_hw_feature_type_t;$/;"	t	typeref:typename:unsigned long
+ck_info	pkcs11.h	/^#define ck_info /;"	d
+ck_info	pkcs11.h	/^struct ck_info$/;"	s
+ck_key_type_t	pkcs11.h	/^#define ck_key_type_t /;"	d
+ck_key_type_t	pkcs11.h	/^typedef unsigned long ck_key_type_t;$/;"	t	typeref:typename:unsigned long
+ck_lockmutex_t	pkcs11.h	/^#define ck_lockmutex_t /;"	d
+ck_lockmutex_t	pkcs11.h	/^typedef ck_rv_t (*ck_lockmutex_t) (void *mutex);$/;"	t	typeref:typename:ck_rv_t (*)(void * mutex)
+ck_mechanism	pkcs11.h	/^#define ck_mechanism /;"	d
+ck_mechanism	pkcs11.h	/^struct ck_mechanism$/;"	s
+ck_mechanism_info	pkcs11.h	/^#define ck_mechanism_info /;"	d
+ck_mechanism_info	pkcs11.h	/^struct ck_mechanism_info$/;"	s
+ck_mechanism_type_t	pkcs11.h	/^#define ck_mechanism_type_t /;"	d
+ck_mechanism_type_t	pkcs11.h	/^typedef unsigned long ck_mechanism_type_t;$/;"	t	typeref:typename:unsigned long
+ck_notification_t	pkcs11.h	/^#define ck_notification_t /;"	d
+ck_notification_t	pkcs11.h	/^typedef unsigned long ck_notification_t;$/;"	t	typeref:typename:unsigned long
+ck_notify_t	pkcs11.h	/^#define ck_notify_t /;"	d
+ck_notify_t	pkcs11.h	/^typedef ck_rv_t (*ck_notify_t) (ck_session_handle_t session,$/;"	t	typeref:typename:ck_rv_t (*)(ck_session_handle_t session,ck_notification_t event,void * application)
+ck_object_class_t	pkcs11.h	/^#define ck_object_class_t /;"	d
+ck_object_class_t	pkcs11.h	/^typedef unsigned long ck_object_class_t;$/;"	t	typeref:typename:unsigned long
+ck_object_handle_t	pkcs11.h	/^#define ck_object_handle_t /;"	d
+ck_object_handle_t	pkcs11.h	/^typedef unsigned long ck_object_handle_t;$/;"	t	typeref:typename:unsigned long
+ck_rv_t	pkcs11.h	/^#define ck_rv_t /;"	d
+ck_rv_t	pkcs11.h	/^typedef unsigned long ck_rv_t;$/;"	t	typeref:typename:unsigned long
+ck_session_handle_t	pkcs11.h	/^#define ck_session_handle_t /;"	d
+ck_session_handle_t	pkcs11.h	/^typedef unsigned long ck_session_handle_t;$/;"	t	typeref:typename:unsigned long
+ck_session_info	pkcs11.h	/^#define ck_session_info /;"	d
+ck_session_info	pkcs11.h	/^struct ck_session_info$/;"	s
+ck_slot_id_t	pkcs11.h	/^#define ck_slot_id_t /;"	d
+ck_slot_id_t	pkcs11.h	/^typedef unsigned long ck_slot_id_t;$/;"	t	typeref:typename:unsigned long
+ck_slot_info	pkcs11.h	/^#define ck_slot_info /;"	d
+ck_slot_info	pkcs11.h	/^struct ck_slot_info$/;"	s
+ck_state_t	pkcs11.h	/^#define ck_state_t /;"	d
+ck_state_t	pkcs11.h	/^typedef unsigned long ck_state_t;$/;"	t	typeref:typename:unsigned long
+ck_token_info	pkcs11.h	/^#define ck_token_info /;"	d
+ck_token_info	pkcs11.h	/^struct ck_token_info$/;"	s
+ck_unlockmutex_t	pkcs11.h	/^#define ck_unlockmutex_t /;"	d
+ck_unlockmutex_t	pkcs11.h	/^typedef ck_rv_t (*ck_unlockmutex_t) (void *mutex);$/;"	t	typeref:typename:ck_rv_t (*)(void * mutex)
+ck_user_type_t	pkcs11.h	/^#define ck_user_type_t /;"	d
+ck_user_type_t	pkcs11.h	/^typedef unsigned long ck_user_type_t;$/;"	t	typeref:typename:unsigned long
+ck_version	pkcs11.h	/^#define ck_version /;"	d
+ck_version	pkcs11.h	/^struct ck_version$/;"	s
+class	openbsd-compat/getrrsetbyname.c	/^	u_int16_t		class;$/;"	m	struct:dns_query	typeref:typename:u_int16_t	file:
+class	openbsd-compat/getrrsetbyname.c	/^	u_int16_t		class;$/;"	m	struct:dns_rr	typeref:typename:u_int16_t	file:
+classmatch	openbsd-compat/fnmatch.c	/^classmatch(const char *pattern, char test, int foldcase, const char **ep)$/;"	f	typeref:typename:int	file:
+clean	Makefile.in	/^clean:	regressclean$/;"	t
+clean	contrib/Makefile	/^clean:$/;"	t
+clean	openbsd-compat/Makefile.in	/^clean:$/;"	t
+clean	openbsd-compat/regress/Makefile.in	/^clean:$/;"	t
+clean	regress/Makefile	/^clean:$/;"	t
+clean	regress/misc/fuzz-harness/Makefile	/^clean:$/;"	t
+cleandir	Makefile.in	/^cleandir: veryclean$/;"	t
+cleanhostname	misc.c	/^cleanhostname(char *host)$/;"	f	typeref:typename:char *
+cleanup	openbsd-compat/regress/utimensattest.c	/^cleanup(void)$/;"	f	typeref:typename:void	file:
+cleanup	regress/test-exec.sh	/^cleanup ()$/;"	f
+cleanup	sshconnect2.c	/^	void	(*cleanup)(struct ssh *ssh);$/;"	m	struct:cauthmethod	typeref:typename:void (*)(struct ssh * ssh)	file:
+cleanup_ctxt	auth-pam.c	/^static struct pam_ctxt *cleanup_ctxt;$/;"	v	typeref:struct:pam_ctxt *	file:
+cleanup_exit	cleanup.c	/^cleanup_exit(int i)$/;"	f	typeref:typename:void
+cleanup_exit	clientloop.c	/^cleanup_exit(int i)$/;"	f	typeref:typename:void
+cleanup_exit	scp.c	/^cleanup_exit(int i)$/;"	f	typeref:typename:void
+cleanup_exit	sftp-server-main.c	/^cleanup_exit(int i)$/;"	f	typeref:typename:void
+cleanup_exit	ssh-agent.c	/^cleanup_exit(int i)$/;"	f	typeref:typename:void
+cleanup_exit	ssh-pkcs11-helper.c	/^cleanup_exit(int i)$/;"	f	typeref:typename:void
+cleanup_exit	sshd.c	/^cleanup_exit(int i)$/;"	f	typeref:typename:void
+cleanup_expected	regress/unittests/hostkeys/test_iterate.c	/^cleanup_expected(struct expected *expected, size_t n)$/;"	f	typeref:typename:void	file:
+cleanup_handler	ssh-agent.c	/^cleanup_handler(int sig)$/;"	f	typeref:typename:void	file:
+cleanup_idtab	regress/misc/fuzz-harness/agent_fuzz_helper.c	/^cleanup_idtab(void)$/;"	f	typeref:typename:void	file:
+cleanup_pid	ssh-agent.c	/^pid_t cleanup_pid = 0;$/;"	v	typeref:typename:pid_t
+cleanup_socket	ssh-agent.c	/^cleanup_socket(void)$/;"	f	typeref:typename:void	file:
+cleanup_sockettab	regress/misc/fuzz-harness/agent_fuzz_helper.c	/^cleanup_sockettab(void)$/;"	f	typeref:typename:void	file:
+clear_agent	regress/agent-restrict.sh	/^clear_agent() {$/;"	f
+clear_forwardings	readconf.c	/^clear_forwardings(Options *options)$/;"	f	typeref:typename:void	file:
+clear_forwardings	readconf.h	/^	int	clear_forwardings;$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+clear_libcrypto_errors	sshkey.c	/^clear_libcrypto_errors(void)$/;"	f	typeref:typename:void	file:
+clear_pass	ssh-add.c	/^clear_pass(void)$/;"	f	typeref:typename:void	file:
+client	ssh-gss.h	/^	gss_name_t	client; \/* server *\/$/;"	m	struct:__anon1dbf9ce30308	typeref:typename:gss_name_t
+clientData	regress/unittests/sshsig/webauthn.html	/^<h2>clientData<\/h2>$/;"	i
+client_abandon_status_confirm	clientloop.c	/^client_abandon_status_confirm(struct ssh *ssh, Channel *c, void *ctx)$/;"	f	typeref:typename:void	file:
+client_addr	sftp-server.c	/^static char *client_addr = NULL;$/;"	v	typeref:typename:char *	file:
+client_alive_check	serverloop.c	/^client_alive_check(struct ssh *ssh)$/;"	f	typeref:typename:void	file:
+client_alive_count_max	servconf.h	/^	int	client_alive_count_max;	\/*$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+client_alive_interval	servconf.h	/^	int	client_alive_interval;	\/*$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+client_channel_closed	clientloop.c	/^client_channel_closed(struct ssh *ssh, int id, void *arg)$/;"	f	typeref:typename:void	file:
+client_check_window_change	clientloop.c	/^client_check_window_change(struct ssh *ssh)$/;"	f	typeref:typename:void	file:
+client_cleanup_stdio_fwd	ssh.c	/^client_cleanup_stdio_fwd(struct ssh *ssh, int id, void *arg)$/;"	f	typeref:typename:void	file:
+client_converse	ssh-sk-client.c	/^client_converse(struct sshbuf *msg, struct sshbuf **respp, u_int type)$/;"	f	typeref:typename:int	file:
+client_creds	ssh-gss.h	/^	gss_cred_id_t	client_creds; \/* server *\/$/;"	m	struct:__anon1dbf9ce30308	typeref:typename:gss_cred_id_t
+client_expect_confirm	clientloop.c	/^client_expect_confirm(struct ssh *ssh, int id, const char *request,$/;"	f	typeref:typename:void
+client_filter_cleanup	clientloop.c	/^client_filter_cleanup(struct ssh *ssh, int cid, void *ctx)$/;"	f	typeref:typename:void
+client_global_hostkeys_private_confirm	clientloop.c	/^client_global_hostkeys_private_confirm(struct ssh *ssh, int type,$/;"	f	typeref:typename:void	file:
+client_global_request_reply	clientloop.c	/^client_global_request_reply(int type, u_int32_t seq, struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+client_init_dispatch	clientloop.c	/^client_init_dispatch(struct ssh *ssh)$/;"	f	typeref:typename:void	file:
+client_input_channel_open	clientloop.c	/^client_input_channel_open(int type, u_int32_t seq, struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+client_input_channel_req	clientloop.c	/^client_input_channel_req(int type, u_int32_t seq, struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+client_input_global_request	clientloop.c	/^client_input_global_request(int type, u_int32_t seq, struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+client_input_hostkeys	clientloop.c	/^client_input_hostkeys(struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+client_loop	clientloop.c	/^client_loop(struct ssh *ssh, int have_pty, int escape_char_arg,$/;"	f	typeref:typename:int
+client_new_escape_filter_ctx	clientloop.c	/^client_new_escape_filter_ctx(int escape_char)$/;"	f	typeref:typename:void *
+client_process_buffered_input_packets	clientloop.c	/^client_process_buffered_input_packets(struct ssh *ssh)$/;"	f	typeref:typename:void	file:
+client_process_net_input	clientloop.c	/^client_process_net_input(struct ssh *ssh)$/;"	f	typeref:typename:void	file:
+client_pub	kex.h	/^	struct sshbuf *client_pub;$/;"	m	struct:kex	typeref:struct:sshbuf *
+client_register_global_confirm	clientloop.c	/^client_register_global_confirm(global_confirm_cb *cb, void *ctx)$/;"	f	typeref:typename:void
+client_request_agent	clientloop.c	/^client_request_agent(struct ssh *ssh, const char *request_type, int rchan)$/;"	f	typeref:typename:Channel *	file:
+client_request_forwarded_streamlocal	clientloop.c	/^client_request_forwarded_streamlocal(struct ssh *ssh,$/;"	f	typeref:typename:Channel *	file:
+client_request_forwarded_tcpip	clientloop.c	/^client_request_forwarded_tcpip(struct ssh *ssh, const char *request_type,$/;"	f	typeref:typename:Channel *	file:
+client_request_tun_fwd	clientloop.c	/^client_request_tun_fwd(struct ssh *ssh, int tun_mode,$/;"	f	typeref:typename:char *
+client_request_x11	clientloop.c	/^client_request_x11(struct ssh *ssh, const char *request_type, int rchan)$/;"	f	typeref:typename:Channel *	file:
+client_send_env	clientloop.c	/^client_send_env(struct ssh *ssh, int id, const char *name, const char *val)$/;"	f	typeref:typename:void	file:
+client_session2_setup	clientloop.c	/^client_session2_setup(struct ssh *ssh, int id, int want_tty, int want_subsystem,$/;"	f	typeref:typename:void
+client_simple_escape_filter	clientloop.c	/^client_simple_escape_filter(struct ssh *ssh, Channel *c, char *buf, int len)$/;"	f	typeref:typename:int
+client_status_confirm	clientloop.c	/^client_status_confirm(struct ssh *ssh, int type, Channel *c, void *ctx)$/;"	f	typeref:typename:void	file:
+client_stop_mux	clientloop.c	/^client_stop_mux(void)$/;"	f	typeref:typename:void
+client_suspend_self	clientloop.c	/^client_suspend_self(struct sshbuf *bin, struct sshbuf *bout, struct sshbuf *berr)$/;"	f	typeref:typename:void	file:
+client_tty	channels.h	/^	int	client_tty;	\/* (client) TTY has been requested *\/$/;"	m	struct:Channel	typeref:typename:int
+client_version	kex.h	/^	struct sshbuf *client_version;$/;"	m	struct:kex	typeref:struct:sshbuf *
+client_wait_until_can_do_something	clientloop.c	/^client_wait_until_can_do_something(struct ssh *ssh, struct pollfd **pfdp,$/;"	f	typeref:typename:void	file:
+client_x11_display_valid	clientloop.c	/^client_x11_display_valid(const char *display)$/;"	f	typeref:typename:int	file:
+client_x11_get_proto	clientloop.c	/^client_x11_get_proto(struct ssh *ssh, const char *display,$/;"	f	typeref:typename:int
+clients	contrib/redhat/openssh.spec	/^%package clients$/;"	p	package:openssh
+clock_t	defines.h	/^typedef long clock_t;$/;"	t	typeref:typename:long
+close_listen_socks	sshd.c	/^close_listen_socks(void)$/;"	f	typeref:typename:void	file:
+close_socket	ssh-agent.c	/^close_socket(SocketEntry *e)$/;"	f	typeref:typename:void	file:
+close_startup_pipes	sshd.c	/^close_startup_pipes(void)$/;"	f	typeref:typename:void	file:
+closefrom	openbsd-compat/bsd-closefrom.c	/^closefrom(int lowfd)$/;"	f	typeref:typename:void
+closefrom_fallback	openbsd-compat/bsd-closefrom.c	/^closefrom_fallback(int lowfd)$/;"	f	typeref:typename:void	file:
+cmd	clientloop.c	/^	const char *cmd;$/;"	m	struct:escape_help_text	typeref:typename:const char *	file:
+cmd	mux.c	/^	struct sshbuf *cmd;$/;"	m	struct:mux_session_confirm_ctx	typeref:struct:sshbuf *	file:
+cmd	scp.c	/^char cmd[CMDNEEDS];		\/* must hold "rcp -r -p -d\\0" *\/$/;"	v	typeref:typename:char[]
+cmd_interrupt	sftp.c	/^cmd_interrupt(int signo)$/;"	f	typeref:typename:void	file:
+cmds	sftp.c	/^static const struct CMD cmds[] = {$/;"	v	typeref:typename:const struct CMD[]	file:
+cmov_aff	ge25519.c	/^static void cmov_aff(ge25519_aff *r, const ge25519_aff *p, unsigned char b)$/;"	f	typeref:typename:void	file:
+cmsgs	regress/misc/fuzz-harness/kex_fuzz.cc	/^	struct sshbuf *smsgs, *cmsgs; \/* output, for standalone mode *\/$/;"	m	struct:test_state	typeref:struct:sshbuf *	file:
+cnt	scp.c	/^	size_t cnt;$/;"	m	struct:__anon10582e5c0108	typeref:typename:size_t	file:
+col	session.h	/^	u_int	row, col, xpixel, ypixel;$/;"	m	struct:Session	typeref:typename:u_int
+collect_children	serverloop.c	/^collect_children(struct ssh *ssh)$/;"	f	typeref:typename:void	file:
+collect_ids_from_dirents	sftp-usergroup.c	/^collect_ids_from_dirents(SFTP_DIRENT **d, int user, u_int **idsp, u_int *nidsp)$/;"	f	typeref:typename:void	file:
+collect_ids_from_glob	sftp-usergroup.c	/^collect_ids_from_glob(glob_t *g, int user, u_int **idsp, u_int *nidsp)$/;"	f	typeref:typename:void	file:
+colon	misc.c	/^colon(char *cp)$/;"	f	typeref:typename:char *
+command	channels.c	/^		u_int8_t command;$/;"	m	struct:channel_decode_socks4::__anonb8c1f4220108	typeref:typename:u_int8_t	file:
+command	channels.c	/^		u_int8_t command;$/;"	m	struct:channel_decode_socks5::__anonb8c1f4220208	typeref:typename:u_int8_t	file:
+command	ssh.c	/^struct sshbuf *command;$/;"	v	typeref:struct:sshbuf *
+commasplit	regress/unittests/authopt/tests.c	/^commasplit(const char *s, size_t *np)$/;"	f	typeref:typename:char **	file:
+comment	hostfile.h	/^	const char *comment; \/* Any comment following the key *\/$/;"	m	struct:hostkey_foreach_line	typeref:typename:const char *
+comment	krl.c	/^	char *comment;$/;"	m	struct:ssh_krl	typeref:typename:char *	file:
+comment	ssh-agent.c	/^	char *comment;$/;"	m	struct:identity	typeref:typename:char *	file:
+comments	authfd.h	/^	char **comments;$/;"	m	struct:ssh_identitylist	typeref:typename:char **
+comp	kex.h	/^	struct sshcomp  comp;$/;"	m	struct:newkeys	typeref:struct:sshcomp
+compare	openbsd-compat/glob.c	/^compare(const void *p, const void *q)$/;"	f	typeref:typename:int	file:
+compare_forward	mux.c	/^compare_forward(struct Forward *a, struct Forward *b)$/;"	f	typeref:typename:int	file:
+compare_gps	openbsd-compat/glob.c	/^compare_gps(const void *_p, const void *_q)$/;"	f	typeref:typename:int	file:
+compare_host	mux.c	/^compare_host(const char *a, const char *b)$/;"	f	typeref:typename:int	file:
+compare_opts	regress/unittests/authopt/tests.c	/^compare_opts(const struct sshauthopt *opts,$/;"	f	typeref:typename:void	file:
+compat	packet.h	/^	int compat;$/;"	m	struct:ssh	typeref:typename:int
+compat-tests	Makefile.in	/^compat-tests: $(LIBCOMPAT)$/;"	t
+compat_banner	compat.c	/^compat_banner(struct ssh *ssh, const char *version)$/;"	f	typeref:typename:void
+compat_cipher_proposal	compat.c	/^compat_cipher_proposal(struct ssh *ssh, char *cipher_prop)$/;"	f	typeref:typename:char *
+compat_init_setproctitle	openbsd-compat/setproctitle.c	/^compat_init_setproctitle(int argc, char *argv[])$/;"	f	typeref:typename:void
+compat_kex_proposal	compat.c	/^compat_kex_proposal(struct ssh *ssh, char *p)$/;"	f	typeref:typename:char *
+compat_openssl	contrib/redhat/openssh.spec	/^%global compat_openssl 0$/;"	g
+compat_openssl	contrib/redhat/openssh.spec	/^%global compat_openssl 1$/;"	g
+compat_pkalg_proposal	compat.c	/^compat_pkalg_proposal(struct ssh *ssh, char *pkalg_prop)$/;"	f	typeref:typename:char *
+compile_opts_only	logintest.c	/^int compile_opts_only = 0;$/;"	v	typeref:typename:int
+complete	sftp.c	/^complete(EditLine *el, int ch)$/;"	f	typeref:typename:unsigned char	file:
+complete_ambiguous	sftp.c	/^complete_ambiguous(const char *word, char **list, size_t count)$/;"	f	typeref:typename:char *	file:
+complete_cmd_parse	sftp.c	/^complete_cmd_parse(EditLine *el, char *cmd, int lastarg, char quote,$/;"	f	typeref:typename:int	file:
+complete_ctx	sftp.c	/^struct complete_ctx {$/;"	s	file:
+complete_display	sftp.c	/^complete_display(char **list, u_int len)$/;"	f	typeref:typename:void	file:
+complete_is_remote	sftp.c	/^complete_is_remote(char *cmd, int cmdarg) {$/;"	f	typeref:typename:int	file:
+complete_match	sftp.c	/^complete_match(EditLine *el, struct sftp_conn *conn, char *remote_path,$/;"	f	typeref:typename:int	file:
+completed	xmss_fast.h	/^  unsigned char completed;$/;"	m	struct:__anon22bef5f30408	typeref:typename:unsigned char
+complex_hostspec	clientloop.c	/^	int complex_hostspec;	\/* wildcard or manual pattern-list host name *\/$/;"	m	struct:hostkeys_update_ctx	typeref:typename:int	file:
+compose_extension	sftp-server.c	/^compose_extension(struct sshbuf *msg, const char *name, const char *ver)$/;"	f	typeref:typename:int	file:
+compress_buffer	packet.c	/^compress_buffer(struct ssh *ssh, struct sshbuf *in, struct sshbuf *out)$/;"	f	typeref:typename:int	file:
+compression	readconf.h	/^	int     compression;	\/* Compress packets in both directions. *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+compression	servconf.h	/^	int     compression;	\/* If true, compression is allowed *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+compression_alg_list	cipher.c	/^compression_alg_list(int compression)$/;"	f	typeref:typename:const char *
+compression_buffer	packet.c	/^	struct sshbuf *compression_buffer;$/;"	m	struct:session_state	typeref:struct:sshbuf *	file:
+compression_in_failures	packet.c	/^	int compression_in_failures;$/;"	m	struct:session_state	typeref:typename:int	file:
+compression_in_started	packet.c	/^	int compression_in_started;$/;"	m	struct:session_state	typeref:typename:int	file:
+compression_in_stream	packet.c	/^	z_stream compression_in_stream;$/;"	m	struct:session_state	typeref:typename:z_stream	file:
+compression_out_failures	packet.c	/^	int compression_out_failures;$/;"	m	struct:session_state	typeref:typename:int	file:
+compression_out_started	packet.c	/^	int compression_out_started;$/;"	m	struct:session_state	typeref:typename:int	file:
+compression_out_stream	packet.c	/^	z_stream compression_out_stream;$/;"	m	struct:session_state	typeref:typename:z_stream	file:
+con	ssh-keyscan.c	/^} con;$/;"	t	typeref:struct:Connection	file:
+conalloc	ssh-keyscan.c	/^conalloc(char *iname, char *oname, int keytype)$/;"	f	typeref:typename:int	file:
+config	ssh.c	/^char *config = NULL;$/;"	v	typeref:typename:char *
+config_defined	regress/test-exec.sh	/^config_defined ()$/;"	f
+config_file_name	sshd.c	/^char *config_file_name = _PATH_SERVER_CONFIG_FILE;$/;"	v	typeref:typename:char *
+config_has_permitted_cnames	readconf.c	/^config_has_permitted_cnames(Options *options)$/;"	f	typeref:typename:int
+confirm	ssh-add.c	/^static int confirm = 0;$/;"	v	typeref:typename:int	file:
+confirm	ssh-agent.c	/^	u_int confirm;$/;"	m	struct:identity	typeref:typename:u_int	file:
+confirm	sshconnect.c	/^confirm(const char *prompt, const char *fingerprint)$/;"	f	typeref:typename:int	file:
+confirm_action	clientloop.h	/^enum confirm_action { CONFIRM_WARN = 0, CONFIRM_CLOSE, CONFIRM_TTY };$/;"	g
+confirm_key	ssh-agent.c	/^confirm_key(Identity *id, const char *extra)$/;"	f	typeref:typename:int	file:
+confirm_overwrite	ssh-keygen.c	/^confirm_overwrite(const char *filename)$/;"	f	typeref:typename:int	file:
+confirm_sk_overwrite	ssh-keygen.c	/^confirm_sk_overwrite(const char *application, const char *user)$/;"	f	typeref:typename:int	file:
+confree	ssh-keyscan.c	/^confree(int s)$/;"	f	typeref:typename:void	file:
+congreet	ssh-keyscan.c	/^congreet(int s)$/;"	f	typeref:typename:void	file:
+conloop	ssh-keyscan.c	/^conloop(void)$/;"	f	typeref:typename:void	file:
+conn	sftp-glob.c	/^	struct sftp_conn *conn;$/;"	m	struct:__anon159640840108	typeref:struct:sftp_conn *	file:
+conn	sftp.c	/^	struct sftp_conn *conn;$/;"	m	struct:complete_ctx	typeref:struct:sftp_conn *	file:
+conn_hash_hex	sshconnect.h	/^	char *conn_hash_hex;$/;"	m	struct:ssh_conn_info	typeref:typename:char *
+connect_ctx	channels.h	/^	struct channel_connect	connect_ctx;$/;"	m	struct:Channel	typeref:struct:channel_connect
+connect_host	misc.h	/^	char	 *connect_host;		\/* Host to connect. *\/$/;"	m	struct:Forward	typeref:typename:char *
+connect_local_xsocket	channels.c	/^connect_local_xsocket(u_int dnr)$/;"	f	typeref:typename:int	file:
+connect_local_xsocket_path	channels.c	/^connect_local_xsocket_path(const char *pathname)$/;"	f	typeref:typename:int	file:
+connect_next	channels.c	/^connect_next(struct channel_connect *cctx)$/;"	f	typeref:typename:int	file:
+connect_path	misc.h	/^	char	 *connect_path;		\/* Path to connect domain socket. *\/$/;"	m	struct:Forward	typeref:typename:char *
+connect_port	misc.h	/^	int	  connect_port;		\/* Port to connect on connect_host. *\/$/;"	m	struct:Forward	typeref:typename:int
+connect_to	channels.c	/^connect_to(struct ssh *ssh, const char *host, int port,$/;"	f	typeref:typename:Channel *	file:
+connect_to_helper	channels.c	/^connect_to_helper(struct ssh *ssh, const char *name, int port, int socktype,$/;"	f	typeref:typename:int	file:
+connect_to_server	sftp.c	/^connect_to_server(char *path, char **args, int *in, int *out)$/;"	f	typeref:typename:void	file:
+connection_attempts	readconf.h	/^	int     connection_attempts;	\/* Max attempts (seconds) before$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+connection_in	clientloop.c	/^static int connection_in;	\/* Connection to server (input). *\/$/;"	v	typeref:typename:int	file:
+connection_in	packet.c	/^	int connection_in;$/;"	m	struct:session_state	typeref:typename:int	file:
+connection_info	servconf.h	/^struct connection_info {$/;"	s
+connection_out	clientloop.c	/^static int connection_out;	\/* Connection to server (output). *\/$/;"	v	typeref:typename:int	file:
+connection_out	packet.c	/^	int connection_out;$/;"	m	struct:session_state	typeref:typename:int	file:
+connection_timeout	readconf.h	/^	int     connection_timeout;	\/* Max time (seconds) before$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+conread	ssh-keyscan.c	/^conread(int s)$/;"	f	typeref:typename:void	file:
+conrecycle	ssh-keyscan.c	/^conrecycle(int s)$/;"	f	typeref:typename:int	file:
+construct_utmp	loginrec.c	/^construct_utmp(struct logininfo *li,$/;"	f	typeref:typename:void
+construct_utmpx	loginrec.c	/^construct_utmpx(struct logininfo *li, struct utmpx *utx)$/;"	f	typeref:typename:void
+contents	servconf.h	/^	struct sshbuf *contents;$/;"	m	struct:include_item	typeref:struct:sshbuf *
+context	ssh-gss.h	/^	gss_ctx_id_t	context; \/* both *\/$/;"	m	struct:__anon1dbf9ce30308	typeref:typename:gss_ctx_id_t
+contouch	ssh-keyscan.c	/^contouch(int s)$/;"	f	typeref:typename:void	file:
+control_client_sighandler	mux.c	/^control_client_sighandler(int signo)$/;"	f	typeref:typename:void	file:
+control_client_sigrelay	mux.c	/^control_client_sigrelay(int signo)$/;"	f	typeref:typename:void	file:
+control_master	readconf.h	/^	int	control_master;$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+control_path	readconf.h	/^	char	*control_path;$/;"	m	struct:__anon7d31da1d0108	typeref:typename:char *
+control_persist	readconf.h	/^	int     control_persist; \/* ControlPersist flag *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+control_persist_detach	ssh.c	/^control_persist_detach(void)$/;"	f	typeref:typename:void	file:
+control_persist_exit_time	clientloop.c	/^static time_t control_persist_exit_time = 0;$/;"	v	typeref:typename:time_t	file:
+control_persist_timeout	readconf.h	/^	int     control_persist_timeout; \/* ControlPersist timeout (seconds) *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+controlmaster_pid	regress/forward-control.sh	/^controlmaster_pid() {$/;"	f
+convert_format	ssh-keygen.c	/^} convert_format = FMT_RFC4716;$/;"	v	typeref:enum:__anon9cc534940103
+convert_libcrypto_error	sshkey.c	/^convert_libcrypto_error(void)$/;"	f	typeref:typename:int	file:
+convtime	misc.c	/^convtime(const char *s)$/;"	f	typeref:typename:int
+copy_environment	session.c	/^copy_environment(char **source, char ***env, u_int *envsize)$/;"	f	typeref:typename:void	file:
+copy_environment_denylist	session.c	/^copy_environment_denylist(char **source, char ***env, u_int *envsize,$/;"	f	typeref:typename:void	file:
+copy_set_server_options	servconf.c	/^copy_set_server_options(ServerOptions *dst, ServerOptions *src, int preauth)$/;"	f	typeref:typename:void
+copy_statfs_to_statvfs	openbsd-compat/bsd-statvfs.c	/^copy_statfs_to_statvfs(struct statvfs *to, struct statfs *from)$/;"	f	typeref:typename:void	file:
+copy_tests	regress/reexec.sh	/^copy_tests ()$/;"	f
+copyidsrcdir	contrib/cygwin/Makefile	/^copyidsrcdir=..$/;"	m
+core_hash_SHA2	xmss_hash.c	/^int core_hash_SHA2(unsigned char *out, const unsigned int type, const unsigned char *key, unsign/;"	f	typeref:typename:int
+count	openbsd-compat/md5.h	/^	u_int64_t count;			\/* number of bits, mod 2^64 *\/$/;"	m	struct:MD5Context	typeref:typename:u_int64_t
+count	openbsd-compat/sha1.h	/^    u_int64_t count;$/;"	m	struct:__anonad849d930108	typeref:typename:u_int64_t
+count_dns_rr	openbsd-compat/getrrsetbyname.c	/^count_dns_rr(struct dns_rr *p, u_int16_t class, u_int16_t type)$/;"	f	typeref:typename:int	file:
+count_lines	moduli.c	/^count_lines(FILE *f)$/;"	f	typeref:typename:unsigned long	file:
+counter	progressmeter.c	/^static volatile off_t *counter;	\/* progress counter *\/$/;"	v	typeref:typename:volatile off_t *	file:
+counter	sk-api.h	/^	uint32_t counter;$/;"	m	struct:sk_sign_response	typeref:typename:uint32_t
+cp_ctx	cipher.c	/^	struct chachapoly_ctx *cp_ctx;$/;"	m	struct:sshcipher_ctx	typeref:struct:chachapoly_ctx *	file:
+cppflags	configure.ac	/^AC_ARG_WITH([cppflags],$/;"	w
+create_mutex	pkcs11.h	/^  ck_createmutex_t create_mutex;$/;"	m	struct:ck_c_initialize_args	typeref:typename:ck_createmutex_t
+create_mutex	pkcs11.h	/^#define create_mutex /;"	d
+creds	ssh-gss.h	/^	gss_cred_id_t	creds; \/* server *\/$/;"	m	struct:__anon1dbf9ce30308	typeref:typename:gss_cred_id_t
+creds	ssh-gss.h	/^	gss_cred_id_t creds;$/;"	m	struct:__anon1dbf9ce30208	typeref:typename:gss_cred_id_t
+crit	ssh-keygen.c	/^	int crit;$/;"	m	struct:cert_ext	typeref:typename:int	file:
+critical	sshkey.h	/^	struct sshbuf	*critical;$/;"	m	struct:sshkey_cert	typeref:struct:sshbuf *
+crossload_dir	sftp-client.c	/^crossload_dir(struct sftp_conn *from, struct sftp_conn *to,$/;"	f	typeref:typename:int
+crossload_dir_internal	sftp-client.c	/^crossload_dir_internal(struct sftp_conn *from, struct sftp_conn *to,$/;"	f	typeref:typename:int	file:
+crypt	openbsd-compat/xcrypt.c	/^#  define crypt /;"	d	file:
+crypto_api_h	crypto_api.h	/^#define crypto_api_h$/;"	d
+crypto_hash_sha512	hash.c	/^crypto_hash_sha512(unsigned char *out, const unsigned char *in,$/;"	f	typeref:typename:int
+crypto_hash_sha512_BYTES	crypto_api.h	/^#define crypto_hash_sha512_BYTES /;"	d
+crypto_int16	crypto_api.h	/^typedef int16_t crypto_int16;$/;"	t	typeref:typename:int16_t
+crypto_int32	crypto_api.h	/^typedef int32_t crypto_int32;$/;"	t	typeref:typename:int32_t
+crypto_int64	crypto_api.h	/^typedef int64_t crypto_int64;$/;"	t	typeref:typename:int64_t
+crypto_int8	crypto_api.h	/^typedef int8_t crypto_int8;$/;"	t	typeref:typename:int8_t
+crypto_kem_sntrup761_BYTES	crypto_api.h	/^#define crypto_kem_sntrup761_BYTES /;"	d
+crypto_kem_sntrup761_CIPHERTEXTBYTES	crypto_api.h	/^#define crypto_kem_sntrup761_CIPHERTEXTBYTES /;"	d
+crypto_kem_sntrup761_PUBLICKEYBYTES	crypto_api.h	/^#define crypto_kem_sntrup761_PUBLICKEYBYTES /;"	d
+crypto_kem_sntrup761_SECRETKEYBYTES	crypto_api.h	/^#define crypto_kem_sntrup761_SECRETKEYBYTES /;"	d
+crypto_kem_sntrup761_dec	sntrup761.c	/^int crypto_kem_sntrup761_dec(unsigned char *k,const unsigned char *c,const unsigned char *sk)$/;"	f	typeref:typename:int
+crypto_kem_sntrup761_enc	sntrup761.c	/^int crypto_kem_sntrup761_enc(unsigned char *c,unsigned char *k,const unsigned char *pk)$/;"	f	typeref:typename:int
+crypto_kem_sntrup761_keypair	sntrup761.c	/^int crypto_kem_sntrup761_keypair(unsigned char *pk,unsigned char *sk)$/;"	f	typeref:typename:int
+crypto_scalarmult_curve25519	smult_curve25519_ref.c	/^int crypto_scalarmult_curve25519(unsigned char *q,$/;"	f	typeref:typename:int
+crypto_sign_ed25519	ed25519.c	/^int crypto_sign_ed25519($/;"	f	typeref:typename:int
+crypto_sign_ed25519_BYTES	crypto_api.h	/^#define crypto_sign_ed25519_BYTES /;"	d
+crypto_sign_ed25519_PUBLICKEYBYTES	crypto_api.h	/^#define crypto_sign_ed25519_PUBLICKEYBYTES /;"	d
+crypto_sign_ed25519_SECRETKEYBYTES	crypto_api.h	/^#define crypto_sign_ed25519_SECRETKEYBYTES /;"	d
+crypto_sign_ed25519_keypair	ed25519.c	/^int crypto_sign_ed25519_keypair($/;"	f	typeref:typename:int
+crypto_sign_ed25519_open	ed25519.c	/^int crypto_sign_ed25519_open($/;"	f	typeref:typename:int
+crypto_sort_int32	sntrup761.c	/^static void crypto_sort_int32(void *array,long long n)$/;"	f	typeref:typename:void	file:
+crypto_sort_uint32	sntrup761.c	/^static void crypto_sort_uint32(void *array,long long n)$/;"	f	typeref:typename:void	file:
+crypto_uint16	crypto_api.h	/^typedef uint16_t crypto_uint16;$/;"	t	typeref:typename:uint16_t
+crypto_uint32	crypto_api.h	/^typedef uint32_t crypto_uint32;$/;"	t	typeref:typename:uint32_t
+crypto_uint64	crypto_api.h	/^typedef uint64_t crypto_uint64;$/;"	t	typeref:typename:uint64_t
+crypto_uint8	crypto_api.h	/^typedef uint8_t crypto_uint8;$/;"	t	typeref:typename:uint8_t
+crypto_verify_32	verify.c	/^int crypto_verify_32(const unsigned char *x,const unsigned char *y)$/;"	f	typeref:typename:int
+cryptoki_version	pkcs11.h	/^  struct ck_version cryptoki_version;$/;"	m	struct:ck_info	typeref:struct:ck_version
+cryptoki_version	pkcs11.h	/^#define cryptoki_version /;"	d
+ctl_chan	channels.h	/^	int     ctl_chan;	\/* control channel (multiplexed connections) *\/$/;"	m	struct:Channel	typeref:typename:int
+ctr	cipher-aesctr.h	/^	u8	ctr[AES_BLOCK_SIZE];		\/* counter *\/$/;"	m	struct:aesctr_ctx	typeref:typename:u8[]
+ctx	channels.h	/^	void *ctx;$/;"	m	struct:channel_confirm	typeref:typename:void *
+ctx	clientloop.c	/^	void *ctx;$/;"	m	struct:global_confirm	typeref:typename:void *	file:
+ctx_len	digest-libc.c	/^	size_t ctx_len;$/;"	m	struct:ssh_digest	typeref:typename:size_t	file:
+ctxt	auth2-chall.c	/^	void *ctxt;$/;"	m	struct:KbdintAuthctxt	typeref:typename:void *	file:
+ctype	channels.h	/^	char   *ctype;		\/* type *\/$/;"	m	struct:Channel	typeref:typename:char *
+cur	sftp-glob.c	/^} cur;$/;"	v	typeref:struct:__anon159640840108
+cur_pos	progressmeter.c	/^static off_t cur_pos;		\/* transfer position as of last refresh *\/$/;"	v	typeref:typename:off_t	file:
+curfile	scp.c	/^char *curfile;$/;"	v	typeref:typename:char *
+current	sshconnect2.c	/^static Authmethod *current = NULL;$/;"	v	typeref:typename:Authmethod *	file:
+cygdocdir	contrib/cygwin/Makefile	/^cygdocdir=$(docdir)\/Cygwin$/;"	m
+cygwin-postinstall	contrib/cygwin/Makefile	/^cygwin-postinstall: move-config-files remove-empty-dir install-inetd-config install-doc install-/;"	t
+cygwin_ssh_privsep_user	openbsd-compat/bsd-cygwin_util.c	/^cygwin_ssh_privsep_user()$/;"	f	typeref:typename:const char *
+cygwin_ug_match_pattern_list	openbsd-compat/bsd-cygwin_util.c	/^cygwin_ug_match_pattern_list(const char *string, const char *pattern)$/;"	f	typeref:typename:int
+d	bitmap.c	/^	BITMAP_WTYPE *d;$/;"	m	struct:bitmap	typeref:typename:BITMAP_WTYPE *	file:
+d	sshbuf.h	/^	u_char *d;		\/* Data *\/$/;"	m	struct:sshbuf	typeref:typename:u_char *
+d	xmss_fast.h	/^  unsigned int d;$/;"	m	struct:__anon22bef5f30308	typeref:typename:unsigned int
+daemon	openbsd-compat/daemon.c	/^daemon(int nochdir, int noclose)$/;"	f	typeref:typename:int
+daemonized	misc.c	/^daemonized(void)$/;"	f	typeref:typename:int
+dangerous_locale	utf8.c	/^dangerous_locale(void) {$/;"	f	typeref:typename:int	file:
+data	ssh-gss.h	/^	void *data;$/;"	m	struct:__anon1dbf9ce30108	typeref:typename:void *
+data	umac.c	/^    UINT8  data   [HASH_BUF_BYTES];    \/* Incoming data buffer           *\/$/;"	m	struct:__anon20b5e17c0308	typeref:typename:UINT8[]	file:
+data_dir	regress/unittests/test_helper/test_helper.c	/^static const char *data_dir = NULL;$/;"	v	typeref:typename:const char *	file:
+datadir	Makefile.in	/^datadir=@datadir@$/;"	m
+datadir	contrib/cygwin/Makefile	/^datadir=$(prefix)\/share$/;"	m
+datagram	channels.h	/^	int			datagram;$/;"	m	struct:Channel	typeref:typename:int
+datarootdir	Makefile.in	/^datarootdir=@datarootdir@$/;"	m
+day	pkcs11.h	/^  unsigned char day[2];$/;"	m	struct:ck_date	typeref:typename:unsigned char[2]
+dbl_p1p1	ge25519.c	/^static void dbl_p1p1(ge25519_p1p1 *r, const ge25519_p2 *p)$/;"	f	typeref:typename:void	file:
+death	ssh-agent.c	/^	time_t death;$/;"	m	struct:identity	typeref:typename:time_t	file:
+debug	log.h	/^#define debug(/;"	d
+debug2	log.h	/^#define debug2(/;"	d
+debug2_f	log.h	/^#define debug2_f(/;"	d
+debug2_fr	log.h	/^#define debug2_fr(/;"	d
+debug2_r	log.h	/^#define debug2_r(/;"	d
+debug3	log.h	/^#define debug3(/;"	d
+debug3_f	log.h	/^#define debug3_f(/;"	d
+debug3_fr	log.h	/^#define debug3_fr(/;"	d
+debug3_r	log.h	/^#define debug3_r(/;"	d
+debug_f	log.h	/^#define debug_f(/;"	d
+debug_flag	ssh.c	/^int debug_flag = 0;$/;"	v	typeref:typename:int
+debug_flag	sshd.c	/^int debug_flag = 0;$/;"	v	typeref:typename:int
+debug_fr	log.h	/^#define debug_fr(/;"	d
+debug_r	log.h	/^#define debug_r(/;"	d
+decode_addrport	regress/netcat.c	/^decode_addrport(const char *h, const char *p, struct sockaddr *addr,$/;"	f	typeref:typename:int	file:
+decode_attrib	sftp-common.c	/^decode_attrib(struct sshbuf *b, Attrib *a)$/;"	f	typeref:typename:int
+decode_reply	authfd.c	/^decode_reply(u_char type)$/;"	f	typeref:typename:int	file:
+decrypt	rijndael.h	/^	int	decrypt;$/;"	m	struct:__anona08d75440108	typeref:typename:int
+default-path	configure.ac	/^AC_ARG_WITH([default-path],$/;"	w
+default_authkey_opts	regress/unittests/authopt/tests.c	/^default_authkey_opts(void)$/;"	f	typeref:struct:sshauthopt *	file:
+default_authkey_restrict_opts	regress/unittests/authopt/tests.c	/^default_authkey_restrict_opts(void)$/;"	f	typeref:struct:sshauthopt *	file:
+default_client_percent_dollar_expand	ssh.c	/^default_client_percent_dollar_expand(const char *str,$/;"	f	typeref:typename:char *	file:
+default_client_percent_expand	ssh.c	/^default_client_percent_expand(const char *str,$/;"	f	typeref:typename:char *	file:
+default_files	ssh-add.c	/^static char *default_files[] = {$/;"	v	typeref:typename:char * []	file:
+default_key_sign	sshkey.c	/^default_key_sign(struct sshkey *key, u_char **sigp, size_t *lenp,$/;"	f	typeref:typename:int	file:
+default_ssh_port	readconf.c	/^default_ssh_port(void)$/;"	f	typeref:typename:int
+defaultsdir	contrib/cygwin/Makefile	/^defaultsdir=$(sysconfdir)\/defaults\/etc$/;"	m
+del_keys_by_name	ssh-pkcs11-helper.c	/^del_keys_by_name(char *name)$/;"	f	typeref:typename:void	file:
+delayed	channels.h	/^	int     delayed;	\/* post-IO handlers for newly created$/;"	m	struct:Channel	typeref:typename:int
+delete_all	ssh-add.c	/^delete_all(int agent_fd, int qflag)$/;"	f	typeref:typename:int	file:
+delete_file	ssh-add.c	/^delete_file(int agent_fd, const char *filename, int key_only, int qflag)$/;"	f	typeref:typename:int	file:
+delete_host	ssh-keygen.c	/^	int delete_host;	\/* Delete host from known_hosts *\/$/;"	m	struct:known_hosts_ctx	typeref:typename:int	file:
+delete_one	ssh-add.c	/^delete_one(int agent_fd, const struct sshkey *key, const char *comment,$/;"	f	typeref:typename:int	file:
+delete_stdin	ssh-add.c	/^delete_stdin(int agent_fd, int qflag)$/;"	f	typeref:typename:int	file:
+demote_sensitive_data	sshd.c	/^demote_sensitive_data(void)$/;"	f	typeref:typename:void
+deny_groups	servconf.h	/^	char   **deny_groups;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:char **
+deny_users	servconf.h	/^	char   **deny_users;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:char **
+depend	Makefile.in	/^depend: depend-rebuild$/;"	t
+depend-check	Makefile.in	/^depend-check: depend-rebuild$/;"	t
+depend-rebuild	Makefile.in	/^depend-rebuild:$/;"	t
+derelativise_path	servconf.c	/^derelativise_path(const char *path)$/;"	f	typeref:typename:char *
+derive_key	kex.c	/^derive_key(struct ssh *ssh, int id, u_int need, u_char *hash, u_int hashlen,$/;"	f	typeref:typename:int	file:
+deserialise_array	auth-options.c	/^deserialise_array(struct sshbuf *m, char ***ap, size_t *np)$/;"	f	typeref:typename:int	file:
+deserialise_identity2	authfd.c	/^deserialise_identity2(struct sshbuf *ids, struct sshkey **keyp, char **commentp)$/;"	f	typeref:typename:int	file:
+deserialise_nullable_string	auth-options.c	/^deserialise_nullable_string(struct sshbuf *m, char **sp)$/;"	f	typeref:typename:int	file:
+dest_addr	channels.c	/^		struct in_addr dest_addr;$/;"	m	struct:channel_decode_socks4::__anonb8c1f4220108	typeref:struct:in_addr	file:
+dest_constraint	authfd.h	/^struct dest_constraint {$/;"	s
+dest_constraint_hop	authfd.h	/^struct dest_constraint_hop {$/;"	s
+dest_constraints	ssh-agent.c	/^	struct dest_constraint *dest_constraints;$/;"	m	struct:identity	typeref:struct:dest_constraint *	file:
+dest_port	channels.c	/^		u_int16_t dest_port;$/;"	m	struct:channel_decode_socks4::__anonb8c1f4220108	typeref:typename:u_int16_t	file:
+destroy_mutex	pkcs11.h	/^  ck_destroymutex_t destroy_mutex;$/;"	m	struct:ck_c_initialize_args	typeref:typename:ck_destroymutex_t
+destroy_mutex	pkcs11.h	/^#define destroy_mutex /;"	d
+destroy_sensitive_data	sshd.c	/^destroy_sensitive_data(void)$/;"	f	typeref:typename:void
+detach_close	channels.h	/^	int			detach_close;$/;"	m	struct:Channel	typeref:typename:int
+detach_user	channels.h	/^	channel_callback_fn	*detach_user;$/;"	m	struct:Channel	typeref:typename:channel_callback_fn *
+dev	sk-usbhid.c	/^	fido_dev_t *dev;$/;"	m	struct:sk_usbhid	typeref:typename:fido_dev_t *	file:
+device	auth2-chall.c	/^	KbdintDevice *device;$/;"	m	struct:KbdintAuthctxt	typeref:typename:KbdintDevice *	file:
+device_error	pkcs11.h	/^  unsigned long device_error;$/;"	m	struct:ck_session_info	typeref:typename:unsigned long
+device_error	pkcs11.h	/^#define device_error /;"	d
+devices	auth2-chall.c	/^	char *devices;$/;"	m	struct:KbdintAuthctxt	typeref:typename:char *	file:
+devices	auth2-chall.c	/^KbdintDevice *devices[] = {$/;"	v	typeref:typename:KbdintDevice * []
+devices_done	auth2-chall.c	/^	u_int devices_done;$/;"	m	struct:KbdintAuthctxt	typeref:typename:u_int	file:
+devnull_or_die	regress/misc/fuzz-harness/agent_fuzz_helper.c	/^devnull_or_die(void)$/;"	f	typeref:typename:int	file:
+dflag	regress/netcat.c	/^int	dflag;					\/* detached, no stdin *\/$/;"	v	typeref:typename:int
+dh	kex.h	/^	DH	*dh;			\/* DH *\/$/;"	m	struct:kex	typeref:typename:DH *
+dh_estimate	dh.c	/^dh_estimate(int bits)$/;"	f	typeref:typename:u_int
+dh_gen_key	dh.c	/^dh_gen_key(DH *dh, int need)$/;"	f	typeref:typename:int
+dh_need	kex.h	/^	u_int	dh_need;$/;"	m	struct:kex	typeref:typename:u_int
+dh_new_group	dh.c	/^dh_new_group(BIGNUM *gen, BIGNUM *modulus)$/;"	f	typeref:typename:DH *
+dh_new_group1	dh.c	/^dh_new_group1(void)$/;"	f	typeref:typename:DH *
+dh_new_group14	dh.c	/^dh_new_group14(void)$/;"	f	typeref:typename:DH *
+dh_new_group16	dh.c	/^dh_new_group16(void)$/;"	f	typeref:typename:DH *
+dh_new_group18	dh.c	/^dh_new_group18(void)$/;"	f	typeref:typename:DH *
+dh_new_group_asc	dh.c	/^dh_new_group_asc(const char *gen, const char *modulus)$/;"	f	typeref:typename:DH *
+dh_new_group_fallback	dh.c	/^dh_new_group_fallback(int max)$/;"	f	typeref:typename:DH *
+dh_pub_is_valid	dh.c	/^dh_pub_is_valid(const DH *dh, const BIGNUM *dh_pub)$/;"	f	typeref:typename:int
+dh_set_moduli_file	dh.c	/^void dh_set_moduli_file(const char *filename)$/;"	f	typeref:typename:void
+dhgroup	dh.h	/^struct dhgroup {$/;"	s
+die	fixalgorithms	/^die() {$/;"	f
+die	fixpaths	/^die() {$/;"	f
+digest	hmac.c	/^	struct ssh_digest_ctx	*digest;$/;"	m	struct:ssh_hmac_ctx	typeref:struct:ssh_digest_ctx *	file:
+digest_len	digest-libc.c	/^	size_t digest_len;$/;"	m	struct:ssh_digest	typeref:typename:size_t	file:
+digest_len	digest-openssl.c	/^	size_t digest_len;$/;"	m	struct:ssh_digest	typeref:typename:size_t	file:
+digests	digest-libc.c	/^const struct ssh_digest digests[SSH_DIGEST_MAX] = {$/;"	v	typeref:typename:const struct ssh_digest[]
+digests	digest-openssl.c	/^const struct ssh_digest digests[] = {$/;"	v	typeref:typename:const struct ssh_digest[]
+dir	sftp-glob.c	/^	SFTP_DIRENT **dir;$/;"	m	struct:SFTP_OPENDIR	typeref:typename:SFTP_DIRENT **	file:
+dirent	openbsd-compat/bsd-closefrom.c	/^# define dirent /;"	d	file:
+dirent	openbsd-compat/bsd-nextstep.h	/^#define dirent /;"	d
+dirname	openbsd-compat/dirname.c	/^dirname(const char *path)$/;"	f	typeref:typename:char *
+dirp	sftp-server.c	/^	DIR *dirp;$/;"	m	struct:Handle	typeref:typename:DIR *	file:
+disable_forwarding	servconf.h	/^	int	disable_forwarding;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+disconnect_controlling_tty	sshpty.c	/^disconnect_controlling_tty(void)$/;"	f	typeref:typename:void
+dispatch	packet.h	/^	dispatch_fn *dispatch[DISPATCH_MAX];$/;"	m	struct:ssh	typeref:typename:dispatch_fn * []
+dispatch_fn	dispatch.h	/^typedef int dispatch_fn(int, u_int32_t, struct ssh *);$/;"	t	typeref:typename:int ()(int,u_int32_t,struct ssh *)
+dispatch_protocol_error	dispatch.c	/^dispatch_protocol_error(int type, u_int32_t seq, struct ssh *ssh)$/;"	f	typeref:typename:int
+dispatch_protocol_ignore	dispatch.c	/^dispatch_protocol_ignore(int type, u_int32_t seq, struct ssh *ssh)$/;"	f	typeref:typename:int
+dispatch_skip_packets	packet.h	/^	int dispatch_skip_packets;$/;"	m	struct:ssh	typeref:typename:int
+display	session.h	/^	char	*display;$/;"	m	struct:Session	typeref:typename:char *
+display_loginmsg	session.c	/^display_loginmsg(void)$/;"	f	typeref:typename:void	file:
+display_number	session.h	/^	u_int	display_number;$/;"	m	struct:Session	typeref:typename:u_int
+displayname	ssh-gss.h	/^	gss_buffer_desc displayname;$/;"	m	struct:__anon1dbf9ce30208	typeref:typename:gss_buffer_desc
+distclean	Makefile.in	/^distclean:	regressclean$/;"	t
+distclean	openbsd-compat/Makefile.in	/^distclean: clean$/;"	t
+distclean	openbsd-compat/regress/Makefile.in	/^distclean: clean$/;"	t
+distclean	regress/Makefile	/^distclean:	clean$/;"	t
+distprep	Makefile.in	/^distprep: catman-do depend-check$/;"	t
+dk	rijndael.h	/^	u32	dk[4*(AES_MAXROUNDS + 1)];	\/* decrypt key schedule *\/$/;"	m	struct:__anona08d75440108	typeref:typename:u32[]
+dlhandle	ssh-sk.c	/^	void *dlhandle;$/;"	m	struct:sshsk_provider	typeref:typename:void *	file:
+dns_query	openbsd-compat/getrrsetbyname.c	/^struct dns_query {$/;"	s	file:
+dns_read_key	dns.c	/^dns_read_key(u_int8_t *algorithm, u_int8_t *digest_type,$/;"	f	typeref:typename:int	file:
+dns_read_rdata	dns.c	/^dns_read_rdata(u_int8_t *algorithm, u_int8_t *digest_type,$/;"	f	typeref:typename:int	file:
+dns_response	openbsd-compat/getrrsetbyname.c	/^struct dns_response {$/;"	s	file:
+dns_result_totext	dns.c	/^dns_result_totext(unsigned int res)$/;"	f	typeref:typename:const char *	file:
+dns_rr	openbsd-compat/getrrsetbyname.c	/^struct dns_rr {$/;"	s	file:
+do_authenticated	session.c	/^do_authenticated(struct ssh *ssh, Authctxt *authctxt)$/;"	f	typeref:typename:void
+do_authenticated2	session.c	/^do_authenticated2(struct ssh *ssh, Authctxt *authctxt)$/;"	f	typeref:typename:void	file:
+do_authentication2	auth2.c	/^do_authentication2(struct ssh *ssh)$/;"	f	typeref:typename:void
+do_ca_sign	ssh-keygen.c	/^do_ca_sign(struct passwd *pw, const char *ca_key_path, int prefer_agent,$/;"	f	typeref:typename:void	file:
+do_change_comment	ssh-keygen.c	/^do_change_comment(struct passwd *pw, const char *identity_comment)$/;"	f	typeref:typename:void	file:
+do_change_passphrase	ssh-keygen.c	/^do_change_passphrase(struct passwd *pw)$/;"	f	typeref:typename:void	file:
+do_check_krl	ssh-keygen.c	/^do_check_krl(struct passwd *pw, int print_krl, int argc, char **argv)$/;"	f	typeref:typename:void	file:
+do_child	session.c	/^do_child(struct ssh *ssh, Session *s, const char *command)$/;"	f	typeref:typename:void
+do_cleanup	session.c	/^do_cleanup(struct ssh *ssh, Authctxt *authctxt)$/;"	f	typeref:typename:void
+do_close	sftp-client.c	/^do_close(struct sftp_conn *conn, const u_char *handle, u_int handle_len)$/;"	f	typeref:typename:int
+do_cmd	scp.c	/^do_cmd(char *program, char *host, char *remuser, int port, int subsystem,$/;"	f	typeref:typename:int
+do_cmd2	scp.c	/^do_cmd2(char *host, char *remuser, int port, char *cmd,$/;"	f	typeref:typename:int
+do_cmd_pid	scp.c	/^pid_t do_cmd_pid = -1;$/;"	v	typeref:typename:pid_t
+do_cmd_pid2	scp.c	/^pid_t do_cmd_pid2 = -1;$/;"	v	typeref:typename:pid_t
+do_convert_from	ssh-keygen.c	/^do_convert_from(struct passwd *pw)$/;"	f	typeref:typename:void	file:
+do_convert_from_pem	ssh-keygen.c	/^do_convert_from_pem(struct sshkey **k, int *private)$/;"	f	typeref:typename:void	file:
+do_convert_from_pkcs8	ssh-keygen.c	/^do_convert_from_pkcs8(struct sshkey **k, int *private)$/;"	f	typeref:typename:void	file:
+do_convert_from_ssh2	ssh-keygen.c	/^do_convert_from_ssh2(struct passwd *pw, struct sshkey **k, int *private)$/;"	f	typeref:typename:void	file:
+do_convert_private_ssh2	ssh-keygen.c	/^do_convert_private_ssh2(struct sshbuf *b)$/;"	f	typeref:struct:sshkey *	file:
+do_convert_to	ssh-keygen.c	/^do_convert_to(struct passwd *pw)$/;"	f	typeref:typename:void	file:
+do_convert_to_pem	ssh-keygen.c	/^do_convert_to_pem(struct sshkey *k)$/;"	f	typeref:typename:void	file:
+do_convert_to_pkcs8	ssh-keygen.c	/^do_convert_to_pkcs8(struct sshkey *k)$/;"	f	typeref:typename:void	file:
+do_convert_to_ssh2	ssh-keygen.c	/^do_convert_to_ssh2(struct passwd *pw, struct sshkey *k)$/;"	f	typeref:typename:void	file:
+do_copy	sftp-client.c	/^do_copy(struct sftp_conn *conn, const char *oldpath, const char *newpath)$/;"	f	typeref:typename:int
+do_crossload	sftp-client.c	/^do_crossload(struct sftp_conn *from, struct sftp_conn *to,$/;"	f	typeref:typename:int
+do_debug	regress/unittests/kex/test_kex.c	/^static int do_debug = 0;$/;"	v	typeref:typename:int	file:
+do_df	sftp.c	/^do_df(struct sftp_conn *conn, const char *path, int hflag, int iflag)$/;"	f	typeref:typename:int	file:
+do_download	sftp-client.c	/^do_download(struct sftp_conn *conn, const char *remote_path,$/;"	f	typeref:typename:int
+do_download	ssh-keygen.c	/^do_download(struct passwd *pw)$/;"	f	typeref:typename:void	file:
+do_download_sk	ssh-keygen.c	/^do_download_sk(const char *skprovider, const char *device)$/;"	f	typeref:typename:int	file:
+do_exec	session.c	/^do_exec(struct ssh *ssh, Session *s, const char *command)$/;"	f	typeref:typename:int
+do_exec_no_pty	session.c	/^do_exec_no_pty(struct ssh *ssh, Session *s, const char *command)$/;"	f	typeref:typename:int
+do_exec_pty	session.c	/^do_exec_pty(struct ssh *ssh, Session *s, const char *command)$/;"	f	typeref:typename:int
+do_expand_path	sftp-client.c	/^do_expand_path(struct sftp_conn *conn, const char *path)$/;"	f	typeref:typename:char *
+do_file	ssh-add.c	/^do_file(int agent_fd, int deleting, int key_only, char *file, int qflag,$/;"	f	typeref:typename:int	file:
+do_fingerprint	ssh-keygen.c	/^do_fingerprint(struct passwd *pw)$/;"	f	typeref:typename:void	file:
+do_fsetstat	sftp-client.c	/^do_fsetstat(struct sftp_conn *conn, const u_char *handle, u_int handle_len,$/;"	f	typeref:typename:int
+do_fstat	sftp-client.c	/^do_fstat(struct sftp_conn *conn, const u_char *handle, u_int handle_len,$/;"	f	typeref:typename:Attrib *
+do_fstatvfs	sftp-client.c	/^do_fstatvfs(struct sftp_conn *conn, const u_char *handle, u_int handle_len,$/;"	f	typeref:typename:int
+do_fsync	sftp-client.c	/^do_fsync(struct sftp_conn *conn, u_char *handle, u_int handle_len)$/;"	f	typeref:typename:int
+do_gen_all_hostkeys	ssh-keygen.c	/^do_gen_all_hostkeys(struct passwd *pw)$/;"	f	typeref:typename:void	file:
+do_gen_krl	ssh-keygen.c	/^do_gen_krl(struct passwd *pw, int updating, const char *ca_key_path,$/;"	f	typeref:typename:void	file:
+do_get_users_groups_by_id	sftp-client.c	/^do_get_users_groups_by_id(struct sftp_conn *conn,$/;"	f	typeref:typename:int
+do_globbed_ls	sftp.c	/^do_globbed_ls(struct sftp_conn *conn, const char *path,$/;"	f	typeref:typename:int	file:
+do_hardlink	sftp-client.c	/^do_hardlink(struct sftp_conn *conn, const char *oldpath, const char *newpath)$/;"	f	typeref:typename:int
+do_host	ssh-keyscan.c	/^do_host(char *host)$/;"	f	typeref:typename:void	file:
+do_init	sftp-client.c	/^do_init(int fd_in, int fd_out, u_int transfer_buflen, u_int num_requests,$/;"	f	typeref:struct:sftp_conn *
+do_kex	regress/misc/fuzz-harness/kex_fuzz.cc	/^do_kex(struct shared_state *st, struct test_state *ts, const char *kex)$/;"	f	typeref:typename:void	file:
+do_kex	regress/unittests/kex/test_kex.c	/^do_kex(char *kex)$/;"	f	typeref:typename:void	file:
+do_kex_with_key	regress/misc/fuzz-harness/kex_fuzz.cc	/^do_kex_with_key(struct shared_state *st, struct test_state *ts,$/;"	f	typeref:typename:int	file:
+do_kex_with_key	regress/unittests/kex/test_kex.c	/^do_kex_with_key(char *kex, int keytype, int bits)$/;"	f	typeref:typename:void	file:
+do_known_hosts	ssh-keygen.c	/^do_known_hosts(struct passwd *pw, const char *name, int find_host,$/;"	f	typeref:typename:void	file:
+do_limits	sftp-client.c	/^do_limits(struct sftp_conn *conn, struct sftp_limits *limits)$/;"	f	typeref:typename:int
+do_local_cmd	scp.c	/^do_local_cmd(arglist *a)$/;"	f	typeref:typename:int	file:
+do_log	log.c	/^do_log(LogLevel level, int force, const char *suffix, const char *fmt,$/;"	f	typeref:typename:void	file:
+do_log2	log.h	/^#define do_log2(/;"	d
+do_log2_f	log.h	/^#define do_log2_f(/;"	d
+do_log2_fr	log.h	/^#define do_log2_fr(/;"	d
+do_log2_r	log.h	/^#define do_log2_r(/;"	d
+do_login	session.c	/^do_login(struct ssh *ssh, Session *s, const char *command)$/;"	f	typeref:typename:void
+do_ls_dir	sftp.c	/^do_ls_dir(struct sftp_conn *conn, const char *path,$/;"	f	typeref:typename:int	file:
+do_lsetstat	sftp-client.c	/^do_lsetstat(struct sftp_conn *conn, const char *path, Attrib *a)$/;"	f	typeref:typename:int
+do_lsreaddir	sftp-client.c	/^do_lsreaddir(struct sftp_conn *conn, const char *path, int print_flag,$/;"	f	typeref:typename:int	file:
+do_lstat	sftp-client.c	/^do_lstat(struct sftp_conn *conn, const char *path, int quiet)$/;"	f	typeref:typename:Attrib *
+do_mkdir	sftp-client.c	/^do_mkdir(struct sftp_conn *conn, const char *path, Attrib *a, int print_flag)$/;"	f	typeref:typename:int
+do_moduli_gen	ssh-keygen.c	/^do_moduli_gen(const char *out_file, char **opts, size_t nopts)$/;"	f	typeref:typename:void	file:
+do_moduli_screen	ssh-keygen.c	/^do_moduli_screen(const char *out_file, char **opts, size_t nopts)$/;"	f	typeref:typename:void	file:
+do_motd	session.c	/^do_motd(void)$/;"	f	typeref:typename:void
+do_nologin	session.c	/^do_nologin(struct passwd *pw)$/;"	f	typeref:typename:void	file:
+do_pam_account	auth-pam.c	/^do_pam_account(void)$/;"	f	typeref:typename:u_int
+do_pam_chauthtok	auth-pam.c	/^do_pam_chauthtok(void)$/;"	f	typeref:typename:void
+do_pam_putenv	auth-pam.c	/^do_pam_putenv(char *name, char *value)$/;"	f	typeref:typename:int
+do_pam_session	auth-pam.c	/^do_pam_session(struct ssh *ssh)$/;"	f	typeref:typename:void
+do_pam_setcred	auth-pam.c	/^do_pam_setcred(int init)$/;"	f	typeref:typename:void
+do_print_public	ssh-keygen.c	/^do_print_public(struct passwd *pw)$/;"	f	typeref:typename:void	file:
+do_print_resource_record	ssh-keygen.c	/^do_print_resource_record(struct passwd *pw, char *fname, char *hname,$/;"	f	typeref:typename:int	file:
+do_pwchange	session.c	/^do_pwchange(Session *s)$/;"	f	typeref:typename:void	file:
+do_rc_files	session.c	/^do_rc_files(struct ssh *ssh, Session *s, const char *shell)$/;"	f	typeref:typename:void	file:
+do_readdir	sftp-client.c	/^do_readdir(struct sftp_conn *conn, const char *path, SFTP_DIRENT ***dir)$/;"	f	typeref:typename:int
+do_readlink	sftp-client.c	/^do_readlink(struct sftp_conn *conn, const char *path)$/;"	f	typeref:typename:char *
+do_realpath	sftp-client.c	/^do_realpath(struct sftp_conn *conn, const char *path)$/;"	f	typeref:typename:char *
+do_realpath_expand	sftp-client.c	/^do_realpath_expand(struct sftp_conn *conn, const char *path, int expand)$/;"	f	typeref:typename:char *	file:
+do_rename	sftp-client.c	/^do_rename(struct sftp_conn *conn, const char *oldpath, const char *newpath,$/;"	f	typeref:typename:int
+do_restart_sanity_check	contrib/redhat/sshd.init	/^do_restart_sanity_check()$/;"	f
+do_rm	sftp-client.c	/^do_rm(struct sftp_conn *conn, const char *path)$/;"	f	typeref:typename:int
+do_rmdir	sftp-client.c	/^do_rmdir(struct sftp_conn *conn, const char *path)$/;"	f	typeref:typename:int
+do_send_and_receive	regress/misc/fuzz-harness/kex_fuzz.cc	/^do_send_and_receive(struct ssh *from, struct ssh *to,$/;"	f	typeref:typename:int	file:
+do_send_and_receive	regress/unittests/kex/test_kex.c	/^do_send_and_receive(struct ssh *from, struct ssh *to)$/;"	f	typeref:typename:int	file:
+do_setstat	sftp-client.c	/^do_setstat(struct sftp_conn *conn, const char *path, Attrib *a)$/;"	f	typeref:typename:int
+do_setup_env	session.c	/^do_setup_env(struct ssh *ssh, Session *s, const char *shell)$/;"	f	typeref:typename:char **	file:
+do_setusercontext	session.c	/^do_setusercontext(struct passwd *pw)$/;"	f	typeref:typename:void
+do_sftp_connect	scp.c	/^do_sftp_connect(char *host, char *user, int port, char *sftp_direct,$/;"	f	typeref:struct:sftp_conn *	file:
+do_show_cert	ssh-keygen.c	/^do_show_cert(struct passwd *pw)$/;"	f	typeref:typename:void	file:
+do_ssh2_kex	sshd.c	/^do_ssh2_kex(struct ssh *ssh)$/;"	f	typeref:typename:void	file:
+do_stat	sftp-client.c	/^do_stat(struct sftp_conn *conn, const char *path, int quiet)$/;"	f	typeref:typename:Attrib *
+do_statvfs	sftp-client.c	/^do_statvfs(struct sftp_conn *conn, const char *path, struct sftp_statvfs *st,$/;"	f	typeref:typename:int
+do_symlink	sftp-client.c	/^do_symlink(struct sftp_conn *conn, const char *oldpath, const char *newpath)$/;"	f	typeref:typename:int
+do_times	scp.c	/^do_times(int fd, int verb, const struct stat *sb)$/;"	f	typeref:typename:int	file:
+do_upload	sftp-client.c	/^do_upload(struct sftp_conn *conn, const char *local_path,$/;"	f	typeref:typename:int
+docdir	contrib/cygwin/Makefile	/^docdir=$(datadir)\/doc$/;"	m
+dochild	ssh-gss.h	/^	int (*dochild) (ssh_gssapi_client *);$/;"	m	struct:ssh_gssapi_mech_struct	typeref:typename:int (*)(ssh_gssapi_client *)
+does_write	sftp-server.c	/^	int does_write;		\/* if nonzero, banned for readonly mode *\/$/;"	m	struct:sftp_handler	typeref:typename:int	file:
+dollar_expand	misc.c	/^dollar_expand(int *parseerr, const char *string, ...)$/;"	f	typeref:typename:char *
+done	kex.h	/^	sig_atomic_t done;$/;"	m	struct:kex	typeref:typename:sig_atomic_t
+dont_free	sshbuf.h	/^	int dont_free;		\/* Kludge to support sshbuf_init *\/$/;"	m	struct:sshbuf	typeref:typename:int
+dopr	openbsd-compat/bsd-snprintf.c	/^dopr(char *buffer, size_t maxlen, const char *format, va_list args_in)$/;"	f	typeref:typename:int	file:
+dossh	regress/hostkey-rotate.sh	/^dossh() {$/;"	f
+download_buflen	sftp-client.c	/^	u_int download_buflen;$/;"	m	struct:sftp_conn	typeref:typename:u_int	file:
+download_dir	sftp-client.c	/^download_dir(struct sftp_conn *conn, const char *src, const char *dst,$/;"	f	typeref:typename:int
+download_dir_internal	sftp-client.c	/^download_dir_internal(struct sftp_conn *conn, const char *src, const char *dst,$/;"	f	typeref:typename:int	file:
+downstream	channels.c	/^	Channel *downstream;		\/* Downstream mux*\/$/;"	m	struct:permission	typeref:typename:Channel *	file:
+drainbuf	regress/netcat.c	/^drainbuf(int fd, unsigned char *buf, size_t *bufpos)$/;"	f	typeref:typename:ssize_t
+drop_connection	sshd.c	/^drop_connection(int sock, int startups, int notify_pipe)$/;"	f	typeref:typename:int	file:
+dsa	sshkey.h	/^	DSA	*dsa;$/;"	m	struct:sshkey	typeref:typename:DSA *
+dsa_g	regress/unittests/sshkey/common.c	/^dsa_g(struct sshkey *k)$/;"	f	typeref:typename:const BIGNUM *
+dsa_generate_private_key	sshkey.c	/^dsa_generate_private_key(u_int bits, DSA **dsap)$/;"	f	typeref:typename:int	file:
+dsa_params	regress/unittests/sshkey/mktestdata.sh	/^dsa_params() {$/;"	f
+dsa_priv_key	regress/unittests/sshkey/common.c	/^dsa_priv_key(struct sshkey *k)$/;"	f	typeref:typename:const BIGNUM *
+dsa_pub_key	regress/unittests/sshkey/common.c	/^dsa_pub_key(struct sshkey *k)$/;"	f	typeref:typename:const BIGNUM *
+dump	regress/misc/sk-dummy/sk-dummy.c	/^dump(const char *preamble, const void *sv, size_t l)$/;"	f	typeref:typename:void	file:
+dump	regress/unittests/test_helper/fuzz.c	/^dump(u_char *p, size_t len)$/;"	f	typeref:typename:void	file:
+dump_cfg_fmtint	readconf.c	/^dump_cfg_fmtint(OpCodes code, int val)$/;"	f	typeref:typename:void	file:
+dump_cfg_fmtint	servconf.c	/^dump_cfg_fmtint(ServerOpCodes code, int val)$/;"	f	typeref:typename:void	file:
+dump_cfg_forwards	readconf.c	/^dump_cfg_forwards(OpCodes code, u_int count, const struct Forward *fwds)$/;"	f	typeref:typename:void	file:
+dump_cfg_int	readconf.c	/^dump_cfg_int(OpCodes code, int val)$/;"	f	typeref:typename:void	file:
+dump_cfg_int	servconf.c	/^dump_cfg_int(ServerOpCodes code, int val)$/;"	f	typeref:typename:void	file:
+dump_cfg_oct	servconf.c	/^dump_cfg_oct(ServerOpCodes code, int val)$/;"	f	typeref:typename:void	file:
+dump_cfg_strarray	readconf.c	/^dump_cfg_strarray(OpCodes code, u_int count, char **vals)$/;"	f	typeref:typename:void	file:
+dump_cfg_strarray	servconf.c	/^dump_cfg_strarray(ServerOpCodes code, u_int count, char **vals)$/;"	f	typeref:typename:void	file:
+dump_cfg_strarray_oneline	readconf.c	/^dump_cfg_strarray_oneline(OpCodes code, u_int count, char **vals)$/;"	f	typeref:typename:void	file:
+dump_cfg_strarray_oneline	servconf.c	/^dump_cfg_strarray_oneline(ServerOpCodes code, u_int count, char **vals)$/;"	f	typeref:typename:void	file:
+dump_cfg_string	readconf.c	/^dump_cfg_string(OpCodes code, const char *val)$/;"	f	typeref:typename:void	file:
+dump_cfg_string	servconf.c	/^dump_cfg_string(ServerOpCodes code, const char *val)$/;"	f	typeref:typename:void	file:
+dump_channel_poll	channels.c	/^dump_channel_poll(const char *func, const char *what, Channel *c,$/;"	f	typeref:typename:void	file:
+dump_client_config	readconf.c	/^dump_client_config(Options *o, const char *host)$/;"	f	typeref:typename:void
+dump_config	servconf.c	/^dump_config(ServerOptions *o)$/;"	f	typeref:typename:void
+dump_digest	kex.c	/^dump_digest(const char *msg, const u_char *digest, int len)$/;"	f	typeref:typename:void
+dump_logininfo	logintest.c	/^dump_logininfo(struct logininfo *li, char *descname)$/;"	f	typeref:typename:void
+dup_strings	auth-options.c	/^dup_strings(char ***dstp, size_t *ndstp, char **src, size_t nsrc)$/;"	f	typeref:typename:int	file:
+ec_client_key	kex.h	/^	EC_KEY	*ec_client_key;		\/* ECDH *\/$/;"	m	struct:kex	typeref:typename:EC_KEY *
+ec_curve_info	ssh-pkcs11.c	/^static struct ec_curve_info {$/;"	s	file:
+ec_curve_infos	ssh-pkcs11.c	/^} ec_curve_infos[] = {$/;"	v	typeref:struct:ec_curve_info[]
+ec_group	kex.h	/^	const EC_GROUP *ec_group;	\/* ECDH *\/$/;"	m	struct:kex	typeref:typename:const EC_GROUP *
+ec_key_idx	ssh-pkcs11.c	/^static int ec_key_idx = 0;$/;"	v	typeref:typename:int	file:
+ec_key_method	ssh-pkcs11.c	/^static EC_KEY_METHOD *ec_key_method;$/;"	v	typeref:typename:EC_KEY_METHOD *	file:
+ec_nid	kex.c	/^	int ec_nid;$/;"	m	struct:kexalg	typeref:typename:int	file:
+ec_nid	kex.h	/^	int	ec_nid;$/;"	m	struct:kex	typeref:typename:int
+ecdsa	sshkey.h	/^	EC_KEY	*ecdsa;$/;"	m	struct:sshkey	typeref:typename:EC_KEY *
+ecdsa_do_sign	ssh-pkcs11-client.c	/^ecdsa_do_sign(const unsigned char *dgst, int dgst_len, const BIGNUM *inv,$/;"	f	typeref:typename:ECDSA_SIG *	file:
+ecdsa_do_sign	ssh-pkcs11.c	/^ecdsa_do_sign(const unsigned char *dgst, int dgst_len, const BIGNUM *inv,$/;"	f	typeref:typename:ECDSA_SIG *	file:
+ecdsa_generate_private_key	sshkey.c	/^ecdsa_generate_private_key(u_int bits, int *nid, EC_KEY **ecdsap)$/;"	f	typeref:typename:int	file:
+ecdsa_nid	sshkey.h	/^	int	 ecdsa_nid;	\/* NID of curve *\/$/;"	m	struct:sshkey	typeref:typename:int
+ecdsa_params	regress/unittests/sshkey/mktestdata.sh	/^ecdsa_params() {$/;"	f
+ed25519_pk	sshkey.h	/^	u_char	*ed25519_pk;$/;"	m	struct:sshkey	typeref:typename:u_char *
+ed25519_sk	sshkey.h	/^	u_char	*ed25519_sk;$/;"	m	struct:sshkey	typeref:typename:u_char *
+efd	channels.h	/^	int     efd;		\/* extended fd *\/$/;"	m	struct:Channel	typeref:typename:int
+egrep	regress/test-exec.sh	/^	egrep ()$/;"	f
+ek	cipher-aesctr.h	/^	u32	ek[4*(AES_MAXROUNDS + 1)];	\/* encrypt key schedule *\/$/;"	m	struct:aesctr_ctx	typeref:typename:u32[]
+ek	rijndael.h	/^	u32	ek[4*(AES_MAXROUNDS + 1)];	\/* encrypt key schedule *\/$/;"	m	struct:__anona08d75440108	typeref:typename:u32[]
+emit_expansion	scp.c	/^emit_expansion(const char *pattern, int brace_start, int brace_end,$/;"	f	typeref:typename:int	file:
+enable_ssh_keysign	readconf.h	/^	int	enable_ssh_keysign;$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+enabled	auth.h	/^	int	*enabled;$/;"	m	struct:Authmethod	typeref:typename:int *
+enabled	kex.h	/^	int	enabled;$/;"	m	struct:sshcomp	typeref:typename:int
+enabled	kex.h	/^	int	enabled;$/;"	m	struct:sshenc	typeref:typename:int
+enabled	mac.h	/^	int	enabled;$/;"	m	struct:sshmac	typeref:typename:int
+enabled	sshconnect2.c	/^	int	*enabled;	\/* flag in option struct that enables method *\/$/;"	m	struct:cauthmethod	typeref:typename:int *	file:
+enc	kex.h	/^	struct sshenc	enc;$/;"	m	struct:newkeys	typeref:struct:sshenc
+enc_ciphername	sshkey-xmss.c	/^	char		*enc_ciphername;\/* encrypt state with cipher *\/$/;"	m	struct:ssh_xmss_state	typeref:typename:char *	file:
+enc_keyiv	sshkey-xmss.c	/^	u_char		*enc_keyiv;	\/* encrypt state with key *\/$/;"	m	struct:ssh_xmss_state	typeref:typename:u_char *	file:
+enc_keyiv_len	sshkey-xmss.c	/^	u_int32_t	enc_keyiv_len;	\/* length of enc_keyiv *\/$/;"	m	struct:ssh_xmss_state	typeref:typename:u_int32_t	file:
+enc_name	ssh-gss.h	/^	char *enc_name;$/;"	m	struct:ssh_gssapi_mech_struct	typeref:typename:char *
+encode_attrib	sftp-common.c	/^encode_attrib(struct sshbuf *b, const Attrib *a)$/;"	f	typeref:typename:int
+encode_constraints	authfd.c	/^encode_constraints(struct sshbuf *m, u_int life, u_int confirm, u_int maxsign,$/;"	f	typeref:typename:int	file:
+encode_dest_constraint	authfd.c	/^encode_dest_constraint(struct sshbuf *m, const struct dest_constraint *dc)$/;"	f	typeref:typename:int	file:
+encode_dest_constraint_hop	authfd.c	/^encode_dest_constraint_hop(struct sshbuf *m,$/;"	f	typeref:typename:int	file:
+encrypt	cipher.c	/^	int	encrypt;$/;"	m	struct:sshcipher_ctx	typeref:typename:int	file:
+end_pos	progressmeter.c	/^static off_t end_pos;		\/* ending position of transfer *\/$/;"	v	typeref:typename:off_t	file:
+endgrent	openbsd-compat/bsd-misc.h	/^# define endgrent(/;"	d
+endian_convert	umac.c	/^static void endian_convert(void *buf, UWORD bpw, UINT32 num_bytes)$/;"	f	typeref:typename:void	file:
+endian_convert_if_le	umac.c	/^#define endian_convert_if_le(/;"	d	file:
+enrollform	regress/unittests/sshsig/webauthn.html	/^<form id="enrollform">$/;"	I
+enrollresult	regress/unittests/sshsig/webauthn.html	/^<span id="enrollresult" style="visibility: hidden;">$/;"	I
+enrollresultattestobj	regress/unittests/sshsig/webauthn.html	/^<pre id="enrollresultattestobj" style="color: #008; font-family: monospace;"><\/pre>$/;"	I
+enrollresultauthdata	regress/unittests/sshsig/webauthn.html	/^<pre id="enrollresultauthdata" style="color: #008; font-family: monospace;"><\/pre>$/;"	I
+enrollresultauthdataraw	regress/unittests/sshsig/webauthn.html	/^<pre id="enrollresultauthdataraw" style="color: #008; font-family: monospace;"><\/pre>$/;"	I
+enrollresultjson	regress/unittests/sshsig/webauthn.html	/^<pre id="enrollresultjson" style="color: #008; font-family: monospace;"><\/pre>$/;"	I
+enrollresultpk	regress/unittests/sshsig/webauthn.html	/^<pre id="enrollresultpk" style="color: #008; font-family: monospace;"><\/pre>$/;"	I
+enrollresultpkblob	regress/unittests/sshsig/webauthn.html	/^<pre id="enrollresultpkblob" style="color: #008; font-family: monospace;"><\/pre>$/;"	I
+enrollresultprivkey	regress/unittests/sshsig/webauthn.html	/^<pre id="enrollresultprivkey" style="color: #008; font-family: monospace;"><\/pre>$/;"	I
+enrollresultraw	regress/unittests/sshsig/webauthn.html	/^<pre id="enrollresultraw" style="color: #008; font-family: monospace;"><\/pre>$/;"	I
+ensure_minimum_time_since	auth2.c	/^ensure_minimum_time_since(double start, double seconds)$/;"	f	typeref:typename:void	file:
+enter_raw_mode	sshtty.c	/^enter_raw_mode(int quiet)$/;"	f	typeref:typename:void
+entries	hostfile.h	/^	struct hostkey_entry *entries;$/;"	m	struct:hostkeys	typeref:struct:hostkey_entry *
+env	auth-options.h	/^	char **env;$/;"	m	struct:sshauthopt	typeref:typename:char **
+env	mux.c	/^	char **env;$/;"	m	struct:mux_session_confirm_ctx	typeref:typename:char **	file:
+env	session.h	/^	} *env;$/;"	m	struct:Session	typeref:struct:Session::__anon24519b1f0108 *
+env_permitted	mux.c	/^env_permitted(const char *env)$/;"	f	typeref:typename:int	file:
+envval	ssh-gss.h	/^	char *envval;$/;"	m	struct:__anon1dbf9ce30108	typeref:typename:char *
+envvar	ssh-gss.h	/^	char *envvar;$/;"	m	struct:__anon1dbf9ce30108	typeref:typename:char *
+equal	fe25519.c	/^static crypto_uint32 equal(crypto_uint32 a,crypto_uint32 b) \/* 16-bit inputs *\/$/;"	f	typeref:typename:crypto_uint32	file:
+equal	ge25519.c	/^static unsigned char equal(signed char b,signed char c)$/;"	f	typeref:typename:unsigned char	file:
+err	openbsd-compat/bsd-err.c	/^err(int r, const char *fmt, ...)$/;"	f	typeref:typename:void
+err	openbsd-compat/strtonum.c	/^		int err;$/;"	m	struct:strtonum::errval	typeref:typename:int	file:
+errno_to_portable	sftp-server.c	/^errno_to_portable(int unixerrno)$/;"	f	typeref:typename:int	file:
+error	log.h	/^#define error(/;"	d
+error	regress/unittests/sshsig/webauthn.html	/^<span id="error" style="color: #800; font-weight: bold; font-size: 150%;"><\/span>$/;"	I
+error_f	log.h	/^#define error_f(/;"	d
+error_fr	log.h	/^#define error_fr(/;"	d
+error_r	log.h	/^#define error_r(/;"	d
+errs	scp.c	/^int errs, remin, remout, remin2, remout2;$/;"	v	typeref:typename:int
+errset_text	dns.c	/^static const char * const errset_text[] = {$/;"	v	typeref:typename:const char * const[]	file:
+errstr	openbsd-compat/strtonum.c	/^		const char *errstr;$/;"	m	struct:strtonum::errval	typeref:typename:const char *	file:
+errval	openbsd-compat/strtonum.c	/^	struct errval {$/;"	s	function:strtonum	file:
+errx	openbsd-compat/bsd-err.c	/^errx(int r, const char *fmt, ...)$/;"	f	typeref:typename:void
+esc_txt	clientloop.c	/^static struct escape_help_text esc_txt[] = {$/;"	v	typeref:struct:escape_help_text[]	file:
+escape_char	clientloop.c	/^	int escape_char;$/;"	m	struct:escape_filter_ctx	typeref:typename:int	file:
+escape_char	readconf.h	/^	int     escape_char;	\/* Escape character; -2 = none *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+escape_filter_ctx	clientloop.c	/^struct escape_filter_ctx {$/;"	s	file:
+escape_glob	sftp.c	/^escape_glob(const char *s)$/;"	f	typeref:typename:char *	file:
+escape_help_text	clientloop.c	/^struct escape_help_text {$/;"	s	file:
+escape_pending	clientloop.c	/^	int escape_pending;$/;"	m	struct:escape_filter_ctx	typeref:typename:int	file:
+etc-default-login	configure.ac	/^AC_ARG_ENABLE([etc-default-login],$/;"	e
+etm	mac.c	/^	int		etm;		\/* Encrypt-then-MAC *\/$/;"	m	struct:macalg	typeref:typename:int	file:
+etm	mac.h	/^	int	etm;		\/* Encrypt-then-MAC *\/$/;"	m	struct:sshmac	typeref:typename:int
+event	audit.c	/^		ssh_audit_event_t event;$/;"	m	struct:audit_event_lookup::event_lookup_struct	typeref:typename:ssh_audit_event_t	file:
+event_lookup_struct	audit.c	/^	static struct event_lookup_struct {$/;"	s	function:audit_event_lookup	file:
+events	openbsd-compat/bsd-poll.h	/^	short	events;$/;"	m	struct:pollfd	typeref:typename:short
+evp	cipher.c	/^	EVP_CIPHER_CTX *evp;$/;"	m	struct:sshcipher_ctx	typeref:typename:EVP_CIPHER_CTX *	file:
+evp_rijndael	cipher-aes.c	/^evp_rijndael(void)$/;"	f	typeref:typename:const EVP_CIPHER *
+evptype	cipher.c	/^	const EVP_CIPHER	*(*evptype)(void);$/;"	m	struct:sshcipher	typeref:typename:const EVP_CIPHER * (*)(void)	file:
+exec_prefix	Makefile.in	/^exec_prefix=@exec_prefix@$/;"	m
+exec_prefix	contrib/cygwin/Makefile	/^exec_prefix=$(prefix)$/;"	m
+execute_in_shell	readconf.c	/^execute_in_shell(const char *cmd)$/;"	f	typeref:typename:int	file:
+exit	loginrec.h	/^	int        exit;                        \/* process exit status *\/$/;"	m	struct:logininfo	typeref:typename:int
+exit_on_forward_failure	readconf.h	/^	int     exit_on_forward_failure;	\/* Exit if bind(2) fails for -L\/-R *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+exit_status	clientloop.c	/^static int exit_status;		\/* Used to store the command exit status. *\/$/;"	v	typeref:typename:int	file:
+exited_cleanly	misc.c	/^exited_cleanly(pid_t pid, const char *tag, const char *cmd, int quiet)$/;"	f	typeref:typename:int
+expand_authorized_keys	auth.c	/^expand_authorized_keys(const char *filename, struct passwd *pw)$/;"	f	typeref:typename:char *
+expand_proxy_command	sshconnect.c	/^expand_proxy_command(const char *proxy_command, const char *user,$/;"	f	typeref:typename:char *	file:
+expand_seed	xmss_wots.c	/^static void expand_seed(unsigned char *outseeds, const unsigned char *inseed, const wots_params /;"	f	typeref:typename:void	file:
+expect_client_fail	regress/cfgmatchlisten.sh	/^expect_client_fail()$/;"	f
+expect_client_ok	regress/cfgmatchlisten.sh	/^expect_client_ok()$/;"	f
+expect_fail	regress/agent-restrict.sh	/^expect_fail() {$/;"	f
+expect_fail_key	regress/agent-restrict.sh	/^expect_fail_key() {$/;"	f
+expect_key	regress/agent-restrict.sh	/^expect_key() {$/;"	f
+expect_key	regress/keygen-knownhosts.sh	/^expect_key() {$/;"	f
+expect_nkeys	regress/hostkey-rotate.sh	/^expect_nkeys() {$/;"	f
+expect_pty_fail	regress/key-options.sh	/^expect_pty_fail() {$/;"	f
+expect_pty_succeed	regress/key-options.sh	/^expect_pty_succeed() {$/;"	f
+expect_result_absent	regress/sshcfgparse.sh	/^expect_result_absent() {$/;"	f
+expect_result_present	regress/sshcfgparse.sh	/^expect_result_present() {$/;"	f
+expect_succeed	regress/agent-restrict.sh	/^expect_succeed() {$/;"	f
+expect_succeed_key	regress/agent-restrict.sh	/^expect_succeed_key() {$/;"	f
+expected	regress/unittests/hostkeys/test_iterate.c	/^	const struct expected *expected;$/;"	m	struct:cbctx	typeref:typename:const struct expected *	file:
+expected	regress/unittests/hostkeys/test_iterate.c	/^struct expected {$/;"	s	file:
+expected_full	regress/unittests/hostkeys/test_iterate.c	/^struct expected expected_full[] = {$/;"	v	typeref:struct:expected[]
+explicit_bzero	openbsd-compat/explicit_bzero.c	/^explicit_bzero(void *p, size_t n)$/;"	f	typeref:typename:void
+export_dns_rr	dns.c	/^export_dns_rr(const char *hostname, struct sshkey *key, FILE *f, int generic)$/;"	f	typeref:typename:int
+exportedname	ssh-gss.h	/^	gss_buffer_desc exportedname;$/;"	m	struct:__anon1dbf9ce30208	typeref:typename:gss_buffer_desc
+expose_authinfo	auth-pam.c	/^expose_authinfo(const char *caller)$/;"	f	typeref:typename:void	file:
+expose_userauth_info	servconf.h	/^	int	expose_userauth_info;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+ext_info_c	kex.h	/^	int	ext_info_c;$/;"	m	struct:kex	typeref:typename:int
+ext_name	sftp-server.c	/^	const char *ext_name;	\/* extended request name *\/$/;"	m	struct:sftp_handler	typeref:typename:const char *	file:
+extended	channels.h	/^	struct sshbuf *extended;$/;"	m	struct:Channel	typeref:struct:sshbuf *
+extended_handler_byname	sftp-server.c	/^extended_handler_byname(const char *name)$/;"	f	typeref:typename:const struct sftp_handler *	file:
+extended_handlers	sftp-server.c	/^static const struct sftp_handler extended_handlers[] = {$/;"	v	typeref:typename:const struct sftp_handler[]	file:
+extended_usage	channels.h	/^	int     extended_usage;$/;"	m	struct:Channel	typeref:typename:int
+extensions	sshkey.h	/^	struct sshbuf	*extensions;$/;"	m	struct:sshkey_cert	typeref:struct:sshbuf *
+extra_pad	packet.c	/^	u_char extra_pad;$/;"	m	struct:session_state	typeref:typename:u_char	file:
+extract_salt	hostfile.c	/^extract_salt(const char *s, u_int l, u_char *salt, size_t salt_len)$/;"	f	typeref:typename:int	file:
+exts	sftp-client.c	/^	u_int exts;$/;"	m	struct:sftp_conn	typeref:typename:u_int	file:
+f	monitor.c	/^	int (*f)(struct ssh *, int, struct sshbuf *);$/;"	m	struct:mon_table	typeref:typename:int (*)(struct ssh *,int,struct sshbuf *)	file:
+f_bavail	openbsd-compat/bsd-statvfs.h	/^	fsblkcnt_t    f_bavail;	\/* Number of free blocks available to  *\/$/;"	m	struct:statvfs	typeref:typename:fsblkcnt_t
+f_bavail	sftp-client.h	/^	u_int64_t f_bavail;$/;"	m	struct:sftp_statvfs	typeref:typename:u_int64_t
+f_bfree	openbsd-compat/bsd-statvfs.h	/^	fsblkcnt_t    f_bfree;	\/* Total number of free blocks. *\/$/;"	m	struct:statvfs	typeref:typename:fsblkcnt_t
+f_bfree	sftp-client.h	/^	u_int64_t f_bfree;$/;"	m	struct:sftp_statvfs	typeref:typename:u_int64_t
+f_blocks	openbsd-compat/bsd-statvfs.h	/^	fsblkcnt_t f_blocks;	\/* Total number of blocks on file system in *\/$/;"	m	struct:statvfs	typeref:typename:fsblkcnt_t
+f_blocks	sftp-client.h	/^	u_int64_t f_blocks;$/;"	m	struct:sftp_statvfs	typeref:typename:u_int64_t
+f_bsize	openbsd-compat/bsd-statvfs.h	/^	unsigned long f_bsize;	\/* File system block size. *\/$/;"	m	struct:statvfs	typeref:typename:unsigned long
+f_bsize	sftp-client.h	/^	u_int64_t f_bsize;$/;"	m	struct:sftp_statvfs	typeref:typename:u_int64_t
+f_favail	openbsd-compat/bsd-statvfs.h	/^	fsfilcnt_t    f_favail;	\/* Number of file serial numbers available to *\/$/;"	m	struct:statvfs	typeref:typename:fsfilcnt_t
+f_favail	sftp-client.h	/^	u_int64_t f_favail;$/;"	m	struct:sftp_statvfs	typeref:typename:u_int64_t
+f_ffree	openbsd-compat/bsd-statvfs.h	/^	fsfilcnt_t    f_ffree;	\/* Total number of free file serial numbers. *\/$/;"	m	struct:statvfs	typeref:typename:fsfilcnt_t
+f_ffree	sftp-client.h	/^	u_int64_t f_ffree;$/;"	m	struct:sftp_statvfs	typeref:typename:u_int64_t
+f_files	openbsd-compat/bsd-statvfs.h	/^	fsfilcnt_t    f_files;	\/* Total number of file serial numbers. *\/$/;"	m	struct:statvfs	typeref:typename:fsfilcnt_t
+f_files	sftp-client.h	/^	u_int64_t f_files;$/;"	m	struct:sftp_statvfs	typeref:typename:u_int64_t
+f_flag	openbsd-compat/bsd-statvfs.h	/^	unsigned long f_flag;	\/* BBit mask of f_flag values. *\/$/;"	m	struct:statvfs	typeref:typename:unsigned long
+f_flag	sftp-client.h	/^	u_int64_t f_flag;$/;"	m	struct:sftp_statvfs	typeref:typename:u_int64_t
+f_frsize	openbsd-compat/bsd-statvfs.h	/^	unsigned long f_frsize;	\/* Fundamental file system block size. *\/$/;"	m	struct:statvfs	typeref:typename:unsigned long
+f_frsize	sftp-client.h	/^	u_int64_t f_frsize;$/;"	m	struct:sftp_statvfs	typeref:typename:u_int64_t
+f_fsid	openbsd-compat/bsd-statvfs.h	/^	unsigned long f_fsid;	\/* File system ID. *\/$/;"	m	struct:statvfs	typeref:typename:unsigned long
+f_fsid	sftp-client.h	/^	u_int64_t f_fsid;$/;"	m	struct:sftp_statvfs	typeref:typename:u_int64_t
+f_namemax	openbsd-compat/bsd-statvfs.h	/^	unsigned long f_namemax;\/*  Maximum filename length. *\/$/;"	m	struct:statvfs	typeref:typename:unsigned long
+f_namemax	sftp-client.h	/^	u_int64_t f_namemax;$/;"	m	struct:sftp_statvfs	typeref:typename:u_int64_t
+fail	openbsd-compat/regress/closefromtest.c	/^fail(char *msg)$/;"	f	typeref:typename:void
+fail	openbsd-compat/regress/opensslvertest.c	/^fail(long hver, long lver, int result)$/;"	f	typeref:typename:void
+fail	openbsd-compat/regress/snprintftest.c	/^fail(const char *m)$/;"	f	typeref:typename:void	file:
+fail	openbsd-compat/regress/strduptest.c	/^static int fail = 0;$/;"	v	typeref:typename:int	file:
+fail	openbsd-compat/regress/strtonumtest.c	/^int fail;$/;"	v	typeref:typename:int
+fail	openbsd-compat/regress/utimensattest.c	/^fail(char *msg, long expect, long got)$/;"	f	typeref:typename:void	file:
+fail	regress/test-exec.sh	/^fail ()$/;"	f
+failed	openbsd-compat/regress/snprintftest.c	/^static int failed = 0;$/;"	v	typeref:typename:int	file:
+failed_choice	kex.h	/^	char	*failed_choice;$/;"	m	struct:kex	typeref:typename:char *
+failures	auth.h	/^	int		 failures;$/;"	m	struct:Authctxt	typeref:typename:int
+fake_password	auth-pam.c	/^fake_password(const char *wire_password)$/;"	f	typeref:typename:char *	file:
+fakepw	auth.c	/^fakepw(void)$/;"	f	typeref:struct:passwd *
+family	regress/netcat.c	/^int family = AF_UNSPEC;$/;"	v	typeref:typename:int
+fast	regress/unittests/test_helper/test_helper.c	/^static int fast = 0;$/;"	v	typeref:typename:int	file:
+fatal	log.h	/^#define fatal(/;"	d
+fatal	regress/check-perm.c	/^fatal(const char *fmt, ...)$/;"	f	typeref:typename:void	file:
+fatal	regress/test-exec.sh	/^fatal ()$/;"	f
+fatal_f	log.h	/^#define fatal_f(/;"	d
+fatal_fr	log.h	/^#define fatal_fr(/;"	d
+fatal_r	log.h	/^#define fatal_r(/;"	d
+fchmodat	openbsd-compat/bsd-misc.c	/^fchmodat(int fd, const char *path, mode_t mode, int flag)$/;"	f	typeref:typename:int
+fchownat	openbsd-compat/bsd-misc.c	/^fchownat(int fd, const char *path, uid_t owner, gid_t group, int flag)$/;"	f	typeref:typename:int
+fd	openbsd-compat/bsd-poll.h	/^	int	fd;$/;"	m	struct:pollfd	typeref:typename:int
+fd	sftp-server.c	/^	int fd;$/;"	m	struct:Handle	typeref:typename:int	file:
+fd	ssh-agent.c	/^	int fd;$/;"	m	struct:socket_entry	typeref:typename:int	file:
+fd	ssh-pkcs11-client.c	/^static int fd = -1;$/;"	v	typeref:typename:int	file:
+fd_in	sftp-client.c	/^	int fd_in;$/;"	m	struct:sftp_conn	typeref:typename:int	file:
+fd_mask	defines.h	/^ typedef unsigned long int	fd_mask;$/;"	t	typeref:typename:unsigned long int
+fd_out	sftp-client.c	/^	int fd_out;$/;"	m	struct:sftp_conn	typeref:typename:int	file:
+fd_ready	channels.c	/^fd_ready(Channel *c, int p, struct pollfd *pfds, u_int npfd, int fd,$/;"	f	typeref:typename:void	file:
+fdcon	ssh-keyscan.c	/^con *fdcon;$/;"	v	typeref:typename:con *
+fdlim_get	ssh-keyscan.c	/^fdlim_get(int hard)$/;"	f	typeref:typename:int	file:
+fdlim_set	ssh-keyscan.c	/^fdlim_set(int lim)$/;"	f	typeref:typename:int	file:
+fdpass	regress/netcat.c	/^fdpass(int nfd)$/;"	f	typeref:typename:void
+fe25519	fe25519.h	/^#define fe25519 /;"	d
+fe25519	fe25519.h	/^fe25519;$/;"	t	typeref:struct:__anon1a06beec0108
+fe25519_add	fe25519.c	/^void fe25519_add(fe25519 *r, const fe25519 *x, const fe25519 *y)$/;"	f	typeref:typename:void
+fe25519_add	fe25519.h	/^#define fe25519_add /;"	d
+fe25519_cmov	fe25519.c	/^void fe25519_cmov(fe25519 *r, const fe25519 *x, unsigned char b)$/;"	f	typeref:typename:void
+fe25519_cmov	fe25519.h	/^#define fe25519_cmov /;"	d
+fe25519_freeze	fe25519.c	/^void fe25519_freeze(fe25519 *r) $/;"	f	typeref:typename:void
+fe25519_freeze	fe25519.h	/^#define fe25519_freeze /;"	d
+fe25519_getparity	fe25519.c	/^unsigned char fe25519_getparity(const fe25519 *x)$/;"	f	typeref:typename:unsigned char
+fe25519_getparity	fe25519.h	/^#define fe25519_getparity /;"	d
+fe25519_invert	fe25519.c	/^void fe25519_invert(fe25519 *r, const fe25519 *x)$/;"	f	typeref:typename:void
+fe25519_invert	fe25519.h	/^#define fe25519_invert /;"	d
+fe25519_iseq_vartime	fe25519.c	/^int fe25519_iseq_vartime(const fe25519 *x, const fe25519 *y)$/;"	f	typeref:typename:int
+fe25519_iseq_vartime	fe25519.h	/^#define fe25519_iseq_vartime /;"	d
+fe25519_iszero	fe25519.c	/^int fe25519_iszero(const fe25519 *x)$/;"	f	typeref:typename:int
+fe25519_iszero	fe25519.h	/^#define fe25519_iszero /;"	d
+fe25519_mul	fe25519.c	/^void fe25519_mul(fe25519 *r, const fe25519 *x, const fe25519 *y)$/;"	f	typeref:typename:void
+fe25519_mul	fe25519.h	/^#define fe25519_mul /;"	d
+fe25519_neg	fe25519.c	/^void fe25519_neg(fe25519 *r, const fe25519 *x)$/;"	f	typeref:typename:void
+fe25519_neg	fe25519.h	/^#define fe25519_neg /;"	d
+fe25519_pack	fe25519.c	/^void fe25519_pack(unsigned char r[32], const fe25519 *x)$/;"	f	typeref:typename:void
+fe25519_pack	fe25519.h	/^#define fe25519_pack /;"	d
+fe25519_pow2523	fe25519.c	/^void fe25519_pow2523(fe25519 *r, const fe25519 *x)$/;"	f	typeref:typename:void
+fe25519_pow2523	fe25519.h	/^#define fe25519_pow2523 /;"	d
+fe25519_setone	fe25519.c	/^void fe25519_setone(fe25519 *r)$/;"	f	typeref:typename:void
+fe25519_setone	fe25519.h	/^#define fe25519_setone /;"	d
+fe25519_setzero	fe25519.c	/^void fe25519_setzero(fe25519 *r)$/;"	f	typeref:typename:void
+fe25519_setzero	fe25519.h	/^#define fe25519_setzero /;"	d
+fe25519_square	fe25519.c	/^void fe25519_square(fe25519 *r, const fe25519 *x)$/;"	f	typeref:typename:void
+fe25519_square	fe25519.h	/^#define fe25519_square /;"	d
+fe25519_sub	fe25519.c	/^void fe25519_sub(fe25519 *r, const fe25519 *x, const fe25519 *y)$/;"	f	typeref:typename:void
+fe25519_sub	fe25519.h	/^#define fe25519_sub /;"	d
+fe25519_unpack	fe25519.c	/^void fe25519_unpack(fe25519 *r, const unsigned char x[32])$/;"	f	typeref:typename:void
+fe25519_unpack	fe25519.h	/^#define fe25519_unpack /;"	d
+fetch_pam_child_environment	auth-pam.c	/^fetch_pam_child_environment(void)$/;"	f	typeref:typename:char **
+fetch_pam_environment	auth-pam.c	/^fetch_pam_environment(void)$/;"	f	typeref:typename:char **
+fetch_windows_environment	openbsd-compat/bsd-cygwin_util.c	/^fetch_windows_environment(void)$/;"	f	typeref:typename:char **
+fflush	openbsd-compat/bsd-misc.h	/^# define fflush(/;"	d
+fgrep	regress/hostkey-rotate.sh	/^	fgrep()$/;"	f
+fid	mux.c	/^	int fid;	\/* forward id *\/$/;"	m	struct:mux_channel_confirm_ctx	typeref:typename:int	file:
+fido_assert_set_clientdata	sk-usbhid.c	/^fido_assert_set_clientdata(fido_assert_t *assert, const u_char *ptr, size_t len)$/;"	f	typeref:typename:int	file:
+fido_cred_prot	sk-usbhid.c	/^#define fido_cred_prot(/;"	d	file:
+fido_cred_set_clientdata	sk-usbhid.c	/^fido_cred_set_clientdata(fido_cred_t *cred, const u_char *ptr, size_t len)$/;"	f	typeref:typename:int	file:
+fido_cred_set_prot	sk-usbhid.c	/^#define fido_cred_set_prot(/;"	d	file:
+fido_dev_get_touch_begin	sk-usbhid.c	/^#define fido_dev_get_touch_begin(/;"	d	file:
+fido_dev_get_touch_status	sk-usbhid.c	/^#define fido_dev_get_touch_status(/;"	d	file:
+fido_dev_is_winhello	sk-usbhid.c	/^fido_dev_is_winhello(const fido_dev_t *fdev)$/;"	f	typeref:typename:bool	file:
+fido_dev_supports_cred_prot	sk-usbhid.c	/^#define fido_dev_supports_cred_prot(/;"	d	file:
+fidoerr_to_skerr	sk-usbhid.c	/^fidoerr_to_skerr(int fidoerr)$/;"	f	typeref:typename:int	file:
+file	hostfile.h	/^	char *file;$/;"	m	struct:hostkey_entry	typeref:typename:char *
+file	progressmeter.c	/^static const char *file;	\/* name of the file being transferred *\/$/;"	v	typeref:typename:const char *	file:
+file-tests	Makefile.in	/^interop-tests t-exec file-tests: regress-prep regress-binaries $(TARGETS)$/;"	t
+file-tests	regress/Makefile	/^file-tests: $(REGRESS_TARGETS)$/;"	t
+filename	servconf.h	/^	char *filename;$/;"	m	struct:include_item	typeref:typename:char *
+filename	sftp-client.h	/^	char *filename;$/;"	m	struct:SFTP_DIRENT	typeref:typename:char *
+filename	ssh-gss.h	/^	char *filename;$/;"	m	struct:__anon1dbf9ce30108	typeref:typename:char *
+filename	sshconnect2.c	/^	char	*filename;		\/* comment for agent-only keys *\/$/;"	m	struct:identity	typeref:typename:char *	file:
+fill_attestation_blob	ssh-sk.c	/^fill_attestation_blob(const struct sk_enroll_response *resp,$/;"	f	typeref:typename:int	file:
+fill_default_options	readconf.c	/^fill_default_options(Options * options)$/;"	f	typeref:typename:int
+fill_default_options_for_canonicalization	readconf.c	/^fill_default_options_for_canonicalization(Options *options)$/;"	f	typeref:typename:void
+fill_default_server_options	servconf.c	/^fill_default_server_options(ServerOptions *options)$/;"	f	typeref:typename:void
+fillbuf	regress/netcat.c	/^fillbuf(int fd, unsigned char *buf, size_t *bufpos)$/;"	f	typeref:typename:ssize_t
+filter_cleanup	channels.h	/^	channel_filter_cleanup_fn *filter_cleanup;$/;"	m	struct:Channel	typeref:typename:channel_filter_cleanup_fn *
+filter_ctx	channels.h	/^	void			*filter_ctx;$/;"	m	struct:Channel	typeref:typename:void *
+filter_list	match.c	/^filter_list(const char *proposal, const char *filter, int denylist)$/;"	f	typeref:typename:char *	file:
+finalise_cert_exts	ssh-keygen.c	/^finalise_cert_exts(void)$/;"	f	typeref:typename:void	file:
+find_brace	scp.c	/^find_brace(const char *pattern, int *startp, int *endp)$/;"	f	typeref:typename:int	file:
+find_by_key_ctx	sshconnect.c	/^struct find_by_key_ctx {$/;"	s	file:
+find_host	ssh-keygen.c	/^	int find_host;		\/* Search for specific hostname *\/$/;"	m	struct:known_hosts_ctx	typeref:typename:int	file:
+fingerprint_b64	sshkey.c	/^fingerprint_b64(const char *alg, u_char *dgst_raw, size_t dgst_raw_len)$/;"	f	typeref:typename:char *	file:
+fingerprint_bubblebabble	sshkey.c	/^fingerprint_bubblebabble(u_char *dgst_raw, size_t dgst_raw_len)$/;"	f	typeref:typename:char *	file:
+fingerprint_hash	readconf.h	/^	int	 fingerprint_hash;$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+fingerprint_hash	servconf.h	/^	int	fingerprint_hash;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+fingerprint_hash	ssh-add.c	/^static int fingerprint_hash = SSH_FP_HASH_DEFAULT;$/;"	v	typeref:typename:int	file:
+fingerprint_hash	ssh-agent.c	/^static int fingerprint_hash = SSH_FP_HASH_DEFAULT;$/;"	v	typeref:typename:int	file:
+fingerprint_hash	ssh-keygen.c	/^static int fingerprint_hash = SSH_FP_HASH_DEFAULT;$/;"	v	typeref:typename:int	file:
+fingerprint_hex	sshkey.c	/^fingerprint_hex(const char *alg, u_char *dgst_raw, size_t dgst_raw_len)$/;"	f	typeref:typename:char *	file:
+fingerprint_one_key	ssh-keygen.c	/^fingerprint_one_key(const struct sshkey *public, const char *comment)$/;"	f	typeref:typename:void	file:
+fingerprint_private	ssh-keygen.c	/^fingerprint_private(const char *path)$/;"	f	typeref:typename:void	file:
+fingerprint_randomart	sshkey.c	/^fingerprint_randomart(const char *alg, u_char *dgst_raw, size_t dgst_raw_len,$/;"	f	typeref:typename:char *	file:
+finish_pam	auth-pam.c	/^finish_pam(void)$/;"	f	typeref:typename:void
+firmware_version	pkcs11.h	/^  struct ck_version firmware_version;$/;"	m	struct:ck_slot_info	typeref:struct:ck_version
+firmware_version	pkcs11.h	/^  struct ck_version firmware_version;$/;"	m	struct:ck_token_info	typeref:struct:ck_version
+firmware_version	pkcs11.h	/^#define firmware_version /;"	d
+first_alg	sshconnect2.c	/^first_alg(const char *algs)$/;"	f	typeref:typename:char *	file:
+first_unused_handle	sftp-server.c	/^static int first_unused_handle = -1;$/;"	v	typeref:typename:int	file:
+flag	openbsd-compat/getopt.h	/^	int *flag;$/;"	m	struct:option	typeref:typename:int *
+flags	channels.h	/^	int     flags;		\/* close sent\/rcvd *\/$/;"	m	struct:Channel	typeref:typename:int
+flags	cipher.c	/^	u_int	flags;$/;"	m	struct:sshcipher	typeref:typename:u_int	file:
+flags	clientloop.c	/^	unsigned int flags;$/;"	m	struct:escape_help_text	typeref:typename:unsigned int	file:
+flags	kex.h	/^	u_int	flags;$/;"	m	struct:kex	typeref:typename:u_int
+flags	krl.c	/^	u_int64_t flags;$/;"	m	struct:ssh_krl	typeref:typename:u_int64_t	file:
+flags	monitor.c	/^	int flags;$/;"	m	struct:mon_table	typeref:typename:int	file:
+flags	pkcs11.h	/^  ck_flags_t flags;$/;"	m	struct:ck_c_initialize_args	typeref:typename:ck_flags_t
+flags	pkcs11.h	/^  ck_flags_t flags;$/;"	m	struct:ck_info	typeref:typename:ck_flags_t
+flags	pkcs11.h	/^  ck_flags_t flags;$/;"	m	struct:ck_mechanism_info	typeref:typename:ck_flags_t
+flags	pkcs11.h	/^  ck_flags_t flags;$/;"	m	struct:ck_session_info	typeref:typename:ck_flags_t
+flags	pkcs11.h	/^  ck_flags_t flags;$/;"	m	struct:ck_slot_info	typeref:typename:ck_flags_t
+flags	pkcs11.h	/^  ck_flags_t flags;$/;"	m	struct:ck_token_info	typeref:typename:ck_flags_t
+flags	regress/unittests/hostkeys/test_iterate.c	/^	int flags;$/;"	m	struct:cbctx	typeref:typename:int	file:
+flags	servconf.c	/^	u_int flags;$/;"	m	struct:__anon9b33d3bc0208	typeref:typename:u_int	file:
+flags	sftp-common.h	/^	u_int32_t	flags;$/;"	m	struct:Attrib	typeref:typename:u_int32_t
+flags	sftp-server.c	/^	int flags;$/;"	m	struct:Handle	typeref:typename:int	file:
+flags	sk-api.h	/^	uint8_t flags;$/;"	m	struct:sk_enroll_response	typeref:typename:uint8_t
+flags	sk-api.h	/^	uint8_t flags;$/;"	m	struct:sk_resident_key	typeref:typename:uint8_t
+flags	sk-api.h	/^	uint8_t flags;$/;"	m	struct:sk_sign_response	typeref:typename:uint8_t
+flags	sshkey.h	/^	int	 flags;$/;"	m	struct:sshkey	typeref:typename:int
+flags_from_portable	sftp-server.c	/^flags_from_portable(int pflags)$/;"	f	typeref:typename:int	file:
+flock	openbsd-compat/bsd-flock.c	/^flock(int fd, int op)$/;"	f	typeref:typename:int
+fmprintf	utf8.c	/^fmprintf(FILE *stream, const char *fmt, ...)$/;"	f	typeref:typename:int
+fmt_intarg	readconf.c	/^fmt_intarg(OpCodes code, int val)$/;"	f	typeref:typename:const char *	file:
+fmt_intarg	servconf.c	/^fmt_intarg(ServerOpCodes code, int val)$/;"	f	typeref:typename:const char *	file:
+fmt_multistate_int	readconf.c	/^fmt_multistate_int(int val, const struct multistate *m)$/;"	f	typeref:typename:const char *	file:
+fmt_multistate_int	servconf.c	/^fmt_multistate_int(int val, const struct multistate *m)$/;"	f	typeref:typename:const char *	file:
+fmt_scaled	openbsd-compat/fmt_scaled.c	/^fmt_scaled(long long number, char *result)$/;"	f	typeref:typename:int
+fmt_time	moduli.c	/^fmt_time(time_t seconds)$/;"	f	typeref:typename:char *	file:
+fmt_timeframe	misc.c	/^fmt_timeframe(time_t t)$/;"	f	typeref:typename:const char *
+fmtfp	openbsd-compat/bsd-snprintf.c	/^fmtfp (char *buffer, size_t *currlen, size_t maxlen,$/;"	f	typeref:typename:int	file:
+fmtint	openbsd-compat/bsd-snprintf.c	/^fmtint(char *buffer, size_t *currlen, size_t maxlen,$/;"	f	typeref:typename:int	file:
+fmtstr	openbsd-compat/bsd-snprintf.c	/^fmtstr(char *buffer, size_t *currlen, size_t maxlen,$/;"	f	typeref:typename:int	file:
+fnmatch	openbsd-compat/fnmatch.c	/^int fnmatch(const char *pattern, const char *string, int flags)$/;"	f	typeref:typename:int
+fnmatch_ch	openbsd-compat/fnmatch.c	/^static int fnmatch_ch(const char **pattern, const char **string, int flags)$/;"	f	typeref:typename:int	file:
+for_align	mac.c	/^		u_int64_t for_align;$/;"	m	union:mac_compute::__anon0fea4b47010a	typeref:typename:u_int64_t	file:
+force_command	auth-options.h	/^	char *force_command;$/;"	m	struct:sshauthopt	typeref:typename:char *
+force_drain	channels.h	/^	int     force_drain;	\/* force close on iEOF *\/$/;"	m	struct:Channel	typeref:typename:int
+force_pwchange	auth.h	/^	int		 force_pwchange;$/;"	m	struct:Authctxt	typeref:typename:int
+force_tun_device	auth-options.h	/^	int force_tun_device;$/;"	m	struct:sshauthopt	typeref:typename:int
+forced	session.h	/^	int	forced;$/;"	m	struct:Session	typeref:typename:int
+fork_after_authentication	readconf.h	/^	int	fork_after_authentication;$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+fork_postauth	ssh.c	/^fork_postauth(void)$/;"	f	typeref:typename:void	file:
+format_absolute_time	misc.c	/^format_absolute_time(uint64_t t, char *buf, size_t len)$/;"	f	typeref:typename:void
+format_forward	mux.c	/^format_forward(u_int ftype, struct Forward *fwd)$/;"	f	typeref:typename:char *	file:
+format_identity	sshconnect2.c	/^format_identity(Identity *id)$/;"	f	typeref:typename:char *	file:
+format_key	auth2-pubkey.c	/^format_key(const struct sshkey *key)$/;"	f	typeref:typename:char *	file:
+format_listen_addrs	servconf.c	/^format_listen_addrs(struct listenaddr *la)$/;"	f	typeref:typename:char *	file:
+format_method_key	auth.c	/^format_method_key(Authctxt *authctxt)$/;"	f	typeref:typename:char *	file:
+format_rate	progressmeter.c	/^format_rate(char *buf, int size, off_t bytes)$/;"	f	typeref:typename:void	file:
+format_size	progressmeter.c	/^format_size(char *buf, int size, off_t bytes)$/;"	f	typeref:typename:void	file:
+format_timestamp	krl.c	/^format_timestamp(u_int64_t timestamp, char *ts, size_t nts)$/;"	f	typeref:typename:void	file:
+forward_agent	readconf.h	/^	int     forward_agent;	\/* Forward authentication agent. *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+forward_agent_sock_path	readconf.h	/^	char   *forward_agent_sock_path; \/* Optional path of the agent. *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:char *
+forward_agent_sock_path	ssh.c	/^char *forward_agent_sock_path = NULL;$/;"	v	typeref:typename:char *
+forward_confirms_pending	ssh.c	/^static int forward_confirms_pending = -1;$/;"	v	typeref:typename:int	file:
+forward_equals	misc.c	/^forward_equals(const struct Forward *a, const struct Forward *b)$/;"	f	typeref:typename:int
+forward_x11	readconf.h	/^	int     forward_x11;	\/* Forward X11 display. *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+forward_x11_timeout	readconf.h	/^	int     forward_x11_timeout;	\/* Expiration for Cookies *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+forward_x11_trusted	readconf.h	/^	int     forward_x11_trusted;	\/* Trust Forward X11 display. *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+forwarded	ssh-agent.c	/^	int forwarded;$/;"	m	struct:hostkey_sid	typeref:typename:int	file:
+forwarding_success	ssh.c	/^forwarding_success(void)$/;"	f	typeref:typename:void	file:
+found_key	ssh-keygen.c	/^	int found_key;		\/* For find\/delete, host was found *\/$/;"	m	struct:known_hosts_ctx	typeref:typename:int	file:
+found_one	ssh-keyscan.c	/^int found_one = 0;		\/* Successfully found a key *\/$/;"	v	typeref:typename:int
+fourbyte_memmem	openbsd-compat/memmem.c	/^fourbyte_memmem(const unsigned char *h, size_t k, const unsigned char *n)$/;"	f	typeref:typename:char *	file:
+free_ctx	auth.h	/^	void	(*free_ctx)(void *ctx);$/;"	m	struct:KbdintDevice	typeref:typename:void (*)(void * ctx)
+free_dest_constraint_hop	ssh-agent.c	/^free_dest_constraint_hop(struct dest_constraint_hop *dch)$/;"	f	typeref:typename:void	file:
+free_dest_constraints	ssh-agent.c	/^free_dest_constraints(struct dest_constraint *dcs, size_t ndcs)$/;"	f	typeref:typename:void	file:
+free_dns_query	openbsd-compat/getrrsetbyname.c	/^free_dns_query(struct dns_query *p)$/;"	f	typeref:typename:void	file:
+free_dns_response	openbsd-compat/getrrsetbyname.c	/^free_dns_response(struct dns_response *p)$/;"	f	typeref:typename:void	file:
+free_dns_rr	openbsd-compat/getrrsetbyname.c	/^free_dns_rr(struct dns_rr *p)$/;"	f	typeref:typename:void	file:
+free_hostkeys	hostfile.c	/^free_hostkeys(struct hostkeys *hostkeys)$/;"	f	typeref:typename:void
+free_identity	ssh-agent.c	/^free_identity(Identity *id)$/;"	f	typeref:typename:void	file:
+free_options	readconf.c	/^free_options(Options *o)$/;"	f	typeref:typename:void
+free_pam_environment	auth-pam.c	/^free_pam_environment(char **env)$/;"	f	typeref:typename:void
+free_private_memory	pkcs11.h	/^  unsigned long free_private_memory;$/;"	m	struct:ck_token_info	typeref:typename:unsigned long
+free_private_memory	pkcs11.h	/^#define free_private_memory /;"	d
+free_ptr	umac.c	/^    void *free_ptr;          \/* Address to free this struct via          *\/$/;"	m	struct:umac_ctx	typeref:typename:void *	file:
+free_public_memory	pkcs11.h	/^  unsigned long free_public_memory;$/;"	m	struct:ck_token_info	typeref:typename:unsigned long
+free_public_memory	pkcs11.h	/^#define free_public_memory /;"	d
+free_sftp_dirents	sftp-client.c	/^void free_sftp_dirents(SFTP_DIRENT **s)$/;"	f	typeref:typename:void
+free_windows_environment	openbsd-compat/bsd-cygwin_util.c	/^free_windows_environment(char **p)$/;"	f	typeref:typename:void
+freeaddrinfo	openbsd-compat/fake-rfc2553.c	/^freeaddrinfo(struct addrinfo *ai)$/;"	f	typeref:typename:void
+freeaddrinfo	openbsd-compat/fake-rfc2553.h	/^#define freeaddrinfo(/;"	d
+freeargs	misc.c	/^freeargs(arglist *args)$/;"	f	typeref:typename:void
+freenames	sftp-usergroup.c	/^freenames(char **names, u_int nnames)$/;"	f	typeref:typename:void	file:
+freerrset	openbsd-compat/getrrsetbyname-ldns.c	/^freerrset(struct rrsetinfo *rrset)$/;"	f	typeref:typename:void
+freerrset	openbsd-compat/getrrsetbyname.c	/^freerrset(struct rrsetinfo *rrset)$/;"	f	typeref:typename:void
+freeze	smult_curve25519_ref.c	/^static void freeze(unsigned int a[32])$/;"	f	typeref:typename:void	file:
+freezero	openbsd-compat/freezero.c	/^freezero(void *ptr, size_t sz)$/;"	f	typeref:typename:void
+from	authfd.h	/^	struct dest_constraint_hop from;$/;"	m	struct:dest_constraint	typeref:struct:dest_constraint_hop
+fsblkcnt_t	openbsd-compat/bsd-statvfs.h	/^typedef unsigned long fsblkcnt_t;$/;"	t	typeref:typename:unsigned long
+fsfilcnt_t	openbsd-compat/bsd-statvfs.h	/^typedef unsigned long fsfilcnt_t;$/;"	t	typeref:typename:unsigned long
+fstatvfs	openbsd-compat/bsd-statvfs.c	/^int fstatvfs(int fd, struct statvfs *buf)$/;"	f	typeref:typename:int
+fudge_closedir	sftp-glob.c	/^fudge_closedir(struct SFTP_OPENDIR *od)$/;"	f	typeref:typename:void	file:
+fudge_lstat	sftp-glob.c	/^fudge_lstat(const char *path, struct stat *st)$/;"	f	typeref:typename:int	file:
+fudge_opendir	sftp-glob.c	/^fudge_opendir(const char *path)$/;"	f	typeref:typename:void *	file:
+fudge_readdir	sftp-glob.c	/^fudge_readdir(struct SFTP_OPENDIR *od)$/;"	f	typeref:struct:dirent *	file:
+fudge_stat	sftp-glob.c	/^fudge_stat(const char *path, struct stat *st)$/;"	f	typeref:typename:int	file:
+function_list	ssh-pkcs11.c	/^	CK_FUNCTION_LIST	*function_list;$/;"	m	struct:pkcs11_provider	typeref:typename:CK_FUNCTION_LIST *	file:
+fuzz	regress/unittests/test_helper/fuzz.c	/^struct fuzz {$/;"	s	file:
+fuzz_b64chars	regress/unittests/test_helper/fuzz.c	/^static const char fuzz_b64chars[] =$/;"	v	typeref:typename:const char[]	file:
+fuzz_begin	regress/unittests/test_helper/fuzz.c	/^fuzz_begin(u_int strategies, const void *p, size_t l)$/;"	f	typeref:struct:fuzz *
+fuzz_cleanup	regress/unittests/test_helper/fuzz.c	/^fuzz_cleanup(struct fuzz *fuzz)$/;"	f	typeref:typename:void
+fuzz_done	regress/unittests/test_helper/fuzz.c	/^fuzz_done(struct fuzz *fuzz)$/;"	f	typeref:typename:int
+fuzz_dump	regress/unittests/test_helper/fuzz.c	/^fuzz_dump(struct fuzz *fuzz)$/;"	f	typeref:typename:void
+fuzz_fmt	regress/unittests/test_helper/fuzz.c	/^fuzz_fmt(struct fuzz *fuzz, char *s, size_t n)$/;"	f	typeref:typename:int	file:
+fuzz_len	regress/unittests/test_helper/fuzz.c	/^fuzz_len(struct fuzz *fuzz)$/;"	f	typeref:typename:size_t
+fuzz_matches_original	regress/unittests/test_helper/fuzz.c	/^fuzz_matches_original(struct fuzz *fuzz)$/;"	f	typeref:typename:int
+fuzz_next	regress/unittests/test_helper/fuzz.c	/^fuzz_next(struct fuzz *fuzz)$/;"	f	typeref:typename:void
+fuzz_ntop	regress/unittests/test_helper/fuzz.c	/^fuzz_ntop(u_int n)$/;"	f	typeref:typename:const char *	file:
+fuzz_ptr	regress/unittests/test_helper/fuzz.c	/^fuzz_ptr(struct fuzz *fuzz)$/;"	f	typeref:typename:u_char *
+fuzz_strategy_done	regress/unittests/test_helper/fuzz.c	/^fuzz_strategy_done(struct fuzz *fuzz)$/;"	f	typeref:typename:int	file:
+fuzz_ullong	regress/unittests/test_helper/fuzz.c	/^typedef unsigned long long fuzz_ullong;$/;"	t	typeref:typename:unsigned long long	file:
+fuzzed	regress/unittests/test_helper/fuzz.c	/^	u_char *fuzzed;$/;"	m	struct:fuzz	typeref:typename:u_char *	file:
+fwd_ident	channels.c	/^fwd_ident(int who, int where)$/;"	f	typeref:typename:const char *	file:
+fwd_opts	readconf.h	/^	struct ForwardOptions fwd_opts;	\/* forwarding options *\/$/;"	m	struct:__anon7d31da1d0108	typeref:struct:ForwardOptions
+fwd_opts	servconf.h	/^	struct ForwardOptions fwd_opts;	\/* forwarding options *\/$/;"	m	struct:__anon9b33d3c10108	typeref:struct:ForwardOptions
+fwd_perm_clear	channels.c	/^fwd_perm_clear(struct permission *perm)$/;"	f	typeref:typename:void	file:
+fwdarg	readconf.c	/^struct fwdarg {$/;"	s	file:
+fx2txt	sftp-common.c	/^fx2txt(int status)$/;"	f	typeref:typename:const char *
+g	dh.h	/^	BIGNUM *g;$/;"	m	struct:dhgroup	typeref:typename:BIGNUM *
+g_Ctoc	openbsd-compat/glob.c	/^g_Ctoc(const Char *str, char *buf, size_t len)$/;"	f	typeref:typename:int	file:
+g_charclass	openbsd-compat/glob.c	/^g_charclass(const Char **patternp, Char **bufnextp)$/;"	f	typeref:typename:int	file:
+g_lstat	openbsd-compat/glob.c	/^g_lstat(Char *fn, struct stat *sb, glob_t *pglob)$/;"	f	typeref:typename:int	file:
+g_opendir	openbsd-compat/glob.c	/^g_opendir(Char *str, glob_t *pglob)$/;"	f	typeref:typename:DIR *	file:
+g_stat	openbsd-compat/glob.c	/^g_stat(Char *fn, struct stat *sb, glob_t *pglob)$/;"	f	typeref:typename:int	file:
+g_strchr	openbsd-compat/glob.c	/^g_strchr(const Char *str, int ch)$/;"	f	typeref:typename:Char *	file:
+g_strncmp	openbsd-compat/glob.c	/^g_strncmp(const Char *s1, const char *s2, size_t n)$/;"	f	typeref:typename:int	file:
+ga_free	groupaccess.c	/^ga_free(void)$/;"	f	typeref:typename:void
+ga_init	groupaccess.c	/^ga_init(const char *user, gid_t base)$/;"	f	typeref:typename:int
+ga_match	groupaccess.c	/^ga_match(char * const *groups, int n)$/;"	f	typeref:typename:int
+ga_match_pattern_list	groupaccess.c	/^ga_match_pattern_list(const char *group_pattern)$/;"	f	typeref:typename:int
+gai_strerror	openbsd-compat/fake-rfc2553.c	/^gai_strerror(int err)$/;"	f	typeref:typename:const char *
+gai_strerror	openbsd-compat/fake-rfc2553.h	/^#define gai_strerror(/;"	d
+gateway_ports	misc.h	/^	int	 gateway_ports; \/* Allow remote connects to forwarded ports. *\/$/;"	m	struct:ForwardOptions	typeref:typename:int
+gcd	openbsd-compat/getopt_long.c	/^gcd(int a, int b)$/;"	f	typeref:typename:int	file:
+ge	fe25519.c	/^static crypto_uint32 ge(crypto_uint32 a,crypto_uint32 b) \/* 16-bit inputs *\/$/;"	f	typeref:typename:crypto_uint32	file:
+ge25519	ge25519.h	/^#define ge25519 /;"	d
+ge25519	ge25519.h	/^} ge25519;$/;"	t	typeref:struct:__anon8e832fed0108
+ge25519_aff	ge25519.c	/^} ge25519_aff;$/;"	t	typeref:struct:__anon8e832fe80308	file:
+ge25519_base	ge25519.c	/^const ge25519 ge25519_base = {{{0x1A, 0xD5, 0x25, 0x8F, 0x60, 0x2D, 0x56, 0xC9, 0xB2, 0xA7, 0x25/;"	v	typeref:typename:const ge25519
+ge25519_base	ge25519.h	/^#define ge25519_base /;"	d
+ge25519_base_multiples_affine	ge25519.c	/^static const ge25519_aff ge25519_base_multiples_affine[425] = {$/;"	v	typeref:typename:const ge25519_aff[425]	file:
+ge25519_double_scalarmult_vartime	ge25519.c	/^void ge25519_double_scalarmult_vartime(ge25519_p3 *r, const ge25519_p3 *p1, const sc25519 *s1, c/;"	f	typeref:typename:void
+ge25519_double_scalarmult_vartime	ge25519.h	/^#define ge25519_double_scalarmult_vartime /;"	d
+ge25519_ec2d	ge25519.c	/^static const fe25519 ge25519_ec2d = {{0x59, 0xF1, 0xB2, 0x26, 0x94, 0x9B, 0xD6, 0xEB, 0x56, 0xB1/;"	v	typeref:typename:const fe25519	file:
+ge25519_ecd	ge25519.c	/^static const fe25519 ge25519_ecd = {{0xA3, 0x78, 0x59, 0x13, 0xCA, 0x4D, 0xEB, 0x75, 0xAB, 0xD8,/;"	v	typeref:typename:const fe25519	file:
+ge25519_isneutral_vartime	ge25519.c	/^int ge25519_isneutral_vartime(const ge25519_p3 *p)$/;"	f	typeref:typename:int
+ge25519_isneutral_vartime	ge25519.h	/^#define ge25519_isneutral_vartime /;"	d
+ge25519_mixadd2	ge25519.c	/^static void ge25519_mixadd2(ge25519_p3 *r, const ge25519_aff *q)$/;"	f	typeref:typename:void	file:
+ge25519_p1p1	ge25519.c	/^} ge25519_p1p1;$/;"	t	typeref:struct:__anon8e832fe80108	file:
+ge25519_p2	ge25519.c	/^} ge25519_p2;$/;"	t	typeref:struct:__anon8e832fe80208	file:
+ge25519_p3	ge25519.c	/^#define ge25519_p3 /;"	d	file:
+ge25519_pack	ge25519.c	/^void ge25519_pack(unsigned char r[32], const ge25519_p3 *p)$/;"	f	typeref:typename:void
+ge25519_pack	ge25519.h	/^#define ge25519_pack /;"	d
+ge25519_scalarmult_base	ge25519.c	/^void ge25519_scalarmult_base(ge25519_p3 *r, const sc25519 *s)$/;"	f	typeref:typename:void
+ge25519_scalarmult_base	ge25519.h	/^#define ge25519_scalarmult_base /;"	d
+ge25519_sqrtm1	ge25519.c	/^static const fe25519 ge25519_sqrtm1 = {{0xB0, 0xA0, 0x0E, 0x4A, 0x27, 0x1B, 0xEE, 0xC4, 0x78, 0x/;"	v	typeref:typename:const fe25519	file:
+ge25519_unpackneg_vartime	ge25519.c	/^int ge25519_unpackneg_vartime(ge25519_p3 *r, const unsigned char p[32])$/;"	f	typeref:typename:int
+ge25519_unpackneg_vartime	ge25519.h	/^#define ge25519_unpackneg_vartime /;"	d
+gen_all	regress/unittests/hostkeys/mktestdata.sh	/^gen_all() {$/;"	f
+gen_candidates	moduli.c	/^gen_candidates(FILE *out, u_int32_t memory, u_int32_t power, BIGNUM *start)$/;"	f	typeref:typename:int
+gen_chain	xmss_wots.c	/^static void gen_chain(unsigned char *out, const unsigned char *in, unsigned int start, unsigned /;"	f	typeref:typename:void	file:
+gen_leaf_wots	xmss_fast.c	/^static void gen_leaf_wots(unsigned char *leaf, const unsigned char *sk_seed, const xmss_params */;"	f	typeref:typename:void	file:
+generate_or_die	regress/misc/fuzz-harness/sig_fuzz.cc	/^static struct sshkey *generate_or_die(int type, unsigned bits) {$/;"	f	typeref:struct:sshkey *	file:
+generated_date	krl.c	/^	u_int64_t generated_date;$/;"	m	struct:ssh_krl	typeref:typename:u_int64_t	file:
+genkrls	regress/krl.sh	/^genkrls() {$/;"	f
+get_active_process_contract_id	openbsd-compat/port-solaris.c	/^get_active_process_contract_id(void)$/;"	f	typeref:typename:ctid_t	file:
+get_agent_identities	sshconnect2.c	/^get_agent_identities(struct ssh *ssh, int *agent_fdp,$/;"	f	typeref:typename:int	file:
+get_cert	ssh-keyscan.c	/^int get_cert = 0;$/;"	v	typeref:typename:int
+get_connection_info	servconf.c	/^get_connection_info(struct ssh *ssh, int populate, int use_dns)$/;"	f	typeref:struct:connection_info *
+get_decode_stat	sftp-client.c	/^get_decode_stat(struct sftp_conn *conn, u_int expected_id, int quiet)$/;"	f	typeref:typename:Attrib *	file:
+get_decode_statvfs	sftp-client.c	/^get_decode_statvfs(struct sftp_conn *conn, struct sftp_statvfs *st,$/;"	f	typeref:typename:int	file:
+get_ec	sshbuf-getput-crypto.c	/^get_ec(const u_char *d, size_t len, EC_POINT *v, const EC_GROUP *g)$/;"	f	typeref:typename:int	file:
+get_handle	sftp-client.c	/^get_handle(struct sftp_conn *conn, u_int expected_id, size_t *len,$/;"	f	typeref:typename:u_char *	file:
+get_handle	sftp-server.c	/^get_handle(struct sshbuf *queue, int *hp)$/;"	f	typeref:typename:int	file:
+get_hostfile_hostname_ipaddr	sshconnect.c	/^get_hostfile_hostname_ipaddr(char *hostname, struct sockaddr *hostaddr,$/;"	f	typeref:typename:void
+get_hostkey_by_index	sshd.c	/^get_hostkey_by_index(int ind)$/;"	f	typeref:struct:sshkey *
+get_hostkey_by_type	sshd.c	/^get_hostkey_by_type(int type, int nid, int need_private, struct ssh *ssh)$/;"	f	typeref:struct:sshkey *	file:
+get_hostkey_index	sshd.c	/^get_hostkey_index(struct sshkey *key, int compare, struct ssh *ssh)$/;"	f	typeref:typename:int
+get_hostkey_private_by_type	sshd.c	/^get_hostkey_private_by_type(int type, int nid, struct ssh *ssh)$/;"	f	typeref:struct:sshkey *
+get_hostkey_public_by_index	sshd.c	/^get_hostkey_public_by_index(int ind, struct ssh *ssh)$/;"	f	typeref:struct:sshkey *
+get_hostkey_public_by_type	sshd.c	/^get_hostkey_public_by_type(int type, int nid, struct ssh *ssh)$/;"	f	typeref:struct:sshkey *
+get_hram	ed25519.c	/^static void get_hram(unsigned char *hram, const unsigned char *sm, const unsigned char *pk, unsi/;"	f	typeref:typename:void	file:
+get_iaf_password	openbsd-compat/port-uw.c	/^get_iaf_password(struct passwd *pw)$/;"	f	typeref:typename:char *
+get_keytypes	ssh-keyscan.c	/^int get_keytypes = KT_RSA|KT_ECDSA|KT_ED25519|KT_ECDSA_SK|KT_ED25519_SK;$/;"	v	typeref:typename:int
+get_last_login_time	sshlogin.c	/^get_last_login_time(uid_t uid, const char *logname,$/;"	f	typeref:typename:time_t
+get_line	ssh-keygen.c	/^get_line(FILE *fp, char *line, size_t len)$/;"	f	typeref:typename:int	file:
+get_local_ipaddr	canohost.c	/^get_local_ipaddr(int sock)$/;"	f	typeref:typename:char *
+get_local_name	canohost.c	/^get_local_name(int fd)$/;"	f	typeref:typename:char *
+get_local_port	canohost.c	/^get_local_port(int sock)$/;"	f	typeref:typename:int
+get_moduli_filename	dh.c	/^static const char * get_moduli_filename(void)$/;"	f	typeref:typename:const char *	file:
+get_msg	sftp-client.c	/^get_msg(struct sftp_conn *conn, struct sshbuf *m)$/;"	f	typeref:typename:void	file:
+get_msg_extended	sftp-client.c	/^get_msg_extended(struct sftp_conn *conn, struct sshbuf *m, int initial)$/;"	f	typeref:typename:void	file:
+get_peer_ipaddr	canohost.c	/^get_peer_ipaddr(int sock)$/;"	f	typeref:typename:char *
+get_peer_port	canohost.c	/^get_peer_port(int sock)$/;"	f	typeref:typename:int
+get_private	regress/unittests/sshkey/test_sshkey.c	/^get_private(const char *n)$/;"	f	typeref:struct:sshkey *	file:
+get_privkey	regress/misc/fuzz-harness/kex_fuzz.cc	/^get_privkey(struct shared_state *st, int keytype)$/;"	f	typeref:struct:sshkey *	file:
+get_pubkey	regress/misc/fuzz-harness/kex_fuzz.cc	/^get_pubkey(struct shared_state *st, int keytype)$/;"	f	typeref:struct:sshkey *	file:
+get_random_bytes_prngd	openbsd-compat/port-prngd.c	/^get_random_bytes_prngd(unsigned char *buf, int len,$/;"	f	typeref:typename:int	file:
+get_rdomain	misc.c	/^get_rdomain(int fd)$/;"	f	typeref:typename:char *
+get_remote_user_groups_from_dirents	sftp-usergroup.c	/^get_remote_user_groups_from_dirents(struct sftp_conn *conn, SFTP_DIRENT **d)$/;"	f	typeref:typename:void
+get_remote_user_groups_from_glob	sftp-usergroup.c	/^get_remote_user_groups_from_glob(struct sftp_conn *conn, glob_t *g)$/;"	f	typeref:typename:void
+get_saved_tio	sshtty.c	/^get_saved_tio(void)$/;"	f	typeref:struct:termios *
+get_seed	xmss_fast.c	/^static void get_seed(unsigned char *seed, const unsigned char *sk_seed, int n, uint32_t addr[8])$/;"	f	typeref:typename:void	file:
+get_sock_af	misc.c	/^get_sock_af(int fd)$/;"	f	typeref:typename:int
+get_sock_port	canohost.c	/^get_sock_port(int sock, int local)$/;"	f	typeref:typename:int	file:
+get_socket_address	canohost.c	/^get_socket_address(int sock, int remote, int flags)$/;"	f	typeref:typename:char *	file:
+get_status	sftp-client.c	/^get_status(struct sftp_conn *conn, u_int expected_id)$/;"	f	typeref:typename:u_int	file:
+get_u16	misc.c	/^get_u16(const void *vp)$/;"	f	typeref:typename:u_int16_t
+get_u32	misc.c	/^get_u32(const void *vp)$/;"	f	typeref:typename:u_int32_t
+get_u32_le	misc.c	/^get_u32_le(const void *vp)$/;"	f	typeref:typename:u_int32_t
+get_u64	misc.c	/^get_u64(const void *vp)$/;"	f	typeref:typename:u_int64_t
+getacna	audit-bsm.c	/^getacna(char *auditstring, int len)$/;"	f	typeref:typename:int
+getaddrinfo	openbsd-compat/fake-rfc2553.c	/^getaddrinfo(const char *hostname, const char *servname,$/;"	f	typeref:typename:int
+getaddrinfo	openbsd-compat/fake-rfc2553.h	/^#define getaddrinfo(/;"	d
+getbytes	regress/cipher-speed.sh	/^getbytes ()$/;"	f
+getcwd	openbsd-compat/getcwd.c	/^getcwd(char *pt, size_t size)$/;"	f	typeref:typename:char *
+getdelim	openbsd-compat/bsd-getline.c	/^getdelim(char **buf, size_t *bufsiz, int delimiter, FILE *fp)$/;"	f	typeref:typename:ssize_t	file:
+getentropy	openbsd-compat/arc4random.c	/^# define getentropy(/;"	d	file:
+getgrouplist	openbsd-compat/getgrouplist.c	/^getgrouplist(const char *uname, gid_t agroup, gid_t *groups, int *grpcnt)$/;"	f	typeref:typename:int
+getgrouplist	openbsd-compat/port-aix.c	/^getgrouplist(const char *user, gid_t pgid, gid_t *groups, int *grpcnt)$/;"	f	typeref:typename:int
+getgroups	defines.h	/^# define getgroups(/;"	d
+getlast_entry	loginrec.c	/^getlast_entry(struct logininfo *li)$/;"	f	typeref:typename:int
+getline	openbsd-compat/bsd-getline.c	/^getline(char **buf, size_t *bufsiz, FILE *fp)$/;"	f	typeref:typename:ssize_t
+getnameinfo	openbsd-compat/fake-rfc2553.c	/^int getnameinfo(const struct sockaddr *sa, size_t salen, char *host,$/;"	f	typeref:typename:int
+getnameinfo	openbsd-compat/fake-rfc2553.h	/^#define getnameinfo(/;"	d
+getnameinfo	openbsd-compat/port-aix.h	/^# define getnameinfo(/;"	d
+getopt	defines.h	/^# define getopt(/;"	d
+getopt	openbsd-compat/getopt_long.c	/^getopt(int nargc, char * const *nargv, const char *options)$/;"	f	typeref:typename:int
+getopt_internal	openbsd-compat/getopt_long.c	/^getopt_internal(int nargc, char * const *nargv, const char *options,$/;"	f	typeref:typename:int	file:
+getpagesize	openbsd-compat/bsd-getpagesize.c	/^getpagesize(void)$/;"	f	typeref:typename:int
+getpeereid	openbsd-compat/bsd-getpeereid.c	/^getpeereid(int s, uid_t *euid, gid_t *gid)$/;"	f	typeref:typename:int
+getpgid	openbsd-compat/bsd-misc.c	/^getpgid(pid_t pid)$/;"	f	typeref:typename:pid_t
+getpgrp	defines.h	/^# define getpgrp(/;"	d
+getproxypass	regress/netcat.c	/^getproxypass(const char *proxyuser, const char *proxyhost)$/;"	f	typeref:typename:const char *	file:
+getpwnamallow	auth.c	/^getpwnamallow(struct ssh *ssh, const char *user)$/;"	f	typeref:struct:passwd *
+getrrsetbyname	openbsd-compat/getrrsetbyname-ldns.c	/^getrrsetbyname(const char *hostname, unsigned int rdclass,$/;"	f	typeref:typename:int
+getrrsetbyname	openbsd-compat/getrrsetbyname.c	/^getrrsetbyname(const char *hostname, unsigned int rdclass,$/;"	f	typeref:typename:int
+getsid	openbsd-compat/bsd-misc.c	/^getsid(pid_t pid)$/;"	f	typeref:typename:pid_t
+gettext	audit-bsm.c	/^# define gettext(/;"	d	file:
+gid	openbsd-compat/pwcache.c	/^		gid_t	gid;$/;"	m	struct:group_from_gid::ncache	typeref:typename:gid_t	file:
+gid	sftp-common.h	/^	u_int32_t	gid;$/;"	m	struct:Attrib	typeref:typename:u_int32_t
+gl_closedir	openbsd-compat/glob.h	/^	void (*gl_closedir)(void *);$/;"	m	struct:__anon91d795ca0108	typeref:typename:void (*)(void *)
+gl_errfunc	openbsd-compat/glob.h	/^	int (*gl_errfunc)(const char *, int);$/;"	m	struct:__anon91d795ca0108	typeref:typename:int (*)(const char *,int)
+gl_flags	openbsd-compat/glob.h	/^	int gl_flags;		\/* Copy of flags parameter to glob. *\/$/;"	m	struct:__anon91d795ca0108	typeref:typename:int
+gl_lstat	openbsd-compat/glob.h	/^	int (*gl_lstat)(const char *, struct stat *);$/;"	m	struct:__anon91d795ca0108	typeref:typename:int (*)(const char *,struct stat *)
+gl_matchc	openbsd-compat/glob.h	/^	size_t gl_matchc;	\/* Count of paths matching pattern. *\/$/;"	m	struct:__anon91d795ca0108	typeref:typename:size_t
+gl_offs	openbsd-compat/glob.h	/^	size_t gl_offs;		\/* Reserved at beginning of gl_pathv. *\/$/;"	m	struct:__anon91d795ca0108	typeref:typename:size_t
+gl_opendir	openbsd-compat/glob.h	/^	void *(*gl_opendir)(const char *);$/;"	m	struct:__anon91d795ca0108	typeref:typename:void * (*)(const char *)
+gl_pathc	openbsd-compat/glob.h	/^	size_t gl_pathc;	\/* Count of total paths so far. *\/$/;"	m	struct:__anon91d795ca0108	typeref:typename:size_t
+gl_pathv	openbsd-compat/glob.h	/^	char **gl_pathv;	\/* List of paths matching pattern. *\/$/;"	m	struct:__anon91d795ca0108	typeref:typename:char **
+gl_readdir	openbsd-compat/glob.h	/^	struct dirent *(*gl_readdir)(void *);	$/;"	m	struct:__anon91d795ca0108	typeref:struct:dirent * (*)(void *)
+gl_stat	openbsd-compat/glob.h	/^	int (*gl_stat)(const char *, struct stat *);$/;"	m	struct:__anon91d795ca0108	typeref:typename:int (*)(const char *,struct stat *)
+gl_statv	openbsd-compat/glob.h	/^	struct stat **gl_statv;	\/* Stat entries corresponding to gl_pathv *\/$/;"	m	struct:__anon91d795ca0108	typeref:struct:stat **
+glim_malloc	openbsd-compat/glob.c	/^	size_t	glim_malloc;$/;"	m	struct:glob_lim	typeref:typename:size_t	file:
+glim_readdir	openbsd-compat/glob.c	/^	size_t	glim_readdir;$/;"	m	struct:glob_lim	typeref:typename:size_t	file:
+glim_stat	openbsd-compat/glob.c	/^	size_t	glim_stat;$/;"	m	struct:glob_lim	typeref:typename:size_t	file:
+glob	openbsd-compat/glob.c	/^glob(const char *pattern, int flags, int (*errfunc)(const char *, int),$/;"	f	typeref:typename:int
+glob	openbsd-compat/glob.h	/^# define glob(/;"	d
+glob0	openbsd-compat/glob.c	/^glob0(const Char *pattern, glob_t *pglob, struct glob_lim *limitp)$/;"	f	typeref:typename:int	file:
+glob1	openbsd-compat/glob.c	/^glob1(Char *pattern, Char *pattern_last, glob_t *pglob, struct glob_lim *limitp)$/;"	f	typeref:typename:int	file:
+glob2	openbsd-compat/glob.c	/^glob2(Char *pathbuf, Char *pathbuf_last, Char *pathend, Char *pathend_last,$/;"	f	typeref:typename:int	file:
+glob3	openbsd-compat/glob.c	/^glob3(Char *pathbuf, Char *pathbuf_last, Char *pathend, Char *pathend_last,$/;"	f	typeref:typename:int	file:
+glob_lim	openbsd-compat/glob.c	/^struct glob_lim {$/;"	s	file:
+glob_path_stat	openbsd-compat/glob.c	/^struct glob_path_stat {$/;"	s	file:
+glob_t	openbsd-compat/glob.h	/^# define glob_t /;"	d
+glob_t	openbsd-compat/glob.h	/^} glob_t;$/;"	t	typeref:struct:__anon91d795ca0108
+global_aflag	sftp.c	/^int global_aflag = 0;$/;"	v	typeref:typename:int
+global_confirm	clientloop.c	/^struct global_confirm {$/;"	s	file:
+global_confirm_cb	clientloop.h	/^typedef void global_confirm_cb(struct ssh *, int, u_int32_t, void *);$/;"	t	typeref:typename:void ()(struct ssh *,int,u_int32_t,void *)
+global_confirms	clientloop.c	/^static struct global_confirms global_confirms =$/;"	v	typeref:struct:global_confirms	file:
+global_fflag	sftp.c	/^int global_fflag = 0;$/;"	v	typeref:typename:int
+global_pflag	sftp.c	/^int global_pflag = 0;$/;"	v	typeref:typename:int
+global_rflag	sftp.c	/^int global_rflag = 0;$/;"	v	typeref:typename:int
+globexp1	openbsd-compat/glob.c	/^globexp1(const Char *pattern, glob_t *pglob, struct glob_lim *limitp)$/;"	f	typeref:typename:int	file:
+globexp2	openbsd-compat/glob.c	/^globexp2(const Char *ptr, const Char *pattern, glob_t *pglob,$/;"	f	typeref:typename:int	file:
+globextend	openbsd-compat/glob.c	/^globextend(const Char *path, glob_t *pglob, struct glob_lim *limitp,$/;"	f	typeref:typename:int	file:
+globfree	openbsd-compat/glob.c	/^globfree(glob_t *pglob)$/;"	f	typeref:typename:void
+globfree	openbsd-compat/glob.h	/^# define globfree(/;"	d
+globpath_is_dir	sftp-client.c	/^globpath_is_dir(const char *pathname)$/;"	f	typeref:typename:int
+globtilde	openbsd-compat/glob.c	/^globtilde(const Char *pattern, Char *patbuf, size_t patbuf_len, glob_t *pglob)$/;"	f	typeref:typename:const Char *	file:
+gnome-ssh-askpass1	contrib/Makefile	/^gnome-ssh-askpass1: gnome-ssh-askpass1.c$/;"	t
+gnome-ssh-askpass2	contrib/Makefile	/^gnome-ssh-askpass2: gnome-ssh-askpass2.c$/;"	t
+gnome-ssh-askpass3	contrib/Makefile	/^gnome-ssh-askpass3: gnome-ssh-askpass3.c$/;"	t
+goodport	regress/portnum.sh	/^goodport() {$/;"	f
+gps_path	openbsd-compat/glob.c	/^	char		*gps_path;$/;"	m	struct:glob_path_stat	typeref:typename:char *	file:
+gps_stat	openbsd-compat/glob.c	/^	struct stat	*gps_stat;$/;"	m	struct:glob_path_stat	typeref:struct:stat *	file:
+grace_alarm_handler	sshd.c	/^grace_alarm_handler(int sig)$/;"	f	typeref:typename:void	file:
+group_from_gid	openbsd-compat/pwcache.c	/^group_from_gid(gid_t gid, int nogroup)$/;"	f	typeref:typename:char *
+group_idname	sftp-usergroup.c	/^static struct idname_tree group_idname = RB_INITIALIZER(&group_idname);$/;"	v	typeref:struct:idname_tree	file:
+groups_byname	groupaccess.c	/^static char **groups_byname;$/;"	v	typeref:typename:char **	file:
+grow_dst	utf8.c	/^grow_dst(char **dst, size_t *sz, size_t maxsz, char **dp, size_t need)$/;"	f	typeref:typename:int	file:
+gss_authentication	readconf.h	/^	int     gss_authentication;	\/* Try GSS authentication *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+gss_authentication	servconf.h	/^	int     gss_authentication;	\/* If true, permit GSSAPI authentication *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+gss_cleanup_creds	servconf.h	/^	int     gss_cleanup_creds;	\/* If true, destroy cred cache on logout *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+gss_deleg_creds	readconf.h	/^	int     gss_deleg_creds;	\/* Delegate GSS credentials *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+gss_strict_acceptor	servconf.h	/^	int     gss_strict_acceptor;	\/* If true, restrict the GSSAPI acceptor name *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+gss_supported_mechs	sshconnect2.c	/^	gss_OID_set gss_supported_mechs;$/;"	m	struct:cauthctxt	typeref:typename:gss_OID_set	file:
+gssapi_client	gss-serv.c	/^static ssh_gssapi_client gssapi_client =$/;"	v	typeref:typename:ssh_gssapi_client	file:
+gssapi_kerberos_mech	gss-serv-krb5.c	/^ssh_gssapi_mech gssapi_kerberos_mech = {$/;"	v	typeref:typename:ssh_gssapi_mech
+gssapi_null_mech	gss-serv.c	/^ssh_gssapi_mech gssapi_null_mech =$/;"	v	typeref:typename:ssh_gssapi_mech
+gsscontext	monitor.c	/^static Gssctxt *gsscontext = NULL;$/;"	v	typeref:typename:Gssctxt *	file:
+gtk2	contrib/redhat/openssh.spec	/^%global gtk2 1$/;"	g
+gzip-man-pages	contrib/cygwin/Makefile	/^gzip-man-pages:$/;"	t
+h	sshkey-xmss.c	/^	u_int32_t	n, w, h, k;$/;"	m	struct:ssh_xmss_state	typeref:typename:u_int32_t	file:
+h	xmss_fast.h	/^  unsigned int h;$/;"	m	struct:__anon22bef5f30208	typeref:typename:unsigned int
+h	xmss_fast.h	/^  unsigned int h;$/;"	m	struct:__anon22bef5f30308	typeref:typename:unsigned int
+h	xmss_fast.h	/^  unsigned int h;$/;"	m	struct:__anon22bef5f30408	typeref:typename:unsigned int
+h_msg	xmss_hash.c	/^int h_msg(unsigned char *out, const unsigned char *in, unsigned long long inlen, const unsigned /;"	f	typeref:typename:int
+handle	misc.h	/^	int	  handle;		\/* Handle for dynamic listen ports *\/$/;"	m	struct:Forward	typeref:typename:int
+handle	ssh-pkcs11.c	/^	void			*handle;$/;"	m	struct:pkcs11_provider	typeref:typename:void *	file:
+handle_bytes_read	sftp-server.c	/^handle_bytes_read(int handle)$/;"	f	typeref:typename:u_int64_t	file:
+handle_bytes_write	sftp-server.c	/^handle_bytes_write(int handle)$/;"	f	typeref:typename:u_int64_t	file:
+handle_close	sftp-server.c	/^handle_close(int handle)$/;"	f	typeref:typename:int	file:
+handle_conn_read	ssh-agent.c	/^handle_conn_read(u_int socknum)$/;"	f	typeref:typename:int	file:
+handle_conn_write	ssh-agent.c	/^handle_conn_write(u_int socknum)$/;"	f	typeref:typename:int	file:
+handle_dest_replies	sftp-client.c	/^handle_dest_replies(struct sftp_conn *to, const char *to_path, int synchronous,$/;"	f	typeref:typename:void	file:
+handle_from_string	sftp-server.c	/^handle_from_string(const u_char *handle, u_int hlen)$/;"	f	typeref:typename:int	file:
+handle_is_ok	sftp-server.c	/^handle_is_ok(int i, int type)$/;"	f	typeref:typename:int	file:
+handle_log_close	sftp-server.c	/^handle_log_close(int handle, char *emsg)$/;"	f	typeref:typename:void	file:
+handle_log_exit	sftp-server.c	/^handle_log_exit(void)$/;"	f	typeref:typename:void	file:
+handle_new	sftp-server.c	/^handle_new(int use, const char *name, int fd, int flags, DIR *dirp)$/;"	f	typeref:typename:int	file:
+handle_permit	auth-options.c	/^handle_permit(const char **optsp, int allow_bare_port,$/;"	f	typeref:typename:int	file:
+handle_socket_read	ssh-agent.c	/^handle_socket_read(u_int socknum)$/;"	f	typeref:typename:int	file:
+handle_to_dir	sftp-server.c	/^handle_to_dir(int handle)$/;"	f	typeref:typename:DIR *	file:
+handle_to_fd	sftp-server.c	/^handle_to_fd(int handle)$/;"	f	typeref:typename:int	file:
+handle_to_flags	sftp-server.c	/^handle_to_flags(int handle)$/;"	f	typeref:typename:int	file:
+handle_to_name	sftp-server.c	/^handle_to_name(int handle)$/;"	f	typeref:typename:char *	file:
+handle_to_string	sftp-server.c	/^handle_to_string(int handle, u_char **stringp, int *hlenp)$/;"	f	typeref:typename:int	file:
+handle_unused	sftp-server.c	/^static void handle_unused(int i)$/;"	f	typeref:typename:void	file:
+handle_update_read	sftp-server.c	/^handle_update_read(int handle, ssize_t bytes)$/;"	f	typeref:typename:void	file:
+handle_update_write	sftp-server.c	/^handle_update_write(int handle, ssize_t bytes)$/;"	f	typeref:typename:void	file:
+handler	mux.c	/^	int (*handler)(struct ssh *, u_int, Channel *,$/;"	m	struct:__anon0ff59c300108	typeref:typename:int (*)(struct ssh *,u_int,Channel *,struct sshbuf *,struct sshbuf *)	file:
+handler	openbsd-compat/readpassphrase.c	/^static void handler(int s)$/;"	f	typeref:typename:void	file:
+handler	sftp-server.c	/^	void (*handler)(u_int32_t);$/;"	m	struct:sftp_handler	typeref:typename:void (*)(u_int32_t)	file:
+handlers	sftp-server.c	/^static const struct sftp_handler handlers[] = {$/;"	v	typeref:typename:const struct sftp_handler[]	file:
+handles	sftp-server.c	/^static Handle *handles = NULL;$/;"	v	typeref:typename:Handle *	file:
+hardening	configure.ac	/^AC_ARG_WITH([hardening],$/;"	w
+hardware_version	pkcs11.h	/^  struct ck_version hardware_version;$/;"	m	struct:ck_slot_info	typeref:struct:ck_version
+hardware_version	pkcs11.h	/^  struct ck_version hardware_version;$/;"	m	struct:ck_token_info	typeref:struct:ck_version
+hardware_version	pkcs11.h	/^#define hardware_version /;"	d
+has_any_alg	kex.c	/^has_any_alg(const char *proposal, const char *algs)$/;"	f	typeref:typename:int	file:
+has_arg	openbsd-compat/getopt.h	/^	int has_arg;$/;"	m	struct:option	typeref:typename:int
+has_id	sftp-usergroup.c	/^has_id(u_int id, u_int *ids, u_int nids)$/;"	f	typeref:typename:int	file:
+has_unhashed	ssh-keygen.c	/^	int has_unhashed;	\/* When hashing, original had unhashed hosts *\/$/;"	m	struct:known_hosts_ctx	typeref:typename:int	file:
+hash	umac.c	/^    nh_ctx hash;                          \/* Hash context for L1 NH hash  *\/$/;"	m	struct:uhash_ctx	typeref:typename:nh_ctx	file:
+hash	umac.c	/^    uhash_ctx hash;          \/* Hash function for message compression    *\/$/;"	m	struct:umac_ctx	typeref:typename:uhash_ctx	file:
+hash_alg	kex.c	/^	int hash_alg;$/;"	m	struct:kexalg	typeref:typename:int	file:
+hash_alg	kex.h	/^	int	hash_alg;$/;"	m	struct:kex	typeref:typename:int
+hash_buffer	sshsig.c	/^hash_buffer(const struct sshbuf *m, const char *hashalg, struct sshbuf **bp)$/;"	f	typeref:typename:int	file:
+hash_f	xmss_hash.c	/^int hash_f(unsigned char *out, const unsigned char *in, const unsigned char *pub_seed, uint32_t /;"	f	typeref:typename:int
+hash_file	sshsig.c	/^hash_file(int fd, const char *hashalg, struct sshbuf **bp)$/;"	f	typeref:typename:int	file:
+hash_h	xmss_hash.c	/^int hash_h(unsigned char *out, const unsigned char *in, const unsigned char *pub_seed, uint32_t /;"	f	typeref:typename:int
+hash_hosts	ssh-keygen.c	/^	int hash_hosts;		\/* Hash hostnames as we go *\/$/;"	m	struct:known_hosts_ctx	typeref:typename:int	file:
+hash_hosts	ssh-keyscan.c	/^int hash_hosts = 0;		\/* Hash hostname on output *\/$/;"	v	typeref:typename:int
+hash_known_hosts	readconf.h	/^	int	hash_known_hosts;$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+hash_to_blob	ssh-keygen.c	/^hash_to_blob(const char *cp, u_char **blobp, size_t *lenp,$/;"	f	typeref:typename:void	file:
+have_agent	sshd.c	/^static int have_agent = 0;$/;"	v	typeref:typename:int	file:
+have_identity	ssh-keygen.c	/^static int have_identity = 0;$/;"	v	typeref:typename:int	file:
+have_prog	regress/test-exec.sh	/^have_prog()$/;"	f
+have_remote_id	channels.h	/^	int	have_remote_id;	\/* non-zero if remote_id is valid *\/$/;"	m	struct:Channel	typeref:typename:int
+have_ssh2_key	sshd.c	/^	int		have_ssh2_key;$/;"	m	struct:__anon1c7bfe280108	typeref:typename:int	file:
+have_state	sshkey-xmss.c	/^	int		have_state;	\/* .state file exists *\/$/;"	m	struct:ssh_xmss_state	typeref:typename:int	file:
+hdr	monitor_fdpass.c	/^		struct cmsghdr hdr;$/;"	m	union:mm_receive_fd::__anon08acf23e020a	typeref:struct:cmsghdr	file:
+hdr	monitor_fdpass.c	/^		struct cmsghdr hdr;$/;"	m	union:mm_send_fd::__anon08acf23e010a	typeref:struct:cmsghdr	file:
+hdr	regress/netcat.c	/^		struct cmsghdr hdr;$/;"	m	union:fdpass::__anon2cdfc23f010a	typeref:struct:cmsghdr	file:
+header	openbsd-compat/getrrsetbyname.c	/^	HEADER			header;$/;"	m	struct:dns_response	typeref:typename:HEADER	file:
+header_ctx	cipher-chachapoly.c	/^	struct chacha_ctx main_ctx, header_ctx;$/;"	m	struct:chachapoly_ctx	typeref:struct:chacha_ctx	file:
+header_evp	cipher-chachapoly-libcrypto.c	/^	EVP_CIPHER_CTX *main_evp, *header_evp;$/;"	m	struct:chachapoly_ctx	typeref:typename:EVP_CIPHER_CTX *	file:
+headerver	openbsd-compat/regress/opensslvertest.c	/^	long headerver;$/;"	m	struct:version_test	typeref:typename:long	file:
+hello_rcvd	mux.c	/^	int hello_rcvd;$/;"	m	struct:mux_master_state	typeref:typename:int	file:
+help	regress/netcat.c	/^help(void)$/;"	f	typeref:typename:void
+help	sftp.c	/^help(void)$/;"	f	typeref:typename:void	file:
+helper_ecdsa	ssh-pkcs11-client.c	/^static EC_KEY_METHOD	*helper_ecdsa;$/;"	v	typeref:typename:EC_KEY_METHOD *	file:
+helper_rsa	ssh-pkcs11-client.c	/^static RSA_METHOD	*helper_rsa;$/;"	v	typeref:typename:RSA_METHOD *	file:
+hentries	regress/unittests/hostkeys/mktestdata.sh	/^hentries() {$/;"	f
+hexchar	misc.c	/^hexchar(const char *s)$/;"	f	typeref:typename:int	file:
+hi	krl.c	/^	u_int64_t lo, hi;$/;"	m	struct:revoked_serial	typeref:typename:u_int64_t	file:
+hide_privatekeys	regress/agent-restrict.sh	/^hide_privatekeys() {$/;"	f
+hmac_ctx	mac.h	/^	struct ssh_hmac_ctx	*hmac_ctx;$/;"	m	struct:sshmac	typeref:struct:ssh_hmac_ctx *
+hmac_test	hmac.c	/^hmac_test(void *key, size_t klen, void *m, size_t mlen, u_char *e, size_t elen)$/;"	f	typeref:typename:void	file:
+homedir	sshconnect.h	/^	char *homedir;$/;"	m	struct:ssh_conn_info	typeref:typename:char *
+hook_in	packet.c	/^	ssh_packet_hook_fn *hook_in;$/;"	m	struct:session_state	typeref:typename:ssh_packet_hook_fn *	file:
+hook_in_ctx	packet.c	/^	void *hook_in_ctx;$/;"	m	struct:session_state	typeref:typename:void *	file:
+host	channels.h	/^	char *host;$/;"	m	struct:channel_connect	typeref:typename:char *
+host	hostfile.c	/^	const char *host, *ip;$/;"	m	struct:host_delete_ctx	typeref:typename:const char *	file:
+host	hostfile.c	/^	const char *host;$/;"	m	struct:load_callback_ctx	typeref:typename:const char *	file:
+host	hostfile.h	/^	char *host;$/;"	m	struct:hostkey_entry	typeref:typename:char *
+host	servconf.h	/^	const char *host;	\/* possibly resolved hostname *\/$/;"	m	struct:connection_info	typeref:typename:const char *
+host	ssh-keygen.c	/^	const char *host;	\/* Hostname searched for in find\/delete case *\/$/;"	m	struct:known_hosts_ctx	typeref:typename:const char *	file:
+host	ssh.c	/^char *host;$/;"	v	typeref:typename:char *
+host	sshconnect.c	/^	const char *host, *ip;$/;"	m	struct:find_by_key_ctx	typeref:typename:const char *	file:
+host	sshconnect2.c	/^	const char *host;$/;"	m	struct:cauthctxt	typeref:typename:const char *	file:
+host-key	Makefile.in	/^host-key: ssh-keygen$(EXEEXT)$/;"	t
+host-key-force	Makefile.in	/^host-key-force: ssh-keygen$(EXEEXT) ssh$(EXEEXT)$/;"	t
+host_arg	sshconnect.h	/^	char *host_arg;$/;"	m	struct:ssh_conn_info	typeref:typename:char *
+host_cert_files	servconf.h	/^	char   **host_cert_files;	\/* Files containing host certs. *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:char **
+host_certificates	sshd.c	/^	struct sshkey	**host_certificates;	\/* all public host certificates *\/$/;"	m	struct:__anon1c7bfe280108	typeref:struct:sshkey **	file:
+host_delete	hostfile.c	/^host_delete(struct hostkey_foreach_line *l, void *_ctx)$/;"	f	typeref:typename:int	file:
+host_delete_ctx	hostfile.c	/^struct host_delete_ctx {$/;"	s	file:
+host_hash	hostfile.c	/^host_hash(const char *host, const char *name_from_hostfile, u_int src_len)$/;"	f	typeref:typename:char *
+host_key_agent	servconf.h	/^	char   *host_key_agent;		\/* ssh-agent socket for host keys. *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:char *
+host_key_alias	readconf.h	/^	char   *host_key_alias;	\/* hostname alias for .ssh\/known_hosts *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:char *
+host_key_file_userprovided	servconf.h	/^	int	*host_key_file_userprovided; \/* Key was specified by user. *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int *
+host_key_files	servconf.h	/^	char   **host_key_files;	\/* Files containing host keys. *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:char **
+host_key_index	kex.h	/^	int	(*host_key_index)(struct sshkey *, int, struct ssh *);$/;"	m	struct:kex	typeref:typename:int (*)(struct sshkey *,int,struct ssh *)
+host_keys	sshd.c	/^	struct sshkey	**host_keys;		\/* all private host keys *\/$/;"	m	struct:__anon1c7bfe280108	typeref:struct:sshkey **	file:
+host_port	channels.h	/^	int     host_port;	\/* remote port to connect for forwards *\/$/;"	m	struct:Channel	typeref:typename:int
+host_pubkeys	sshd.c	/^	struct sshkey	**host_pubkeys;		\/* all public host keys *\/$/;"	m	struct:__anon1c7bfe280108	typeref:struct:sshkey **	file:
+host_str	clientloop.c	/^	char *host_str, *ip_str;$/;"	m	struct:hostkeys_update_ctx	typeref:typename:char *	file:
+host_to_connect	channels.c	/^	char *host_to_connect;		\/* Connect to 'host'. *\/$/;"	m	struct:permission	typeref:typename:char *	file:
+hostaddr	loginrec.h	/^	union login_netinfo hostaddr;       \/* caller's host address(es) *\/$/;"	m	struct:logininfo	typeref:union:login_netinfo
+hostaddr	ssh.c	/^struct sockaddr_storage hostaddr;$/;"	v	typeref:struct:sockaddr_storage
+hostbased_accepted_algos	readconf.h	/^	char   *hostbased_accepted_algos;$/;"	m	struct:__anon7d31da1d0108	typeref:typename:char *
+hostbased_accepted_algos	servconf.h	/^	char   *hostbased_accepted_algos; \/* Algos allowed for hostbased *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:char *
+hostbased_authentication	readconf.h	/^	int     hostbased_authentication;	\/* ssh2's rhosts_rsa *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+hostbased_authentication	servconf.h	/^	int     hostbased_authentication;	\/* If true, permit ssh2 hostbased auth *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+hostbased_chost	monitor.c	/^static char *hostbased_chost = NULL;$/;"	v	typeref:typename:char *	file:
+hostbased_cuser	monitor.c	/^static char *hostbased_cuser = NULL;$/;"	v	typeref:typename:char *	file:
+hostbased_key_allowed	auth2-hostbased.c	/^hostbased_key_allowed(struct ssh *ssh, struct passwd *pw,$/;"	f	typeref:typename:int
+hostbased_uses_name_from_packet_only	servconf.h	/^	int     hostbased_uses_name_from_packet_only; \/* experimental *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+hostfile_create_user_ssh_dir	hostfile.c	/^hostfile_create_user_ssh_dir(const char *filename, int notify)$/;"	f	typeref:typename:void
+hostfile_read_key	hostfile.c	/^hostfile_read_key(char **cpp, u_int *bitsp, struct sshkey *ret)$/;"	f	typeref:typename:int
+hostfile_replace_entries	hostfile.c	/^hostfile_replace_entries(const char *filename, const char *host, const char *ip,$/;"	f	typeref:typename:int
+hostkey_alg	kex.h	/^	char	*hostkey_alg;$/;"	m	struct:kex	typeref:typename:char *
+hostkey_change_preamble	clientloop.c	/^hostkey_change_preamble(LogLevel loglevel)$/;"	f	typeref:typename:void	file:
+hostkey_entry	hostfile.h	/^struct hostkey_entry {$/;"	s
+hostkey_foreach_line	hostfile.h	/^struct hostkey_foreach_line {$/;"	s
+hostkey_nid	kex.h	/^	int	hostkey_nid;$/;"	m	struct:kex	typeref:typename:int
+hostkey_sid	ssh-agent.c	/^struct hostkey_sid {$/;"	s	file:
+hostkey_type	kex.h	/^	int	hostkey_type;$/;"	m	struct:kex	typeref:typename:int
+hostkeyalgorithms	readconf.h	/^	char   *hostkeyalgorithms;	\/* SSH2 server key types in order of preference. *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:char *
+hostkeyalgorithms	servconf.h	/^	char   *hostkeyalgorithms;	\/* SSH2 server key types *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:char *
+hostkeys	hostfile.c	/^	struct hostkeys *hostkeys;$/;"	m	struct:load_callback_ctx	typeref:struct:hostkeys *	file:
+hostkeys	hostfile.h	/^struct hostkeys {$/;"	s
+hostkeys_check_old	clientloop.c	/^hostkeys_check_old(struct hostkey_foreach_line *l, void *_ctx)$/;"	f	typeref:typename:int	file:
+hostkeys_find	clientloop.c	/^hostkeys_find(struct hostkey_foreach_line *l, void *_ctx)$/;"	f	typeref:typename:int	file:
+hostkeys_find_by_key	sshconnect.c	/^hostkeys_find_by_key(const char *host, const char *ip, const struct sshkey *key,$/;"	f	typeref:typename:void	file:
+hostkeys_find_by_key_cb	sshconnect.c	/^hostkeys_find_by_key_cb(struct hostkey_foreach_line *l, void *_ctx)$/;"	f	typeref:typename:int	file:
+hostkeys_find_by_key_hostfile	sshconnect.c	/^hostkeys_find_by_key_hostfile(const char *file, const char *which,$/;"	f	typeref:typename:int	file:
+hostkeys_foreach	hostfile.c	/^hostkeys_foreach(const char *path, hostkeys_foreach_fn *callback, void *ctx,$/;"	f	typeref:typename:int
+hostkeys_foreach_file	hostfile.c	/^hostkeys_foreach_file(const char *path, FILE *f, hostkeys_foreach_fn *callback,$/;"	f	typeref:typename:int
+hostkeys_foreach_fn	hostfile.h	/^typedef int hostkeys_foreach_fn(struct hostkey_foreach_line *l, void *ctx);$/;"	t	typeref:typename:int ()(struct hostkey_foreach_line * l,void * ctx)
+hostkeys_update_ctx	clientloop.c	/^struct hostkeys_update_ctx {$/;"	s	file:
+hostkeys_update_ctx_free	clientloop.c	/^hostkeys_update_ctx_free(struct hostkeys_update_ctx *ctx)$/;"	f	typeref:typename:void	file:
+hostname	authfd.h	/^	char *hostname; \/* used to matching cert principals and for display *\/$/;"	m	struct:dest_constraint_hop	typeref:typename:char *
+hostname	loginrec.h	/^	char       hostname[LINFO_HOSTSIZE];     \/* remote hostname *\/$/;"	m	struct:logininfo	typeref:typename:char[]
+hostname	readconf.h	/^	char   *hostname;	\/* Real host to connect. *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:char *
+hostname	regress/test-exec.sh	/^	hostname() {$/;"	f
+hostname	ssh-keygen.c	/^static char hostname[NI_MAXHOST];$/;"	v	typeref:typename:char[]	file:
+hosts	hostfile.h	/^	const char *hosts; \/* Raw hosts text, may be hashed or list multiple *\/$/;"	m	struct:hostkey_foreach_line	typeref:typename:const char *
+hostspec_is_complex	clientloop.c	/^hostspec_is_complex(const char *hosts)$/;"	f	typeref:typename:int	file:
+howmany	defines.h	/^# define howmany(/;"	d
+hpdelim	misc.c	/^hpdelim(char **cp)$/;"	f	typeref:typename:char *
+hpdelim2	misc.c	/^hpdelim2(char **cp, char *delim)$/;"	f	typeref:typename:char *
+i	regress/unittests/hostkeys/test_iterate.c	/^	size_t i;$/;"	m	struct:cbctx	typeref:typename:size_t	file:
+iamrecursive	scp.c	/^int Tflag, pflag, iamremote, iamrecursive, targetshouldbedirectory;$/;"	v	typeref:typename:int
+iamremote	scp.c	/^int Tflag, pflag, iamremote, iamrecursive, targetshouldbedirectory;$/;"	v	typeref:typename:int
+ictx	hmac.c	/^	struct ssh_digest_ctx	*ictx;$/;"	m	struct:ssh_hmac_ctx	typeref:struct:ssh_digest_ctx *	file:
+id	clientloop.c	/^	int id;$/;"	m	struct:channel_reply_ctx	typeref:typename:int	file:
+id	digest-libc.c	/^	int id;$/;"	m	struct:ssh_digest	typeref:typename:int	file:
+id	digest-openssl.c	/^	int id;$/;"	m	struct:ssh_digest	typeref:typename:int	file:
+id	sftp-client.c	/^	u_int id;$/;"	m	struct:request	typeref:typename:u_int	file:
+id	sftp-usergroup.c	/^        u_int id;$/;"	m	struct:idname	typeref:typename:u_int	file:
+id	srclimit.c	/^	int id;$/;"	m	struct:child_info	typeref:typename:int	file:
+id_filename_matches	sshconnect2.c	/^id_filename_matches(Identity *id, Identity *private_id)$/;"	f	typeref:typename:int	file:
+id_sha1	ssh-rsa.c	/^static const u_char id_sha1[] = {$/;"	v	typeref:typename:const u_char[]	file:
+id_sha256	ssh-rsa.c	/^static const u_char id_sha256[] = {$/;"	v	typeref:typename:const u_char[]	file:
+id_sha512	ssh-rsa.c	/^static const u_char id_sha512[] = {$/;"	v	typeref:typename:const u_char[]	file:
+identities_only	readconf.h	/^	int	identities_only;$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+identity	ssh-agent.c	/^typedef struct identity {$/;"	s	file:
+identity	sshconnect2.c	/^struct identity {$/;"	s	file:
+identity_agent	readconf.h	/^	char   *identity_agent;		\/* Optional path to ssh-agent socket *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:char *
+identity_file	ssh-keygen.c	/^static char identity_file[PATH_MAX];$/;"	v	typeref:typename:char[]	file:
+identity_file_userprovided	readconf.h	/^	int    identity_file_userprovided[SSH_MAX_IDENTITY_FILES];$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int[]
+identity_files	readconf.h	/^	char   *identity_files[SSH_MAX_IDENTITY_FILES];$/;"	m	struct:__anon7d31da1d0108	typeref:typename:char * []
+identity_keys	readconf.h	/^	struct sshkey *identity_keys[SSH_MAX_IDENTITY_FILES];$/;"	m	struct:__anon7d31da1d0108	typeref:struct:sshkey * []
+identity_new_passphrase	ssh-keygen.c	/^static char *identity_new_passphrase = NULL;$/;"	v	typeref:typename:char *	file:
+identity_passphrase	ssh-keygen.c	/^static char *identity_passphrase = NULL;$/;"	v	typeref:typename:char *	file:
+identity_permitted	ssh-agent.c	/^identity_permitted(Identity *id, SocketEntry *e, char *user,$/;"	f	typeref:typename:int	file:
+identity_sign	sshconnect2.c	/^identity_sign(struct identity *id, u_char **sigp, size_t *lenp,$/;"	f	typeref:typename:int	file:
+idname	sftp-usergroup.c	/^struct idname {$/;"	s	file:
+idname_cmp	sftp-usergroup.c	/^idname_cmp(struct idname *a, struct idname *b)$/;"	f	typeref:typename:int	file:
+idname_enter	sftp-usergroup.c	/^idname_enter(struct idname_tree *tree, u_int id, const char *name)$/;"	f	typeref:typename:void	file:
+idname_free	sftp-usergroup.c	/^idname_free(struct idname *idname)$/;"	f	typeref:typename:void	file:
+idname_lookup	sftp-usergroup.c	/^idname_lookup(struct idname_tree *tree, u_int id)$/;"	f	typeref:typename:const char *	file:
+idtab	ssh-agent.c	/^struct idtable *idtab;$/;"	v	typeref:struct:idtable *
+idtab_init	ssh-agent.c	/^idtab_init(void)$/;"	f	typeref:typename:void	file:
+idtable	ssh-agent.c	/^struct idtable {$/;"	s	file:
+idx	sshkey-xmss.c	/^	u_int32_t	idx;		\/* state read from file *\/$/;"	m	struct:ssh_xmss_state	typeref:typename:u_int32_t	file:
+iflag	regress/netcat.c	/^unsigned int iflag;				\/* Interval Flag *\/$/;"	v	typeref:typename:unsigned int
+ignore_rhosts	servconf.h	/^	int     ignore_rhosts;	\/* Ignore .rhosts and .shosts. *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+ignore_user_known_hosts	servconf.h	/^	int     ignore_user_known_hosts;	\/* Ignore ~\/.ssh\/known_hosts$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+ignored	cipher.c	/^	void	*ignored;$/;"	m	struct:sshcipher	typeref:typename:void *	file:
+ignored_unknown	readconf.h	/^	char	*ignored_unknown; \/* Pattern list of unknown tokens to ignore *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:char *
+illoptchar	openbsd-compat/getopt_long.c	/^static const char illoptchar[] = "unknown option -- %c";$/;"	v	typeref:typename:const char[]	file:
+illoptstring	openbsd-compat/getopt_long.c	/^static const char illoptstring[] = "unknown option -- %s";$/;"	v	typeref:typename:const char[]	file:
+import_environments	auth-pam.c	/^import_environments(struct sshbuf *b)$/;"	f	typeref:typename:void	file:
+in6_addr	openbsd-compat/fake-rfc2553.h	/^struct in6_addr {$/;"	s
+in_addr_t	defines.h	/^typedef u_int32_t	in_addr_t;$/;"	t	typeref:typename:u_int32_t
+in_chroot	session.c	/^static int in_chroot = 0;$/;"	v	typeref:typename:int	file:
+in_port_t	defines.h	/^typedef u_int16_t	in_port_t;$/;"	t	typeref:typename:u_int16_t
+include_item	servconf.h	/^struct include_item {$/;"	s
+includes	sshd.c	/^struct include_list includes = TAILQ_HEAD_INITIALIZER(includes);$/;"	v	typeref:struct:include_list
+incoming_packet	packet.c	/^	struct sshbuf *incoming_packet;$/;"	m	struct:session_state	typeref:struct:sshbuf *	file:
+increase_datafile_size	regress/test-exec.sh	/^increase_datafile_size()$/;"	f
+index_len	xmss_fast.h	/^  unsigned int index_len;$/;"	m	struct:__anon22bef5f30308	typeref:typename:unsigned int
+inet_aton	openbsd-compat/inet_aton.c	/^inet_aton(const char *cp, struct in_addr *addr)$/;"	f	typeref:typename:int
+inet_ntoa	openbsd-compat/inet_ntoa.c	/^inet_ntoa(struct in_addr in)$/;"	f	typeref:typename:char *
+inet_ntop	openbsd-compat/inet_ntop.c	/^inet_ntop(int af, const void *src, char *dst, socklen_t size)$/;"	f	typeref:typename:const char *
+inet_ntop4	openbsd-compat/inet_ntop.c	/^inet_ntop4(const u_char *src, char *dst, size_t size)$/;"	f	typeref:typename:const char *	file:
+inet_ntop6	openbsd-compat/inet_ntop.c	/^inet_ntop6(const u_char *src, char *dst, size_t size)$/;"	f	typeref:typename:const char *	file:
+inetd_flag	sshd.c	/^static int inetd_flag = 0;$/;"	v	typeref:typename:int	file:
+inetdefdir	contrib/cygwin/Makefile	/^inetdefdir=$(defaultsdir)\/inetd.d$/;"	m
+infile	sftp.c	/^FILE* infile;$/;"	v	typeref:typename:FILE *
+info	ssh-pkcs11.c	/^	CK_INFO			info;$/;"	m	struct:pkcs11_provider	typeref:typename:CK_INFO	file:
+info_req_seen	sshconnect2.c	/^	int info_req_seen;$/;"	m	struct:cauthctxt	typeref:typename:int	file:
+init_ctx	auth.h	/^	void*	(*init_ctx)(Authctxt*);$/;"	m	struct:KbdintDevice	typeref:typename:void * (*)(Authctxt *)
+init_done	sftp-server.c	/^static int init_done;$/;"	v	typeref:typename:int	file:
+init_hostkeys	hostfile.c	/^init_hostkeys(void)$/;"	f	typeref:struct:hostkeys *
+initial_hostkey	kex.h	/^	struct sshkey *initial_hostkey;$/;"	m	struct:kex	typeref:struct:sshkey *
+initial_sig	kex.h	/^	struct sshbuf *initial_sig;$/;"	m	struct:kex	typeref:struct:sshbuf *
+initialize_options	readconf.c	/^initialize_options(Options * options)$/;"	f	typeref:typename:void
+initialize_server_options	servconf.c	/^initialize_server_options(ServerOptions *options)$/;"	f	typeref:typename:void
+initialized	packet.c	/^	int initialized;$/;"	m	struct:session_state	typeref:typename:int	file:
+inline	openbsd-compat/arc4random.c	/^#define inline /;"	d	file:
+inline	openbsd-compat/arc4random.c	/^#define inline$/;"	d	file:
+inline	openbsd-compat/blowfish.c	/^#define inline /;"	d	file:
+inline	openbsd-compat/blowfish.c	/^#define inline$/;"	d	file:
+innetgr	openbsd-compat/bsd-misc.c	/^int innetgr(const char *netgroup, const char *host,$/;"	f	typeref:typename:int
+input	chacha.h	/^	u_int input[16];$/;"	m	struct:chacha_ctx	typeref:typename:u_int[16]
+input	channels.h	/^	struct sshbuf *input;	\/* data read from socket, to be sent over$/;"	m	struct:Channel	typeref:struct:sshbuf *
+input	openbsd-compat/chacha_private.h	/^  u32 input[16]; \/* could be compressed *\/$/;"	m	struct:__anon596ef7b80108	typeref:typename:u32[16]
+input	packet.c	/^	struct sshbuf *input;$/;"	m	struct:session_state	typeref:struct:sshbuf *	file:
+input	ssh-agent.c	/^	struct sshbuf *input;$/;"	m	struct:socket_entry	typeref:struct:sshbuf *	file:
+input_filter	channels.h	/^	channel_infilter_fn	*input_filter;$/;"	m	struct:Channel	typeref:typename:channel_infilter_fn *
+input_gssapi_error	sshconnect2.c	/^input_gssapi_error(int type, u_int32_t plen, struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+input_gssapi_errtok	auth2-gss.c	/^input_gssapi_errtok(int type, u_int32_t plen, struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+input_gssapi_errtok	sshconnect2.c	/^input_gssapi_errtok(int type, u_int32_t plen, struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+input_gssapi_exchange_complete	auth2-gss.c	/^input_gssapi_exchange_complete(int type, u_int32_t plen, struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+input_gssapi_mic	auth2-gss.c	/^input_gssapi_mic(int type, u_int32_t plen, struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+input_gssapi_response	sshconnect2.c	/^input_gssapi_response(int type, u_int32_t plen, struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+input_gssapi_token	auth2-gss.c	/^input_gssapi_token(int type, u_int32_t plen, struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+input_gssapi_token	sshconnect2.c	/^input_gssapi_token(int type, u_int32_t plen, struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+input_kex_dh_gex_group	kexgexc.c	/^input_kex_dh_gex_group(int type, u_int32_t seq, struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+input_kex_dh_gex_init	kexgexs.c	/^input_kex_dh_gex_init(int type, u_int32_t seq, struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+input_kex_dh_gex_reply	kexgexc.c	/^input_kex_dh_gex_reply(int type, u_int32_t seq, struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+input_kex_dh_gex_request	kexgexs.c	/^input_kex_dh_gex_request(int type, u_int32_t seq, struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+input_kex_gen_init	kexgen.c	/^input_kex_gen_init(int type, u_int32_t seq, struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+input_kex_gen_reply	kexgen.c	/^input_kex_gen_reply(int type, u_int32_t seq, struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+input_service_request	auth2.c	/^input_service_request(int type, u_int32_t seq, struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+input_userauth_banner	sshconnect2.c	/^input_userauth_banner(int type, u_int32_t seq, struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+input_userauth_error	sshconnect2.c	/^input_userauth_error(int type, u_int32_t seq, struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+input_userauth_ext_info	sshconnect2.c	/^input_userauth_ext_info(int type, u_int32_t seqnr, struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+input_userauth_failure	sshconnect2.c	/^input_userauth_failure(int type, u_int32_t seq, struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+input_userauth_info_req	sshconnect2.c	/^input_userauth_info_req(int type, u_int32_t seq, struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+input_userauth_info_response	auth2-chall.c	/^input_userauth_info_response(int type, u_int32_t seq, struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+input_userauth_passwd_changereq	sshconnect2.c	/^input_userauth_passwd_changereq(int type, u_int32_t seqnr, struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+input_userauth_pk_ok	sshconnect2.c	/^input_userauth_pk_ok(int type, u_int32_t seq, struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+input_userauth_request	auth2.c	/^input_userauth_request(int type, u_int32_t seq, struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+input_userauth_service_accept	sshconnect2.c	/^input_userauth_service_accept(int type, u_int32_t seq, struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+input_userauth_success	sshconnect2.c	/^input_userauth_success(int type, u_int32_t seq, struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+insert_serial_range	krl.c	/^insert_serial_range(struct revoked_serial_tree *rt, u_int64_t lo, u_int64_t hi)$/;"	f	typeref:typename:int	file:
+install	Makefile.in	/^install: $(CONFIGFILES) $(MANPAGES) $(TARGETS) install-files install-sysconf host-key check-conf/;"	t
+install	regress/unittests/test_helper/Makefile	/^install:$/;"	t
+install-copy-id	contrib/cygwin/Makefile	/^install-copy-id: $(copyidsrcdir)\/ssh-copy-id $(copyidsrcdir)\/ssh-copy-id.1$/;"	t
+install-cygwindoc	contrib/cygwin/Makefile	/^install-cygwindoc: README$/;"	t
+install-doc	contrib/cygwin/Makefile	/^install-doc: install-sshdoc install-cygwindoc$/;"	t
+install-files	Makefile.in	/^install-files:$/;"	t
+install-inetd-config	contrib/cygwin/Makefile	/^install-inetd-config:$/;"	t
+install-nokeys	Makefile.in	/^install-nokeys: $(CONFIGFILES) $(MANPAGES) $(TARGETS) install-files install-sysconf$/;"	t
+install-nosysconf	Makefile.in	/^install-nosysconf: $(CONFIGFILES) $(MANPAGES) $(TARGETS) install-files$/;"	t
+install-scripts	contrib/cygwin/Makefile	/^install-scripts: ssh-host-config ssh-user-config$/;"	t
+install-sshdoc	contrib/cygwin/Makefile	/^install-sshdoc:$/;"	t
+install-sysconf	Makefile.in	/^install-sysconf:$/;"	t
+int16	sntrup761.c	/^#define int16 /;"	d	file:
+int16_negative_mask	sntrup761.c	/^static int int16_negative_mask(int16 x)$/;"	f	typeref:typename:int	file:
+int16_nonzero_mask	sntrup761.c	/^static int int16_nonzero_mask(int16 x)$/;"	f	typeref:typename:int	file:
+int16_t	defines.h	/^typedef short int int16_t;$/;"	t	typeref:typename:short int
+int32	sntrup761.c	/^#define int32 /;"	d	file:
+int32_MINMAX	sntrup761.c	/^#define int32_MINMAX(/;"	d	file:
+int32_divmod_uint14	sntrup761.c	/^static void int32_divmod_uint14(int32 *q,uint16 *r,int32 x,uint16 m)$/;"	f	typeref:typename:void	file:
+int32_mod_uint14	sntrup761.c	/^static uint16 int32_mod_uint14(int32 x,uint16 m)$/;"	f	typeref:typename:uint16	file:
+int32_t	defines.h	/^typedef int int32_t;$/;"	t	typeref:typename:int
+int64	sntrup761.c	/^#define int64 /;"	d	file:
+int64_t	defines.h	/^typedef long int int64_t;$/;"	t	typeref:typename:long int
+int64_t	defines.h	/^typedef long long int int64_t;$/;"	t	typeref:typename:long long int
+int8	sntrup761.c	/^#define int8 /;"	d	file:
+int8_t	defines.h	/^typedef signed char int8_t;$/;"	t	typeref:typename:signed char
+interactive_loop	sftp.c	/^interactive_loop(struct sftp_conn *conn, char *file1, char *file2)$/;"	f	typeref:typename:int	file:
+interactive_mode	packet.c	/^	int interactive_mode;$/;"	m	struct:session_state	typeref:typename:int	file:
+interop	regress/Makefile	/^interop interop-tests: t-exec-interop$/;"	t
+interop	regress/Makefile	/^interop: ${INTEROP_TARGETS}$/;"	t
+interop-tests	Makefile.in	/^interop-tests t-exec file-tests: regress-prep regress-binaries $(TARGETS)$/;"	t
+interop-tests	regress/Makefile	/^interop interop-tests: t-exec-interop$/;"	t
+interrupted	scp.c	/^volatile sig_atomic_t interrupted = 0;$/;"	v	typeref:typename:volatile sig_atomic_t
+interrupted	sftp.c	/^volatile sig_atomic_t interrupted = 0;$/;"	v	typeref:typename:volatile sig_atomic_t
+intmax_t	defines.h	/^typedef long long intmax_t;$/;"	t	typeref:typename:long long
+invalid	ssh-keygen.c	/^	int invalid;		\/* File contained invalid items; don't delete *\/$/;"	m	struct:known_hosts_ctx	typeref:typename:int	file:
+io_ready	channels.h	/^	u_int	io_ready;	\/* bitmask of SSH_CHAN_IO_* *\/$/;"	m	struct:Channel	typeref:typename:u_int
+io_want	channels.h	/^	u_int	io_want;	\/* bitmask of SSH_CHAN_IO_* *\/$/;"	m	struct:Channel	typeref:typename:u_int
+ip	hostfile.c	/^	const char *host, *ip;$/;"	m	struct:host_delete_ctx	typeref:typename:const char *	file:
+ip	sshconnect.c	/^	const char *host, *ip;$/;"	m	struct:find_by_key_ctx	typeref:typename:const char *	file:
+ip_aux	umac.c	/^static UINT64 ip_aux(UINT64 t, UINT64 *ipkp, UINT64 data)$/;"	f	typeref:typename:UINT64	file:
+ip_keys	umac.c	/^    UINT64 ip_keys[STREAMS*4];            \/* Inner-product keys           *\/$/;"	m	struct:uhash_ctx	typeref:typename:UINT64[]	file:
+ip_long	umac.c	/^static void ip_long(uhash_ctx_t ahc, u_char *res)$/;"	f	typeref:typename:void	file:
+ip_qos_bulk	readconf.h	/^	int	ip_qos_bulk;		\/* IP ToS\/DSCP\/class for bulk traffic *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+ip_qos_bulk	servconf.h	/^	int	ip_qos_bulk;		\/* IP ToS\/DSCP\/class for bulk traffic *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+ip_qos_interactive	readconf.h	/^	int	ip_qos_interactive;	\/* IP ToS\/DSCP\/class for interactive *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+ip_qos_interactive	servconf.h	/^	int	ip_qos_interactive;	\/* IP ToS\/DSCP\/class for interactive *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+ip_reduce_p36	umac.c	/^static UINT32 ip_reduce_p36(UINT64 t)$/;"	f	typeref:typename:UINT32	file:
+ip_short	umac.c	/^static void ip_short(uhash_ctx_t ahc, UINT8 *nh_res, u_char *res)$/;"	f	typeref:typename:void	file:
+ip_str	clientloop.c	/^	char *host_str, *ip_str;$/;"	m	struct:hostkeys_update_ctx	typeref:typename:char *	file:
+ip_trans	umac.c	/^    UINT32 ip_trans[STREAMS];             \/* Inner-product translation    *\/$/;"	m	struct:uhash_ctx	typeref:typename:UINT32[]	file:
+ipaddr-display	configure.ac	/^	AC_ARG_WITH([ipaddr-display],$/;"	w
+ipqos	misc.c	/^} ipqos[] = {$/;"	v	typeref:typename:const struct __anon0dce19420208[]
+iptos2str	misc.c	/^iptos2str(int iptos)$/;"	f	typeref:typename:const char *
+ipv4_masklen	srclimit.c	/^static int max_children, max_persource, ipv4_masklen, ipv6_masklen;$/;"	v	typeref:typename:int	file:
+ipv64_normalise_mapped	canohost.c	/^ipv64_normalise_mapped(struct sockaddr_storage *addr, socklen_t *len)$/;"	f	typeref:typename:void
+ipv6_masklen	srclimit.c	/^static int max_children, max_persource, ipv4_masklen, ipv6_masklen;$/;"	v	typeref:typename:int	file:
+iqueue	sftp-server.c	/^struct sshbuf *iqueue;$/;"	v	typeref:struct:sshbuf *
+iqueue	ssh-pkcs11-helper.c	/^struct sshbuf *iqueue;$/;"	v	typeref:struct:sshbuf *
+irix_setusercontext	openbsd-compat/port-irix.c	/^irix_setusercontext(struct passwd *pw)$/;"	f	typeref:typename:void
+is_addr	ssh.c	/^is_addr(const char *name)$/;"	f	typeref:typename:int	file:
+is_addr_fast	ssh.c	/^is_addr_fast(const char *name)$/;"	f	typeref:typename:int	file:
+is_ca	authfd.h	/^	int is_ca;$/;"	m	struct:dest_constraint_hop	typeref:typename:int
+is_cert_revoked	krl.c	/^is_cert_revoked(const struct sshkey *key, struct revoked_certs *rc)$/;"	f	typeref:typename:int	file:
+is_child	session.c	/^static int is_child = 0;$/;"	v	typeref:typename:int	file:
+is_key_revoked	krl.c	/^is_key_revoked(struct ssh_krl *krl, const struct sshkey *key)$/;"	f	typeref:typename:int	file:
+is_leap	openbsd-compat/bsd-timegm.c	/^static int is_leap(unsigned y)$/;"	f	typeref:typename:int	file:
+is_numeric_hostname	dns.c	/^is_numeric_hostname(const char *hostname)$/;"	f	typeref:typename:int	file:
+is_pam_session_open	auth-pam.c	/^is_pam_session_open(void)$/;"	f	typeref:typename:int
+is_path_to_xsocket	channels.c	/^is_path_to_xsocket(const char *display, char *path, size_t pathlen)$/;"	f	typeref:typename:int	file:
+is_subsystem	session.h	/^	int	is_subsystem;$/;"	m	struct:Session	typeref:typename:int
+isatty	channels.h	/^	int     isatty;		\/* rfd is a tty *\/$/;"	m	struct:Channel	typeref:typename:int
+isblank	openbsd-compat/bsd-misc.c	/^isblank(int c)$/;"	f	typeref:typename:int
+isctype	openbsd-compat/charclass.h	/^	int (*isctype)(int);$/;"	m	struct:cclass	typeref:typename:int (*)(int)
+ismeta	openbsd-compat/glob.c	/^#define	ismeta(/;"	d	file:
+isoctal	openbsd-compat/vis.c	/^#define	isoctal(/;"	d	file:
+ispath	readconf.c	/^	int ispath;$/;"	m	struct:fwdarg	typeref:typename:int	file:
+isprivate	sshconnect2.c	/^	int	isprivate;		\/* key points to the private key *\/$/;"	m	struct:identity	typeref:typename:int	file:
+istate	channels.h	/^	u_int   istate;		\/* input from channel (state of receive half) *\/$/;"	m	struct:Channel	typeref:typename:u_int
+istates	nchan.c	/^static const char * const istates[] = {$/;"	v	typeref:typename:const char * const[]	file:
+isvisible	openbsd-compat/vis.c	/^#define	isvisible(/;"	d	file:
+iv	kex.h	/^	u_char	*iv;$/;"	m	struct:sshenc	typeref:typename:u_char *
+iv_len	cipher.c	/^	u_int	iv_len;		\/* defaults to block_size *\/$/;"	m	struct:sshcipher	typeref:typename:u_int	file:
+iv_len	kex.h	/^	u_int	iv_len;$/;"	m	struct:sshenc	typeref:typename:u_int
+jot	regress/test-exec.sh	/^jot() {$/;"	f
+jump_extra	readconf.h	/^	char   *jump_extra;$/;"	m	struct:__anon7d31da1d0108	typeref:typename:char *
+jump_host	readconf.h	/^	char   *jump_host;$/;"	m	struct:__anon7d31da1d0108	typeref:typename:char *
+jump_port	readconf.h	/^	int	jump_port;$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+jump_user	readconf.h	/^	char   *jump_user;$/;"	m	struct:__anon7d31da1d0108	typeref:typename:char *
+junk	sandbox-null.c	/^	int junk;$/;"	m	struct:ssh_sandbox	typeref:typename:int	file:
+k	sshkey-xmss.c	/^	u_int32_t	n, w, h, k;$/;"	m	struct:ssh_xmss_state	typeref:typename:u_int32_t	file:
+k	xmss_fast.h	/^  unsigned int k;$/;"	m	struct:__anon22bef5f30208	typeref:typename:unsigned int
+kbd_interactive_authentication	readconf.h	/^	int     kbd_interactive_authentication; \/* Try keyboard-interactive auth. *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+kbd_interactive_authentication	servconf.h	/^	int     kbd_interactive_authentication;	\/* If true, permit *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+kbd_interactive_devices	readconf.h	/^	char	*kbd_interactive_devices; \/* Keyboard-interactive auth devices. *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:char *
+kbdint_alloc	auth2-chall.c	/^kbdint_alloc(const char *devs)$/;"	f	typeref:typename:KbdintAuthctxt *	file:
+kbdint_free	auth2-chall.c	/^kbdint_free(KbdintAuthctxt *kbdintctxt)$/;"	f	typeref:typename:void	file:
+kbdint_next_device	auth2-chall.c	/^kbdint_next_device(Authctxt *authctxt, KbdintAuthctxt *kbdintctxt)$/;"	f	typeref:typename:int	file:
+kbdint_reset_device	auth2-chall.c	/^kbdint_reset_device(KbdintAuthctxt *kbdintctxt)$/;"	f	typeref:typename:void	file:
+kbdintctxt	auth.h	/^	void		*kbdintctxt;$/;"	m	struct:Authctxt	typeref:typename:void *
+kdf	umac.c	/^static void kdf(void *bufp, aes_int_key key, UINT8 ndx, int nbytes)$/;"	f	typeref:typename:void	file:
+keep	sshkey-xmss.c	/^	u_char		*keep;$/;"	m	struct:ssh_xmss_state	typeref:typename:u_char *	file:
+keep	xmss_fast.h	/^  unsigned char *keep;$/;"	m	struct:__anon22bef5f30508	typeref:typename:unsigned char *
+keep_alive_timeouts	packet.c	/^	int keep_alive_timeouts;$/;"	m	struct:session_state	typeref:typename:int	file:
+kerberos5	configure.ac	/^AC_ARG_WITH([kerberos5],$/;"	w
+kerberos5	contrib/redhat/openssh.spec	/^%global kerberos5 0$/;"	g
+kerberos5	contrib/redhat/openssh.spec	/^%global kerberos5 1$/;"	g
+kerberos_authentication	servconf.h	/^	int     kerberos_authentication;	\/* If true, permit Kerberos$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+kerberos_get_afs_token	servconf.h	/^	int     kerberos_get_afs_token;		\/* If true, try to get AFS token if$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+kerberos_or_local_passwd	servconf.h	/^	int     kerberos_or_local_passwd;	\/* If true, permit kerberos$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+kerberos_ticket_cleanup	servconf.h	/^	int     kerberos_ticket_cleanup;	\/* If true, destroy ticket$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+kex	kex.h	/^	int	(*kex[KEX_MAX])(struct ssh *);$/;"	m	struct:kex	typeref:typename:int (* [KEX_MAX])(struct ssh *)
+kex	kex.h	/^struct kex {$/;"	s
+kex	packet.h	/^	struct kex *kex;$/;"	m	struct:ssh	typeref:struct:kex *
+kex_alg_by_name	kex.c	/^kex_alg_by_name(const char *name)$/;"	f	typeref:typename:const struct kexalg *	file:
+kex_alg_list	kex.c	/^kex_alg_list(char sep)$/;"	f	typeref:typename:char *
+kex_algorithms	readconf.h	/^	char   *kex_algorithms;	\/* SSH2 kex methods in order of preference. *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:char *
+kex_algorithms	servconf.h	/^	char   *kex_algorithms;	\/* SSH2 kex methods in order of preference. *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:char *
+kex_assemble_names	kex.c	/^kex_assemble_names(char **listp, const char *def, const char *all)$/;"	f	typeref:typename:int
+kex_buf2prop	kex.c	/^kex_buf2prop(struct sshbuf *raw, int *first_kex_follows, char ***propp)$/;"	f	typeref:typename:int
+kex_c25519_dec	kexc25519.c	/^kex_c25519_dec(struct kex *kex, const struct sshbuf *server_blob,$/;"	f	typeref:typename:int
+kex_c25519_enc	kexc25519.c	/^kex_c25519_enc(struct kex *kex, const struct sshbuf *client_blob,$/;"	f	typeref:typename:int
+kex_c25519_keypair	kexc25519.c	/^kex_c25519_keypair(struct kex *kex)$/;"	f	typeref:typename:int
+kex_choose_conf	kex.c	/^kex_choose_conf(struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+kex_default_pk_alg	readconf.c	/^kex_default_pk_alg(void)$/;"	f	typeref:typename:const char *
+kex_derive_keys	kex.c	/^kex_derive_keys(struct ssh *ssh, u_char *hash, u_int hashlen,$/;"	f	typeref:typename:int
+kex_dh_compute_key	kexdh.c	/^kex_dh_compute_key(struct kex *kex, BIGNUM *dh_pub, struct sshbuf *out)$/;"	f	typeref:typename:int
+kex_dh_dec	kexdh.c	/^kex_dh_dec(struct kex *kex, const struct sshbuf *dh_blob,$/;"	f	typeref:typename:int
+kex_dh_enc	kexdh.c	/^kex_dh_enc(struct kex *kex, const struct sshbuf *client_blob,$/;"	f	typeref:typename:int
+kex_dh_keygen	kexdh.c	/^kex_dh_keygen(struct kex *kex)$/;"	f	typeref:typename:int
+kex_dh_keypair	kexdh.c	/^kex_dh_keypair(struct kex *kex)$/;"	f	typeref:typename:int
+kex_ecdh_dec	kexecdh.c	/^kex_ecdh_dec(struct kex *kex, const struct sshbuf *server_blob,$/;"	f	typeref:typename:int
+kex_ecdh_dec_key_group	kexecdh.c	/^kex_ecdh_dec_key_group(struct kex *kex, const struct sshbuf *ec_blob,$/;"	f	typeref:typename:int	file:
+kex_ecdh_enc	kexecdh.c	/^kex_ecdh_enc(struct kex *kex, const struct sshbuf *client_blob,$/;"	f	typeref:typename:int
+kex_ecdh_keypair	kexecdh.c	/^kex_ecdh_keypair(struct kex *kex)$/;"	f	typeref:typename:int
+kex_exchange	kex.h	/^enum kex_exchange {$/;"	g
+kex_exchange_identification	kex.c	/^kex_exchange_identification(struct ssh *ssh, int timeout_ms,$/;"	f	typeref:typename:int
+kex_free	kex.c	/^kex_free(struct kex *kex)$/;"	f	typeref:typename:void
+kex_free_newkeys	kex.c	/^kex_free_newkeys(struct newkeys *newkeys)$/;"	f	typeref:typename:void
+kex_from_blob	packet.c	/^kex_from_blob(struct sshbuf *m, struct kex **kexp)$/;"	f	typeref:typename:int	file:
+kex_fuzz	regress/misc/fuzz-harness/Makefile	/^kex_fuzz: kex_fuzz.o $(SK_NULL_OBJS) $(COMMON_DEPS)$/;"	t
+kex_gen_client	kexgen.c	/^kex_gen_client(struct ssh *ssh)$/;"	f	typeref:typename:int
+kex_gen_hash	kexgen.c	/^kex_gen_hash($/;"	f	typeref:typename:int	file:
+kex_gen_server	kexgen.c	/^kex_gen_server(struct ssh *ssh)$/;"	f	typeref:typename:int
+kex_init_proposals	kex.h	/^enum kex_init_proposals {$/;"	g
+kex_input_ext_info	kex.c	/^kex_input_ext_info(int type, u_int32_t seq, struct ssh *ssh)$/;"	f	typeref:typename:int
+kex_input_kexinit	kex.c	/^kex_input_kexinit(int type, u_int32_t seq, struct ssh *ssh)$/;"	f	typeref:typename:int
+kex_input_newkeys	kex.c	/^kex_input_newkeys(int type, u_int32_t seq, struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+kex_kem_sntrup761x25519_dec	kexsntrup761x25519.c	/^kex_kem_sntrup761x25519_dec(struct kex *kex,$/;"	f	typeref:typename:int
+kex_kem_sntrup761x25519_enc	kexsntrup761x25519.c	/^kex_kem_sntrup761x25519_enc(struct kex *kex,$/;"	f	typeref:typename:int
+kex_kem_sntrup761x25519_keypair	kexsntrup761x25519.c	/^kex_kem_sntrup761x25519_keypair(struct kex *kex)$/;"	f	typeref:typename:int
+kex_load_hostkey	kex.c	/^kex_load_hostkey(struct ssh *ssh, struct sshkey **prvp, struct sshkey **pubp)$/;"	f	typeref:typename:int
+kex_modes	kex.h	/^enum kex_modes {$/;"	g
+kex_names_cat	kex.c	/^kex_names_cat(const char *a, const char *b)$/;"	f	typeref:typename:char *
+kex_names_valid	kex.c	/^kex_names_valid(const char *names)$/;"	f	typeref:typename:int
+kex_new	kex.c	/^kex_new(void)$/;"	f	typeref:struct:kex *
+kex_params	ssh_api.h	/^struct kex_params {$/;"	s
+kex_prop2buf	kex.c	/^kex_prop2buf(struct sshbuf *b, char *proposal[PROPOSAL_MAX])$/;"	f	typeref:typename:int
+kex_prop_free	kex.c	/^kex_prop_free(char **proposal)$/;"	f	typeref:typename:void
+kex_protocol_error	kex.c	/^kex_protocol_error(int type, u_int32_t seq, struct ssh *ssh)$/;"	f	typeref:typename:int
+kex_ready	kex.c	/^kex_ready(struct ssh *ssh, char *proposal[PROPOSAL_MAX])$/;"	f	typeref:typename:int
+kex_reset_dispatch	kex.c	/^kex_reset_dispatch(struct ssh *ssh)$/;"	f	typeref:typename:void	file:
+kex_send_ext_info	kex.c	/^kex_send_ext_info(struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+kex_send_kexinit	kex.c	/^kex_send_kexinit(struct ssh *ssh)$/;"	f	typeref:typename:int
+kex_send_newkeys	kex.c	/^kex_send_newkeys(struct ssh *ssh)$/;"	f	typeref:typename:int
+kex_setup	kex.c	/^kex_setup(struct ssh *ssh, char *proposal[PROPOSAL_MAX])$/;"	f	typeref:typename:int
+kex_start_rekex	kex.c	/^kex_start_rekex(struct ssh *ssh)$/;"	f	typeref:typename:int
+kex_tests	regress/misc/fuzz-harness/kex_fuzz.cc	/^kex_tests(struct shared_state *st, struct test_state *ts)$/;"	f	typeref:typename:void	file:
+kex_tests	regress/unittests/kex/test_kex.c	/^kex_tests(void)$/;"	f	typeref:typename:void
+kex_to_blob	packet.c	/^kex_to_blob(struct sshbuf *m, struct kex *kex)$/;"	f	typeref:typename:int	file:
+kex_type	kex.h	/^	u_int	kex_type;$/;"	m	struct:kex	typeref:typename:u_int
+kex_verify_host_key	kex.c	/^kex_verify_host_key(struct ssh *ssh, struct sshkey *server_host_key)$/;"	f	typeref:typename:int
+kexalg	kex.c	/^struct kexalg {$/;"	s	file:
+kexalgs	kex.c	/^static const struct kexalg kexalgs[] = {$/;"	v	typeref:typename:const struct kexalg[]	file:
+kexc25519_keygen	kexc25519.c	/^kexc25519_keygen(u_char key[CURVE25519_SIZE], u_char pub[CURVE25519_SIZE])$/;"	f	typeref:typename:void
+kexc25519_shared_key	kexc25519.c	/^kexc25519_shared_key(const u_char key[CURVE25519_SIZE],$/;"	f	typeref:typename:int
+kexc25519_shared_key_ext	kexc25519.c	/^kexc25519_shared_key_ext(const u_char key[CURVE25519_SIZE],$/;"	f	typeref:typename:int
+kexgex_client	kexgexc.c	/^kexgex_client(struct ssh *ssh)$/;"	f	typeref:typename:int
+kexgex_hash	kexgex.c	/^kexgex_hash($/;"	f	typeref:typename:int
+kexgex_server	kexgexs.c	/^kexgex_server(struct ssh *ssh)$/;"	f	typeref:typename:int
+key	hostfile.h	/^	struct sshkey *key; \/* Key, if parsed ok and HKF_WANT_MATCH_HOST set *\/$/;"	m	struct:hostkey_foreach_line	typeref:struct:sshkey *
+key	hostfile.h	/^	struct sshkey *key;$/;"	m	struct:hostkey_entry	typeref:struct:sshkey *
+key	kex.h	/^	u_char	*key;$/;"	m	struct:sshenc	typeref:typename:u_char *
+key	mac.h	/^	u_char	*key;$/;"	m	struct:sshmac	typeref:typename:u_char *
+key	misc.c	/^		const char *key;$/;"	m	struct:vdollar_percent_expand::__anon0dce19420108	typeref:typename:const char *	file:
+key	packet.h	/^	struct sshkey *key;$/;"	m	struct:key_entry	typeref:struct:sshkey *
+key	readconf.c	/^	char *key;$/;"	m	struct:multistate	typeref:typename:char *	file:
+key	servconf.c	/^	char *key;$/;"	m	struct:multistate	typeref:typename:char *	file:
+key	sk-api.h	/^	struct sk_enroll_response key;$/;"	m	struct:sk_resident_key	typeref:struct:sk_enroll_response
+key	ssh-agent.c	/^	struct sshkey *key;$/;"	m	struct:hostkey_sid	typeref:struct:sshkey *	file:
+key	ssh-agent.c	/^	struct sshkey *key;$/;"	m	struct:identity	typeref:struct:sshkey *	file:
+key	ssh-keygen.c	/^	char *key;$/;"	m	struct:cert_ext	typeref:typename:char *	file:
+key	ssh-pkcs11-helper.c	/^	struct sshkey	*key;$/;"	m	struct:pkcs11_keyinfo	typeref:struct:sshkey *	file:
+key	ssh-sk.h	/^	struct sshkey *key;$/;"	m	struct:sshsk_resident_key	typeref:struct:sshkey *
+key	sshconnect.c	/^	const struct sshkey *key;$/;"	m	struct:find_by_key_ctx	typeref:typename:const struct sshkey *	file:
+key	sshconnect2.c	/^	struct sshkey	*key;		\/* public\/private key *\/$/;"	m	struct:identity	typeref:struct:sshkey *	file:
+key handle	regress/unittests/sshsig/webauthn.html	/^<h2>key handle<\/h2>$/;"	i
+key_accepted_by_hostkeyalgs	clientloop.c	/^key_accepted_by_hostkeyalgs(const struct sshkey *key)$/;"	f	typeref:typename:int	file:
+key_base_type_match	monitor.c	/^key_base_type_match(const char *method, const struct sshkey *key,$/;"	f	typeref:typename:int	file:
+key_blob	monitor.c	/^static u_char *key_blob = NULL;$/;"	v	typeref:typename:u_char *	file:
+key_bloblen	monitor.c	/^static size_t key_bloblen = 0;$/;"	v	typeref:typename:size_t	file:
+key_blobtype	monitor.c	/^static u_int key_blobtype = MM_NOKEY;$/;"	v	typeref:typename:u_int	file:
+key_entry	packet.h	/^struct key_entry {$/;"	s
+key_file	regress/unittests/hostkeys/test_iterate.c	/^	const char *key_file;		\/* Path for key, NULL for none *\/$/;"	m	struct:expected	typeref:typename:const char *	file:
+key_handle	sk-api.h	/^	uint8_t *key_handle;$/;"	m	struct:sk_enroll_response	typeref:typename:uint8_t *
+key_handle_len	sk-api.h	/^	size_t key_handle_len;$/;"	m	struct:sk_enroll_response	typeref:typename:size_t
+key_id	krl.c	/^	char *key_id;$/;"	m	struct:revoked_key_id	typeref:typename:char *	file:
+key_id	sshkey.h	/^	char		*key_id;$/;"	m	struct:sshkey_cert	typeref:typename:char *
+key_id_cmp	krl.c	/^key_id_cmp(struct revoked_key_id *a, struct revoked_key_id *b)$/;"	f	typeref:typename:int	file:
+key_is_ca	authfd.h	/^	int *key_is_ca;$/;"	m	struct:dest_constraint_hop	typeref:typename:int *
+key_len	cipher.c	/^	u_int	key_len;$/;"	m	struct:sshcipher	typeref:typename:u_int	file:
+key_len	kex.h	/^	u_int	key_len;$/;"	m	struct:sshenc	typeref:typename:u_int
+key_len	mac.c	/^	int		key_len;	\/* just for UMAC *\/$/;"	m	struct:macalg	typeref:typename:int	file:
+key_len	mac.h	/^	u_int	key_len;$/;"	m	struct:sshmac	typeref:typename:u_int
+key_lookup	sk-usbhid.c	/^key_lookup(fido_dev_t *dev, const char *application, const uint8_t *user_id,$/;"	f	typeref:typename:int	file:
+key_opts	monitor.c	/^static struct sshauthopt *key_opts = NULL;$/;"	v	typeref:struct:sshauthopt *	file:
+key_print_wrapper	ssh-keyscan.c	/^key_print_wrapper(struct sshkey *hostkey, struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+key_sig_algorithm	sshconnect2.c	/^key_sig_algorithm(struct ssh *ssh, const struct sshkey *key)$/;"	f	typeref:typename:char *	file:
+key_type	ssh-keygen.c	/^		char *key_type;$/;"	m	struct:do_gen_all_hostkeys::__anon9cc534940208	typeref:typename:char *	file:
+key_type_allowed_by_config	sshconnect2.c	/^key_type_allowed_by_config(struct sshkey *key)$/;"	f	typeref:typename:int	file:
+key_type_display	ssh-keygen.c	/^		char *key_type_display;$/;"	m	struct:do_gen_all_hostkeys::__anon9cc534940208	typeref:typename:char *	file:
+key_type_is_ecdsa_variant	sshkey.c	/^key_type_is_ecdsa_variant(int type)$/;"	f	typeref:typename:int	file:
+key_type_name	ssh-keygen.c	/^static char *key_type_name = NULL;$/;"	v	typeref:typename:char *	file:
+keyalias	sshconnect.h	/^	char *keyalias;$/;"	m	struct:ssh_conn_info	typeref:typename:char *
+keygen	regress/krl.sh	/^keygen() {$/;"	f
+keygrab_ssh2	ssh-keyscan.c	/^keygrab_ssh2(con *c)$/;"	f	typeref:typename:void	file:
+keyhandle	regress/unittests/sshsig/webauthn.html	/^<pre id="keyhandle" style="color: #008; font-family: monospace;"><\/pre>$/;"	I
+keyid	ssh-pkcs11.c	/^	char			*keyid;$/;"	m	struct:pkcs11_key	typeref:typename:char *	file:
+keyid_len	ssh-pkcs11.c	/^	int			keyid_len;$/;"	m	struct:pkcs11_key	typeref:typename:int	file:
+keyprint	ssh-keyscan.c	/^keyprint(con *c, struct sshkey *key)$/;"	f	typeref:typename:void	file:
+keyprint_one	ssh-keyscan.c	/^keyprint_one(const char *host, struct sshkey *key)$/;"	f	typeref:typename:void	file:
+keys	authfd.h	/^	struct sshkey **keys;$/;"	m	struct:dest_constraint_hop	typeref:struct:sshkey **
+keys	authfd.h	/^	struct sshkey **keys;$/;"	m	struct:ssh_identitylist	typeref:struct:sshkey **
+keys	clientloop.c	/^	struct sshkey **keys;$/;"	m	struct:hostkeys_update_ctx	typeref:struct:sshkey **	file:
+keys	hostfile.c	/^	struct sshkey * const *keys;$/;"	m	struct:host_delete_ctx	typeref:struct:sshkey * const *	file:
+keys	sshconnect.h	/^	struct sshkey	**keys;$/;"	m	struct:Sensitive	typeref:struct:sshkey **
+keys	sshconnect2.c	/^	struct idlist keys;$/;"	m	struct:cauthctxt	typeref:struct:idlist	file:
+keys_match	clientloop.c	/^	u_int *keys_match;	\/* mask of HKF_MATCH_* from hostfile.h *\/$/;"	m	struct:hostkeys_update_ctx	typeref:typename:u_int *	file:
+keys_verified	clientloop.c	/^	int *keys_verified;	\/* flag for new keys verified by server *\/$/;"	m	struct:hostkeys_update_ctx	typeref:typename:int *	file:
+keysize	xmss_wots.h	/^  uint32_t keysize;$/;"	m	struct:__anon4b6487d20108	typeref:typename:uint32_t
+keytype	hostfile.h	/^	int keytype;	\/* Type of key; KEY_UNSPEC for invalid\/comment lines *\/$/;"	m	struct:hostkey_foreach_line	typeref:typename:int
+keytype	regress/limit-keytype.sh	/^keytype() {$/;"	f
+keytype	sshkey.c	/^struct keytype {$/;"	s	file:
+keytypes	sshkey.c	/^static const struct keytype keytypes[] = {$/;"	v	typeref:typename:const struct keytype[]	file:
+keyword	regress/netcat.c	/^		const char	*keyword;$/;"	m	struct:map_tos::toskeywords	typeref:typename:const char *	file:
+keywords	readconf.c	/^} keywords[] = {$/;"	v	typeref:struct:__anon7d31da180208[]
+keywords	servconf.c	/^} keywords[] = {$/;"	v	typeref:struct:__anon9b33d3bc0208[]
+kflag	regress/netcat.c	/^int	kflag;					\/* More than one connect *\/$/;"	v	typeref:typename:int
+kh_ca	regress/cert-hostkey.sh	/^kh_ca() {$/;"	f
+kh_revoke	regress/cert-hostkey.sh	/^kh_revoke() {$/;"	f
+killchild	scp.c	/^killchild(int signo)$/;"	f	typeref:typename:void	file:
+killchild	sftp.c	/^killchild(int signo)$/;"	f	typeref:typename:void	file:
+killpg	openbsd-compat/bsd-misc.c	/^killpg(pid_t pgrp, int sig)$/;"	f	typeref:typename:int
+kludge_FD_ISSET	openbsd-compat/kludge-fd_set.c	/^int kludge_FD_ISSET(int n, fd_set *set) {$/;"	f	typeref:typename:int
+kludge_FD_SET	openbsd-compat/kludge-fd_set.c	/^void kludge_FD_SET(int n, fd_set *set) {$/;"	f	typeref:typename:void
+kname	regress/cert-userkey.sh	/^kname() {$/;"	f
+kname_to_ktype	regress/keytype.sh	/^kname_to_ktype() {$/;"	f
+known_hosts_command	readconf.h	/^	char   *known_hosts_command;$/;"	m	struct:__anon7d31da1d0108	typeref:typename:char *
+known_hosts_ctx	ssh-keygen.c	/^struct known_hosts_ctx {$/;"	s	file:
+known_hosts_find_delete	ssh-keygen.c	/^known_hosts_find_delete(struct hostkey_foreach_line *l, void *_ctx)$/;"	f	typeref:typename:int	file:
+known_hosts_hash	ssh-keygen.c	/^known_hosts_hash(struct hostkey_foreach_line *l, void *_ctx)$/;"	f	typeref:typename:int	file:
+krb5_ccname	auth.h	/^	char		*krb5_ccname;$/;"	m	struct:Authctxt	typeref:typename:char *
+krb5_cleanup_proc	auth-krb5.c	/^krb5_cleanup_proc(Authctxt *authctxt)$/;"	f	typeref:typename:void
+krb5_ctx	auth.h	/^	krb5_context	 krb5_ctx;$/;"	m	struct:Authctxt	typeref:typename:krb5_context
+krb5_free_error_message	openbsd-compat/bsd-misc.h	/^# define krb5_free_error_message(/;"	d
+krb5_fwd_ccache	auth.h	/^	krb5_ccache	 krb5_fwd_ccache;$/;"	m	struct:Authctxt	typeref:typename:krb5_ccache
+krb5_get_err_text	defines.h	/^#  define krb5_get_err_text(/;"	d
+krb5_get_error_message	openbsd-compat/bsd-misc.h	/^# define krb5_get_error_message /;"	d
+krb5_init	auth-krb5.c	/^krb5_init(void *context)$/;"	f	typeref:typename:int	file:
+krb5_ticket_file	auth.h	/^	char		*krb5_ticket_file;$/;"	m	struct:Authctxt	typeref:typename:char *
+krb5_user	auth.h	/^	krb5_principal	 krb5_user;$/;"	m	struct:Authctxt	typeref:typename:krb5_principal
+krb_context	gss-serv-krb5.c	/^static krb5_context krb_context = NULL;$/;"	v	typeref:typename:krb5_context	file:
+krl_dump	krl.c	/^krl_dump(struct ssh_krl *krl, FILE *f)$/;"	f	typeref:typename:int
+krl_version	krl.c	/^	u_int64_t krl_version;$/;"	m	struct:ssh_krl	typeref:typename:u_int64_t	file:
+ktypes	sshconnect2.c	/^	char *oktypes, *ktypes;$/;"	m	struct:cauthctxt	typeref:typename:char *	file:
+l	openbsd-compat/sha1.c	/^	u_int32_t l[16];$/;"	m	union:__anonad849d8e010a	typeref:typename:u_int32_t[16]	file:
+l	regress/unittests/hostkeys/test_iterate.c	/^	struct hostkey_foreach_line l;	\/* Expected line contents *\/$/;"	m	struct:expected	typeref:struct:hostkey_foreach_line	file:
+l_tree	xmss_fast.c	/^static void l_tree(unsigned char *leaf, unsigned char *wots_pk, const xmss_params *params, const/;"	f	typeref:typename:void	file:
+label	pkcs11.h	/^  unsigned char label[32];$/;"	m	struct:ck_token_info	typeref:typename:unsigned char[32]
+label	ssh-pkcs11-helper.c	/^	char		*providername, *label;$/;"	m	struct:pkcs11_keyinfo	typeref:typename:char *	file:
+laddress	servconf.h	/^	const char *laddress;	\/* local address *\/$/;"	m	struct:connection_info	typeref:typename:const char *
+lamt	misc.h	/^	u_int64_t lamt;		\/* amount written in last timer interval *\/$/;"	m	struct:bwlimit	typeref:typename:u_int64_t
+largebase	moduli.c	/^static BIGNUM *largebase;$/;"	v	typeref:typename:BIGNUM *	file:
+largebits	moduli.c	/^static u_int32_t largebits, largememory;	\/* megabytes *\/$/;"	v	typeref:typename:u_int32_t	file:
+largememory	moduli.c	/^static u_int32_t largebits, largememory;	\/* megabytes *\/$/;"	v	typeref:typename:u_int32_t	file:
+largenumbers	moduli.c	/^static u_int32_t *LargeSieve, largewords, largetries, largenumbers;$/;"	v	typeref:typename:u_int32_t	file:
+largetries	moduli.c	/^static u_int32_t *LargeSieve, largewords, largetries, largenumbers;$/;"	v	typeref:typename:u_int32_t	file:
+largewords	moduli.c	/^static u_int32_t *LargeSieve, largewords, largetries, largenumbers;$/;"	v	typeref:typename:u_int32_t	file:
+last_fuzz	regress/unittests/test_helper/fuzz.c	/^static struct fuzz *last_fuzz;$/;"	v	typeref:struct:fuzz *	file:
+last_update	progressmeter.c	/^static double last_update;	\/* last progress update *\/$/;"	v	typeref:typename:double	file:
+last_was_cr	clientloop.c	/^static int last_was_cr;		\/* Last character was a newline. *\/$/;"	v	typeref:typename:int	file:
+lastenv	openbsd-compat/setenv.c	/^static char **lastenv;				\/* last value of environ *\/$/;"	v	typeref:typename:char **	file:
+lastlog	configure.ac	/^AC_ARG_ENABLE([lastlog],$/;"	e
+lastlog	configure.ac	/^AC_ARG_WITH([lastlog],$/;"	w
+lastlog_get_entry	loginrec.c	/^lastlog_get_entry(struct logininfo *li)$/;"	f	typeref:typename:int
+lastlog_openseek	loginrec.c	/^lastlog_openseek(struct logininfo *li, int *fd, int filemode)$/;"	f	typeref:typename:int	file:
+lastlog_write_entry	loginrec.c	/^lastlog_write_entry(struct logininfo *li)$/;"	f	typeref:typename:int
+lastlogin_msg	openbsd-compat/port-aix.c	/^static char *lastlogin_msg = NULL;$/;"	v	typeref:typename:char *	file:
+lc	session.c	/^login_cap_t *lc;$/;"	v	typeref:typename:login_cap_t *
+ldflags	configure.ac	/^AC_ARG_WITH([ldflags],$/;"	w
+ldflags-after	configure.ac	/^AC_ARG_WITH([ldflags-after],$/;"	w
+ldns	configure.ac	/^AC_ARG_WITH(ldns,$/;"	w
+leafaddr	xmss_fast.h	/^} leafaddr;$/;"	t	typeref:struct:__anon22bef5f30108
+leave_raw_mode	sshtty.c	/^leave_raw_mode(int quiet)$/;"	f	typeref:typename:void
+len	bitmap.c	/^	size_t len; \/* number of words allocated *\/$/;"	m	struct:bitmap	typeref:typename:size_t	file:
+len	krl.c	/^	size_t len;$/;"	m	struct:revoked_blob	typeref:typename:size_t	file:
+len	mac.c	/^	int		len;		\/* just for UMAC *\/$/;"	m	struct:macalg	typeref:typename:int	file:
+len	openbsd-compat/inet_ntop.c	/^	struct { int base, len; } best, cur;$/;"	m	struct:inet_ntop6::__anonacf84e910108	typeref:typename:int	file:
+len	sftp-client.c	/^	size_t len;$/;"	m	struct:request	typeref:typename:size_t	file:
+len	xmss_wots.h	/^  uint32_t len;$/;"	m	struct:__anon4b6487d20108	typeref:typename:uint32_t
+len_1	xmss_wots.h	/^  uint32_t len_1;$/;"	m	struct:__anon4b6487d20108	typeref:typename:uint32_t
+len_2	xmss_wots.h	/^  uint32_t len_2;$/;"	m	struct:__anon4b6487d20108	typeref:typename:uint32_t
+level	xmss_fast.h	/^  unsigned int level;$/;"	m	struct:__anon22bef5f30108	typeref:typename:unsigned int
+lflag	regress/netcat.c	/^int	lflag;					\/* Bind to local port *\/$/;"	v	typeref:typename:int
+libedit	configure.ac	/^AC_ARG_WITH([libedit],$/;"	w
+libexecdir	Makefile.in	/^libexecdir=@libexecdir@$/;"	m
+libopenbsd-compat.a	openbsd-compat/Makefile.in	/^libopenbsd-compat.a:  $(COMPAT) $(OPENBSD) $(PORTS)$/;"	t
+library_description	pkcs11.h	/^  unsigned char library_description[32];$/;"	m	struct:ck_info	typeref:typename:unsigned char[32]
+library_description	pkcs11.h	/^#define library_description /;"	d
+library_version	pkcs11.h	/^  struct ck_version library_version;$/;"	m	struct:ck_info	typeref:struct:ck_version
+library_version	pkcs11.h	/^#define library_version /;"	d
+libs	configure.ac	/^AC_ARG_WITH([libs],$/;"	w
+libssh.a	Makefile.in	/^libssh.a: $(LIBSSH_OBJS)$/;"	t
+libutil	configure.ac	/^AC_ARG_ENABLE([libutil],$/;"	e
+libver	openbsd-compat/regress/opensslvertest.c	/^	long libver;$/;"	m	struct:version_test	typeref:typename:long	file:
+lifetime	ssh-add.c	/^static int lifetime = 0;$/;"	v	typeref:typename:int	file:
+lifetime	ssh-agent.c	/^static int lifetime = 0;$/;"	v	typeref:typename:int	file:
+limit_kbps	scp.c	/^long long limit_kbps = 0;$/;"	v	typeref:typename:long long
+limit_kbps	sftp-client.c	/^	u_int64_t limit_kbps;$/;"	m	struct:sftp_conn	typeref:typename:u_int64_t	file:
+line	hostfile.h	/^	char *line;	\/* Entire key line; mutable by callback *\/$/;"	m	struct:hostkey_foreach_line	typeref:typename:char *
+line	hostfile.h	/^	u_long line;$/;"	m	struct:hostkey_entry	typeref:typename:u_long
+line	loginrec.h	/^	char       line[LINFO_LINESIZE];         \/* tty\/pty name *\/$/;"	m	struct:logininfo	typeref:typename:char[]
+line_abbrevname	loginrec.c	/^line_abbrevname(char *dst, const char *src, int dstsize)$/;"	f	typeref:typename:char *
+line_fullname	loginrec.c	/^line_fullname(char *dst, const char *src, u_int dstsize)$/;"	f	typeref:typename:char *
+line_stripname	loginrec.c	/^line_stripname(char *dst, const char *src, int dstsize)$/;"	f	typeref:typename:char *
+linenum	hostfile.h	/^	u_long linenum;	\/* Line number *\/$/;"	m	struct:hostkey_foreach_line	typeref:typename:u_long
+linux_audit_record_event	audit-linux.c	/^linux_audit_record_event(int uid, const char *username, const char *hostname,$/;"	f	typeref:typename:int
+list	misc.h	/^	char    **list;$/;"	m	struct:arglist	typeref:typename:char **
+list_hostkey_types	sshd.c	/^list_hostkey_types(void)$/;"	f	typeref:typename:char *	file:
+list_identities	ssh-add.c	/^list_identities(int agent_fd, int do_fp)$/;"	f	typeref:typename:int	file:
+list_starts_with	auth2.c	/^list_starts_with(const char *methods, const char *method,$/;"	f	typeref:typename:int	file:
+listen_addrs	servconf.h	/^	struct listenaddr *listen_addrs;$/;"	m	struct:__anon9b33d3c10108	typeref:struct:listenaddr *
+listen_host	channels.c	/^	char *listen_host;		\/* Remote side should listen address. *\/$/;"	m	struct:permission	typeref:typename:char *	file:
+listen_host	misc.h	/^	char	 *listen_host;		\/* Host (address) to listen on. *\/$/;"	m	struct:Forward	typeref:typename:char *
+listen_on_addrs	sshd.c	/^listen_on_addrs(struct listenaddr *la)$/;"	f	typeref:typename:void	file:
+listen_path	channels.c	/^	char *listen_path;		\/* Remote side should listen path. *\/$/;"	m	struct:permission	typeref:typename:char *	file:
+listen_path	misc.h	/^	char	 *listen_path;		\/* Path to bind domain socket. *\/$/;"	m	struct:Forward	typeref:typename:char *
+listen_port	channels.c	/^	int listen_port;		\/* Remote side should listen port. *\/$/;"	m	struct:permission	typeref:typename:int	file:
+listen_port	misc.h	/^	int	  listen_port;		\/* Port to forward. *\/$/;"	m	struct:Forward	typeref:typename:int
+listen_socks	sshd.c	/^static int listen_socks[MAX_LISTEN_SOCKS];$/;"	v	typeref:typename:int[]	file:
+listenaddr	servconf.h	/^struct listenaddr {$/;"	s
+listener_proctitle	sshd.c	/^static char *listener_proctitle;$/;"	v	typeref:typename:char *	file:
+listening_addr	channels.h	/^	char   *listening_addr;	\/* addr being listened for forwards *\/$/;"	m	struct:Channel	typeref:typename:char *
+listening_port	channels.h	/^	int     listening_port;	\/* port being listened for forwards *\/$/;"	m	struct:Channel	typeref:typename:int
+llabs	openbsd-compat/bsd-misc.c	/^llabs(long long j)$/;"	f	typeref:typename:long long
+lo	krl.c	/^	u_int64_t lo, hi;$/;"	m	struct:revoked_serial	typeref:typename:u_int64_t	file:
+load_bignum	regress/unittests/sshkey/common.c	/^load_bignum(const char *name)$/;"	f	typeref:typename:BIGNUM *
+load_callback_ctx	hostfile.c	/^struct load_callback_ctx {$/;"	s	file:
+load_file	regress/unittests/sshkey/common.c	/^load_file(const char *name)$/;"	f	typeref:struct:sshbuf *
+load_file	regress/unittests/sshsig/tests.c	/^load_file(const char *name)$/;"	f	typeref:struct:sshbuf *	file:
+load_host_private_key	kex.h	/^	struct sshkey *(*load_host_private_key)(int, int, struct ssh *);$/;"	m	struct:kex	typeref:struct:sshkey * (*)(int,int,struct ssh *)
+load_host_public_key	kex.h	/^	struct sshkey *(*load_host_public_key)(int, int, struct ssh *);$/;"	m	struct:kex	typeref:struct:sshkey * (*)(int,int,struct ssh *)
+load_hostkeys	hostfile.c	/^load_hostkeys(struct hostkeys *hostkeys, const char *host, const char *path,$/;"	f	typeref:typename:void
+load_hostkeys_command	sshconnect.c	/^load_hostkeys_command(struct hostkeys *hostkeys, const char *command_template,$/;"	f	typeref:typename:void
+load_hostkeys_file	hostfile.c	/^load_hostkeys_file(struct hostkeys *hostkeys, const char *host,$/;"	f	typeref:typename:void
+load_identity	ssh-keygen.c	/^load_identity(const char *filename, char **commentp)$/;"	f	typeref:struct:sshkey *	file:
+load_identity_file	sshconnect2.c	/^load_identity_file(Identity *id)$/;"	f	typeref:struct:sshkey *	file:
+load_key	regress/unittests/authopt/tests.c	/^load_key(const char *name)$/;"	f	typeref:struct:sshkey *	file:
+load_key	regress/unittests/sshsig/tests.c	/^load_key(const char *name)$/;"	f	typeref:struct:sshkey *	file:
+load_krl	ssh-keygen.c	/^load_krl(const char *path, struct ssh_krl **krlp)$/;"	f	typeref:typename:void	file:
+load_pkcs11_key	ssh-keygen.c	/^load_pkcs11_key(char *path)$/;"	f	typeref:struct:sshkey *	file:
+load_public_identity_files	ssh.c	/^load_public_identity_files(const struct ssh_conn_info *cinfo)$/;"	f	typeref:typename:void	file:
+load_resident_keys	ssh-add.c	/^load_resident_keys(int agent_fd, const char *skprovider, int qflag,$/;"	f	typeref:typename:int	file:
+load_server_config	servconf.c	/^load_server_config(const char *filename, struct sshbuf *conf)$/;"	f	typeref:typename:void
+load_sign_key	ssh-keygen.c	/^load_sign_key(const char *keypath, const struct sshkey *pubkey)$/;"	f	typeref:struct:sshkey *	file:
+load_text_file	regress/unittests/sshkey/common.c	/^load_text_file(const char *name)$/;"	f	typeref:struct:sshbuf *
+local_command	readconf.h	/^	char	*local_command;$/;"	m	struct:__anon7d31da1d0108	typeref:typename:char *
+local_consumed	channels.h	/^	u_int	local_consumed;$/;"	m	struct:Channel	typeref:typename:u_int
+local_do_ls	sftp.c	/^local_do_ls(const char *args)$/;"	f	typeref:typename:void	file:
+local_do_shell	sftp.c	/^local_do_shell(const char *args)$/;"	f	typeref:typename:void	file:
+local_forwards	readconf.h	/^	struct Forward *local_forwards;$/;"	m	struct:__anon7d31da1d0108	typeref:struct:Forward *
+local_ipaddr	packet.h	/^	char *local_ipaddr;$/;"	m	struct:ssh	typeref:typename:char *
+local_is_dir	sftp-client.c	/^local_is_dir(const char *path)$/;"	f	typeref:typename:int
+local_listen	regress/netcat.c	/^local_listen(char *host, char *port, struct addrinfo hints)$/;"	f	typeref:typename:int
+local_maxpacket	channels.h	/^	u_int	local_maxpacket;$/;"	m	struct:Channel	typeref:typename:u_int
+local_perms	channels.c	/^	struct permission_set local_perms;$/;"	m	struct:ssh_channels	typeref:struct:permission_set	file:
+local_port	packet.h	/^	int local_port;$/;"	m	struct:ssh	typeref:typename:int
+local_user	sshconnect2.c	/^	const char *local_user;$/;"	m	struct:cauthctxt	typeref:typename:const char *	file:
+local_window	channels.h	/^	u_int	local_window;$/;"	m	struct:Channel	typeref:typename:u_int
+local_window_max	channels.h	/^	u_int	local_window_max;$/;"	m	struct:Channel	typeref:typename:u_int
+localname	ssh-gss.h	/^	int (*localname) (ssh_gssapi_client *, char **);$/;"	m	struct:ssh_gssapi_mech_struct	typeref:typename:int (*)(ssh_gssapi_client *,char **)
+localtime_r	openbsd-compat/bsd-misc.c	/^localtime_r(const time_t *timep, struct tm *result)$/;"	f	typeref:struct:tm *
+lock_agent	ssh-add.c	/^lock_agent(int agent_fd, int lock)$/;"	f	typeref:typename:int	file:
+lock_mutex	pkcs11.h	/^  ck_lockmutex_t lock_mutex;$/;"	m	struct:ck_c_initialize_args	typeref:typename:ck_lockmutex_t
+lock_mutex	pkcs11.h	/^#define lock_mutex /;"	d
+lock_pwhash	ssh-agent.c	/^u_char lock_pwhash[LOCK_SIZE];$/;"	v	typeref:typename:u_char[]
+lock_salt	ssh-agent.c	/^u_char lock_salt[LOCK_SALT_SIZE];$/;"	v	typeref:typename:u_char[]
+locked	ssh-agent.c	/^int locked = 0;$/;"	v	typeref:typename:int
+lockfd	sshkey-xmss.c	/^	int		lockfd;		\/* locked in sshkey_xmss_get_state() *\/$/;"	m	struct:ssh_xmss_state	typeref:typename:int	file:
+locuser	sshconnect.h	/^	char *locuser;$/;"	m	struct:ssh_conn_info	typeref:typename:char *
+log_change_level	log.c	/^log_change_level(LogLevel new_log_level)$/;"	f	typeref:typename:int
+log_facilities	log.c	/^} log_facilities[] = {$/;"	v	typeref:struct:__anon0fdff1180108[]
+log_facility	log.c	/^static int log_facility = LOG_AUTH;$/;"	v	typeref:typename:int	file:
+log_facility	readconf.h	/^	SyslogFacility log_facility;	\/* Facility for system logging. *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:SyslogFacility
+log_facility	servconf.h	/^	SyslogFacility log_facility;	\/* Facility for system logging. *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:SyslogFacility
+log_facility_name	log.c	/^log_facility_name(SyslogFacility facility)$/;"	f	typeref:typename:const char *
+log_facility_number	log.c	/^log_facility_number(char *name)$/;"	f	typeref:typename:SyslogFacility
+log_handler	log.c	/^static log_handler_fn *log_handler;$/;"	v	typeref:typename:log_handler_fn *	file:
+log_handler_ctx	log.c	/^static void *log_handler_ctx;$/;"	v	typeref:typename:void *	file:
+log_handler_fn	log.h	/^typedef void (log_handler_fn)(LogLevel, int, const char *, void *);$/;"	t	typeref:typename:void ()(LogLevel,int,const char *,void *)
+log_init	log.c	/^log_init(const char *av0, LogLevel level, SyslogFacility facility,$/;"	f	typeref:typename:void
+log_is_on_stderr	log.c	/^log_is_on_stderr(void)$/;"	f	typeref:typename:int
+log_level	log.c	/^static LogLevel log_level = SYSLOG_LEVEL_INFO;$/;"	v	typeref:typename:LogLevel	file:
+log_level	readconf.h	/^	LogLevel log_level;	\/* Level for logging. *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:LogLevel
+log_level	scp.c	/^LogLevel log_level = SYSLOG_LEVEL_INFO;$/;"	v	typeref:typename:LogLevel
+log_level	servconf.h	/^	LogLevel log_level;	\/* Level for system logging. *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:LogLevel
+log_level	sftp-server.c	/^static LogLevel log_level = SYSLOG_LEVEL_ERROR;$/;"	v	typeref:typename:LogLevel	file:
+log_level_get	log.c	/^log_level_get(void)$/;"	f	typeref:typename:LogLevel
+log_level_name	log.c	/^log_level_name(LogLevel level)$/;"	f	typeref:typename:const char *
+log_level_number	log.c	/^log_level_number(char *name)$/;"	f	typeref:typename:LogLevel
+log_levels	log.c	/^} log_levels[] =$/;"	v	typeref:struct:__anon0fdff1180208[]
+log_on_stderr	log.c	/^static int log_on_stderr = 1;$/;"	v	typeref:typename:int	file:
+log_preamble	packet.h	/^	char *log_preamble;$/;"	m	struct:ssh	typeref:typename:char *
+log_redirect_stderr_to	log.c	/^log_redirect_stderr_to(const char *logfile)$/;"	f	typeref:typename:void
+log_stderr	sshd.c	/^static int log_stderr = 0;$/;"	v	typeref:typename:int	file:
+log_stderr_fd	log.c	/^static int log_stderr_fd = STDERR_FILENO;$/;"	v	typeref:typename:int	file:
+log_verbose	log.c	/^static char **log_verbose;$/;"	v	typeref:typename:char **	file:
+log_verbose	readconf.h	/^	char   **log_verbose;$/;"	m	struct:__anon7d31da1d0108	typeref:typename:char **
+log_verbose	servconf.h	/^	char	**log_verbose;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:char **
+log_verbose_add	log.c	/^log_verbose_add(const char *s)$/;"	f	typeref:typename:void
+log_verbose_reset	log.c	/^log_verbose_reset(void)$/;"	f	typeref:typename:void
+log_w	xmss_wots.h	/^  uint32_t log_w;$/;"	m	struct:__anon4b6487d20108	typeref:typename:uint32_t
+logdie	log.h	/^#define logdie(/;"	d
+logdie_f	log.h	/^#define logdie_f(/;"	d
+logdie_fr	log.h	/^#define logdie_fr(/;"	d
+logdie_r	log.h	/^#define logdie_r(/;"	d
+logged_in	ssh-pkcs11.c	/^	int			logged_in;$/;"	m	struct:pkcs11_slotinfo	typeref:typename:int	file:
+login_alloc_entry	loginrec.c	/^logininfo *login_alloc_entry(pid_t pid, const char *username,$/;"	f	typeref:struct:logininfo *
+login_free_entry	loginrec.c	/^login_free_entry(struct logininfo *li)$/;"	f	typeref:typename:void
+login_get_lastlog	loginrec.c	/^login_get_lastlog(struct logininfo *li, const uid_t uid)$/;"	f	typeref:struct:logininfo *
+login_get_lastlog_time	loginrec.c	/^login_get_lastlog_time(const uid_t uid)$/;"	f	typeref:typename:unsigned int
+login_getpwclass	openbsd-compat/openbsd-compat.h	/^# define login_getpwclass(/;"	d
+login_grace_time	servconf.h	/^	int     login_grace_time;	\/* Disconnect if no auth in this time$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+login_init_entry	loginrec.c	/^login_init_entry(struct logininfo *li, pid_t pid, const char *username,$/;"	f	typeref:typename:int
+login_login	loginrec.c	/^login_login(struct logininfo *li)$/;"	f	typeref:typename:int
+login_logout	loginrec.c	/^login_logout(struct logininfo *li)$/;"	f	typeref:typename:int
+login_netinfo	loginrec.h	/^union login_netinfo {$/;"	u
+login_set_addr	loginrec.c	/^login_set_addr(struct logininfo *li, const struct sockaddr *sa,$/;"	f	typeref:typename:void
+login_set_current_time	loginrec.c	/^login_set_current_time(struct logininfo *li)$/;"	f	typeref:typename:void
+login_utmp_only	loginrec.c	/^login_utmp_only(struct logininfo *li)$/;"	f	typeref:typename:int
+login_write	loginrec.c	/^login_write(struct logininfo *li)$/;"	f	typeref:typename:int
+logininfo	loginrec.h	/^struct logininfo {$/;"	s
+loginmsg	auth.h	/^	struct sshbuf	*loginmsg;$/;"	m	struct:Authctxt	typeref:struct:sshbuf *
+loginmsg	sshd.c	/^struct sshbuf *loginmsg;$/;"	v	typeref:struct:sshbuf *
+logintest	Makefile.in	/^logintest: logintest.o $(LIBCOMPAT) libssh.a loginrec.o$/;"	t
+logit	log.h	/^#define logit(/;"	d
+logit_f	log.h	/^#define logit_f(/;"	d
+logit_fr	log.h	/^#define logit_fr(/;"	d
+logit_r	log.h	/^#define logit_r(/;"	d
+long_name	sftp-server.c	/^	char *long_name;$/;"	m	struct:Stat	typeref:typename:char *	file:
+longname	sftp-client.h	/^	char *longname;$/;"	m	struct:SFTP_DIRENT	typeref:typename:char *
+lookup_and_record	sftp-usergroup.c	/^lookup_and_record(struct sftp_conn *conn,$/;"	f	typeref:typename:void	file:
+lookup_env_in_list	misc.c	/^lookup_env_in_list(const char *env, char * const *envs, size_t nenvs)$/;"	f	typeref:typename:const char *
+lookup_identity	ssh-agent.c	/^lookup_identity(struct sshkey *key)$/;"	f	typeref:typename:Identity *	file:
+lookup_key	ssh-pkcs11-helper.c	/^lookup_key(struct sshkey *k)$/;"	f	typeref:struct:sshkey *	file:
+lookup_key_in_hostkeys_by_type	hostfile.c	/^lookup_key_in_hostkeys_by_type(struct hostkeys *hostkeys, int keytype, int nid,$/;"	f	typeref:typename:int
+lookup_marker_in_hostkeys	hostfile.c	/^lookup_marker_in_hostkeys(struct hostkeys *hostkeys, int want_marker)$/;"	f	typeref:typename:int
+lookup_opcode_name	readconf.c	/^lookup_opcode_name(OpCodes code)$/;"	f	typeref:typename:const char *	file:
+lookup_opcode_name	servconf.c	/^lookup_opcode_name(ServerOpCodes code)$/;"	f	typeref:typename:const char *	file:
+lookup_setenv_in_list	misc.c	/^lookup_setenv_in_list(const char *env, char * const *envs, size_t nenvs)$/;"	f	typeref:typename:const char *
+lostconn	scp.c	/^lostconn(int signo)$/;"	f	typeref:typename:void
+lowercase	misc.c	/^lowercase(char *s)$/;"	f	typeref:typename:void
+lperm_tests	regress/forward-control.sh	/^lperm_tests() {$/;"	f
+lport	servconf.h	/^	int lport;		\/* local port *\/$/;"	m	struct:connection_info	typeref:typename:int
+ls_file	sftp-common.c	/^ls_file(const char *name, const struct stat *st, int remote, int si_units,$/;"	f	typeref:typename:char *
+lt	sc25519.c	/^static crypto_uint32 lt(crypto_uint32 a,crypto_uint32 b) \/* 16-bit inputs *\/$/;"	f	typeref:typename:crypto_uint32	file:
+m	mac.c	/^		u_char m[SSH_DIGEST_MAX_LENGTH];$/;"	m	union:mac_compute::__anon0fea4b47010a	typeref:typename:u_char[]	file:
+m	sc25519.c	/^static const crypto_uint32 m[32] = {0xED, 0xD3, 0xF5, 0x5C, 0x1A, 0x63, 0x12, 0x58, 0xD6, 0x9C, /;"	v	typeref:typename:const crypto_uint32[32]	file:
+m1	regress/modpipe.c	/^	u_int8_t m1, m2;$/;"	m	struct:modification	typeref:typename:u_int8_t	file:
+m2	regress/modpipe.c	/^	u_int8_t m1, m2;$/;"	m	struct:modification	typeref:typename:u_int8_t	file:
+m36	umac.c	/^#define m36 /;"	d	file:
+m_log_recvfd	monitor.h	/^	int			 m_log_recvfd;$/;"	m	struct:monitor	typeref:typename:int
+m_log_sendfd	monitor.h	/^	int			 m_log_sendfd;$/;"	m	struct:monitor	typeref:typename:int
+m_pid	monitor.h	/^	pid_t			 m_pid;$/;"	m	struct:monitor	typeref:typename:pid_t
+m_pkex	monitor.h	/^	struct kex		**m_pkex;$/;"	m	struct:monitor	typeref:struct:kex **
+m_recvfd	monitor.h	/^	int			 m_recvfd;$/;"	m	struct:monitor	typeref:typename:int
+m_sendfd	monitor.h	/^	int			 m_sendfd;$/;"	m	struct:monitor	typeref:typename:int
+mac	kex.h	/^	struct sshmac	mac;$/;"	m	struct:newkeys	typeref:struct:sshmac
+mac_alg_list	mac.c	/^mac_alg_list(char sep)$/;"	f	typeref:typename:char *
+mac_check	mac.c	/^mac_check(struct sshmac *mac, u_int32_t seqno,$/;"	f	typeref:typename:int
+mac_clear	mac.c	/^mac_clear(struct sshmac *mac)$/;"	f	typeref:typename:void
+mac_compute	mac.c	/^mac_compute(struct sshmac *mac, u_int32_t seqno,$/;"	f	typeref:typename:int
+mac_init	mac.c	/^mac_init(struct sshmac *mac)$/;"	f	typeref:typename:int
+mac_len	mac.h	/^	u_int	mac_len;$/;"	m	struct:sshmac	typeref:typename:u_int
+mac_setup	mac.c	/^mac_setup(struct sshmac *mac, char *name)$/;"	f	typeref:typename:int
+mac_setup_by_alg	mac.c	/^mac_setup_by_alg(struct sshmac *mac, const struct macalg *macalg)$/;"	f	typeref:typename:int	file:
+mac_valid	mac.c	/^mac_valid(const char *names)$/;"	f	typeref:typename:int
+macalg	mac.c	/^struct macalg {$/;"	s	file:
+macs	mac.c	/^static const struct macalg macs[] = {$/;"	v	typeref:typename:const struct macalg[]	file:
+macs	readconf.h	/^	char   *macs;		\/* SSH2 macs in order of preference. *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:char *
+macs	servconf.h	/^	char   *macs;		\/* Supported SSH2 macs. *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:char *
+maildir	configure.ac	/^AC_ARG_WITH([maildir],$/;"	w
+main	contrib/gnome-ssh-askpass1.c	/^main(int argc, char **argv)$/;"	f	typeref:typename:int
+main	contrib/gnome-ssh-askpass2.c	/^main(int argc, char **argv)$/;"	f	typeref:typename:int
+main	contrib/gnome-ssh-askpass3.c	/^main(int argc, char **argv)$/;"	f	typeref:typename:int
+main	hmac.c	/^main(int argc, char **argv)$/;"	f	typeref:typename:int
+main	logintest.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
+main	openbsd-compat/bsd-getline.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
+main	openbsd-compat/fmt_scaled.c	/^main(int argc, char **argv)$/;"	f	typeref:typename:int
+main	openbsd-compat/regress/closefromtest.c	/^main(void)$/;"	f	typeref:typename:int
+main	openbsd-compat/regress/opensslvertest.c	/^main(void)$/;"	f	typeref:typename:int
+main	openbsd-compat/regress/snprintftest.c	/^main(void)$/;"	f	typeref:typename:int
+main	openbsd-compat/regress/strduptest.c	/^main(void)$/;"	f	typeref:typename:int
+main	openbsd-compat/regress/strtonumtest.c	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int
+main	openbsd-compat/regress/utimensattest.c	/^main(void)$/;"	f	typeref:typename:int
+main	regress/check-perm.c	/^main(int argc, char **argv)$/;"	f	typeref:typename:int
+main	regress/misc/fuzz-harness/agent_fuzz_helper.c	/^#define main(/;"	d	file:
+main	regress/misc/fuzz-harness/kex_fuzz.cc	/^int main(void)$/;"	f	typeref:typename:int
+main	regress/mkdtemp.c	/^main(int argc, char **argv)$/;"	f	typeref:typename:int
+main	regress/modpipe.c	/^main(int argc, char **argv)$/;"	f	typeref:typename:int
+main	regress/netcat.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
+main	regress/setuid-allowed.c	/^main(int argc, char **argv)$/;"	f	typeref:typename:int
+main	regress/unittests/test_helper/test_helper.c	/^main(int argc, char **argv)$/;"	f	typeref:typename:int
+main	scp.c	/^main(int argc, char **argv)$/;"	f	typeref:typename:int
+main	sftp-server-main.c	/^main(int argc, char **argv)$/;"	f	typeref:typename:int
+main	sftp.c	/^main(int argc, char **argv)$/;"	f	typeref:typename:int
+main	ssh-add.c	/^main(int argc, char **argv)$/;"	f	typeref:typename:int
+main	ssh-agent.c	/^main(int ac, char **av)$/;"	f	typeref:typename:int
+main	ssh-keygen.c	/^main(int argc, char **argv)$/;"	f	typeref:typename:int
+main	ssh-keyscan.c	/^main(int argc, char **argv)$/;"	f	typeref:typename:int
+main	ssh-keysign.c	/^main(int argc, char **argv)$/;"	f	typeref:typename:int
+main	ssh-pkcs11-helper.c	/^main(int argc, char **argv)$/;"	f	typeref:typename:int
+main	ssh-sk-helper.c	/^main(int argc, char **argv)$/;"	f	typeref:typename:int
+main	ssh.c	/^main(int ac, char **av)$/;"	f	typeref:typename:int
+main	sshd.c	/^main(int ac, char **av)$/;"	f	typeref:typename:int
+main_ctx	cipher-chachapoly.c	/^	struct chacha_ctx main_ctx, header_ctx;$/;"	m	struct:chachapoly_ctx	typeref:struct:chacha_ctx	file:
+main_evp	cipher-chachapoly-libcrypto.c	/^	EVP_CIPHER_CTX *main_evp, *header_evp;$/;"	m	struct:chachapoly_ctx	typeref:typename:EVP_CIPHER_CTX *	file:
+main_sigchld_handler	ssh.c	/^main_sigchld_handler(int sig)$/;"	f	typeref:typename:void	file:
+main_sigchld_handler	sshd.c	/^main_sigchld_handler(int sig)$/;"	f	typeref:typename:void	file:
+mainloop	smult_curve25519_ref.c	/^static void mainloop(unsigned int work[64],const unsigned char e[32])$/;"	f	typeref:typename:void	file:
+major	pkcs11.h	/^  unsigned char major;$/;"	m	struct:ck_version	typeref:typename:unsigned char
+major	ssh-gss.h	/^	OM_uint32	major; \/* both *\/$/;"	m	struct:__anon1dbf9ce30308	typeref:typename:OM_uint32
+make_absolute	sftp-client.c	/^make_absolute(char *p, const char *pwd)$/;"	f	typeref:typename:char *
+make_absolute_pwd_glob	sftp.c	/^make_absolute_pwd_glob(const char *p, const char *pwd)$/;"	f	typeref:typename:char *	file:
+make_options	ssh-sk.c	/^make_options(const char *device, const char *user_id,$/;"	f	typeref:typename:int	file:
+make_tmpdir	regress/test-exec.sh	/^make_tmpdir ()$/;"	f
+makeargv	sftp.c	/^makeargv(const char *arg, int *argcp, int sloppy, char *lastquote,$/;"	f	typeref:typename:char **	file:
+malloc	openbsd-compat/getrrsetbyname-ldns.c	/^#define malloc(/;"	d	file:
+malloc_ai	openbsd-compat/fake-rfc2553.c	/^addrinfo *malloc_ai(int port, u_long addr, const struct addrinfo *hints)$/;"	f	typeref:struct:addrinfo *	file:
+malloc_options	xmalloc.c	/^char *malloc_options = "S";$/;"	v	typeref:typename:char *
+mandir	Makefile.in	/^mandir=@mandir@$/;"	m
+mandir	contrib/cygwin/Makefile	/^mandir=$(datadir)\/man$/;"	m
+mansubdir	Makefile.in	/^mansubdir=@mansubdir@$/;"	m
+mansubdir	configure.ac	/^AC_SUBST([mansubdir])$/;"	s
+mantype	configure.ac	/^AC_ARG_WITH([mantype],$/;"	w
+manufacturer_id	pkcs11.h	/^  unsigned char manufacturer_id[32];$/;"	m	struct:ck_info	typeref:typename:unsigned char[32]
+manufacturer_id	pkcs11.h	/^  unsigned char manufacturer_id[32];$/;"	m	struct:ck_slot_info	typeref:typename:unsigned char[32]
+manufacturer_id	pkcs11.h	/^  unsigned char manufacturer_id[32];$/;"	m	struct:ck_token_info	typeref:typename:unsigned char[32]
+manufacturer_id	pkcs11.h	/^#define manufacturer_id /;"	d
+map_tos	regress/netcat.c	/^map_tos(char *s, int *val)$/;"	f	typeref:typename:int
+marker	hostfile.h	/^	HostkeyMarker marker;$/;"	m	struct:hostkey_entry	typeref:typename:HostkeyMarker
+marker	hostfile.h	/^	int marker;	\/* CA\/revocation markers; indicated by MRK_* value *\/$/;"	m	struct:hostkey_foreach_line	typeref:typename:int
+masklen_valid	addr.c	/^masklen_valid(int af, u_int masklen)$/;"	f	typeref:typename:int	file:
+match	hostfile.h	/^	u_int match;	\/* Zero or more of HKF_MATCH_* OR'd together *\/$/;"	m	struct:hostkey_foreach_line	typeref:typename:u_int
+match	openbsd-compat/glob.c	/^match(Char *name, Char *pat, Char *patend)$/;"	f	typeref:typename:int	file:
+match_cfg_line	readconf.c	/^match_cfg_line(Options *options, char **condition, struct passwd *pw,$/;"	f	typeref:typename:int	file:
+match_cfg_line	servconf.c	/^match_cfg_line(char **condition, int line, struct connection_info *ci)$/;"	f	typeref:typename:int	file:
+match_cfg_line_group	servconf.c	/^match_cfg_line_group(const char *grps, int line, const char *user)$/;"	f	typeref:typename:int	file:
+match_filter_allowlist	match.c	/^match_filter_allowlist(const char *proposal, const char *filter)$/;"	f	typeref:typename:char *
+match_filter_denylist	match.c	/^match_filter_denylist(const char *proposal, const char *filter)$/;"	f	typeref:typename:char *
+match_flags	regress/unittests/hostkeys/test_iterate.c	/^	int match_flags;		\/* Expected flags from match *\/$/;"	m	struct:expected	typeref:typename:int	file:
+match_host_and_ip	match.c	/^match_host_and_ip(const char *host, const char *ipaddr,$/;"	f	typeref:typename:int
+match_host_p	regress/unittests/hostkeys/test_iterate.c	/^	int match_host_p;		\/* Match 'prometheus.example.com' *\/$/;"	m	struct:expected	typeref:typename:int	file:
+match_host_p	regress/unittests/hostkeys/test_iterate.c	/^	int match_host_p;$/;"	m	struct:cbctx	typeref:typename:int	file:
+match_host_s	regress/unittests/hostkeys/test_iterate.c	/^	int match_host_s;		\/* Match 'sisyphus.example.com' *\/$/;"	m	struct:expected	typeref:typename:int	file:
+match_host_s	regress/unittests/hostkeys/test_iterate.c	/^	int match_host_s;$/;"	m	struct:cbctx	typeref:typename:int	file:
+match_hostname	match.c	/^match_hostname(const char *host, const char *pattern)$/;"	f	typeref:typename:int
+match_ipv4	regress/unittests/hostkeys/test_iterate.c	/^	int match_ipv4;			\/* Match '192.0.2.1' *\/$/;"	m	struct:expected	typeref:typename:int	file:
+match_ipv4	regress/unittests/hostkeys/test_iterate.c	/^	int match_ipv4;$/;"	m	struct:cbctx	typeref:typename:int	file:
+match_ipv6	regress/unittests/hostkeys/test_iterate.c	/^	int match_ipv6;			\/* Match '2001:db8::1' *\/$/;"	m	struct:expected	typeref:typename:int	file:
+match_ipv6	regress/unittests/hostkeys/test_iterate.c	/^	int match_ipv6;$/;"	m	struct:cbctx	typeref:typename:int	file:
+match_key_hop	ssh-agent.c	/^match_key_hop(const char *tag, const struct sshkey *key,$/;"	f	typeref:typename:int	file:
+match_keys	hostfile.c	/^	u_int *match_keys;	\/* mask of HKF_MATCH_* for this key *\/$/;"	m	struct:host_delete_ctx	typeref:typename:u_int *	file:
+match_list	match.c	/^match_list(const char *client, const char *server, u_int *next)$/;"	f	typeref:typename:char *
+match_maybe_hashed	hostfile.c	/^match_maybe_hashed(const char *host, const char *names, int *was_hashed)$/;"	f	typeref:typename:int	file:
+match_pattern	match.c	/^match_pattern(const char *s, const char *pattern)$/;"	f	typeref:typename:int
+match_pattern_list	match.c	/^match_pattern_list(const char *string, const char *pattern, int dolower)$/;"	f	typeref:typename:int
+match_principals_command	auth2-pubkey.c	/^match_principals_command(struct passwd *user_pw,$/;"	f	typeref:typename:int	file:
+match_principals_file	auth2-pubkey.c	/^match_principals_file(struct passwd *pw, char *file,$/;"	f	typeref:typename:int	file:
+match_principals_option	auth2-pubkeyfile.c	/^match_principals_option(const char *principal_list, struct sshkey_cert *cert)$/;"	f	typeref:typename:int	file:
+match_test_missing_fatal	servconf.c	/^match_test_missing_fatal(const char *criteria, const char *attrib)$/;"	f	typeref:typename:void	file:
+match_user	match.c	/^match_user(const char *user, const char *host, const char *ipaddr,$/;"	f	typeref:typename:int
+match_usergroup_pattern_list	match.c	/^match_usergroup_pattern_list(const char *string, const char *pattern)$/;"	f	typeref:typename:int
+matching_host_key_dns	sshconnect.c	/^static int matching_host_key_dns = 0;$/;"	v	typeref:typename:int	file:
+max	kex.h	/^	u_int	min, max, nbits;	\/* GEX *\/$/;"	m	struct:kex	typeref:typename:u_int
+max_authtries	servconf.h	/^	int	max_authtries;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+max_blocks_in	packet.c	/^	u_int64_t max_blocks_in, max_blocks_out, rekey_limit;$/;"	m	struct:session_state	typeref:typename:u_int64_t	file:
+max_blocks_out	packet.c	/^	u_int64_t max_blocks_in, max_blocks_out, rekey_limit;$/;"	m	struct:session_state	typeref:typename:u_int64_t	file:
+max_children	srclimit.c	/^static int max_children, max_persource, ipv4_masklen, ipv6_masklen;$/;"	v	typeref:typename:int	file:
+max_fd	ssh-agent.c	/^int max_fd = 0;$/;"	v	typeref:typename:int
+max_key_size	pkcs11.h	/^  unsigned long max_key_size;$/;"	m	struct:ck_mechanism_info	typeref:typename:unsigned long
+max_key_size	pkcs11.h	/^#define max_key_size /;"	d
+max_packet_size	packet.c	/^	u_int max_packet_size;$/;"	m	struct:session_state	typeref:typename:u_int	file:
+max_persource	srclimit.c	/^static int max_children, max_persource, ipv4_masklen, ipv6_masklen;$/;"	v	typeref:typename:int	file:
+max_pin_len	pkcs11.h	/^  unsigned long max_pin_len;$/;"	m	struct:ck_token_info	typeref:typename:unsigned long
+max_pin_len	pkcs11.h	/^#define max_pin_len /;"	d
+max_rw_session_count	pkcs11.h	/^  unsigned long max_rw_session_count;$/;"	m	struct:ck_token_info	typeref:typename:unsigned long
+max_rw_session_count	pkcs11.h	/^#define max_rw_session_count /;"	d
+max_session_count	pkcs11.h	/^  unsigned long max_session_count;$/;"	m	struct:ck_token_info	typeref:typename:unsigned long
+max_session_count	pkcs11.h	/^#define max_session_count /;"	d
+max_sessions	servconf.h	/^	int	max_sessions;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+max_size	sshbuf.h	/^	size_t max_size;	\/* Maximum size of buffer *\/$/;"	m	struct:sshbuf	typeref:typename:size_t
+max_startups	servconf.h	/^	int	max_startups;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+max_startups_begin	servconf.h	/^	int	max_startups_begin;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+max_startups_rate	servconf.h	/^	int	max_startups_rate;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+maxfd	ssh-keyscan.c	/^int maxfd;$/;"	v	typeref:typename:int
+maxidx	sshkey-xmss.c	/^	u_int32_t	maxidx;		\/* restricted # of signatures *\/$/;"	m	struct:ssh_xmss_state	typeref:typename:u_int32_t	file:
+maxsign	ssh-add.c	/^static u_int maxsign = 0;$/;"	v	typeref:typename:u_int	file:
+maybe_add_key_to_agent	sshconnect.c	/^maybe_add_key_to_agent(const char *authfile, struct sshkey *private,$/;"	f	typeref:typename:void
+maybe_filter_sk	regress/test-exec.sh	/^maybe_filter_sk() {$/;"	f
+mblen	openbsd-compat/openbsd-compat.h	/^# define mblen(/;"	d
+mbtowc	openbsd-compat/bsd-misc.c	/^mbtowc(wchar_t *pwc, const char *s, size_t n)$/;"	f	typeref:typename:int
+md5	regress/test-exec.sh	/^md5 () {$/;"	f
+md_final	digest-libc.c	/^	md_final_fn *md_final;$/;"	m	struct:ssh_digest	typeref:typename:md_final_fn *	file:
+md_final_fn	digest-libc.c	/^typedef void md_final_fn(u_int8_t[], void *mdctx);$/;"	t	typeref:typename:void ()(u_int8_t[],void * mdctx)	file:
+md_init	digest-libc.c	/^	md_init_fn *md_init;$/;"	m	struct:ssh_digest	typeref:typename:md_init_fn *	file:
+md_init_fn	digest-libc.c	/^typedef void md_init_fn(void *mdctx);$/;"	t	typeref:typename:void ()(void * mdctx)	file:
+md_update	digest-libc.c	/^	md_update_fn *md_update;$/;"	m	struct:ssh_digest	typeref:typename:md_update_fn *	file:
+md_update_fn	digest-libc.c	/^typedef void md_update_fn(void *mdctx, const u_int8_t *m, size_t mlen);$/;"	t	typeref:typename:void ()(void * mdctx,const u_int8_t * m,size_t mlen)	file:
+mdctx	digest-libc.c	/^	void *mdctx;$/;"	m	struct:ssh_digest_ctx	typeref:typename:void *	file:
+mdctx	digest-openssl.c	/^	EVP_MD_CTX *mdctx;$/;"	m	struct:ssh_digest_ctx	typeref:typename:EVP_MD_CTX *	file:
+mdfunc	digest-openssl.c	/^	const EVP_MD *(*mdfunc)(void);$/;"	m	struct:ssh_digest	typeref:typename:const EVP_MD * (*)(void)	file:
+mech	ssh-gss.h	/^	struct ssh_gssapi_mech_struct *mech;$/;"	m	struct:__anon1dbf9ce30208	typeref:struct:ssh_gssapi_mech_struct *
+mech_tried	sshconnect2.c	/^	u_int mech_tried;$/;"	m	struct:cauthctxt	typeref:typename:u_int	file:
+mechanism	pkcs11.h	/^  ck_mechanism_type_t mechanism;$/;"	m	struct:ck_mechanism	typeref:typename:ck_mechanism_type_t
+memmem	openbsd-compat/memmem.c	/^memmem(const void *h0, size_t k, const void *n0, size_t l)$/;"	f	typeref:typename:void *
+memmove	defines.h	/^# define memmove(/;"	d
+memvalcmp	regress/unittests/test_helper/test_helper.c	/^memvalcmp(const u_int8_t *s, u_char v, size_t l, size_t *where)$/;"	f	typeref:typename:int	file:
+message	regress/unittests/sshsig/webauthn.html	/^<td><input id="message" type="text" size="20" name="message" value="test" \/><\/td>$/;"	I
+message_namespace	regress/unittests/sshsig/webauthn.html	/^<td><input id="message_namespace" type="text" size="20" name="namespace" value="test" \/><\/td>$/;"	I
+message_sshsig	regress/unittests/sshsig/webauthn.html	/^<td><input id="message_sshsig" type="checkbox" checked \/> use sshsig format<\/td>$/;"	I
+method	sshconnect2.c	/^	struct cauthmethod *method;$/;"	m	struct:cauthctxt	typeref:struct:cauthmethod *	file:
+method_gssapi	auth2-gss.c	/^Authmethod method_gssapi = {$/;"	v	typeref:typename:Authmethod
+method_hostbased	auth2-hostbased.c	/^Authmethod method_hostbased = {$/;"	v	typeref:typename:Authmethod
+method_kbdint	auth2-kbdint.c	/^Authmethod method_kbdint = {$/;"	v	typeref:typename:Authmethod
+method_none	auth2-none.c	/^Authmethod method_none = {$/;"	v	typeref:typename:Authmethod
+method_passwd	auth2-passwd.c	/^Authmethod method_passwd = {$/;"	v	typeref:typename:Authmethod
+method_pubkey	auth2-pubkey.c	/^Authmethod method_pubkey = {$/;"	v	typeref:typename:Authmethod
+methoddata	auth.h	/^	void		*methoddata;$/;"	m	struct:Authctxt	typeref:typename:void *
+methoddata	sshconnect2.c	/^	void *methoddata;$/;"	m	struct:cauthctxt	typeref:typename:void *	file:
+min	kex.h	/^	u_int	min, max, nbits;	\/* GEX *\/$/;"	m	struct:kex	typeref:typename:u_int
+min_key_size	pkcs11.h	/^  unsigned long min_key_size;$/;"	m	struct:ck_mechanism_info	typeref:typename:unsigned long
+min_key_size	pkcs11.h	/^#define min_key_size /;"	d
+min_pin_len	pkcs11.h	/^  unsigned long min_pin_len;$/;"	m	struct:ck_token_info	typeref:typename:unsigned long
+min_pin_len	pkcs11.h	/^#define min_pin_len /;"	d
+minimum	openbsd-compat/arc4random.c	/^#define minimum(/;"	d	file:
+minleft	ssh-add.c	/^static u_int minleft = 0;$/;"	v	typeref:typename:u_int	file:
+minor	pkcs11.h	/^  unsigned char minor;$/;"	m	struct:ck_version	typeref:typename:unsigned char
+minor	ssh-gss.h	/^	OM_uint32	minor; \/* both *\/$/;"	m	struct:__anon1dbf9ce30308	typeref:typename:OM_uint32
+minusp	smult_curve25519_ref.c	/^static const unsigned int minusp[32] = {$/;"	v	typeref:typename:const unsigned int[32]	file:
+mismatch	regress/proto-mismatch.sh	/^mismatch ()$/;"	f
+mkdtemp	openbsd-compat/mktemp.c	/^mkdtemp(char *path)$/;"	f	typeref:typename:char *
+mkstemp	openbsd-compat/mktemp.c	/^mkstemp(char *path)$/;"	f	typeref:typename:int
+mkstemps	openbsd-compat/mktemp.c	/^mkstemps(char *path, int slen)$/;"	f	typeref:typename:int
+mktemp_internal	openbsd-compat/mktemp.c	/^mktemp_internal(char *path, int slen, int mode)$/;"	f	typeref:typename:int	file:
+mktemp_proto	misc.c	/^mktemp_proto(char *s, size_t len)$/;"	f	typeref:typename:void
+mm_answer_audit_command	monitor.c	/^mm_answer_audit_command(struct ssh *ssh, int socket, struct sshbuf *m)$/;"	f	typeref:typename:int
+mm_answer_audit_event	monitor.c	/^mm_answer_audit_event(struct ssh *ssh, int socket, struct sshbuf *m)$/;"	f	typeref:typename:int
+mm_answer_auth2_read_banner	monitor.c	/^int mm_answer_auth2_read_banner(struct ssh *ssh, int sock, struct sshbuf *m)$/;"	f	typeref:typename:int
+mm_answer_authpassword	monitor.c	/^mm_answer_authpassword(struct ssh *ssh, int sock, struct sshbuf *m)$/;"	f	typeref:typename:int
+mm_answer_authserv	monitor.c	/^mm_answer_authserv(struct ssh *ssh, int sock, struct sshbuf *m)$/;"	f	typeref:typename:int
+mm_answer_bsdauthquery	monitor.c	/^mm_answer_bsdauthquery(struct ssh *ssh, int sock, struct sshbuf *m)$/;"	f	typeref:typename:int
+mm_answer_bsdauthrespond	monitor.c	/^mm_answer_bsdauthrespond(struct ssh *ssh, int sock, struct sshbuf *m)$/;"	f	typeref:typename:int
+mm_answer_gss_accept_ctx	monitor.c	/^mm_answer_gss_accept_ctx(struct ssh *ssh, int sock, struct sshbuf *m)$/;"	f	typeref:typename:int
+mm_answer_gss_checkmic	monitor.c	/^mm_answer_gss_checkmic(struct ssh *ssh, int sock, struct sshbuf *m)$/;"	f	typeref:typename:int
+mm_answer_gss_setup_ctx	monitor.c	/^mm_answer_gss_setup_ctx(struct ssh *ssh, int sock, struct sshbuf *m)$/;"	f	typeref:typename:int
+mm_answer_gss_userok	monitor.c	/^mm_answer_gss_userok(struct ssh *ssh, int sock, struct sshbuf *m)$/;"	f	typeref:typename:int
+mm_answer_keyallowed	monitor.c	/^mm_answer_keyallowed(struct ssh *ssh, int sock, struct sshbuf *m)$/;"	f	typeref:typename:int
+mm_answer_keyverify	monitor.c	/^mm_answer_keyverify(struct ssh *ssh, int sock, struct sshbuf *m)$/;"	f	typeref:typename:int
+mm_answer_moduli	monitor.c	/^mm_answer_moduli(struct ssh *ssh, int sock, struct sshbuf *m)$/;"	f	typeref:typename:int
+mm_answer_pam_account	monitor.c	/^mm_answer_pam_account(struct ssh *ssh, int sock, struct sshbuf *m)$/;"	f	typeref:typename:int
+mm_answer_pam_free_ctx	monitor.c	/^mm_answer_pam_free_ctx(struct ssh *ssh, int sock, struct sshbuf *m)$/;"	f	typeref:typename:int
+mm_answer_pam_init_ctx	monitor.c	/^mm_answer_pam_init_ctx(struct ssh *ssh, int sock, struct sshbuf *m)$/;"	f	typeref:typename:int
+mm_answer_pam_query	monitor.c	/^mm_answer_pam_query(struct ssh *ssh, int sock, struct sshbuf *m)$/;"	f	typeref:typename:int
+mm_answer_pam_respond	monitor.c	/^mm_answer_pam_respond(struct ssh *ssh, int sock, struct sshbuf *m)$/;"	f	typeref:typename:int
+mm_answer_pam_start	monitor.c	/^mm_answer_pam_start(struct ssh *ssh, int sock, struct sshbuf *m)$/;"	f	typeref:typename:int
+mm_answer_pty	monitor.c	/^mm_answer_pty(struct ssh *ssh, int sock, struct sshbuf *m)$/;"	f	typeref:typename:int
+mm_answer_pty_cleanup	monitor.c	/^mm_answer_pty_cleanup(struct ssh *ssh, int sock, struct sshbuf *m)$/;"	f	typeref:typename:int
+mm_answer_pwnamallow	monitor.c	/^mm_answer_pwnamallow(struct ssh *ssh, int sock, struct sshbuf *m)$/;"	f	typeref:typename:int
+mm_answer_sign	monitor.c	/^mm_answer_sign(struct ssh *ssh, int sock, struct sshbuf *m)$/;"	f	typeref:typename:int
+mm_answer_term	monitor.c	/^mm_answer_term(struct ssh *ssh, int sock, struct sshbuf *req)$/;"	f	typeref:typename:int
+mm_audit_event	monitor_wrap.c	/^mm_audit_event(struct ssh *ssh, ssh_audit_event_t event)$/;"	f	typeref:typename:void
+mm_audit_run_command	monitor_wrap.c	/^mm_audit_run_command(const char *command)$/;"	f	typeref:typename:void
+mm_auth2_read_banner	monitor_wrap.c	/^mm_auth2_read_banner(void)$/;"	f	typeref:typename:char *
+mm_auth_password	monitor_wrap.c	/^mm_auth_password(struct ssh *ssh, char *password)$/;"	f	typeref:typename:int
+mm_bsdauth_device	auth-bsdauth.c	/^KbdintDevice mm_bsdauth_device = {$/;"	v	typeref:typename:KbdintDevice
+mm_bsdauth_query	monitor_wrap.c	/^mm_bsdauth_query(void *ctx, char **name, char **infotxt,$/;"	f	typeref:typename:int
+mm_bsdauth_respond	monitor_wrap.c	/^mm_bsdauth_respond(void *ctx, u_int numresponses, char **responses)$/;"	f	typeref:typename:int
+mm_chall_setup	monitor_wrap.c	/^mm_chall_setup(char **name, char **infotxt, u_int *numprompts,$/;"	f	typeref:typename:void	file:
+mm_choose_dh	monitor_wrap.c	/^mm_choose_dh(int min, int nbits, int max)$/;"	f	typeref:typename:DH *
+mm_choose_dh	ssh_api.c	/^mm_choose_dh(int min, int nbits, int max)$/;"	f	typeref:typename:DH *
+mm_do_pam_account	monitor_wrap.c	/^mm_do_pam_account(void)$/;"	f	typeref:typename:u_int
+mm_get_keystate	monitor.c	/^mm_get_keystate(struct ssh *ssh, struct monitor *pmonitor)$/;"	f	typeref:typename:void
+mm_getpwnamallow	monitor_wrap.c	/^mm_getpwnamallow(struct ssh *ssh, const char *username)$/;"	f	typeref:struct:passwd *
+mm_hostbased_key_allowed	monitor_wrap.c	/^mm_hostbased_key_allowed(struct ssh *ssh, struct passwd *pw,$/;"	f	typeref:typename:int
+mm_inform_authserv	monitor_wrap.c	/^mm_inform_authserv(char *service, char *style)$/;"	f	typeref:typename:void
+mm_is_monitor	monitor_wrap.c	/^mm_is_monitor(void)$/;"	f	typeref:typename:int
+mm_key_allowed	monitor_wrap.c	/^mm_key_allowed(enum mm_keytype type, const char *user, const char *host,$/;"	f	typeref:typename:int
+mm_keytype	monitor_wrap.h	/^enum mm_keytype { MM_NOKEY, MM_HOSTKEY, MM_USERKEY };$/;"	g
+mm_log_handler	monitor_wrap.c	/^mm_log_handler(LogLevel level, int forced, const char *msg, void *ctx)$/;"	f	typeref:typename:void
+mm_pty_allocate	monitor_wrap.c	/^mm_pty_allocate(int *ptyfd, int *ttyfd, char *namebuf, size_t namebuflen)$/;"	f	typeref:typename:int
+mm_receive_fd	monitor_fdpass.c	/^mm_receive_fd(int sock)$/;"	f	typeref:typename:int
+mm_record_login	monitor.c	/^mm_record_login(struct ssh *ssh, Session *s, struct passwd *pw)$/;"	f	typeref:typename:void	file:
+mm_request_receive	monitor_wrap.c	/^mm_request_receive(int sock, struct sshbuf *m)$/;"	f	typeref:typename:void
+mm_request_receive_expect	monitor_wrap.c	/^mm_request_receive_expect(int sock, enum monitor_reqtype type, struct sshbuf *m)$/;"	f	typeref:typename:void
+mm_request_send	monitor_wrap.c	/^mm_request_send(int sock, enum monitor_reqtype type, struct sshbuf *m)$/;"	f	typeref:typename:void
+mm_send_fd	monitor_fdpass.c	/^mm_send_fd(int sock, int fd)$/;"	f	typeref:typename:int
+mm_send_keystate	monitor_wrap.c	/^mm_send_keystate(struct ssh *ssh, struct monitor *monitor)$/;"	f	typeref:typename:void
+mm_session_close	monitor.c	/^mm_session_close(Session *s)$/;"	f	typeref:typename:void	file:
+mm_session_pty_cleanup2	monitor_wrap.c	/^mm_session_pty_cleanup2(Session *s)$/;"	f	typeref:typename:void
+mm_ssh_gssapi_accept_ctx	monitor_wrap.c	/^mm_ssh_gssapi_accept_ctx(Gssctxt *ctx, gss_buffer_desc *in,$/;"	f	typeref:typename:OM_uint32
+mm_ssh_gssapi_checkmic	monitor_wrap.c	/^mm_ssh_gssapi_checkmic(Gssctxt *ctx, gss_buffer_t gssbuf, gss_buffer_t gssmic)$/;"	f	typeref:typename:OM_uint32
+mm_ssh_gssapi_server_ctx	monitor_wrap.c	/^mm_ssh_gssapi_server_ctx(Gssctxt **ctx, gss_OID goid)$/;"	f	typeref:typename:OM_uint32
+mm_ssh_gssapi_userok	monitor_wrap.c	/^mm_ssh_gssapi_userok(char *user)$/;"	f	typeref:typename:int
+mm_sshkey_sign	monitor_wrap.c	/^mm_sshkey_sign(struct ssh *ssh, struct sshkey *key, u_char **sigp, size_t *lenp,$/;"	f	typeref:typename:int
+mm_sshkey_sign	ssh_api.c	/^mm_sshkey_sign(struct sshkey *key, u_char **sigp, u_int *lenp,$/;"	f	typeref:typename:int
+mm_sshkey_verify	monitor_wrap.c	/^mm_sshkey_verify(const struct sshkey *key, const u_char *sig, size_t siglen,$/;"	f	typeref:typename:int
+mm_sshpam_device	auth-pam.c	/^KbdintDevice mm_sshpam_device = {$/;"	v	typeref:typename:KbdintDevice
+mm_sshpam_free_ctx	monitor_wrap.c	/^mm_sshpam_free_ctx(void *ctxtp)$/;"	f	typeref:typename:void
+mm_sshpam_init_ctx	monitor_wrap.c	/^mm_sshpam_init_ctx(Authctxt *authctxt)$/;"	f	typeref:typename:void *
+mm_sshpam_query	monitor_wrap.c	/^mm_sshpam_query(void *ctx, char **name, char **info,$/;"	f	typeref:typename:int
+mm_sshpam_respond	monitor_wrap.c	/^mm_sshpam_respond(void *ctx, u_int num, char **resp)$/;"	f	typeref:typename:int
+mm_start_pam	monitor_wrap.c	/^mm_start_pam(struct ssh *ssh)$/;"	f	typeref:typename:void
+mm_terminate	monitor_wrap.c	/^mm_terminate(void)$/;"	f	typeref:typename:void
+mm_user_key_allowed	monitor_wrap.c	/^mm_user_key_allowed(struct ssh *ssh, struct passwd *pw, struct sshkey *key,$/;"	f	typeref:typename:int
+mode_t	defines.h	/^typedef int mode_t;$/;"	t	typeref:typename:int
+model	pkcs11.h	/^  unsigned char model[16];$/;"	m	struct:ck_token_info	typeref:typename:unsigned char[16]
+modification	regress/modpipe.c	/^struct modification {$/;"	s	file:
+modified	hostfile.c	/^	int modified;$/;"	m	struct:host_delete_ctx	typeref:typename:int	file:
+moduli	Makefile.in	/^moduli:$/;"	t
+moduli_file	servconf.h	/^	char   *moduli_file;		\/* moduli file for DH-GEX *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:char *
+moduli_filename	dh.c	/^static const char *moduli_filename;$/;"	v	typeref:typename:const char *	file:
+mon_dispatch	monitor.c	/^struct mon_table *mon_dispatch;$/;"	v	typeref:struct:mon_table *
+mon_dispatch_postauth20	monitor.c	/^struct mon_table mon_dispatch_postauth20[] = {$/;"	v	typeref:struct:mon_table[]
+mon_dispatch_proto20	monitor.c	/^struct mon_table mon_dispatch_proto20[] = {$/;"	v	typeref:struct:mon_table[]
+mon_table	monitor.c	/^struct mon_table {$/;"	s	file:
+monitor	monitor.h	/^struct monitor {$/;"	s
+monitor	sandbox-capsicum.c	/^	struct monitor *monitor;$/;"	m	struct:ssh_sandbox	typeref:struct:monitor *	file:
+monitor_allowed_key	monitor.c	/^monitor_allowed_key(const u_char *blob, u_int bloblen)$/;"	f	typeref:typename:int	file:
+monitor_apply_keystate	monitor.c	/^monitor_apply_keystate(struct ssh *ssh, struct monitor *pmonitor)$/;"	f	typeref:typename:void
+monitor_child_handler	monitor.c	/^monitor_child_handler(int sig)$/;"	f	typeref:typename:void	file:
+monitor_child_pid	monitor.c	/^static pid_t monitor_child_pid;$/;"	v	typeref:typename:pid_t	file:
+monitor_child_postauth	monitor.c	/^monitor_child_postauth(struct ssh *ssh, struct monitor *pmonitor)$/;"	f	typeref:typename:void
+monitor_child_preauth	monitor.c	/^monitor_child_preauth(struct ssh *ssh, struct monitor *pmonitor)$/;"	f	typeref:typename:void
+monitor_clear_keystate	monitor.c	/^monitor_clear_keystate(struct ssh *ssh, struct monitor *pmonitor)$/;"	f	typeref:typename:void
+monitor_init	monitor.c	/^monitor_init(void)$/;"	f	typeref:struct:monitor *
+monitor_openfds	monitor.c	/^monitor_openfds(struct monitor *mon, int do_logfds)$/;"	f	typeref:typename:void	file:
+monitor_permit	monitor.c	/^monitor_permit(struct mon_table *ent, enum monitor_reqtype type, int permit)$/;"	f	typeref:typename:void	file:
+monitor_permit_authentications	monitor.c	/^monitor_permit_authentications(int permit)$/;"	f	typeref:typename:void	file:
+monitor_read	monitor.c	/^monitor_read(struct ssh *ssh, struct monitor *pmonitor, struct mon_table *ent,$/;"	f	typeref:typename:int	file:
+monitor_read_log	monitor.c	/^monitor_read_log(struct monitor *pmonitor)$/;"	f	typeref:typename:int	file:
+monitor_reinit	monitor.c	/^monitor_reinit(struct monitor *mon)$/;"	f	typeref:typename:void
+monitor_reqtype	monitor.h	/^enum monitor_reqtype {$/;"	g
+monitor_reset_key_state	monitor.c	/^monitor_reset_key_state(void)$/;"	f	typeref:typename:void	file:
+monitor_set_child_handler	monitor.c	/^monitor_set_child_handler(pid_t pid)$/;"	f	typeref:typename:void	file:
+monitor_valid_hostbasedblob	monitor.c	/^monitor_valid_hostbasedblob(const u_char *data, u_int datalen,$/;"	f	typeref:typename:int	file:
+monitor_valid_userblob	monitor.c	/^monitor_valid_userblob(struct ssh *ssh, const u_char *data, u_int datalen)$/;"	f	typeref:typename:int	file:
+monotime	misc.c	/^monotime(void)$/;"	f	typeref:typename:time_t
+monotime_double	misc.c	/^monotime_double(void)$/;"	f	typeref:typename:double
+monotime_ts	misc.c	/^monotime_ts(struct timespec *ts)$/;"	f	typeref:typename:void
+monotime_tv	misc.c	/^monotime_tv(struct timeval *tv)$/;"	f	typeref:typename:void
+month	pkcs11.h	/^  unsigned char month[2];$/;"	m	struct:ck_date	typeref:typename:unsigned char[2]
+move-config-files	contrib/cygwin/Makefile	/^move-config-files: $(DESTDIR)$(sysconfdir)\/ssh_config $(DESTDIR)$(sysconfdir)\/sshd_config$/;"	t
+mprintf	utf8.c	/^mprintf(const char *fmt, ...)$/;"	f	typeref:typename:int
+mrproper	Makefile.in	/^mrproper: veryclean$/;"	t
+ms_subtract_diff	misc.c	/^ms_subtract_diff(struct timeval *start, int *ms)$/;"	f	typeref:typename:void
+ms_to_timespec	misc.c	/^ms_to_timespec(struct timespec *ts, int ms)$/;"	f	typeref:typename:void
+msetlocale	utf8.c	/^msetlocale(void)$/;"	f	typeref:typename:void
+msg_id	sftp-client.c	/^	u_int msg_id;$/;"	m	struct:sftp_conn	typeref:typename:u_int	file:
+msg_len	umac.c	/^    UINT32 msg_len;                       \/* Total length of data passed  *\/$/;"	m	struct:uhash_ctx	typeref:typename:UINT32	file:
+mtime	scp.c	/^#define	mtime	/;"	d	file:
+mtime	sftp-common.h	/^	u_int32_t	mtime;$/;"	m	struct:Attrib	typeref:typename:u_int32_t
+mu	sc25519.c	/^static const crypto_uint32 mu[33] = {0x1B, 0x13, 0x2C, 0x0A, 0xA3, 0xE5, 0x9C, 0xED, 0xA7, 0x29,/;"	v	typeref:typename:const crypto_uint32[33]	file:
+mul32x32_64	poly1305.c	/^#define mul32x32_64(/;"	d	file:
+mult	smult_curve25519_ref.c	/^static void mult(unsigned int out[32],const unsigned int a[32],const unsigned int b[32])$/;"	f	typeref:typename:void	file:
+mult121665	smult_curve25519_ref.c	/^static void mult121665(unsigned int out[32],const unsigned int a[32])$/;"	f	typeref:typename:void	file:
+multistate	readconf.c	/^struct multistate {$/;"	s	file:
+multistate	servconf.c	/^struct multistate {$/;"	s	file:
+multistate_addressfamily	readconf.c	/^static const struct multistate multistate_addressfamily[] = {$/;"	v	typeref:typename:const struct multistate[]	file:
+multistate_addressfamily	servconf.c	/^static const struct multistate multistate_addressfamily[] = {$/;"	v	typeref:typename:const struct multistate[]	file:
+multistate_canonicalizehostname	readconf.c	/^static const struct multistate multistate_canonicalizehostname[] = {$/;"	v	typeref:typename:const struct multistate[]	file:
+multistate_compression	readconf.c	/^static const struct multistate multistate_compression[] = {$/;"	v	typeref:typename:const struct multistate[]	file:
+multistate_compression	servconf.c	/^static const struct multistate multistate_compression[] = {$/;"	v	typeref:typename:const struct multistate[]	file:
+multistate_controlmaster	readconf.c	/^static const struct multistate multistate_controlmaster[] = {$/;"	v	typeref:typename:const struct multistate[]	file:
+multistate_flag	readconf.c	/^static const struct multistate multistate_flag[] = {$/;"	v	typeref:typename:const struct multistate[]	file:
+multistate_flag	servconf.c	/^static const struct multistate multistate_flag[] = {$/;"	v	typeref:typename:const struct multistate[]	file:
+multistate_gatewayports	servconf.c	/^static const struct multistate multistate_gatewayports[] = {$/;"	v	typeref:typename:const struct multistate[]	file:
+multistate_ignore_rhosts	servconf.c	/^static const struct multistate multistate_ignore_rhosts[] = {$/;"	v	typeref:typename:const struct multistate[]	file:
+multistate_permitrootlogin	servconf.c	/^static const struct multistate multistate_permitrootlogin[] = {$/;"	v	typeref:typename:const struct multistate[]	file:
+multistate_pubkey_auth	readconf.c	/^static const struct multistate multistate_pubkey_auth[] = {$/;"	v	typeref:typename:const struct multistate[]	file:
+multistate_requesttty	readconf.c	/^static const struct multistate multistate_requesttty[] = {$/;"	v	typeref:typename:const struct multistate[]	file:
+multistate_sessiontype	readconf.c	/^static const struct multistate multistate_sessiontype[] = {$/;"	v	typeref:typename:const struct multistate[]	file:
+multistate_strict_hostkey	readconf.c	/^static const struct multistate multistate_strict_hostkey[] = {$/;"	v	typeref:typename:const struct multistate[]	file:
+multistate_tcpfwd	servconf.c	/^static const struct multistate multistate_tcpfwd[] = {$/;"	v	typeref:typename:const struct multistate[]	file:
+multistate_tunnel	readconf.c	/^static const struct multistate multistate_tunnel[] = {$/;"	v	typeref:typename:const struct multistate[]	file:
+multistate_yesnoask	readconf.c	/^static const struct multistate multistate_yesnoask[] = {$/;"	v	typeref:typename:const struct multistate[]	file:
+multistate_yesnoaskconfirm	readconf.c	/^static const struct multistate multistate_yesnoaskconfirm[] = {$/;"	v	typeref:typename:const struct multistate[]	file:
+mux	packet.c	/^	int mux;$/;"	m	struct:session_state	typeref:typename:int	file:
+mux_callback_fn	channels.h	/^typedef int mux_callback_fn(struct ssh *, struct Channel *);$/;"	t	typeref:typename:int ()(struct ssh *,struct Channel *)
+mux_channel_confirm_ctx	mux.c	/^struct mux_channel_confirm_ctx {$/;"	s	file:
+mux_client_forward	mux.c	/^mux_client_forward(int fd, int cancel_flag, u_int ftype, struct Forward *fwd)$/;"	f	typeref:typename:int	file:
+mux_client_forwards	mux.c	/^mux_client_forwards(int fd, int cancel_flag)$/;"	f	typeref:typename:int	file:
+mux_client_hello_exchange	mux.c	/^mux_client_hello_exchange(int fd)$/;"	f	typeref:typename:int	file:
+mux_client_proxy	mux.c	/^mux_client_proxy(int fd)$/;"	f	typeref:typename:int	file:
+mux_client_read	mux.c	/^mux_client_read(int fd, struct sshbuf *b, size_t need)$/;"	f	typeref:typename:int	file:
+mux_client_read_packet	mux.c	/^mux_client_read_packet(int fd, struct sshbuf *m)$/;"	f	typeref:typename:int	file:
+mux_client_request_alive	mux.c	/^mux_client_request_alive(int fd)$/;"	f	typeref:typename:u_int	file:
+mux_client_request_session	mux.c	/^mux_client_request_session(int fd)$/;"	f	typeref:typename:int	file:
+mux_client_request_stdio_fwd	mux.c	/^mux_client_request_stdio_fwd(int fd)$/;"	f	typeref:typename:int	file:
+mux_client_request_stop_listening	mux.c	/^mux_client_request_stop_listening(int fd)$/;"	f	typeref:typename:void	file:
+mux_client_request_terminate	mux.c	/^mux_client_request_terminate(int fd)$/;"	f	typeref:typename:void	file:
+mux_client_write_packet	mux.c	/^mux_client_write_packet(int fd, struct sshbuf *m)$/;"	f	typeref:typename:int	file:
+mux_cmd	regress/forward-control.sh	/^mux_cmd() {$/;"	f
+mux_confirm_remote_forward	mux.c	/^mux_confirm_remote_forward(struct ssh *ssh, int type, u_int32_t seq, void *ctxt)$/;"	f	typeref:typename:void	file:
+mux_ctx	channels.h	/^	void			*mux_ctx;$/;"	m	struct:Channel	typeref:typename:void *
+mux_downstream_id	channels.h	/^	int			mux_downstream_id;$/;"	m	struct:Channel	typeref:typename:int
+mux_exit_message	mux.c	/^mux_exit_message(struct ssh *ssh, Channel *c, int exitval)$/;"	f	typeref:typename:void
+mux_listener_channel	mux.c	/^static Channel *mux_listener_channel = NULL;$/;"	v	typeref:typename:Channel *	file:
+mux_master_control_cleanup_cb	mux.c	/^mux_master_control_cleanup_cb(struct ssh *ssh, int cid, void *unused)$/;"	f	typeref:typename:void	file:
+mux_master_handlers	mux.c	/^} mux_master_handlers[] = {$/;"	v	typeref:typename:const struct __anon0ff59c300108[]
+mux_master_process_alive_check	mux.c	/^mux_master_process_alive_check(struct ssh *ssh, u_int rid,$/;"	f	typeref:typename:int	file:
+mux_master_process_close_fwd	mux.c	/^mux_master_process_close_fwd(struct ssh *ssh, u_int rid,$/;"	f	typeref:typename:int	file:
+mux_master_process_hello	mux.c	/^mux_master_process_hello(struct ssh *ssh, u_int rid,$/;"	f	typeref:typename:int	file:
+mux_master_process_new_session	mux.c	/^mux_master_process_new_session(struct ssh *ssh, u_int rid,$/;"	f	typeref:typename:int	file:
+mux_master_process_open_fwd	mux.c	/^mux_master_process_open_fwd(struct ssh *ssh, u_int rid,$/;"	f	typeref:typename:int	file:
+mux_master_process_proxy	mux.c	/^mux_master_process_proxy(struct ssh *ssh, u_int rid,$/;"	f	typeref:typename:int	file:
+mux_master_process_stdio_fwd	mux.c	/^mux_master_process_stdio_fwd(struct ssh *ssh, u_int rid,$/;"	f	typeref:typename:int	file:
+mux_master_process_stop_listening	mux.c	/^mux_master_process_stop_listening(struct ssh *ssh, u_int rid,$/;"	f	typeref:typename:int	file:
+mux_master_process_terminate	mux.c	/^mux_master_process_terminate(struct ssh *ssh, u_int rid,$/;"	f	typeref:typename:int	file:
+mux_master_read_cb	mux.c	/^mux_master_read_cb(struct ssh *ssh, Channel *c)$/;"	f	typeref:typename:int	file:
+mux_master_session_cleanup_cb	mux.c	/^mux_master_session_cleanup_cb(struct ssh *ssh, int cid, void *unused)$/;"	f	typeref:typename:void	file:
+mux_master_state	mux.c	/^struct mux_master_state {$/;"	s	file:
+mux_pause	channels.h	/^	int			mux_pause;$/;"	m	struct:Channel	typeref:typename:int
+mux_rcb	channels.h	/^	mux_callback_fn		*mux_rcb;$/;"	m	struct:Channel	typeref:typename:mux_callback_fn *
+mux_remove_remote_forwardings	channels.c	/^mux_remove_remote_forwardings(struct ssh *ssh, Channel *c)$/;"	f	typeref:typename:void	file:
+mux_session_confirm	mux.c	/^mux_session_confirm(struct ssh *ssh, int id, int success, void *arg)$/;"	f	typeref:typename:void	file:
+mux_session_confirm_ctx	mux.c	/^struct mux_session_confirm_ctx {$/;"	s	file:
+mux_stdio_confirm	mux.c	/^mux_stdio_confirm(struct ssh *ssh, int id, int success, void *arg)$/;"	f	typeref:typename:void	file:
+mux_stdio_confirm_ctx	mux.c	/^struct mux_stdio_confirm_ctx {$/;"	s	file:
+mux_tty_alloc_failed	mux.c	/^mux_tty_alloc_failed(struct ssh *ssh, Channel *c)$/;"	f	typeref:typename:void
+muxclient	mux.c	/^muxclient(const char *path)$/;"	f	typeref:typename:int
+muxclient_command	mux.c	/^u_int muxclient_command = 0;$/;"	v	typeref:typename:u_int
+muxclient_request_id	mux.c	/^u_int muxclient_request_id = 0;$/;"	v	typeref:typename:u_int
+muxclient_terminate	mux.c	/^static volatile sig_atomic_t muxclient_terminate = 0;$/;"	v	typeref:typename:volatile sig_atomic_t	file:
+muxserver_listen	mux.c	/^muxserver_listen(struct ssh *ssh)$/;"	f	typeref:typename:void
+muxserver_pid	mux.c	/^static u_int muxserver_pid = 0;$/;"	v	typeref:typename:u_int	file:
+muxserver_sock	mux.c	/^int muxserver_sock = -1;$/;"	v	typeref:typename:int
+my	kex.h	/^	struct sshbuf *my;$/;"	m	struct:kex	typeref:struct:sshbuf *
+my_modf	openbsd-compat/bsd-snprintf.c	/^static double my_modf(double x0, double *iptr)$/;"	f	typeref:typename:double	file:
+n	sftp.c	/^	const int n;$/;"	m	struct:CMD	typeref:typename:const int	file:
+n	sshkey-xmss.c	/^	u_int32_t	n, w, h, k;$/;"	m	struct:ssh_xmss_state	typeref:typename:u_int32_t	file:
+n	xmss_fast.h	/^  unsigned int n;$/;"	m	struct:__anon22bef5f30208	typeref:typename:unsigned int
+n	xmss_fast.h	/^  unsigned int n;$/;"	m	struct:__anon22bef5f30308	typeref:typename:unsigned int
+n	xmss_wots.h	/^  uint32_t n;$/;"	m	struct:__anon4b6487d20108	typeref:typename:uint32_t
+nalloc	misc.h	/^	u_int   nalloc;$/;"	m	struct:arglist	typeref:typename:u_int
+name	audit.c	/^		const char *name;$/;"	m	struct:audit_event_lookup::event_lookup_struct	typeref:typename:const char *	file:
+name	auth.h	/^	char	*name;$/;"	m	struct:Authmethod	typeref:typename:char *
+name	auth.h	/^	const char *name;$/;"	m	struct:KbdintDevice	typeref:typename:const char *
+name	cipher.c	/^	char	*name;$/;"	m	struct:sshcipher	typeref:typename:char *	file:
+name	digest-libc.c	/^	const char *name;$/;"	m	struct:ssh_digest	typeref:typename:const char *	file:
+name	digest-openssl.c	/^	const char *name;$/;"	m	struct:ssh_digest	typeref:typename:const char *	file:
+name	kex.c	/^	char *name;$/;"	m	struct:kexalg	typeref:typename:char *	file:
+name	kex.h	/^	char	*name;$/;"	m	struct:kex	typeref:typename:char *
+name	kex.h	/^	char	*name;$/;"	m	struct:sshcomp	typeref:typename:char *
+name	kex.h	/^	char	*name;$/;"	m	struct:sshenc	typeref:typename:char *
+name	log.c	/^	const char *name;$/;"	m	struct:__anon0fdff1180108	typeref:typename:const char *	file:
+name	log.c	/^	const char *name;$/;"	m	struct:__anon0fdff1180208	typeref:typename:const char *	file:
+name	mac.c	/^	char		*name;$/;"	m	struct:macalg	typeref:typename:char *	file:
+name	mac.h	/^	char	*name;$/;"	m	struct:sshmac	typeref:typename:char *
+name	misc.c	/^	const char *name;$/;"	m	struct:__anon0dce19420208	typeref:typename:const char *	file:
+name	openbsd-compat/bsd-cygwin_util.c	/^	const char *name;$/;"	m	struct:wenv	typeref:typename:const char *	file:
+name	openbsd-compat/charclass.h	/^	const char *name;$/;"	m	struct:cclass	typeref:typename:const char *
+name	openbsd-compat/getopt.h	/^	const char *name;$/;"	m	struct:option	typeref:typename:const char *
+name	openbsd-compat/getrrsetbyname.c	/^	char			*name;$/;"	m	struct:dns_query	typeref:typename:char *	file:
+name	openbsd-compat/getrrsetbyname.c	/^	char			*name;$/;"	m	struct:dns_rr	typeref:typename:char *	file:
+name	openbsd-compat/pwcache.c	/^		char	*name;$/;"	m	struct:group_from_gid::ncache	typeref:typename:char *	file:
+name	openbsd-compat/pwcache.c	/^		char	*name;$/;"	m	struct:user_from_uid::ncache	typeref:typename:char *	file:
+name	readconf.c	/^	const char *name;$/;"	m	struct:__anon7d31da180208	typeref:typename:const char *	file:
+name	servconf.c	/^	const char *name;$/;"	m	struct:__anon9b33d3bc0208	typeref:typename:const char *	file:
+name	session.h	/^		char	*name;$/;"	m	struct:Session::__anon24519b1f0108	typeref:typename:char *
+name	sftp-server.c	/^	char *name;$/;"	m	struct:Handle	typeref:typename:char *	file:
+name	sftp-server.c	/^	char *name;$/;"	m	struct:Stat	typeref:typename:char *	file:
+name	sftp-server.c	/^	const char *name;	\/* user-visible name for fine-grained perms *\/$/;"	m	struct:sftp_handler	typeref:typename:const char *	file:
+name	sftp-usergroup.c	/^	char *name;$/;"	m	struct:idname	typeref:typename:char *	file:
+name	sk-api.h	/^	char *name;$/;"	m	struct:sk_option	typeref:typename:char *
+name	ssh-gss.h	/^	char *name;$/;"	m	struct:ssh_gssapi_mech_struct	typeref:typename:char *
+name	ssh-gss.h	/^	gss_name_t	name; \/* both *\/$/;"	m	struct:__anon1dbf9ce30308	typeref:typename:gss_name_t
+name	ssh-pkcs11.c	/^	char			*name;$/;"	m	struct:pkcs11_provider	typeref:typename:char *	file:
+name	ssh-pkcs11.c	/^	const char	*name;$/;"	m	struct:ec_curve_info	typeref:typename:const char *	file:
+name	sshconnect2.c	/^	char	*name;		\/* string to compare against server's list *\/$/;"	m	struct:cauthmethod	typeref:typename:char *	file:
+name	sshkey.c	/^	const char *name;$/;"	m	struct:keytype	typeref:typename:const char *	file:
+name2sig	session.c	/^name2sig(char *name)$/;"	f	typeref:typename:int	file:
+namelen	openbsd-compat/bsd-cygwin_util.c	/^	size_t namelen;$/;"	m	struct:wenv	typeref:typename:size_t	file:
+names	sshconnect.c	/^	char **names;$/;"	m	struct:find_by_key_ctx	typeref:typename:char **	file:
+namespaces	sshsig.c	/^	char *namespaces;$/;"	m	struct:sshsigopt	typeref:typename:char *	file:
+nanosleep	openbsd-compat/bsd-misc.c	/^int nanosleep(const struct timespec *req, struct timespec *rem)$/;"	f	typeref:typename:int
+nanosleep	openbsd-compat/port-aix.h	/^# define nanosleep(/;"	d
+nbits	kex.h	/^	u_int	min, max, nbits;	\/* GEX *\/$/;"	m	struct:kex	typeref:typename:u_int
+ncache	openbsd-compat/pwcache.c	/^	static struct ncache {$/;"	s	function:group_from_gid	file:
+ncache	openbsd-compat/pwcache.c	/^	static struct ncache {$/;"	s	function:user_from_uid	file:
+ncert_ext	ssh-keygen.c	/^static size_t ncert_ext;$/;"	v	typeref:typename:size_t	file:
+ncon	ssh-keyscan.c	/^int ncon;$/;"	v	typeref:typename:int
+ndest_constraints	ssh-agent.c	/^	size_t ndest_constraints;$/;"	m	struct:identity	typeref:typename:size_t	file:
+need_controlpersist_detach	ssh.c	/^int need_controlpersist_detach = 0;$/;"	v	typeref:typename:int
+need_rekeying	clientloop.c	/^static int need_rekeying;	\/* Set to non-zero if rekeying is requested. *\/$/;"	v	typeref:typename:int	file:
+negative	ge25519.c	/^static unsigned char negative(signed char b)$/;"	f	typeref:typename:unsigned char	file:
+nentries	ssh-agent.c	/^	int nentries;$/;"	m	struct:idtable	typeref:typename:int	file:
+nenv	auth-options.h	/^	size_t nenv;$/;"	m	struct:sshauthopt	typeref:typename:size_t
+new_socket	ssh-agent.c	/^new_socket(sock_type type, int fd)$/;"	f	typeref:typename:void	file:
+newkeys	kex.h	/^	struct newkeys	*newkeys[MODE_MAX];$/;"	m	struct:kex	typeref:struct:newkeys * []
+newkeys	kex.h	/^struct newkeys {$/;"	s
+newkeys	packet.c	/^	struct newkeys *newkeys[MODE_MAX];$/;"	m	struct:session_state	typeref:struct:newkeys * []	file:
+newkeys_from_blob	packet.c	/^newkeys_from_blob(struct sshbuf *m, struct ssh *ssh, int mode)$/;"	f	typeref:typename:int	file:
+newkeys_to_blob	packet.c	/^newkeys_to_blob(struct sshbuf *m, struct ssh *ssh, int mode)$/;"	f	typeref:typename:int	file:
+nexpected	regress/unittests/hostkeys/test_iterate.c	/^	size_t nexpected;$/;"	m	struct:cbctx	typeref:typename:size_t	file:
+next	openbsd-compat/getrrsetbyname.c	/^	struct dns_query	*next;$/;"	m	struct:dns_query	typeref:struct:dns_query *	file:
+next	openbsd-compat/getrrsetbyname.c	/^	struct dns_rr		*next;$/;"	m	struct:dns_rr	typeref:struct:dns_rr *	file:
+next_data_empty	umac.c	/^    int next_data_empty;    \/* Bookkeeping variable for data buffer.     *\/$/;"	m	struct:__anon20b5e17c0308	typeref:typename:int	file:
+next_idx	xmss_fast.h	/^  unsigned int next_idx;$/;"	m	struct:__anon22bef5f30408	typeref:typename:unsigned int
+next_leaf	xmss_fast.h	/^  unsigned int next_leaf;$/;"	m	struct:__anon22bef5f30508	typeref:typename:unsigned int
+next_unused	session.h	/^	int	next_unused;$/;"	m	struct:Session	typeref:typename:int
+next_unused	sftp-server.c	/^	int next_unused;$/;"	m	struct:Handle	typeref:typename:int	file:
+nfds_t	openbsd-compat/bsd-poll.h	/^typedef unsigned int	nfds_t;$/;"	t	typeref:typename:unsigned int
+nflag	regress/netcat.c	/^int	nflag;					\/* Don't do name look up *\/$/;"	v	typeref:typename:int
+ngroups	groupaccess.c	/^static int ngroups;$/;"	v	typeref:typename:int	file:
+nh	umac.c	/^static void nh(nh_ctx *hc, const UINT8 *buf, UINT32 padded_len,$/;"	f	typeref:typename:void	file:
+nh_aux	umac.c	/^static void nh_aux(void *kp, const void *dp, void *hp, UINT32 dlen)$/;"	f	typeref:typename:void	file:
+nh_ctx	umac.c	/^} nh_ctx;$/;"	t	typeref:struct:__anon20b5e17c0308	file:
+nh_final	umac.c	/^static void nh_final(nh_ctx *hc, UINT8 *result)$/;"	f	typeref:typename:void	file:
+nh_init	umac.c	/^static void nh_init(nh_ctx *hc, aes_int_key prf_key)$/;"	f	typeref:typename:void	file:
+nh_key	umac.c	/^    UINT8  nh_key [L1_KEY_LEN + L1_KEY_SHIFT * (STREAMS - 1)]; \/* NH Key *\/$/;"	m	struct:__anon20b5e17c0308	typeref:typename:UINT8[]	file:
+nh_reset	umac.c	/^static void nh_reset(nh_ctx *hc)$/;"	f	typeref:typename:void	file:
+nh_transform	umac.c	/^static void nh_transform(nh_ctx *hc, const UINT8 *buf, UINT32 nbytes)$/;"	f	typeref:typename:void	file:
+nh_update	umac.c	/^static void nh_update(nh_ctx *hc, const UINT8 *buf, UINT32 nbytes)$/;"	f	typeref:typename:void	file:
+nid	sshkey.c	/^	int nid;$/;"	m	struct:keytype	typeref:typename:int	file:
+nincomplete	clientloop.c	/^	size_t nkeys, nnew, nincomplete; \/* total, new keys, incomplete match *\/$/;"	m	struct:hostkeys_update_ctx	typeref:typename:size_t	file:
+nischeck	openbsd-compat/port-uw.c	/^nischeck(char *namep)$/;"	f	typeref:typename:int
+nkeys	authfd.h	/^	size_t nkeys;$/;"	m	struct:ssh_identitylist	typeref:typename:size_t
+nkeys	authfd.h	/^	u_int nkeys;	\/* number of entries in *both* 'keys' and 'key_is_ca' *\/$/;"	m	struct:dest_constraint_hop	typeref:typename:u_int
+nkeys	clientloop.c	/^	size_t nkeys, nnew, nincomplete; \/* total, new keys, incomplete match *\/$/;"	m	struct:hostkeys_update_ctx	typeref:typename:size_t	file:
+nkeys	hostfile.c	/^	size_t nkeys;$/;"	m	struct:host_delete_ctx	typeref:typename:size_t	file:
+nkeys	regress/misc/fuzz-harness/kex_fuzz.cc	/^	size_t nkeys;$/;"	m	struct:shared_state	typeref:typename:size_t	file:
+nkeys	sshconnect.h	/^	int		nkeys;$/;"	m	struct:Sensitive	typeref:typename:int
+nl_langinfo	openbsd-compat/openbsd-compat.h	/^# define nl_langinfo(/;"	d
+nlog_verbose	log.c	/^static size_t nlog_verbose;$/;"	v	typeref:typename:size_t	file:
+nnames	sshconnect.c	/^	u_int nnames;$/;"	m	struct:find_by_key_ctx	typeref:typename:u_int	file:
+nnew	clientloop.c	/^	size_t nkeys, nnew, nincomplete; \/* total, new keys, incomplete match *\/$/;"	m	struct:hostkeys_update_ctx	typeref:typename:size_t	file:
+no_argument	openbsd-compat/getopt.h	/^#define no_argument /;"	d
+no_daemon_flag	sshd.c	/^static int no_daemon_flag = 0;$/;"	v	typeref:typename:int	file:
+no_gnome_askpass	contrib/redhat/openssh.spec	/^%global no_gnome_askpass 0$/;"	g
+no_host_authentication_for_localhost	readconf.h	/^	int	no_host_authentication_for_localhost;$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+no_identities	ssh-agent.c	/^no_identities(SocketEntry *e)$/;"	f	typeref:typename:void	file:
+no_more_sessions	serverloop.c	/^static int no_more_sessions = 0; \/* Disallow further sessions. *\/$/;"	v	typeref:typename:int	file:
+no_parse_keytype	regress/unittests/hostkeys/test_iterate.c	/^	int no_parse_keytype;		\/* Expected keytype w\/o key parsing *\/$/;"	m	struct:expected	typeref:typename:int	file:
+no_parse_status	regress/unittests/hostkeys/test_iterate.c	/^	int no_parse_status;		\/* Expected status w\/o key parsing *\/$/;"	m	struct:expected	typeref:typename:int	file:
+no_require_user_presence	auth-options.h	/^	int no_require_user_presence;$/;"	m	struct:sshauthopt	typeref:typename:int
+no_x11_askpass	contrib/redhat/openssh.spec	/^%global no_x11_askpass 0$/;"	g
+noarg	openbsd-compat/getopt_long.c	/^static const char noarg[] = "option doesn't take an argument -- %.*s";$/;"	v	typeref:typename:const char[]	file:
+node	xmss_fast.h	/^  unsigned char *node;$/;"	m	struct:__anon22bef5f30408	typeref:typename:unsigned char *
+nold	clientloop.c	/^	size_t nold;$/;"	m	struct:hostkeys_update_ctx	typeref:typename:size_t	file:
+nologtest	logintest.c	/^int nologtest = 0;$/;"	v	typeref:typename:int
+nonce	umac.c	/^    UINT8 nonce[AES_BLOCK_LEN];  \/* The AES input making above cache  *\/$/;"	m	struct:__anon20b5e17c0108	typeref:typename:UINT8[]	file:
+none_enabled	auth2-none.c	/^static int none_enabled = 1;$/;"	v	typeref:typename:int	file:
+nonopt_end	openbsd-compat/getopt_long.c	/^static int nonopt_end = -1;   \/* first option after non options (for permute) *\/$/;"	v	typeref:typename:int	file:
+nonopt_start	openbsd-compat/getopt_long.c	/^static int nonopt_start = -1; \/* first non option argument (for permute) *\/$/;"	v	typeref:typename:int	file:
+notbefore	channels.h	/^	time_t	notbefore;	\/* Pause IO until deadline (time_t) *\/$/;"	m	struct:Channel	typeref:typename:time_t
+note	hostfile.h	/^	u_int note;	\/* caller-specified note copied from arguments *\/$/;"	m	struct:hostkey_foreach_line	typeref:typename:u_int
+note	hostfile.h	/^	u_int note; \/* caller-specific note\/flag *\/$/;"	m	struct:hostkey_entry	typeref:typename:u_int
+note_err	scp.c	/^note_err(const char *fmt, ...)$/;"	f	typeref:typename:int
+note_key	ssh-pkcs11.c	/^note_key(struct pkcs11_provider *p, CK_ULONG slotidx, const char *context,$/;"	f	typeref:typename:void	file:
+notifier_ctx	readpass.c	/^struct notifier_ctx {$/;"	s	file:
+notify_complete	readpass.c	/^notify_complete(struct notifier_ctx *ctx, const char *fmt, ...)$/;"	f	typeref:typename:void
+notify_hostkeys	sshd.c	/^notify_hostkeys(struct ssh *ssh)$/;"	f	typeref:typename:void	file:
+notify_pid	openbsd-compat/bsd-pselect.c	/^static pid_t notify_pid;$/;"	v	typeref:typename:pid_t	file:
+notify_pipe	openbsd-compat/bsd-pselect.c	/^static int notify_pipe[2];$/;"	v	typeref:typename:int[2]	file:
+notify_start	readpass.c	/^notify_start(int force_askpass, const char *fmt, ...)$/;"	f	typeref:struct:notifier_ctx *
+notty	regress/agent-pkcs11.sh	/^notty() {$/;"	f
+npermitlisten	auth-options.h	/^	size_t npermitlisten;$/;"	m	struct:sshauthopt	typeref:typename:size_t
+npermitopen	auth-options.h	/^	size_t npermitopen;$/;"	m	struct:sshauthopt	typeref:typename:size_t
+nprev_keys	auth.h	/^	u_int		 nprev_keys;$/;"	m	struct:Authctxt	typeref:typename:u_int
+nprincipals	sshkey.h	/^	u_int		 nprincipals;$/;"	m	struct:sshkey_cert	typeref:typename:u_int
+nreq	auth2-chall.c	/^	u_int nreq;$/;"	m	struct:KbdintAuthctxt	typeref:typename:u_int	file:
+nsession_ids	ssh-agent.c	/^	size_t nsession_ids;$/;"	m	struct:socket_entry	typeref:typename:size_t	file:
+nslots	ssh-pkcs11.c	/^	CK_ULONG		nslots;$/;"	m	struct:pkcs11_provider	typeref:typename:CK_ULONG	file:
+null_conv	auth-pam.c	/^static struct pam_conv null_conv = { sshpam_null_conv, NULL };$/;"	v	typeref:struct:pam_conv	file:
+null_empty	ssh-sk-helper.c	/^null_empty(char **s)$/;"	f	typeref:typename:void	file:
+num	misc.h	/^	u_int   num;$/;"	m	struct:arglist	typeref:typename:u_int
+num_accept_env	servconf.h	/^	u_int num_accept_env;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:u_int
+num_allow_groups	servconf.h	/^	u_int num_allow_groups;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:u_int
+num_allow_users	servconf.h	/^	u_int num_allow_users;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:u_int
+num_auth	sshkey-xmss.c	/^#define num_auth(/;"	d	file:
+num_auth_methods	auth.h	/^	u_int		 num_auth_methods;$/;"	m	struct:Authctxt	typeref:typename:u_int
+num_auth_methods	servconf.h	/^	u_int	num_auth_methods;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:u_int
+num_authkeys_files	servconf.h	/^	u_int	num_authkeys_files;	\/* Files containing public keys *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:u_int
+num_canonical_domains	readconf.h	/^	int	num_canonical_domains;$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+num_certificate_files	readconf.h	/^	int	num_certificate_files; \/* Number of extra certificates for ssh. *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+num_deny_groups	servconf.h	/^	u_int num_deny_groups;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:u_int
+num_deny_users	servconf.h	/^	u_int num_deny_users;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:u_int
+num_entries	hostfile.h	/^	u_int num_entries;$/;"	m	struct:hostkeys	typeref:typename:u_int
+num_env	session.h	/^	u_int	num_env;$/;"	m	struct:Session	typeref:typename:u_int
+num_handles	sftp-server.c	/^static u_int num_handles = 0;$/;"	v	typeref:typename:u_int	file:
+num_host_cert_files	servconf.h	/^	u_int	num_host_cert_files;	\/* Number of files for host certs. *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:u_int
+num_host_key_files	servconf.h	/^	u_int	num_host_key_files;     \/* Number of files for host keys. *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:u_int
+num_identity_files	readconf.h	/^	int     num_identity_files;	\/* Number of files for RSA\/DSA identities. *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+num_keep	sshkey-xmss.c	/^#define num_keep(/;"	d	file:
+num_listen_addrs	servconf.h	/^	u_int	num_listen_addrs;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:u_int
+num_listen_socks	sshd.c	/^static int num_listen_socks = 0;$/;"	v	typeref:typename:int	file:
+num_loaded	hostfile.c	/^	u_long num_loaded;$/;"	m	struct:load_callback_ctx	typeref:typename:u_long	file:
+num_local_forwards	readconf.h	/^	int     num_local_forwards;$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+num_log_verbose	readconf.h	/^	u_int	num_log_verbose;	\/* Verbose log overrides *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:u_int
+num_log_verbose	servconf.h	/^	u_int	num_log_verbose;	\/* Verbose log overrides *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:u_int
+num_permitted_admin	channels.c	/^	u_int num_permitted_admin;$/;"	m	struct:permission_set	typeref:typename:u_int	file:
+num_permitted_cnames	readconf.h	/^	int	num_permitted_cnames;$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+num_permitted_listens	servconf.h	/^	u_int   num_permitted_listens;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:u_int
+num_permitted_opens	servconf.h	/^	u_int   num_permitted_opens;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:u_int
+num_permitted_remote_opens	readconf.h	/^	u_int	num_permitted_remote_opens;$/;"	m	struct:__anon7d31da1d0108	typeref:typename:u_int
+num_permitted_user	channels.c	/^	u_int num_permitted_user;$/;"	m	struct:permission_set	typeref:typename:u_int	file:
+num_ports	servconf.h	/^	u_int	num_ports;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:u_int
+num_queued_listens	servconf.h	/^	u_int	num_queued_listens;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:u_int
+num_remote_forwards	readconf.h	/^	int     num_remote_forwards;$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+num_requests	sftp-client.c	/^	u_int num_requests;$/;"	m	struct:sftp_conn	typeref:typename:u_int	file:
+num_retain	sshkey-xmss.c	/^#define num_retain(/;"	d	file:
+num_send_env	readconf.h	/^	u_int	num_send_env;$/;"	m	struct:__anon7d31da1d0108	typeref:typename:u_int
+num_setenv	readconf.h	/^	u_int	num_setenv;$/;"	m	struct:__anon7d31da1d0108	typeref:typename:u_int
+num_setenv	servconf.h	/^	u_int num_setenv;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:u_int
+num_stack	sshkey-xmss.c	/^#define num_stack(/;"	d	file:
+num_stacklevels	sshkey-xmss.c	/^#define num_stacklevels(/;"	d	file:
+num_subsystems	servconf.h	/^	u_int num_subsystems;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:u_int
+num_system_hostfiles	readconf.h	/^	u_int	num_system_hostfiles;	\/* Paths for \/etc\/ssh\/ssh_known_hosts *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:u_int
+num_th_nodes	sshkey-xmss.c	/^#define num_th_nodes(/;"	d	file:
+num_treehash	sshkey-xmss.c	/^#define num_treehash(/;"	d	file:
+num_user_hostfiles	readconf.h	/^	u_int	num_user_hostfiles;	\/* Path for $HOME\/.ssh\/known_hosts *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:u_int
+number_of_password_prompts	readconf.h	/^	int     number_of_password_prompts;	\/* Max number of password$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+o1	regress/unittests/test_helper/fuzz.c	/^	size_t o1, o2;$/;"	m	struct:fuzz	typeref:typename:size_t	file:
+o2	regress/unittests/test_helper/fuzz.c	/^	size_t o1, o2;$/;"	m	struct:fuzz	typeref:typename:size_t	file:
+oAddKeysToAgent	readconf.c	/^	oCertificateFile, oAddKeysToAgent, oIdentityAgent,$/;"	e	enum:__anon7d31da180103	file:
+oAddressFamily	readconf.c	/^	oAddressFamily, oGssAuthentication, oGssDelegateCreds,$/;"	e	enum:__anon7d31da180103	file:
+oBadOption	readconf.c	/^	oBadOption,$/;"	e	enum:__anon7d31da180103	file:
+oBatchMode	readconf.c	/^	oBatchMode, oCheckHostIP, oStrictHostKeyChecking, oCompression,$/;"	e	enum:__anon7d31da180103	file:
+oBindAddress	readconf.c	/^	oHostKeyAlgorithms, oBindAddress, oBindInterface, oPKCS11Provider,$/;"	e	enum:__anon7d31da180103	file:
+oBindInterface	readconf.c	/^	oHostKeyAlgorithms, oBindAddress, oBindInterface, oPKCS11Provider,$/;"	e	enum:__anon7d31da180103	file:
+oCASignatureAlgorithms	readconf.c	/^	oPubkeyAcceptedAlgorithms, oCASignatureAlgorithms, oProxyJump,$/;"	e	enum:__anon7d31da180103	file:
+oCanonicalDomains	readconf.c	/^	oCanonicalDomains, oCanonicalizeHostname, oCanonicalizeMaxDots,$/;"	e	enum:__anon7d31da180103	file:
+oCanonicalizeFallbackLocal	readconf.c	/^	oCanonicalizeFallbackLocal, oCanonicalizePermittedCNAMEs,$/;"	e	enum:__anon7d31da180103	file:
+oCanonicalizeHostname	readconf.c	/^	oCanonicalDomains, oCanonicalizeHostname, oCanonicalizeMaxDots,$/;"	e	enum:__anon7d31da180103	file:
+oCanonicalizeMaxDots	readconf.c	/^	oCanonicalDomains, oCanonicalizeHostname, oCanonicalizeMaxDots,$/;"	e	enum:__anon7d31da180103	file:
+oCanonicalizePermittedCNAMEs	readconf.c	/^	oCanonicalizeFallbackLocal, oCanonicalizePermittedCNAMEs,$/;"	e	enum:__anon7d31da180103	file:
+oCertificateFile	readconf.c	/^	oCertificateFile, oAddKeysToAgent, oIdentityAgent,$/;"	e	enum:__anon7d31da180103	file:
+oCheckHostIP	readconf.c	/^	oBatchMode, oCheckHostIP, oStrictHostKeyChecking, oCompression,$/;"	e	enum:__anon7d31da180103	file:
+oCiphers	readconf.c	/^	oLogFacility, oLogLevel, oLogVerbose, oCiphers, oMacs,$/;"	e	enum:__anon7d31da180103	file:
+oClearAllForwardings	readconf.c	/^	oClearAllForwardings, oNoHostAuthenticationForLocalhost,$/;"	e	enum:__anon7d31da180103	file:
+oCompression	readconf.c	/^	oBatchMode, oCheckHostIP, oStrictHostKeyChecking, oCompression,$/;"	e	enum:__anon7d31da180103	file:
+oConnectTimeout	readconf.c	/^	oEnableSSHKeysign, oRekeyLimit, oVerifyHostKeyDNS, oConnectTimeout,$/;"	e	enum:__anon7d31da180103	file:
+oConnectionAttempts	readconf.c	/^	oGlobalKnownHostsFile, oUserKnownHostsFile, oConnectionAttempts,$/;"	e	enum:__anon7d31da180103	file:
+oControlMaster	readconf.c	/^	oSendEnv, oSetEnv, oControlPath, oControlMaster, oControlPersist,$/;"	e	enum:__anon7d31da180103	file:
+oControlPath	readconf.c	/^	oSendEnv, oSetEnv, oControlPath, oControlMaster, oControlPersist,$/;"	e	enum:__anon7d31da180103	file:
+oControlPersist	readconf.c	/^	oSendEnv, oSetEnv, oControlPath, oControlMaster, oControlPersist,$/;"	e	enum:__anon7d31da180103	file:
+oDeprecated	readconf.c	/^	oIgnore, oIgnoredUnknownOption, oDeprecated, oUnsupported$/;"	e	enum:__anon7d31da180103	file:
+oDynamicForward	readconf.c	/^	oDynamicForward, oPreferredAuthentications, oHostbasedAuthentication,$/;"	e	enum:__anon7d31da180103	file:
+oEnableSSHKeysign	readconf.c	/^	oEnableSSHKeysign, oRekeyLimit, oVerifyHostKeyDNS, oConnectTimeout,$/;"	e	enum:__anon7d31da180103	file:
+oEscapeChar	readconf.c	/^	oUser, oEscapeChar, oProxyCommand,$/;"	e	enum:__anon7d31da180103	file:
+oExitOnForwardFailure	readconf.c	/^	oGatewayPorts, oExitOnForwardFailure,$/;"	e	enum:__anon7d31da180103	file:
+oFingerprintHash	readconf.c	/^	oFingerprintHash, oUpdateHostkeys, oHostbasedAcceptedAlgorithms,$/;"	e	enum:__anon7d31da180103	file:
+oForkAfterAuthentication	readconf.c	/^	oForkAfterAuthentication, oIgnoreUnknown, oProxyUseFdpass,$/;"	e	enum:__anon7d31da180103	file:
+oForwardAgent	readconf.c	/^	oForwardAgent, oForwardX11, oForwardX11Trusted, oForwardX11Timeout,$/;"	e	enum:__anon7d31da180103	file:
+oForwardX11	readconf.c	/^	oForwardAgent, oForwardX11, oForwardX11Trusted, oForwardX11Timeout,$/;"	e	enum:__anon7d31da180103	file:
+oForwardX11Timeout	readconf.c	/^	oForwardAgent, oForwardX11, oForwardX11Trusted, oForwardX11Timeout,$/;"	e	enum:__anon7d31da180103	file:
+oForwardX11Trusted	readconf.c	/^	oForwardAgent, oForwardX11, oForwardX11Trusted, oForwardX11Timeout,$/;"	e	enum:__anon7d31da180103	file:
+oGatewayPorts	readconf.c	/^	oGatewayPorts, oExitOnForwardFailure,$/;"	e	enum:__anon7d31da180103	file:
+oGlobalKnownHostsFile	readconf.c	/^	oGlobalKnownHostsFile, oUserKnownHostsFile, oConnectionAttempts,$/;"	e	enum:__anon7d31da180103	file:
+oGssAuthentication	readconf.c	/^	oAddressFamily, oGssAuthentication, oGssDelegateCreds,$/;"	e	enum:__anon7d31da180103	file:
+oGssDelegateCreds	readconf.c	/^	oAddressFamily, oGssAuthentication, oGssDelegateCreds,$/;"	e	enum:__anon7d31da180103	file:
+oHashKnownHosts	readconf.c	/^	oHashKnownHosts,$/;"	e	enum:__anon7d31da180103	file:
+oHost	readconf.c	/^	oHost, oMatch, oInclude,$/;"	e	enum:__anon7d31da180103	file:
+oHostKeyAlgorithms	readconf.c	/^	oHostKeyAlgorithms, oBindAddress, oBindInterface, oPKCS11Provider,$/;"	e	enum:__anon7d31da180103	file:
+oHostKeyAlias	readconf.c	/^	oKbdInteractiveAuthentication, oKbdInteractiveDevices, oHostKeyAlias,$/;"	e	enum:__anon7d31da180103	file:
+oHostbasedAcceptedAlgorithms	readconf.c	/^	oFingerprintHash, oUpdateHostkeys, oHostbasedAcceptedAlgorithms,$/;"	e	enum:__anon7d31da180103	file:
+oHostbasedAuthentication	readconf.c	/^	oDynamicForward, oPreferredAuthentications, oHostbasedAuthentication,$/;"	e	enum:__anon7d31da180103	file:
+oHostname	readconf.c	/^	oIdentityFile, oHostname, oPort, oRemoteForward, oLocalForward,$/;"	e	enum:__anon7d31da180103	file:
+oIPQoS	readconf.c	/^	oKexAlgorithms, oIPQoS, oRequestTTY, oSessionType, oStdinNull,$/;"	e	enum:__anon7d31da180103	file:
+oIdentitiesOnly	readconf.c	/^	oServerAliveInterval, oServerAliveCountMax, oIdentitiesOnly,$/;"	e	enum:__anon7d31da180103	file:
+oIdentityAgent	readconf.c	/^	oCertificateFile, oAddKeysToAgent, oIdentityAgent,$/;"	e	enum:__anon7d31da180103	file:
+oIdentityFile	readconf.c	/^	oIdentityFile, oHostname, oPort, oRemoteForward, oLocalForward,$/;"	e	enum:__anon7d31da180103	file:
+oIgnore	readconf.c	/^	oIgnore, oIgnoredUnknownOption, oDeprecated, oUnsupported$/;"	e	enum:__anon7d31da180103	file:
+oIgnoreUnknown	readconf.c	/^	oForkAfterAuthentication, oIgnoreUnknown, oProxyUseFdpass,$/;"	e	enum:__anon7d31da180103	file:
+oIgnoredUnknownOption	readconf.c	/^	oIgnore, oIgnoredUnknownOption, oDeprecated, oUnsupported$/;"	e	enum:__anon7d31da180103	file:
+oInclude	readconf.c	/^	oHost, oMatch, oInclude,$/;"	e	enum:__anon7d31da180103	file:
+oKbdInteractiveAuthentication	readconf.c	/^	oKbdInteractiveAuthentication, oKbdInteractiveDevices, oHostKeyAlias,$/;"	e	enum:__anon7d31da180103	file:
+oKbdInteractiveDevices	readconf.c	/^	oKbdInteractiveAuthentication, oKbdInteractiveDevices, oHostKeyAlias,$/;"	e	enum:__anon7d31da180103	file:
+oKexAlgorithms	readconf.c	/^	oKexAlgorithms, oIPQoS, oRequestTTY, oSessionType, oStdinNull,$/;"	e	enum:__anon7d31da180103	file:
+oKnownHostsCommand	readconf.c	/^	oSecurityKeyProvider, oKnownHostsCommand, oRequiredRSASize,$/;"	e	enum:__anon7d31da180103	file:
+oLocalCommand	readconf.c	/^	oLocalCommand, oPermitLocalCommand, oRemoteCommand,$/;"	e	enum:__anon7d31da180103	file:
+oLocalForward	readconf.c	/^	oIdentityFile, oHostname, oPort, oRemoteForward, oLocalForward,$/;"	e	enum:__anon7d31da180103	file:
+oLogFacility	readconf.c	/^	oLogFacility, oLogLevel, oLogVerbose, oCiphers, oMacs,$/;"	e	enum:__anon7d31da180103	file:
+oLogLevel	readconf.c	/^	oLogFacility, oLogLevel, oLogVerbose, oCiphers, oMacs,$/;"	e	enum:__anon7d31da180103	file:
+oLogVerbose	readconf.c	/^	oLogFacility, oLogLevel, oLogVerbose, oCiphers, oMacs,$/;"	e	enum:__anon7d31da180103	file:
+oMacs	readconf.c	/^	oLogFacility, oLogLevel, oLogVerbose, oCiphers, oMacs,$/;"	e	enum:__anon7d31da180103	file:
+oMatch	readconf.c	/^	oHost, oMatch, oInclude,$/;"	e	enum:__anon7d31da180103	file:
+oNoHostAuthenticationForLocalhost	readconf.c	/^	oClearAllForwardings, oNoHostAuthenticationForLocalhost,$/;"	e	enum:__anon7d31da180103	file:
+oNumberOfPasswordPrompts	readconf.c	/^	oTCPKeepAlive, oNumberOfPasswordPrompts,$/;"	e	enum:__anon7d31da180103	file:
+oPKCS11Provider	readconf.c	/^	oHostKeyAlgorithms, oBindAddress, oBindInterface, oPKCS11Provider,$/;"	e	enum:__anon7d31da180103	file:
+oPasswordAuthentication	readconf.c	/^	oPasswordAuthentication,$/;"	e	enum:__anon7d31da180103	file:
+oPermitLocalCommand	readconf.c	/^	oLocalCommand, oPermitLocalCommand, oRemoteCommand,$/;"	e	enum:__anon7d31da180103	file:
+oPermitRemoteOpen	readconf.c	/^	oPermitRemoteOpen,$/;"	e	enum:__anon7d31da180103	file:
+oPort	readconf.c	/^	oIdentityFile, oHostname, oPort, oRemoteForward, oLocalForward,$/;"	e	enum:__anon7d31da180103	file:
+oPreferredAuthentications	readconf.c	/^	oDynamicForward, oPreferredAuthentications, oHostbasedAuthentication,$/;"	e	enum:__anon7d31da180103	file:
+oProxyCommand	readconf.c	/^	oUser, oEscapeChar, oProxyCommand,$/;"	e	enum:__anon7d31da180103	file:
+oProxyJump	readconf.c	/^	oPubkeyAcceptedAlgorithms, oCASignatureAlgorithms, oProxyJump,$/;"	e	enum:__anon7d31da180103	file:
+oProxyUseFdpass	readconf.c	/^	oForkAfterAuthentication, oIgnoreUnknown, oProxyUseFdpass,$/;"	e	enum:__anon7d31da180103	file:
+oPubkeyAcceptedAlgorithms	readconf.c	/^	oPubkeyAcceptedAlgorithms, oCASignatureAlgorithms, oProxyJump,$/;"	e	enum:__anon7d31da180103	file:
+oPubkeyAuthentication	readconf.c	/^	oPubkeyAuthentication,$/;"	e	enum:__anon7d31da180103	file:
+oRekeyLimit	readconf.c	/^	oEnableSSHKeysign, oRekeyLimit, oVerifyHostKeyDNS, oConnectTimeout,$/;"	e	enum:__anon7d31da180103	file:
+oRemoteCommand	readconf.c	/^	oLocalCommand, oPermitLocalCommand, oRemoteCommand,$/;"	e	enum:__anon7d31da180103	file:
+oRemoteForward	readconf.c	/^	oIdentityFile, oHostname, oPort, oRemoteForward, oLocalForward,$/;"	e	enum:__anon7d31da180103	file:
+oRequestTTY	readconf.c	/^	oKexAlgorithms, oIPQoS, oRequestTTY, oSessionType, oStdinNull,$/;"	e	enum:__anon7d31da180103	file:
+oRequiredRSASize	readconf.c	/^	oSecurityKeyProvider, oKnownHostsCommand, oRequiredRSASize,$/;"	e	enum:__anon7d31da180103	file:
+oRevokedHostKeys	readconf.c	/^	oStreamLocalBindMask, oStreamLocalBindUnlink, oRevokedHostKeys,$/;"	e	enum:__anon7d31da180103	file:
+oSecurityKeyProvider	readconf.c	/^	oSecurityKeyProvider, oKnownHostsCommand, oRequiredRSASize,$/;"	e	enum:__anon7d31da180103	file:
+oSendEnv	readconf.c	/^	oSendEnv, oSetEnv, oControlPath, oControlMaster, oControlPersist,$/;"	e	enum:__anon7d31da180103	file:
+oServerAliveCountMax	readconf.c	/^	oServerAliveInterval, oServerAliveCountMax, oIdentitiesOnly,$/;"	e	enum:__anon7d31da180103	file:
+oServerAliveInterval	readconf.c	/^	oServerAliveInterval, oServerAliveCountMax, oIdentitiesOnly,$/;"	e	enum:__anon7d31da180103	file:
+oSessionType	readconf.c	/^	oKexAlgorithms, oIPQoS, oRequestTTY, oSessionType, oStdinNull,$/;"	e	enum:__anon7d31da180103	file:
+oSetEnv	readconf.c	/^	oSendEnv, oSetEnv, oControlPath, oControlMaster, oControlPersist,$/;"	e	enum:__anon7d31da180103	file:
+oStdinNull	readconf.c	/^	oKexAlgorithms, oIPQoS, oRequestTTY, oSessionType, oStdinNull,$/;"	e	enum:__anon7d31da180103	file:
+oStreamLocalBindMask	readconf.c	/^	oStreamLocalBindMask, oStreamLocalBindUnlink, oRevokedHostKeys,$/;"	e	enum:__anon7d31da180103	file:
+oStreamLocalBindUnlink	readconf.c	/^	oStreamLocalBindMask, oStreamLocalBindUnlink, oRevokedHostKeys,$/;"	e	enum:__anon7d31da180103	file:
+oStrictHostKeyChecking	readconf.c	/^	oBatchMode, oCheckHostIP, oStrictHostKeyChecking, oCompression,$/;"	e	enum:__anon7d31da180103	file:
+oTCPKeepAlive	readconf.c	/^	oTCPKeepAlive, oNumberOfPasswordPrompts,$/;"	e	enum:__anon7d31da180103	file:
+oTunnel	readconf.c	/^	oTunnel, oTunnelDevice,$/;"	e	enum:__anon7d31da180103	file:
+oTunnelDevice	readconf.c	/^	oTunnel, oTunnelDevice,$/;"	e	enum:__anon7d31da180103	file:
+oUnsupported	readconf.c	/^	oIgnore, oIgnoredUnknownOption, oDeprecated, oUnsupported$/;"	e	enum:__anon7d31da180103	file:
+oUpdateHostkeys	readconf.c	/^	oFingerprintHash, oUpdateHostkeys, oHostbasedAcceptedAlgorithms,$/;"	e	enum:__anon7d31da180103	file:
+oUser	readconf.c	/^	oUser, oEscapeChar, oProxyCommand,$/;"	e	enum:__anon7d31da180103	file:
+oUserKnownHostsFile	readconf.c	/^	oGlobalKnownHostsFile, oUserKnownHostsFile, oConnectionAttempts,$/;"	e	enum:__anon7d31da180103	file:
+oVerifyHostKeyDNS	readconf.c	/^	oEnableSSHKeysign, oRekeyLimit, oVerifyHostKeyDNS, oConnectTimeout,$/;"	e	enum:__anon7d31da180103	file:
+oVisualHostKey	readconf.c	/^	oVisualHostKey,$/;"	e	enum:__anon7d31da180103	file:
+oXAuthLocation	readconf.c	/^	oXAuthLocation,$/;"	e	enum:__anon7d31da180103	file:
+octx	hmac.c	/^	struct ssh_digest_ctx	*octx;$/;"	m	struct:ssh_hmac_ctx	typeref:struct:ssh_digest_ctx *	file:
+off	sshbuf.h	/^	size_t off;		\/* First available byte is buf->d + buf->off *\/$/;"	m	struct:sshbuf	typeref:typename:size_t
+offset	regress/modpipe.c	/^	unsigned long long offset;$/;"	m	struct:modification	typeref:typename:unsigned long long	file:
+offset	sftp-client.c	/^	u_int64_t offset;$/;"	m	struct:request	typeref:typename:u_int64_t	file:
+offset	sftp-glob.c	/^	int offset;$/;"	m	struct:SFTP_OPENDIR	typeref:typename:int	file:
+offsetof	defines.h	/^# define offsetof(/;"	d
+oid	ssh-gss.h	/^	gss_OID		oid; \/* client *\/$/;"	m	struct:__anon1dbf9ce30308	typeref:typename:gss_OID
+oid	ssh-gss.h	/^	gss_OID_desc oid;$/;"	m	struct:ssh_gssapi_mech_struct	typeref:typename:gss_OID_desc
+oid	ssh-pkcs11.c	/^	const char	*oid;$/;"	m	struct:ec_curve_info	typeref:typename:const char *	file:
+oid_encoded	ssh-pkcs11.c	/^	const char	*oid_encoded;$/;"	m	struct:ec_curve_info	typeref:typename:const char *	file:
+ok_dialog	contrib/gnome-ssh-askpass2.c	/^ok_dialog(GtkWidget *entry, gpointer dialog)$/;"	f	typeref:typename:void	file:
+ok_dialog	contrib/gnome-ssh-askpass3.c	/^ok_dialog(GtkWidget *entry, gpointer dialog)$/;"	f	typeref:typename:void	file:
+okname	scp.c	/^okname(char *cp0)$/;"	f	typeref:typename:int
+oktypes	sshconnect2.c	/^	char *oktypes, *ktypes;$/;"	m	struct:cauthctxt	typeref:typename:char *	file:
+old_key_seen	clientloop.c	/^	int old_key_seen;	\/* saw old key with other name\/addr *\/$/;"	m	struct:hostkeys_update_ctx	typeref:typename:int	file:
+old_keys	clientloop.c	/^	struct sshkey **old_keys;$/;"	m	struct:hostkeys_update_ctx	typeref:struct:sshkey **	file:
+old_registry	openbsd-compat/port-aix.c	/^static char old_registry[REGISTRY_SIZE] = "";$/;"	v	typeref:typename:char[]	file:
+one	regress/unittests/utf8/tests.c	/^one(int utf8, const char *name, const char *mbs, int width,$/;"	f	typeref:typename:void	file:
+onerror	regress/unittests/sshbuf/test_sshbuf_getput_fuzz.c	/^onerror(void *fuzz)$/;"	f	typeref:typename:void	file:
+onerror	regress/unittests/sshkey/test_fuzz.c	/^onerror(void *fuzz)$/;"	f	typeref:typename:void	file:
+onerror_ctx	regress/unittests/test_helper/test_helper.c	/^static void *onerror_ctx = NULL;$/;"	v	typeref:typename:void *	file:
+oom_adj_path	openbsd-compat/port-linux.c	/^static char *oom_adj_path = NULL;$/;"	v	typeref:typename:char *	file:
+oom_adj_save	openbsd-compat/port-linux.c	/^static int oom_adj_save = INT_MIN;$/;"	v	typeref:typename:int	file:
+oom_adjust	openbsd-compat/port-linux.c	/^} oom_adjust[] = {$/;"	v	typeref:struct:__anon8408cfa30108[]
+oom_adjust_restore	openbsd-compat/port-linux.c	/^oom_adjust_restore(void)$/;"	f	typeref:typename:void
+oom_adjust_setup	openbsd-compat/port-linux.c	/^oom_adjust_setup(void)$/;"	f	typeref:typename:void
+opcode	readconf.c	/^	OpCodes opcode;$/;"	m	struct:__anon7d31da180208	typeref:typename:OpCodes	file:
+opcode	servconf.c	/^	ServerOpCodes opcode;$/;"	m	struct:__anon9b33d3bc0208	typeref:typename:ServerOpCodes	file:
+open	openbsd-compat/bsd-cygwin_util.h	/^#define open /;"	d
+open_confirm	channels.h	/^	channel_open_fn		*open_confirm;$/;"	m	struct:Channel	typeref:typename:channel_open_fn *
+open_confirm_ctx	channels.h	/^	void			*open_confirm_ctx;$/;"	m	struct:Channel	typeref:typename:void *
+open_handles	sftp-client.h	/^	u_int64_t open_handles;$/;"	m	struct:sftp_limits	typeref:typename:u_int64_t
+open_listen_match_streamlocal	channels.c	/^open_listen_match_streamlocal(struct permission *allowed_open,$/;"	f	typeref:typename:int	file:
+open_listen_match_tcpip	channels.c	/^open_listen_match_tcpip(struct permission *allowed_open,$/;"	f	typeref:typename:int	file:
+open_match	channels.c	/^open_match(struct permission *allowed_open, const char *requestedhost,$/;"	f	typeref:typename:int	file:
+open_preamble	channels.c	/^open_preamble(struct ssh *ssh, const char *where, Channel *c, const char *type)$/;"	f	typeref:typename:void	file:
+openpty	openbsd-compat/bsd-openpty.c	/^openpty(int *amaster, int *aslave, char *name, struct termios *termp,$/;"	f	typeref:typename:int
+openpty_streams	openbsd-compat/bsd-openpty.c	/^openpty_streams(int *amaster, int *aslave)$/;"	f	typeref:typename:int	file:
+openssh	contrib/redhat/openssh.spec	/^Name: openssh$/;"	p
+openssh	contrib/suse/openssh.spec	/^Name:		openssh$/;"	p
+openssh_RSA_verify	ssh-rsa.c	/^openssh_RSA_verify(int hash_alg, u_char *hash, size_t hashlen,$/;"	f	typeref:typename:int	file:
+openssh_format_cipher	ssh-keygen.c	/^static char *openssh_format_cipher = NULL;$/;"	v	typeref:typename:char *	file:
+openssl	configure.ac	/^AC_ARG_WITH([openssl],$/;"	w
+openssl-header-check	configure.ac	/^AC_ARG_WITH([openssl-header-check],$/;"	w
+opt_array_append	misc.c	/^opt_array_append(const char *file, const int line, const char *directive,$/;"	f	typeref:typename:void
+opt_array_append2	misc.c	/^opt_array_append2(const char *file, const int line, const char *directive,$/;"	f	typeref:typename:void
+opt_dequote	misc.c	/^opt_dequote(const char **sp, const char **errstrp)$/;"	f	typeref:typename:char *
+opt_flag	misc.c	/^opt_flag(const char *opt, int allow_negate, const char **optsp)$/;"	f	typeref:typename:int
+opt_match	misc.c	/^opt_match(const char **opts, const char *term)$/;"	f	typeref:typename:int
+optarg	defines.h	/^# define optarg /;"	d
+optarg	openbsd-compat/getopt_long.c	/^char    *optarg;		\/* argument associated with option *\/$/;"	v	typeref:typename:char *
+opterr	defines.h	/^# define opterr /;"	d
+opterr	openbsd-compat/getopt_long.c	/^int	opterr = 1;		\/* if error message should be printed *\/$/;"	v	typeref:typename:int
+optind	defines.h	/^# define optind /;"	d
+optind	openbsd-compat/getopt_long.c	/^int	optind = 1;		\/* index into parent argv vector *\/$/;"	v	typeref:typename:int
+option	openbsd-compat/getopt.h	/^struct option {$/;"	s
+option_clear_or_none	readconf.c	/^option_clear_or_none(const char *o)$/;"	f	typeref:typename:int
+option_clear_or_none	servconf.c	/^option_clear_or_none(const char *o)$/;"	f	typeref:typename:int	file:
+optional_argument	openbsd-compat/getopt.h	/^#define optional_argument /;"	d
+options	ssh.c	/^Options options;$/;"	v	typeref:typename:Options
+options	sshd.c	/^ServerOptions options;$/;"	v	typeref:typename:ServerOptions
+optopt	defines.h	/^# define optopt /;"	d
+optopt	openbsd-compat/getopt_long.c	/^int	optopt = '?';		\/* character checked for validity *\/$/;"	v	typeref:typename:int
+optreset	defines.h	/^# define optreset /;"	d
+optreset	openbsd-compat/getopt_long.c	/^int	optreset;		\/* reset getopt *\/$/;"	v	typeref:typename:int
+oqueue	sftp-server.c	/^struct sshbuf *oqueue;$/;"	v	typeref:struct:sshbuf *
+oqueue	ssh-pkcs11-helper.c	/^struct sshbuf *oqueue;$/;"	v	typeref:struct:sshbuf *
+order_hostkeyalgs	sshconnect2.c	/^order_hostkeyalgs(char *host, struct sockaddr *hostaddr, u_short port,$/;"	f	typeref:typename:char *	file:
+orequest_tty	ssh.c	/^int ostdin_null_flag, osession_type, otty_flag, orequest_tty;$/;"	v	typeref:typename:int
+original_command	session.c	/^const char *original_command = NULL;$/;"	v	typeref:typename:const char *
+osession_type	ssh.c	/^int ostdin_null_flag, osession_type, otty_flag, orequest_tty;$/;"	v	typeref:typename:int
+osfsia	configure.ac	/^	AC_ARG_WITH([osfsia],$/;"	w
+osigchld	readpass.c	/^	void (*osigchld)(int);$/;"	m	struct:notifier_ctx	typeref:typename:void (*)(int)	file:
+osigchld	sandbox-systrace.c	/^	void (*osigchld)(int);$/;"	m	struct:ssh_sandbox	typeref:typename:void (*)(int)	file:
+ossl_error	ssh-pkcs11.c	/^ossl_error(const char *msg)$/;"	f	typeref:typename:void	file:
+ostate	channels.h	/^	u_int   ostate;		\/* output to channel  (state of transmit half) *\/$/;"	m	struct:Channel	typeref:typename:u_int
+ostates	nchan.c	/^static const char * const ostates[] = {$/;"	v	typeref:typename:const char * const[]	file:
+ostdin_null_flag	ssh.c	/^int ostdin_null_flag, osession_type, otty_flag, orequest_tty;$/;"	v	typeref:typename:int
+other_hostkeys_message	sshconnect.c	/^other_hostkeys_message(const char *host, const char *ip,$/;"	f	typeref:typename:char *	file:
+other_name_seen	clientloop.c	/^	int other_name_seen;	\/* saw key with other name\/addr *\/$/;"	m	struct:hostkeys_update_ctx	typeref:typename:int	file:
+otty_flag	ssh.c	/^int ostdin_null_flag, osession_type, otty_flag, orequest_tty;$/;"	v	typeref:typename:int
+out	hostfile.c	/^	FILE *out;$/;"	m	struct:host_delete_ctx	typeref:typename:FILE *	file:
+out	ssh-keygen.c	/^	FILE *out;		\/* Output file, stdout for find_hosts case *\/$/;"	m	struct:known_hosts_ctx	typeref:typename:FILE *	file:
+outgoing_packet	packet.c	/^	struct sshbuf *outgoing_packet;$/;"	m	struct:session_state	typeref:struct:sshbuf *	file:
+output	channels.h	/^	struct sshbuf *output;	\/* data received over encrypted connection for$/;"	m	struct:Channel	typeref:struct:sshbuf *
+output	packet.c	/^	struct sshbuf *output;$/;"	m	struct:session_state	typeref:struct:sshbuf *	file:
+output	ssh-agent.c	/^	struct sshbuf *output;$/;"	m	struct:socket_entry	typeref:struct:sshbuf *	file:
+output_failed_logs	.github/run_test.sh	/^output_failed_logs() {$/;"	f
+output_filter	channels.h	/^	channel_outfilter_fn	*output_filter;$/;"	m	struct:Channel	typeref:typename:channel_outfilter_fn *
+p	dh.h	/^	BIGNUM *p;$/;"	m	struct:dhgroup	typeref:typename:BIGNUM *
+p	sntrup761.c	/^#define p /;"	d	file:
+p1p1_to_p2	ge25519.c	/^static void p1p1_to_p2(ge25519_p2 *r, const ge25519_p1p1 *p)$/;"	f	typeref:typename:void	file:
+p1p1_to_p3	ge25519.c	/^static void p1p1_to_p3(ge25519_p3 *r, const ge25519_p1p1 *p)$/;"	f	typeref:typename:void	file:
+p36	umac.c	/^#define p36 /;"	d	file:
+p64	umac.c	/^#define p64 /;"	d	file:
+p_read	packet.c	/^	struct packet_state p_read, p_send;$/;"	m	struct:session_state	typeref:struct:packet_state	file:
+p_send	packet.c	/^	struct packet_state p_read, p_send;$/;"	m	struct:session_state	typeref:struct:packet_state	file:
+pack_key_ecdsa	regress/misc/sk-dummy/sk-dummy.c	/^pack_key_ecdsa(struct sk_enroll_response *response)$/;"	f	typeref:typename:int	file:
+pack_key_ed25519	regress/misc/sk-dummy/sk-dummy.c	/^pack_key_ed25519(struct sk_enroll_response *response)$/;"	f	typeref:typename:int	file:
+pack_public_key	sk-usbhid.c	/^pack_public_key(uint32_t alg, const fido_cred_t *cred,$/;"	f	typeref:typename:int	file:
+pack_public_key_ecdsa	sk-usbhid.c	/^pack_public_key_ecdsa(const fido_cred_t *cred,$/;"	f	typeref:typename:int	file:
+pack_public_key_ed25519	sk-usbhid.c	/^pack_public_key_ed25519(const fido_cred_t *cred,$/;"	f	typeref:typename:int	file:
+pack_sig	sk-usbhid.c	/^pack_sig(uint32_t  alg, fido_assert_t *assert,$/;"	f	typeref:typename:int	file:
+pack_sig_ecdsa	sk-usbhid.c	/^pack_sig_ecdsa(fido_assert_t *assert, struct sk_sign_response *response)$/;"	f	typeref:typename:int	file:
+pack_sig_ed25519	sk-usbhid.c	/^pack_sig_ed25519(fido_assert_t *assert, struct sk_sign_response *response)$/;"	f	typeref:typename:int	file:
+package	Makefile.in	/^package: $(CONFIGFILES) $(MANPAGES) $(TARGETS)$/;"	t
+packet	packet.c	/^struct packet {$/;"	s	file:
+packet_discard	packet.c	/^	u_int packet_discard;$/;"	m	struct:session_state	typeref:typename:u_int	file:
+packet_discard_mac	packet.c	/^	struct sshmac *packet_discard_mac;$/;"	m	struct:session_state	typeref:struct:sshmac *	file:
+packet_discard_mac_already	packet.c	/^	size_t packet_discard_mac_already;$/;"	m	struct:session_state	typeref:typename:size_t	file:
+packet_length	sftp-client.h	/^	u_int64_t packet_length;$/;"	m	struct:sftp_limits	typeref:typename:u_int64_t
+packet_state	packet.c	/^struct packet_state {$/;"	s	file:
+packet_timeout_ms	packet.c	/^	int packet_timeout_ms;$/;"	m	struct:session_state	typeref:typename:int	file:
+packets	packet.c	/^	u_int32_t packets;$/;"	m	struct:packet_state	typeref:typename:u_int32_t	file:
+packlen	packet.c	/^	u_int packlen;$/;"	m	struct:session_state	typeref:typename:u_int	file:
+pam	configure.ac	/^AC_ARG_WITH([pam],$/;"	w
+pam-service	configure.ac	/^AC_ARG_WITH([pam-service],$/;"	w
+pam_chauthtok	auth-pam.c	/^# define pam_chauthtok(/;"	d	file:
+pam_csock	auth-pam.c	/^	int		 pam_csock;$/;"	m	struct:pam_ctxt	typeref:typename:int	file:
+pam_ctxt	auth-pam.c	/^struct pam_ctxt {$/;"	s	file:
+pam_done	auth-pam.c	/^	int		 pam_done;$/;"	m	struct:pam_ctxt	typeref:typename:int	file:
+pam_getenvlist	auth-pam.c	/^pam_getenvlist(pam_handle_t *pamh)$/;"	f	typeref:typename:char **	file:
+pam_psock	auth-pam.c	/^	int		 pam_psock;$/;"	m	struct:pam_ctxt	typeref:typename:int	file:
+pam_putenv	auth-pam.c	/^pam_putenv(pam_handle_t *pamh, const char *name_value)$/;"	f	typeref:typename:int	file:
+pam_thread	auth-pam.c	/^	sp_pthread_t	 pam_thread;$/;"	m	struct:pam_ctxt	typeref:typename:sp_pthread_t	file:
+parameter	pkcs11.h	/^  void *parameter;$/;"	m	struct:ck_mechanism	typeref:typename:void *
+parameter	pkcs11.h	/^#define parameter /;"	d
+parameter_len	pkcs11.h	/^  unsigned long parameter_len;$/;"	m	struct:ck_mechanism	typeref:typename:unsigned long
+parameter_len	pkcs11.h	/^#define parameter_len /;"	d
+params	sshkey-xmss.c	/^	xmss_params	params;$/;"	m	struct:ssh_xmss_state	typeref:typename:xmss_params	file:
+params_H	sntrup761.c	/^#define params_H$/;"	d	file:
+parent	sshbuf.h	/^	struct sshbuf *parent;	\/* If child, pointer to parent *\/$/;"	m	struct:sshbuf	typeref:struct:sshbuf *
+parent_alive_interval	ssh-agent.c	/^time_t parent_alive_interval = 0;$/;"	v	typeref:typename:time_t
+parent_pid	ssh-agent.c	/^pid_t parent_pid = -1;$/;"	v	typeref:typename:pid_t
+parse_absolute_time	misc.c	/^parse_absolute_time(const char *s, uint64_t *tp)$/;"	f	typeref:typename:int
+parse_args	sftp.c	/^parse_args(const char **cpp, int *ignore_errors, int *disable_echo, int *aflag,$/;"	f	typeref:typename:int	file:
+parse_cert_times	ssh-keygen.c	/^parse_cert_times(char *timespec)$/;"	f	typeref:typename:void	file:
+parse_ch_flags	sftp.c	/^parse_ch_flags(const char *cmd, char **argv, int argc, int *hflag)$/;"	f	typeref:typename:int	file:
+parse_dest_constraint	ssh-add.c	/^parse_dest_constraint(const char *s, struct dest_constraint ***dcp,$/;"	f	typeref:typename:void	file:
+parse_dest_constraint	ssh-agent.c	/^parse_dest_constraint(struct sshbuf *m, struct dest_constraint *dc)$/;"	f	typeref:typename:int	file:
+parse_dest_constraint_hop	ssh-add.c	/^parse_dest_constraint_hop(const char *s, struct dest_constraint_hop *dch,$/;"	f	typeref:typename:void	file:
+parse_dest_constraint_hop	ssh-agent.c	/^parse_dest_constraint_hop(struct sshbuf *b, struct dest_constraint_hop *dch)$/;"	f	typeref:typename:int	file:
+parse_df_flags	sftp.c	/^parse_df_flags(const char *cmd, char **argv, int argc, int *hflag, int *iflag)$/;"	f	typeref:typename:int	file:
+parse_dispatch_command	sftp.c	/^parse_dispatch_command(struct sftp_conn *conn, const char *cmd, char **pwd,$/;"	f	typeref:typename:int	file:
+parse_dns_qsection	openbsd-compat/getrrsetbyname.c	/^parse_dns_qsection(const u_char *answer, int size, const u_char **cp, int count)$/;"	f	typeref:struct:dns_query *	file:
+parse_dns_response	openbsd-compat/getrrsetbyname.c	/^parse_dns_response(const u_char *answer, int size)$/;"	f	typeref:struct:dns_response *	file:
+parse_dns_rrsection	openbsd-compat/getrrsetbyname.c	/^parse_dns_rrsection(const u_char *answer, int size, const u_char **cp,$/;"	f	typeref:struct:dns_rr *	file:
+parse_env_hex_color	contrib/gnome-ssh-askpass2.c	/^parse_env_hex_color(const char *env, GdkColor *c)$/;"	f	typeref:typename:int	file:
+parse_env_hex_color	contrib/gnome-ssh-askpass3.c	/^parse_env_hex_color(const char *env, GdkColor *c)$/;"	f	typeref:typename:int	file:
+parse_forward	readconf.c	/^parse_forward(struct Forward *fwd, const char *fwdspec, int dynamicfwd, int remotefwd)$/;"	f	typeref:typename:int
+parse_fwd_field	readconf.c	/^parse_fwd_field(char **p, struct fwdarg *fwd)$/;"	f	typeref:typename:int	file:
+parse_getput_flags	sftp.c	/^parse_getput_flags(const char *cmd, char **argv, int argc,$/;"	f	typeref:typename:int	file:
+parse_hex_u64	ssh-keygen.c	/^parse_hex_u64(const char *s, uint64_t *up)$/;"	f	typeref:typename:void	file:
+parse_ipqos	misc.c	/^parse_ipqos(const char *cp)$/;"	f	typeref:typename:int
+parse_jump	readconf.c	/^parse_jump(const char *s, Options *o, int active)$/;"	f	typeref:typename:int
+parse_key_constraint_extension	ssh-agent.c	/^parse_key_constraint_extension(struct sshbuf *m, char **sk_providerp,$/;"	f	typeref:typename:int	file:
+parse_key_constraints	ssh-agent.c	/^parse_key_constraints(struct sshbuf *m, struct sshkey *k, time_t *deathp,$/;"	f	typeref:typename:int	file:
+parse_link_flags	sftp.c	/^parse_link_flags(const char *cmd, char **argv, int argc, int *sflag)$/;"	f	typeref:typename:int	file:
+parse_long_options	openbsd-compat/getopt_long.c	/^parse_long_options(char * const *nargv, const char *options,$/;"	f	typeref:typename:int	file:
+parse_ls_flags	sftp.c	/^parse_ls_flags(char **argv, int argc, int *lflag)$/;"	f	typeref:typename:int	file:
+parse_modification	regress/modpipe.c	/^parse_modification(const char *s, struct modification *m)$/;"	f	typeref:typename:void	file:
+parse_multistate_value	readconf.c	/^parse_multistate_value(const char *arg, const char *filename, int linenum,$/;"	f	typeref:typename:int	file:
+parse_no_flags	sftp.c	/^parse_no_flags(const char *cmd, char **argv, int argc)$/;"	f	typeref:typename:int	file:
+parse_prime	dh.c	/^parse_prime(int linenum, char *line, struct dhgroup *dhg)$/;"	f	typeref:typename:int	file:
+parse_principals_key_and_options	sshsig.c	/^parse_principals_key_and_options(const char *path, u_long linenum, char *line,$/;"	f	typeref:typename:int	file:
+parse_relative_time	ssh-keygen.c	/^parse_relative_time(const char *s, time_t now)$/;"	f	typeref:typename:u_int64_t	file:
+parse_rename_flags	sftp.c	/^parse_rename_flags(const char *cmd, char **argv, int argc, int *lflag)$/;"	f	typeref:typename:int	file:
+parse_revoked_certs	krl.c	/^parse_revoked_certs(struct sshbuf *buf, struct ssh_krl *krl)$/;"	f	typeref:typename:int	file:
+parse_scp_uri	scp.c	/^parse_scp_uri(const char *uri, char **userp, char **hostp, int *portp,$/;"	f	typeref:typename:int	file:
+parse_server_config	servconf.c	/^parse_server_config(ServerOptions *options, const char *filename,$/;"	f	typeref:typename:void
+parse_server_config_depth	servconf.c	/^parse_server_config_depth(ServerOptions *options, const char *filename,$/;"	f	typeref:typename:void	file:
+parse_server_match_config	servconf.c	/^parse_server_match_config(ServerOptions *options,$/;"	f	typeref:typename:void
+parse_server_match_testspec	servconf.c	/^int parse_server_match_testspec(struct connection_info *ci, char *spec)$/;"	f	typeref:typename:int
+parse_ssh_uri	readconf.c	/^parse_ssh_uri(const char *uri, char **userp, char **hostp, int *portp)$/;"	f	typeref:typename:int
+parse_sshsig_request	ssh-agent.c	/^parse_sshsig_request(struct sshbuf *msg)$/;"	f	typeref:typename:int	file:
+parse_token	readconf.c	/^parse_token(const char *cp, const char *filename, int linenum,$/;"	f	typeref:typename:OpCodes	file:
+parse_token	servconf.c	/^parse_token(const char *cp, const char *filename,$/;"	f	typeref:typename:ServerOpCodes	file:
+parse_uri	misc.c	/^parse_uri(const char *scheme, const char *uri, char **userp, char **hostp,$/;"	f	typeref:typename:int
+parse_user_host_path	misc.c	/^parse_user_host_path(const char *s, char **userp, char **hostp, char **pathp)$/;"	f	typeref:typename:int
+parse_user_host_port	misc.c	/^parse_user_host_port(const char *s, char **userp, char **hostp, int *portp)$/;"	f	typeref:typename:int
+parse_userauth_request	ssh-agent.c	/^parse_userauth_request(struct sshbuf *msg, const struct sshkey *expected_key,$/;"	f	typeref:typename:int	file:
+pass	ssh-add.c	/^static char *pass = NULL;$/;"	v	typeref:typename:char *	file:
+passphrase_dialog	contrib/gnome-ssh-askpass1.c	/^passphrase_dialog(char *message)$/;"	f	typeref:typename:int
+passphrase_dialog	contrib/gnome-ssh-askpass2.c	/^passphrase_dialog(char *message, int prompt_type)$/;"	f	typeref:typename:int	file:
+passphrase_dialog	contrib/gnome-ssh-askpass3.c	/^passphrase_dialog(char *message, int prompt_type)$/;"	f	typeref:typename:int	file:
+passwd_conv	auth-pam.c	/^static struct pam_conv passwd_conv = { sshpam_passwd_conv, NULL };$/;"	v	typeref:struct:pam_conv	file:
+password_authentication	readconf.h	/^	int     password_authentication;	\/* Try password$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+password_authentication	servconf.h	/^	int     password_authentication;	\/* If true, permit password$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+pat	compat.c	/^		char	*pat;$/;"	m	struct:compat_banner::__anon400d1e3a0108	typeref:typename:char *	file:
+path	channels.h	/^	char    *path;$/;"	m	struct:Channel	typeref:typename:char *
+path	hostfile.h	/^	const char *path; \/* Path of file *\/$/;"	m	struct:hostkey_foreach_line	typeref:typename:const char *
+path	openbsd-compat/port-linux.c	/^	char *path;$/;"	m	struct:__anon8408cfa30108	typeref:typename:char *	file:
+path	sk-usbhid.c	/^	char *path;$/;"	m	struct:sk_usbhid	typeref:typename:char *	file:
+path	ssh-keygen.c	/^		char *path;$/;"	m	struct:do_gen_all_hostkeys::__anon9cc534940208	typeref:typename:char *	file:
+path	ssh-sk.c	/^	char *path;$/;"	m	struct:sshsk_provider	typeref:typename:char *	file:
+path_absolute	misc.c	/^path_absolute(const char *path)$/;"	f	typeref:typename:int
+path_append	sftp-client.c	/^path_append(const char *p1, const char *p2)$/;"	f	typeref:typename:char *
+path_in_hostfiles	sshconnect.c	/^path_in_hostfiles(const char *path, char **hostfiles, u_int num_hostfiles)$/;"	f	typeref:typename:int	file:
+path_strip	sftp.c	/^path_strip(const char *path, const char *strip)$/;"	f	typeref:typename:char *	file:
+payload	packet.c	/^	struct sshbuf *payload;$/;"	m	struct:packet	typeref:struct:sshbuf *	file:
+pdf	umac.c	/^    pdf_ctx pdf;             \/* PDF for hashed output                    *\/$/;"	m	struct:umac_ctx	typeref:typename:pdf_ctx	file:
+pdf_ctx	umac.c	/^} pdf_ctx;$/;"	t	typeref:struct:__anon20b5e17c0108	file:
+pdf_gen_xor	umac.c	/^static void pdf_gen_xor(pdf_ctx *pc, const UINT8 nonce[8], UINT8 buf[8])$/;"	f	typeref:typename:void	file:
+pdf_init	umac.c	/^static void pdf_init(pdf_ctx *pc, aes_int_key prf_key)$/;"	f	typeref:typename:void	file:
+peek_type_nid	sshkey.c	/^peek_type_nid(const char *s, size_t l, int *nid)$/;"	f	typeref:typename:int	file:
+peer	kex.h	/^	struct sshbuf *peer;$/;"	m	struct:kex	typeref:struct:sshbuf *
+pem_passphrase_cb	sshkey.c	/^pem_passphrase_cb(char *buf, int size, int rwflag, void *u)$/;"	f	typeref:typename:int	file:
+per_source_masklen_ipv4	servconf.h	/^	int	per_source_masklen_ipv4;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+per_source_masklen_ipv6	servconf.h	/^	int	per_source_masklen_ipv6;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+per_source_max_startups	servconf.h	/^	int	per_source_max_startups;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+percent_dollar_expand	misc.c	/^percent_dollar_expand(const char *string, ...)$/;"	f	typeref:typename:char *
+percent_expand	misc.c	/^percent_expand(const char *string, ...)$/;"	f	typeref:typename:char *
+perm	sftp-common.h	/^	u_int32_t	perm;$/;"	m	struct:Attrib	typeref:typename:u_int32_t
+perm_test	regress/sftp-perm.sh	/^perm_test() {$/;"	f
+permanently_set_uid	uidswap.c	/^permanently_set_uid(struct passwd *pw)$/;"	f	typeref:typename:void
+permission	channels.c	/^struct permission {$/;"	s	file:
+permission_set	channels.c	/^struct permission_set {$/;"	s	file:
+permission_set_add	channels.c	/^permission_set_add(struct ssh *ssh, int who, int where,$/;"	f	typeref:typename:int	file:
+permission_set_get	channels.c	/^permission_set_get(struct ssh *ssh, int where)$/;"	f	typeref:struct:permission_set *	file:
+permission_set_get_array	channels.c	/^permission_set_get_array(struct ssh *ssh, int who, int where,$/;"	f	typeref:typename:void	file:
+permit_agent_forwarding_flag	auth-options.h	/^	int permit_agent_forwarding_flag;$/;"	m	struct:sshauthopt	typeref:typename:int
+permit_empty_passwd	servconf.h	/^	int     permit_empty_passwd;	\/* If false, do not permit empty$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+permit_local_command	readconf.h	/^	int	permit_local_command;$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+permit_port_forwarding_flag	auth-options.h	/^	int permit_port_forwarding_flag;$/;"	m	struct:sshauthopt	typeref:typename:int
+permit_pty_flag	auth-options.h	/^	int permit_pty_flag;$/;"	m	struct:sshauthopt	typeref:typename:int
+permit_root_login	servconf.h	/^	int     permit_root_login;	\/* PERMIT_*, see above *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+permit_tty	servconf.h	/^	int	permit_tty;	\/* If false, deny pty allocation *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+permit_tun	servconf.h	/^	int	permit_tun;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+permit_user_env	servconf.h	/^	int     permit_user_env;	\/* If true, read ~\/.ssh\/environment *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+permit_user_env_allowlist	servconf.h	/^	char   *permit_user_env_allowlist; \/* pattern-list of allowed env names *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:char *
+permit_user_rc	auth-options.h	/^	int permit_user_rc;$/;"	m	struct:sshauthopt	typeref:typename:int
+permit_user_rc	servconf.h	/^	int	permit_user_rc;	\/* If false, deny ~\/.ssh\/rc execution *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+permit_x11_forwarding_flag	auth-options.h	/^	int permit_x11_forwarding_flag;$/;"	m	struct:sshauthopt	typeref:typename:int
+permitlisten	auth-options.h	/^	char **permitlisten;$/;"	m	struct:sshauthopt	typeref:typename:char **
+permitopen	auth-options.h	/^	char **permitopen;$/;"	m	struct:sshauthopt	typeref:typename:char **
+permitopen_port	channels.c	/^permitopen_port(const char *p)$/;"	f	typeref:typename:int
+permitted_admin	channels.c	/^	struct permission *permitted_admin;$/;"	m	struct:permission_set	typeref:struct:permission *	file:
+permitted_by_dest_constraints	ssh-agent.c	/^permitted_by_dest_constraints(const struct sshkey *fromkey,$/;"	f	typeref:typename:int	file:
+permitted_cnames	readconf.h	/^	struct allowed_cname permitted_cnames[MAX_CANON_DOMAINS];$/;"	m	struct:__anon7d31da1d0108	typeref:struct:allowed_cname[]
+permitted_listens	servconf.h	/^	char   **permitted_listens; \/* May also be one of PERMITOPEN_* *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:char **
+permitted_opens	servconf.h	/^	char   **permitted_opens;	\/* May also be one of PERMITOPEN_* *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:char **
+permitted_remote_opens	readconf.h	/^	char  **permitted_remote_opens;$/;"	m	struct:__anon7d31da1d0108	typeref:typename:char **
+permitted_user	channels.c	/^	struct permission *permitted_user;$/;"	m	struct:permission_set	typeref:struct:permission *	file:
+permute_args	openbsd-compat/getopt_long.c	/^permute_args(int panonopt_start, int panonopt_end, int opt_end,$/;"	f	typeref:typename:void	file:
+pfds	channels.h	/^	int	pfds[4];	\/* pollfd entries for rfd\/wfd\/efd\/sock *\/$/;"	m	struct:Channel	typeref:typename:int[4]
+pflag	regress/netcat.c	/^char   *pflag;					\/* Localport flag *\/$/;"	v	typeref:typename:char *
+pflag	scp.c	/^int Tflag, pflag, iamremote, iamrecursive, targetshouldbedirectory;$/;"	v	typeref:typename:int
+pick_salt	openbsd-compat/xcrypt.c	/^pick_salt(void)$/;"	f	typeref:typename:const char *	file:
+pid	loginrec.h	/^	pid_t      pid;                          \/* PID of login process *\/$/;"	m	struct:logininfo	typeref:typename:pid_t
+pid	readpass.c	/^	pid_t pid;$/;"	m	struct:notifier_ctx	typeref:typename:pid_t	file:
+pid	session.h	/^	pid_t	pid;$/;"	m	struct:Session	typeref:typename:pid_t
+pid	ssh-pkcs11-client.c	/^static pid_t pid = -1;$/;"	v	typeref:typename:pid_t	file:
+pid-dir	configure.ac	/^AC_ARG_WITH([pid-dir],$/;"	w
+pid_file	servconf.h	/^	char   *pid_file;		\/* Where to put our pid *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:char *
+pid_t	defines.h	/^typedef int pid_t;$/;"	t	typeref:typename:int
+piddir	Makefile.in	/^piddir=@piddir@$/;"	m
+piddir	configure.ac	/^AC_SUBST([piddir])$/;"	s
+piddir	openbsd-compat/Makefile.in	/^piddir=@piddir@$/;"	m
+piddir	openbsd-compat/regress/Makefile.in	/^piddir=@piddir@$/;"	m
+pie	configure.ac	/^AC_ARG_WITH([pie],$/;"	w
+pkcs11	configure.ac	/^AC_ARG_ENABLE([pkcs11],$/;"	e
+pkcs11_add_provider	ssh-pkcs11-client.c	/^pkcs11_add_provider(char *name, char *pin, struct sshkey ***keysp,$/;"	f	typeref:typename:int
+pkcs11_add_provider	ssh-pkcs11.c	/^pkcs11_add_provider(char *provider_id, char *pin, struct sshkey ***keyp,$/;"	f	typeref:typename:int
+pkcs11_check_obj_bool_attrib	ssh-pkcs11.c	/^pkcs11_check_obj_bool_attrib(struct pkcs11_key *k11, CK_OBJECT_HANDLE obj,$/;"	f	typeref:typename:int	file:
+pkcs11_decode_hex	ssh-pkcs11.c	/^pkcs11_decode_hex(const char *hex, unsigned char **dest, size_t *rlen)$/;"	f	typeref:typename:int	file:
+pkcs11_del_provider	ssh-pkcs11-client.c	/^pkcs11_del_provider(char *name)$/;"	f	typeref:typename:int
+pkcs11_del_provider	ssh-pkcs11.c	/^pkcs11_del_provider(char *provider_id)$/;"	f	typeref:typename:int
+pkcs11_destroy_keypair	ssh-pkcs11.c	/^pkcs11_destroy_keypair(char *provider_id, char *pin, unsigned long slotidx,$/;"	f	typeref:struct:sshkey *
+pkcs11_ecdsa_generate_private_key	ssh-pkcs11.c	/^pkcs11_ecdsa_generate_private_key(struct pkcs11_provider *p, CK_ULONG slotidx,$/;"	f	typeref:struct:sshkey *	file:
+pkcs11_ecdsa_start_wrapper	ssh-pkcs11.c	/^pkcs11_ecdsa_start_wrapper(void)$/;"	f	typeref:typename:int	file:
+pkcs11_ecdsa_wrap	ssh-pkcs11.c	/^pkcs11_ecdsa_wrap(struct pkcs11_provider *provider, CK_ULONG slotidx,$/;"	f	typeref:typename:int	file:
+pkcs11_fetch_certs	ssh-pkcs11.c	/^pkcs11_fetch_certs(struct pkcs11_provider *p, CK_ULONG slotidx,$/;"	f	typeref:typename:int	file:
+pkcs11_fetch_ecdsa_pubkey	ssh-pkcs11.c	/^pkcs11_fetch_ecdsa_pubkey(struct pkcs11_provider *p, CK_ULONG slotidx,$/;"	f	typeref:struct:sshkey *	file:
+pkcs11_fetch_keys	ssh-pkcs11.c	/^pkcs11_fetch_keys(struct pkcs11_provider *p, CK_ULONG slotidx,$/;"	f	typeref:typename:int	file:
+pkcs11_fetch_rsa_pubkey	ssh-pkcs11.c	/^pkcs11_fetch_rsa_pubkey(struct pkcs11_provider *p, CK_ULONG slotidx,$/;"	f	typeref:struct:sshkey *	file:
+pkcs11_fetch_x509_pubkey	ssh-pkcs11.c	/^pkcs11_fetch_x509_pubkey(struct pkcs11_provider *p, CK_ULONG slotidx,$/;"	f	typeref:typename:int	file:
+pkcs11_find	ssh-pkcs11.c	/^pkcs11_find(struct pkcs11_provider *p, CK_ULONG slotidx, CK_ATTRIBUTE *attr,$/;"	f	typeref:typename:int	file:
+pkcs11_gakp	ssh-pkcs11.c	/^pkcs11_gakp(char *provider_id, char *pin, unsigned int slotidx, char *label,$/;"	f	typeref:struct:sshkey *
+pkcs11_get_key	ssh-pkcs11.c	/^pkcs11_get_key(struct pkcs11_key *k11, CK_MECHANISM_TYPE mech_type)$/;"	f	typeref:typename:int	file:
+pkcs11_init	ssh-pkcs11-client.c	/^pkcs11_init(int interactive)$/;"	f	typeref:typename:int
+pkcs11_init	ssh-pkcs11.c	/^pkcs11_init(int interactive)$/;"	f	typeref:typename:int
+pkcs11_interactive	ssh-pkcs11.c	/^int pkcs11_interactive = 0;$/;"	v	typeref:typename:int
+pkcs11_k11_free	ssh-pkcs11.c	/^pkcs11_k11_free(void *parent, void *ptr, CRYPTO_EX_DATA *ad, int idx,$/;"	f	typeref:typename:void	file:
+pkcs11_key	ssh-pkcs11.c	/^struct pkcs11_key {$/;"	s	file:
+pkcs11_key_included	ssh-pkcs11.c	/^pkcs11_key_included(struct sshkey ***keysp, int *nkeys, struct sshkey *key)$/;"	f	typeref:typename:int	file:
+pkcs11_keyinfo	ssh-pkcs11-helper.c	/^struct pkcs11_keyinfo {$/;"	s	file:
+pkcs11_login	ssh-pkcs11.c	/^pkcs11_login(struct pkcs11_key *k11, CK_USER_TYPE type)$/;"	f	typeref:typename:int	file:
+pkcs11_login_slot	ssh-pkcs11.c	/^pkcs11_login_slot(struct pkcs11_provider *provider, struct pkcs11_slotinfo *si,$/;"	f	typeref:typename:int	file:
+pkcs11_open_session	ssh-pkcs11.c	/^pkcs11_open_session(struct pkcs11_provider *p, CK_ULONG slotidx, char *pin,$/;"	f	typeref:typename:int	file:
+pkcs11_provider	readconf.h	/^	char   *pkcs11_provider; \/* PKCS#11 provider *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:char *
+pkcs11_provider	ssh-pkcs11.c	/^struct pkcs11_provider {$/;"	s	file:
+pkcs11_provider_finalize	ssh-pkcs11.c	/^pkcs11_provider_finalize(struct pkcs11_provider *p)$/;"	f	typeref:typename:void	file:
+pkcs11_provider_lookup	ssh-pkcs11.c	/^pkcs11_provider_lookup(char *provider_id)$/;"	f	typeref:struct:pkcs11_provider *	file:
+pkcs11_provider_unref	ssh-pkcs11.c	/^pkcs11_provider_unref(struct pkcs11_provider *p)$/;"	f	typeref:typename:void	file:
+pkcs11_register_provider	ssh-pkcs11.c	/^pkcs11_register_provider(char *provider_id, char *pin,$/;"	f	typeref:typename:int	file:
+pkcs11_rsa_generate_private_key	ssh-pkcs11.c	/^pkcs11_rsa_generate_private_key(struct pkcs11_provider *p, CK_ULONG slotidx,$/;"	f	typeref:struct:sshkey *	file:
+pkcs11_rsa_private_decrypt	ssh-pkcs11.c	/^pkcs11_rsa_private_decrypt(int flen, const u_char *from, u_char *to, RSA *rsa,$/;"	f	typeref:typename:int	file:
+pkcs11_rsa_private_encrypt	ssh-pkcs11.c	/^pkcs11_rsa_private_encrypt(int flen, const u_char *from, u_char *to, RSA *rsa,$/;"	f	typeref:typename:int	file:
+pkcs11_rsa_start_wrapper	ssh-pkcs11.c	/^pkcs11_rsa_start_wrapper(void)$/;"	f	typeref:typename:int	file:
+pkcs11_rsa_wrap	ssh-pkcs11.c	/^pkcs11_rsa_wrap(struct pkcs11_provider *provider, CK_ULONG slotidx,$/;"	f	typeref:typename:int	file:
+pkcs11_slotinfo	ssh-pkcs11.c	/^struct pkcs11_slotinfo {$/;"	s	file:
+pkcs11_start_helper	ssh-pkcs11-client.c	/^pkcs11_start_helper(void)$/;"	f	typeref:typename:int	file:
+pkcs11_start_helper_methods	ssh-pkcs11-client.c	/^pkcs11_start_helper_methods(void)$/;"	f	typeref:typename:int	file:
+pkcs11_terminate	ssh-pkcs11-client.c	/^pkcs11_terminate(void)$/;"	f	typeref:typename:void
+pkcs11_terminate	ssh-pkcs11.c	/^pkcs11_terminate(void)$/;"	f	typeref:typename:void
+pkcs11provider	ssh-keygen.c	/^static char *pkcs11provider = NULL;$/;"	v	typeref:typename:char *	file:
+place	openbsd-compat/getopt_long.c	/^static char *place = EMSG; \/* option letter processing *\/$/;"	v	typeref:typename:char *	file:
+plain_key_blob	krl.c	/^plain_key_blob(const struct sshkey *key, u_char **blob, size_t *blen)$/;"	f	typeref:typename:int	file:
+plaintext	cipher.c	/^	int	plaintext;$/;"	m	struct:sshcipher_ctx	typeref:typename:int	file:
+platform_disable_tracing	platform-tracing.c	/^platform_disable_tracing(int strict)$/;"	f	typeref:typename:void
+platform_krb5_get_principal_name	platform.c	/^platform_krb5_get_principal_name(const char *pw_name)$/;"	f	typeref:typename:char *
+platform_locked_account	platform.c	/^platform_locked_account(struct passwd *pw)$/;"	f	typeref:typename:int
+platform_pledge_agent	platform-pledge.c	/^platform_pledge_agent(void)$/;"	f	typeref:typename:void
+platform_pledge_mux	platform-pledge.c	/^platform_pledge_mux(void)$/;"	f	typeref:typename:void
+platform_pledge_sftp_server	platform-pledge.c	/^platform_pledge_sftp_server(void)$/;"	f	typeref:typename:void
+platform_post_fork_child	platform.c	/^platform_post_fork_child(void)$/;"	f	typeref:typename:void
+platform_post_fork_parent	platform.c	/^platform_post_fork_parent(pid_t child_pid)$/;"	f	typeref:typename:void
+platform_pre_fork	platform.c	/^platform_pre_fork(void)$/;"	f	typeref:typename:void
+platform_pre_listen	platform.c	/^platform_pre_listen(void)$/;"	f	typeref:typename:void
+platform_pre_restart	platform.c	/^platform_pre_restart(void)$/;"	f	typeref:typename:void
+platform_privileged_uidswap	platform.c	/^platform_privileged_uidswap(void)$/;"	f	typeref:typename:int
+platform_setusercontext	platform.c	/^platform_setusercontext(struct passwd *pw)$/;"	f	typeref:typename:void
+platform_setusercontext_post_groups	platform.c	/^platform_setusercontext_post_groups(struct passwd *pw)$/;"	f	typeref:typename:void
+platform_sys_dir_uid	platform-misc.c	/^platform_sys_dir_uid(uid_t uid)$/;"	f	typeref:typename:int
+platform_sys_dir_uid	regress/check-perm.c	/^platform_sys_dir_uid(uid_t uid)$/;"	f	typeref:typename:int
+pledge	openbsd-compat/bsd-misc.c	/^pledge(const char *promises, const char *paths[])$/;"	f	typeref:typename:int
+pmonitor	sshd.c	/^struct monitor *pmonitor = NULL;$/;"	v	typeref:struct:monitor *
+poll	openbsd-compat/bsd-poll.c	/^poll(struct pollfd *fds, nfds_t nfds, int timeout)$/;"	f	typeref:typename:int
+pollfd	openbsd-compat/bsd-poll.h	/^typedef struct pollfd {$/;"	s
+pollfd_t	openbsd-compat/bsd-poll.h	/^} pollfd_t;$/;"	t	typeref:struct:pollfd
+poly1305_auth	poly1305.c	/^poly1305_auth(unsigned char out[POLY1305_TAGLEN], const unsigned char *m, size_t inlen, const un/;"	f	typeref:typename:void
+poly64	umac.c	/^static UINT64 poly64(UINT64 cur, UINT64 key, UINT64 data)$/;"	f	typeref:typename:UINT64	file:
+poly_accum	umac.c	/^    UINT64 poly_accum[STREAMS];           \/* poly hash result             *\/$/;"	m	struct:uhash_ctx	typeref:typename:UINT64[]	file:
+poly_hash	umac.c	/^static void poly_hash(uhash_ctx_t hc, UINT32 data_in[])$/;"	f	typeref:typename:void	file:
+poly_key_8	umac.c	/^    UINT64 poly_key_8[STREAMS];           \/* p64 poly keys                *\/$/;"	m	struct:uhash_ctx	typeref:typename:UINT64[]	file:
+port	channels.h	/^	int port;$/;"	m	struct:channel_connect	typeref:typename:int
+port	readconf.h	/^	int     port;		\/* Port to connect. *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+port	servconf.h	/^	int port; \/* <=0 if unspecified *\/$/;"	m	struct:queued_listenaddr	typeref:typename:int
+port_open_helper	channels.c	/^port_open_helper(struct ssh *ssh, Channel *c, char *rtype)$/;"	f	typeref:typename:void	file:
+port_to_connect	channels.c	/^	int port_to_connect;		\/* Connect to 'port'. *\/$/;"	m	struct:permission	typeref:typename:int	file:
+portlist	regress/netcat.c	/^char *portlist[PORT_MAX+1];$/;"	v	typeref:typename:char * []
+ports	servconf.h	/^	int	ports[MAX_PORTS];	\/* Port number to listen on. *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int[]
+ports_from_cmdline	servconf.h	/^	u_int	ports_from_cmdline;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:u_int
+portstr	sshconnect.h	/^	char *portstr;$/;"	m	struct:ssh_conn_info	typeref:typename:char *
+posix_wait	openbsd-compat/bsd-nextstep.c	/^posix_wait(int *status)$/;"	f	typeref:typename:pid_t
+postcondition	regress/sftp-perm.sh	/^postcondition() {$/;"	f
+postponed	auth.h	/^	int		 postponed;	\/* authentication needs another step *\/$/;"	m	struct:Authctxt	typeref:typename:int
+ppoll	openbsd-compat/bsd-poll.c	/^ppoll(struct pollfd *fds, nfds_t nfds, const struct timespec *tmoutp,$/;"	f	typeref:typename:int
+preauth_insns	sandbox-seccomp-filter.c	/^static const struct sock_filter preauth_insns[] = {$/;"	v	typeref:typename:const struct sock_filter[]	file:
+preauth_policy	sandbox-systrace.c	/^static const struct sandbox_policy preauth_policy[] = {$/;"	v	typeref:typename:const struct sandbox_policy[]	file:
+preauth_program	sandbox-seccomp-filter.c	/^static const struct sock_fprog preauth_program = {$/;"	v	typeref:typename:const struct sock_fprog	file:
+pred_name	regress/unittests/test_helper/test_helper.c	/^pred_name(enum test_predicate p)$/;"	f	typeref:typename:const char *	file:
+preferred	sshconnect2.c	/^static char *preferred = NULL;$/;"	v	typeref:typename:char *	file:
+preferred_authentications	readconf.h	/^	char   *preferred_authentications;$/;"	m	struct:__anon7d31da1d0108	typeref:typename:char *
+prefix	Makefile.in	/^prefix=@prefix@$/;"	m
+prefix	contrib/cygwin/Makefile	/^prefix=\/usr$/;"	m
+prep	regress/Makefile	/^prep:$/;"	t
+prepare_auth_info_file	session.c	/^prepare_auth_info_file(struct passwd *pw, struct sshbuf *info)$/;"	f	typeref:typename:void	file:
+prepare_config	regress/limit-keytype.sh	/^prepare_config() {$/;"	f
+prepare_expected	regress/unittests/hostkeys/test_iterate.c	/^prepare_expected(struct expected *expected, size_t n)$/;"	f	typeref:typename:void	file:
+prepare_files	regress/sftp-perm.sh	/^prepare_files() {$/;"	f
+prepare_key	regress/misc/fuzz-harness/kex_fuzz.cc	/^prepare_key(struct shared_state *st, int kt, int bits)$/;"	f	typeref:typename:int	file:
+prepare_keys	regress/misc/fuzz-harness/kex_fuzz.cc	/^prepare_keys(struct shared_state *st)$/;"	f	typeref:typename:int	file:
+prepare_multihop_expected	regress/agent-restrict.sh	/^prepare_multihop_expected() {$/;"	f
+prepare_multihop_script	regress/agent-restrict.sh	/^prepare_multihop_script() {$/;"	f
+prepare_options_buf	ssh-keygen.c	/^prepare_options_buf(struct sshbuf *c, int which)$/;"	f	typeref:typename:void	file:
+prepare_poll	ssh-agent.c	/^prepare_poll(struct pollfd **pfdp, size_t *npfdp, int *timeoutp, u_int maxfds)$/;"	f	typeref:typename:int	file:
+prepare_proctitle	sshd.c	/^prepare_proctitle(int ac, char **av)$/;"	f	typeref:typename:char *	file:
+prepare_remote_path	scp.c	/^prepare_remote_path(struct sftp_conn *conn, const char *path)$/;"	f	typeref:typename:char *	file:
+prepare_server	regress/sftp-perm.sh	/^prepare_server() {$/;"	f
+prev_keys	auth.h	/^	struct sshkey	**prev_keys;$/;"	m	struct:Authctxt	typeref:struct:sshkey **
+previous_host_key	sshconnect.c	/^struct sshkey *previous_host_key = NULL;$/;"	v	typeref:struct:sshkey *
+prf	xmss_hash.c	/^int prf(unsigned char *out, const unsigned char *in, const unsigned char *key, unsigned int keyl/;"	f	typeref:typename:int
+prf_key	umac.c	/^    aes_int_key prf_key;         \/* Expanded AES key for PDF          *\/$/;"	m	struct:__anon20b5e17c0108	typeref:typename:aes_int_key	file:
+prime_test	moduli.c	/^prime_test(FILE *in, FILE *out, u_int32_t trials, u_int32_t generator_wanted,$/;"	f	typeref:typename:int
+principals	sshkey.h	/^	char		**principals;$/;"	m	struct:sshkey_cert	typeref:typename:char **
+print_bubblebabble	ssh-keygen.c	/^static int print_bubblebabble = 0;$/;"	v	typeref:typename:int	file:
+print_cert	ssh-keygen.c	/^print_cert(struct sshkey *key)$/;"	f	typeref:typename:void	file:
+print_escape_help	clientloop.c	/^print_escape_help(struct sshbuf *b, int escape_char, int mux_client,$/;"	f	typeref:typename:void	file:
+print_fingerprint	ssh-keygen.c	/^static int print_fingerprint = 0;$/;"	v	typeref:typename:int	file:
+print_lastlog	servconf.h	/^	int	print_lastlog;	\/* If true, print lastlog *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+print_motd	servconf.h	/^	int     print_motd;	\/* If true, print \/etc\/motd. *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+print_progress	moduli.c	/^print_progress(unsigned long start_lineno, unsigned long current_lineno,$/;"	f	typeref:typename:void	file:
+print_sshfp	ssh-keyscan.c	/^int print_sshfp = 0;		\/* Print SSHFP records instead of known_hosts *\/$/;"	v	typeref:typename:int
+printname	regress/scp-ssh-wrapper.sh	/^printname () {$/;"	f
+private2_check_padding	sshkey.c	/^private2_check_padding(struct sshbuf *decrypted)$/;"	f	typeref:typename:int	file:
+private2_decrypt	sshkey.c	/^private2_decrypt(struct sshbuf *decoded, const char *passphrase,$/;"	f	typeref:typename:int	file:
+private2_uudecode	sshkey.c	/^private2_uudecode(struct sshbuf *blob, struct sshbuf **decodedp)$/;"	f	typeref:typename:int	file:
+private_key_format	ssh-keygen.c	/^static int private_key_format = SSHKEY_PRIVATE_OPENSSH;$/;"	v	typeref:typename:int	file:
+private_key_passphrase	ssh-keygen.c	/^private_key_passphrase(void)$/;"	f	typeref:typename:char *	file:
+privdrop_fn	misc.h	/^typedef void privdrop_fn(struct passwd *);$/;"	t	typeref:typename:void ()(struct passwd *)
+privileged	uidswap.c	/^static int	privileged = 0;$/;"	v	typeref:typename:int	file:
+privkey_fuzz	regress/misc/fuzz-harness/Makefile	/^privkey_fuzz: privkey_fuzz.o $(SK_NULL_OBJS) $(COMMON_DEPS)$/;"	t
+privkey_or_die	regress/misc/fuzz-harness/agent_fuzz_helper.c	/^privkey_or_die(const char *s)$/;"	f	typeref:struct:sshkey *	file:
+privkeys	regress/misc/fuzz-harness/kex_fuzz.cc	/^	struct sshkey **privkeys, **pubkeys;$/;"	m	struct:shared_state	typeref:struct:sshkey **	file:
+privrestore_fn	misc.h	/^typedef void privrestore_fn(void);$/;"	t	typeref:typename:void ()(void)
+privsep-path	configure.ac	/^AC_ARG_WITH([privsep-path],$/;"	w
+privsep-user	configure.ac	/^AC_ARG_WITH([privsep-user],$/;"	w
+privsep_challenge_enable	auth2-chall.c	/^privsep_challenge_enable(void)$/;"	f	typeref:typename:void
+privsep_chroot	sshd.c	/^static int privsep_chroot = 1;$/;"	v	typeref:typename:int	file:
+privsep_is_preauth	sshd.c	/^int privsep_is_preauth = 1;$/;"	v	typeref:typename:int
+privsep_postauth	sshd.c	/^privsep_postauth(struct ssh *ssh, Authctxt *authctxt)$/;"	f	typeref:typename:void	file:
+privsep_preauth	sshd.c	/^privsep_preauth(struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+privsep_preauth_child	sshd.c	/^privsep_preauth_child(void)$/;"	f	typeref:typename:void	file:
+privsep_pw	sshd.c	/^struct passwd *privsep_pw = NULL;$/;"	v	typeref:struct:passwd *
+prngd-port	configure.ac	/^AC_ARG_WITH([prngd-port],$/;"	w
+prngd-socket	configure.ac	/^AC_ARG_WITH([prngd-socket],$/;"	w
+process	sftp-server.c	/^process(void)$/;"	f	typeref:typename:void	file:
+process	ssh-pkcs11-helper.c	/^process(void)$/;"	f	typeref:typename:void	file:
+process_add	ssh-pkcs11-helper.c	/^process_add(void)$/;"	f	typeref:typename:void	file:
+process_add_identity	ssh-agent.c	/^process_add_identity(SocketEntry *e)$/;"	f	typeref:typename:void	file:
+process_add_smartcard_key	ssh-agent.c	/^process_add_smartcard_key(SocketEntry *e)$/;"	f	typeref:typename:void	file:
+process_buffered_input_packets	serverloop.c	/^process_buffered_input_packets(struct ssh *ssh)$/;"	f	typeref:typename:void	file:
+process_close	sftp-server.c	/^process_close(u_int32_t id)$/;"	f	typeref:typename:void	file:
+process_cmdline	clientloop.c	/^process_cmdline(struct ssh *ssh)$/;"	f	typeref:typename:void	file:
+process_config_files	ssh.c	/^process_config_files(const char *host_name, struct passwd *pw, int final_pass,$/;"	f	typeref:typename:void	file:
+process_config_line	readconf.c	/^process_config_line(Options *options, struct passwd *pw, const char *host,$/;"	f	typeref:typename:int
+process_config_line_depth	readconf.c	/^process_config_line_depth(Options *options, struct passwd *pw, const char *host,$/;"	f	typeref:typename:int	file:
+process_del	ssh-pkcs11-helper.c	/^process_del(void)$/;"	f	typeref:typename:void	file:
+process_do_stat	sftp-server.c	/^process_do_stat(u_int32_t id, int do_lstat)$/;"	f	typeref:typename:void	file:
+process_enroll	ssh-sk-helper.c	/^process_enroll(struct sshbuf *req)$/;"	f	typeref:struct:sshbuf *	file:
+process_escapes	clientloop.c	/^process_escapes(struct ssh *ssh, Channel *c,$/;"	f	typeref:typename:int	file:
+process_ext_session_bind	ssh-agent.c	/^process_ext_session_bind(SocketEntry *e)$/;"	f	typeref:typename:int	file:
+process_extended	sftp-server.c	/^process_extended(u_int32_t id)$/;"	f	typeref:typename:void	file:
+process_extended_copy_data	sftp-server.c	/^process_extended_copy_data(u_int32_t id)$/;"	f	typeref:typename:void	file:
+process_extended_expand	sftp-server.c	/^process_extended_expand(u_int32_t id)$/;"	f	typeref:typename:void	file:
+process_extended_fstatvfs	sftp-server.c	/^process_extended_fstatvfs(u_int32_t id)$/;"	f	typeref:typename:void	file:
+process_extended_fsync	sftp-server.c	/^process_extended_fsync(u_int32_t id)$/;"	f	typeref:typename:void	file:
+process_extended_get_users_groups_by_id	sftp-server.c	/^process_extended_get_users_groups_by_id(u_int32_t id)$/;"	f	typeref:typename:void	file:
+process_extended_hardlink	sftp-server.c	/^process_extended_hardlink(u_int32_t id)$/;"	f	typeref:typename:void	file:
+process_extended_home_directory	sftp-server.c	/^process_extended_home_directory(u_int32_t id)$/;"	f	typeref:typename:void	file:
+process_extended_limits	sftp-server.c	/^process_extended_limits(u_int32_t id)$/;"	f	typeref:typename:void	file:
+process_extended_lsetstat	sftp-server.c	/^process_extended_lsetstat(u_int32_t id)$/;"	f	typeref:typename:void	file:
+process_extended_posix_rename	sftp-server.c	/^process_extended_posix_rename(u_int32_t id)$/;"	f	typeref:typename:void	file:
+process_extended_statvfs	sftp-server.c	/^process_extended_statvfs(u_int32_t id)$/;"	f	typeref:typename:void	file:
+process_extension	ssh-agent.c	/^process_extension(SocketEntry *e)$/;"	f	typeref:typename:void	file:
+process_fsetstat	sftp-server.c	/^process_fsetstat(u_int32_t id)$/;"	f	typeref:typename:void	file:
+process_fstat	sftp-server.c	/^process_fstat(u_int32_t id)$/;"	f	typeref:typename:void	file:
+process_get	sftp.c	/^process_get(struct sftp_conn *conn, const char *src, const char *dst,$/;"	f	typeref:typename:int	file:
+process_gssapi_token	sshconnect2.c	/^process_gssapi_token(struct ssh *ssh, gss_buffer_t recv_tok)$/;"	f	typeref:typename:OM_uint32	file:
+process_init	sftp-server.c	/^process_init(void)$/;"	f	typeref:typename:void	file:
+process_input	serverloop.c	/^process_input(struct ssh *ssh, int connection_in)$/;"	f	typeref:typename:int	file:
+process_load_resident	ssh-sk-helper.c	/^process_load_resident(struct sshbuf *req)$/;"	f	typeref:struct:sshbuf *	file:
+process_lock_agent	ssh-agent.c	/^process_lock_agent(SocketEntry *e, int lock)$/;"	f	typeref:typename:void	file:
+process_lstat	sftp-server.c	/^process_lstat(u_int32_t id)$/;"	f	typeref:typename:void	file:
+process_message	ssh-agent.c	/^process_message(u_int socknum)$/;"	f	typeref:typename:int	file:
+process_mkdir	sftp-server.c	/^process_mkdir(u_int32_t id)$/;"	f	typeref:typename:void	file:
+process_open	sftp-server.c	/^process_open(u_int32_t id)$/;"	f	typeref:typename:void	file:
+process_opendir	sftp-server.c	/^process_opendir(u_int32_t id)$/;"	f	typeref:typename:void	file:
+process_output	serverloop.c	/^process_output(struct ssh *ssh, int connection_out)$/;"	f	typeref:typename:void	file:
+process_permitopen	servconf.c	/^process_permitopen(struct ssh *ssh, ServerOptions *options)$/;"	f	typeref:typename:void
+process_permitopen_list	servconf.c	/^process_permitopen_list(struct ssh *ssh, ServerOpCodes opcode,$/;"	f	typeref:typename:void	file:
+process_put	sftp.c	/^process_put(struct sftp_conn *conn, const char *src, const char *dst,$/;"	f	typeref:typename:int	file:
+process_queued_listen_addrs	servconf.c	/^process_queued_listen_addrs(ServerOptions *options)$/;"	f	typeref:typename:void	file:
+process_read	sftp-server.c	/^process_read(u_int32_t id)$/;"	f	typeref:typename:void	file:
+process_readdir	sftp-server.c	/^process_readdir(u_int32_t id)$/;"	f	typeref:typename:void	file:
+process_readlink	sftp-server.c	/^process_readlink(u_int32_t id)$/;"	f	typeref:typename:void	file:
+process_realpath	sftp-server.c	/^process_realpath(u_int32_t id)$/;"	f	typeref:typename:void	file:
+process_remove	sftp-server.c	/^process_remove(u_int32_t id)$/;"	f	typeref:typename:void	file:
+process_remove_all_identities	ssh-agent.c	/^process_remove_all_identities(SocketEntry *e)$/;"	f	typeref:typename:void	file:
+process_remove_identity	ssh-agent.c	/^process_remove_identity(SocketEntry *e)$/;"	f	typeref:typename:void	file:
+process_remove_smartcard_key	ssh-agent.c	/^process_remove_smartcard_key(SocketEntry *e)$/;"	f	typeref:typename:void	file:
+process_rename	sftp-server.c	/^process_rename(u_int32_t id)$/;"	f	typeref:typename:void	file:
+process_request_identities	ssh-agent.c	/^process_request_identities(SocketEntry *e)$/;"	f	typeref:typename:void	file:
+process_rmdir	sftp-server.c	/^process_rmdir(u_int32_t id)$/;"	f	typeref:typename:void	file:
+process_server_config_line	servconf.c	/^process_server_config_line(ServerOptions *options, char *line,$/;"	f	typeref:typename:int
+process_server_config_line_depth	servconf.c	/^process_server_config_line_depth(ServerOptions *options, char *line,$/;"	f	typeref:typename:int	file:
+process_setstat	sftp-server.c	/^process_setstat(u_int32_t id)$/;"	f	typeref:typename:void	file:
+process_sign	ssh-pkcs11-helper.c	/^process_sign(void)$/;"	f	typeref:typename:void	file:
+process_sign	ssh-sk-helper.c	/^process_sign(struct sshbuf *req)$/;"	f	typeref:struct:sshbuf *	file:
+process_sign_request2	ssh-agent.c	/^process_sign_request2(SocketEntry *e)$/;"	f	typeref:typename:void	file:
+process_stat	sftp-server.c	/^process_stat(u_int32_t id)$/;"	f	typeref:typename:void	file:
+process_symlink	sftp-server.c	/^process_symlink(u_int32_t id)$/;"	f	typeref:typename:void	file:
+process_write	sftp-server.c	/^process_write(u_int32_t id)$/;"	f	typeref:typename:void	file:
+progname	loginrec.h	/^	char       progname[LINFO_PROGSIZE];     \/* name of program (for PAM) *\/$/;"	m	struct:logininfo	typeref:typename:char[]
+progname_null	loginrec.h	/^	int        progname_null;$/;"	m	struct:logininfo	typeref:typename:int
+progress_meter_path	sftp-client.c	/^progress_meter_path(const char *path)$/;"	f	typeref:typename:const char *	file:
+prompt	sftp.c	/^prompt(EditLine *el)$/;"	f	typeref:typename:char *	file:
+proposal	ssh_api.h	/^	char *proposal[PROPOSAL_MAX];$/;"	m	struct:kex_params	typeref:typename:char * []
+proposal_names	kex.c	/^static const char * const proposal_names[PROPOSAL_MAX] = {$/;"	v	typeref:typename:const char * const[]	file:
+proposals_match	kex.c	/^proposals_match(char *my[PROPOSAL_MAX], char *peer[PROPOSAL_MAX])$/;"	f	typeref:typename:int	file:
+provider	ssh-agent.c	/^	char *provider;$/;"	m	struct:identity	typeref:typename:char *	file:
+provider	ssh-pkcs11.c	/^	struct pkcs11_provider	*provider;$/;"	m	struct:pkcs11_key	typeref:struct:pkcs11_provider *	file:
+providername	ssh-pkcs11-helper.c	/^	char		*providername, *label;$/;"	m	struct:pkcs11_keyinfo	typeref:typename:char *	file:
+proxy_command	readconf.h	/^	char   *proxy_command;	\/* Proxy command for connecting the host. *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:char *
+proxy_command_pid	sshconnect.c	/^static pid_t proxy_command_pid = 0;$/;"	v	typeref:typename:pid_t	file:
+proxy_read_line	regress/netcat.c	/^proxy_read_line(int fd, char *buf, size_t bufsz)$/;"	f	typeref:typename:int	file:
+proxy_use_fdpass	readconf.h	/^	int	proxy_use_fdpass;$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+pselect	openbsd-compat/bsd-pselect.c	/^pselect(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds,$/;"	f	typeref:typename:int
+pselect_notify_done	openbsd-compat/bsd-pselect.c	/^pselect_notify_done(fd_set *readset)$/;"	f	typeref:typename:void	file:
+pselect_notify_parent	openbsd-compat/bsd-pselect.c	/^pselect_notify_parent(void)$/;"	f	typeref:typename:void	file:
+pselect_notify_prepare	openbsd-compat/bsd-pselect.c	/^pselect_notify_prepare(fd_set *readset)$/;"	f	typeref:typename:void	file:
+pselect_notify_setup	openbsd-compat/bsd-pselect.c	/^pselect_notify_setup(void)$/;"	f	typeref:typename:void	file:
+pselect_notify_setup_fd	openbsd-compat/bsd-pselect.c	/^pselect_notify_setup_fd(int *fd)$/;"	f	typeref:typename:int	file:
+pselect_sig_handler	openbsd-compat/bsd-pselect.c	/^pselect_sig_handler(int sig)$/;"	f	typeref:typename:void	file:
+pset	sandbox-solaris.c	/^	priv_set_t *pset;$/;"	m	struct:ssh_sandbox	typeref:typename:priv_set_t *	file:
+pthread_cancel	auth-pam.c	/^#define pthread_cancel	/;"	d	file:
+pthread_cancel	auth-pam.c	/^pthread_cancel(sp_pthread_t thread)$/;"	f	typeref:typename:int	file:
+pthread_create	auth-pam.c	/^#define pthread_create	/;"	d	file:
+pthread_create	auth-pam.c	/^pthread_create(sp_pthread_t *thread, const void *attr,$/;"	f	typeref:typename:int	file:
+pthread_exit	auth-pam.c	/^#define pthread_exit	/;"	d	file:
+pthread_exit	auth-pam.c	/^pthread_exit(void *value)$/;"	f	typeref:typename:void	file:
+pthread_join	auth-pam.c	/^#define pthread_join	/;"	d	file:
+pthread_join	auth-pam.c	/^pthread_join(sp_pthread_t thread, void **value)$/;"	f	typeref:typename:int	file:
+pty_allocate	sshpty.c	/^pty_allocate(int *ptyfd, int *ttyfd, char *namebuf, size_t namebuflen)$/;"	f	typeref:typename:int
+pty_change_window_size	sshpty.c	/^pty_change_window_size(int ptyfd, u_int row, u_int col,$/;"	f	typeref:typename:void
+pty_make_controlling_tty	sshpty.c	/^pty_make_controlling_tty(int *ttyfd, const char *tty)$/;"	f	typeref:typename:void
+pty_release	sshpty.c	/^pty_release(const char *tty)$/;"	f	typeref:typename:void
+pty_setowner	sshpty.c	/^pty_setowner(struct passwd *pw, const char *tty)$/;"	f	typeref:typename:void
+ptyfd	session.h	/^	int	ptyfd, ttyfd, ptymaster;$/;"	m	struct:Session	typeref:typename:int
+ptymaster	session.h	/^	int	ptyfd, ttyfd, ptymaster;$/;"	m	struct:Session	typeref:typename:int
+pubkey	regress/misc/fuzz-harness/authkeys_fuzz.cc	/^const char *pubkey = "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIDPQXmEVMVLmeFRyafKMVWgPDkv8\/uRBTwmcE/;"	v	typeref:typename:const char *
+pubkey_accepted_algos	readconf.h	/^	char   *pubkey_accepted_algos;$/;"	m	struct:__anon7d31da1d0108	typeref:typename:char *
+pubkey_accepted_algos	servconf.h	/^	char   *pubkey_accepted_algos;	\/* Signature algos allowed for pubkey *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:char *
+pubkey_auth_options	servconf.h	/^	int	pubkey_auth_options;	\/* -1 or mask of PUBKEYAUTH_* flags *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+pubkey_authentication	readconf.h	/^	int     pubkey_authentication;	\/* Try ssh2 pubkey authentication. *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+pubkey_authentication	servconf.h	/^	int     pubkey_authentication;	\/* If true, permit ssh2 pubkey authentication. *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+pubkey_cleanup	sshconnect2.c	/^pubkey_cleanup(struct ssh *ssh)$/;"	f	typeref:typename:void	file:
+pubkey_fuzz	regress/misc/fuzz-harness/Makefile	/^pubkey_fuzz: pubkey_fuzz.o $(SK_NULL_OBJS) $(COMMON_DEPS)$/;"	t
+pubkey_or_die	regress/misc/fuzz-harness/agent_fuzz_helper.c	/^pubkey_or_die(const char *s)$/;"	f	typeref:struct:sshkey *	file:
+pubkey_prepare	sshconnect2.c	/^pubkey_prepare(struct ssh *ssh, Authctxt *authctxt)$/;"	f	typeref:typename:void	file:
+pubkey_reset	sshconnect2.c	/^pubkey_reset(Authctxt *authctxt)$/;"	f	typeref:typename:void	file:
+pubkeys	regress/misc/fuzz-harness/kex_fuzz.cc	/^	struct sshkey **privkeys, **pubkeys;$/;"	m	struct:shared_state	typeref:struct:sshkey **	file:
+public_fuzz	regress/unittests/sshkey/test_fuzz.c	/^public_fuzz(struct sshkey *k)$/;"	f	typeref:typename:void	file:
+public_key	sk-api.h	/^	uint8_t *public_key;$/;"	m	struct:sk_enroll_response	typeref:typename:uint8_t *
+public_key_len	sk-api.h	/^	size_t public_key_len;$/;"	m	struct:sk_enroll_response	typeref:typename:size_t
+put_bitmap	krl.c	/^put_bitmap(struct sshbuf *buf, struct bitmap *bitmap)$/;"	f	typeref:typename:int	file:
+put_host_port	misc.c	/^put_host_port(const char *host, u_short port)$/;"	f	typeref:typename:char *
+put_opt	regress/unittests/sshkey/test_sshkey.c	/^put_opt(struct sshbuf *b, const char *name, const char *value)$/;"	f	typeref:typename:void	file:
+put_u16	misc.c	/^put_u16(void *vp, u_int16_t v)$/;"	f	typeref:typename:void
+put_u32	misc.c	/^put_u32(void *vp, u_int32_t v)$/;"	f	typeref:typename:void
+put_u32_le	misc.c	/^put_u32_le(void *vp, u_int32_t v)$/;"	f	typeref:typename:void
+put_u64	misc.c	/^put_u64(void *vp, u_int64_t v)$/;"	f	typeref:typename:void
+pututline	configure.ac	/^AC_ARG_ENABLE([pututline],$/;"	e
+pututxline	configure.ac	/^AC_ARG_ENABLE([pututxline],$/;"	e
+pw	auth.h	/^	struct passwd	*pw;		\/* set if 'valid' *\/$/;"	m	struct:Authctxt	typeref:struct:passwd *
+pw	session.h	/^	struct passwd *pw;$/;"	m	struct:Session	typeref:struct:passwd *
+pw	sftp-server.c	/^static struct passwd *pw = NULL;$/;"	v	typeref:struct:passwd *	file:
+pwcopy	misc.c	/^pwcopy(struct passwd *pw)$/;"	f	typeref:struct:passwd *
+pwd	scp.c	/^struct passwd *pwd;$/;"	v	typeref:struct:passwd *
+q	sntrup761.c	/^#define q /;"	d	file:
+q12	sntrup761.c	/^#define q12 /;"	d	file:
+qfileout	moduli.c	/^qfileout(FILE * ofile, u_int32_t otype, u_int32_t otests, u_int32_t otries,$/;"	f	typeref:typename:int	file:
+qprintf	openbsd-compat/glob.c	/^qprintf(const char *str, Char *s)$/;"	f	typeref:typename:void	file:
+query	auth.h	/^	int	(*query)(void *ctx, char **name, char **infotxt,$/;"	m	struct:KbdintDevice	typeref:typename:int (*)(void * ctx,char ** name,char ** infotxt,u_int * numprompts,char *** prompts,u_int ** echo_on)
+query	openbsd-compat/getrrsetbyname.c	/^	struct dns_query	*query;$/;"	m	struct:dns_response	typeref:struct:dns_query *	file:
+queue_listen_addr	servconf.c	/^queue_listen_addr(ServerOptions *options, const char *addr,$/;"	f	typeref:typename:void	file:
+queued_listen_addrs	servconf.h	/^	struct queued_listenaddr *queued_listen_addrs;$/;"	m	struct:__anon9b33d3c10108	typeref:struct:queued_listenaddr *
+queued_listenaddr	servconf.h	/^struct queued_listenaddr {$/;"	s
+quiet	hostfile.c	/^	int quiet;$/;"	m	struct:host_delete_ctx	typeref:typename:int	file:
+quiet	sftp.c	/^int quiet = 0;$/;"	v	typeref:typename:int
+quiet	ssh-keygen.c	/^static int quiet = 0;$/;"	v	typeref:typename:int	file:
+quiet_mode	regress/unittests/test_helper/test_helper.c	/^static int quiet_mode = 0;$/;"	v	typeref:typename:int	file:
+quit_message	clientloop.c	/^quit_message(const char *fmt, ...)$/;"	f	typeref:typename:void	file:
+quit_pending	clientloop.c	/^volatile sig_atomic_t quit_pending; \/* Set non-zero to quit the loop. *\/$/;"	v	typeref:typename:volatile sig_atomic_t
+r_ctx	cipher-aes.c	/^	rijndael_ctx	r_ctx;$/;"	m	struct:ssh_rijndael_ctx	typeref:typename:rijndael_ctx	file:
+r_iv	cipher-aes.c	/^	u_char		r_iv[RIJNDAEL_BLOCKSIZE];$/;"	m	struct:ssh_rijndael_ctx	typeref:typename:u_char[]	file:
+raise	openbsd-compat/bsd-misc.c	/^raise(int sig)$/;"	f	typeref:typename:int
+randombytes	crypto_api.h	/^#define randombytes(/;"	d
+rate	misc.h	/^	u_int64_t rate;		\/* desired rate in kbit\/s *\/$/;"	m	struct:bwlimit	typeref:typename:u_int64_t
+rawkey	hostfile.h	/^	const char *rawkey; \/* Text of key and any comment following it *\/$/;"	m	struct:hostkey_foreach_line	typeref:typename:const char *
+rcon	rijndael.c	/^static const u32 rcon[] = {$/;"	v	typeref:typename:const u32[]	file:
+rdata	openbsd-compat/getrrsetbyname.c	/^	void			*rdata;$/;"	m	struct:dns_rr	typeref:typename:void *	file:
+rdatainfo	openbsd-compat/getrrsetbyname.h	/^struct rdatainfo {$/;"	s
+rdi_data	openbsd-compat/getrrsetbyname.h	/^	unsigned char		*rdi_data;	\/* record data *\/$/;"	m	struct:rdatainfo	typeref:typename:unsigned char *
+rdi_length	openbsd-compat/getrrsetbyname.h	/^	unsigned int		rdi_length;	\/* length of data *\/$/;"	m	struct:rdatainfo	typeref:typename:unsigned int
+rdomain	servconf.h	/^	char *rdomain;$/;"	m	struct:listenaddr	typeref:typename:char *
+rdomain	servconf.h	/^	char *rdomain;$/;"	m	struct:queued_listenaddr	typeref:typename:char *
+rdomain	servconf.h	/^	const char *rdomain;	\/* routing domain if available *\/$/;"	m	struct:connection_info	typeref:typename:const char *
+rdomain_in	packet.h	/^	char *rdomain_in;$/;"	m	struct:ssh	typeref:typename:char *
+rdynamic_close	channels.c	/^rdynamic_close(struct ssh *ssh, Channel *c)$/;"	f	typeref:typename:void	file:
+rdynamic_connect_finish	channels.c	/^rdynamic_connect_finish(struct ssh *ssh, Channel *c)$/;"	f	typeref:typename:int	file:
+rdynamic_connect_prepare	channels.c	/^rdynamic_connect_prepare(struct ssh *ssh, char *ctype, char *rname)$/;"	f	typeref:typename:Channel *	file:
+read_check_passphrase	ssh-keygen.c	/^read_check_passphrase(const char *prompt1, const char *prompt2,$/;"	f	typeref:typename:char *	file:
+read_checkpoint	moduli.c	/^read_checkpoint(char *cpfile)$/;"	f	typeref:typename:unsigned long	file:
+read_config_file	readconf.c	/^read_config_file(const char *filename, struct passwd *pw, const char *host,$/;"	f	typeref:typename:int
+read_config_file_depth	readconf.c	/^read_config_file_depth(const char *filename, struct passwd *pw,$/;"	f	typeref:typename:int	file:
+read_environment_file	session.c	/^read_environment_file(char ***env, u_int *envsize,$/;"	f	typeref:typename:void	file:
+read_etc_default_login	session.c	/^read_etc_default_login(char ***env, u_int *envsize, uid_t uid)$/;"	f	typeref:typename:void	file:
+read_interrupt	sftp.c	/^read_interrupt(int signo)$/;"	f	typeref:typename:void	file:
+read_length	sftp-client.h	/^	u_int64_t read_length;$/;"	m	struct:sftp_limits	typeref:typename:u_int64_t
+read_mux	channels.c	/^read_mux(struct ssh *ssh, Channel *c, u_int need)$/;"	f	typeref:typename:u_int	file:
+read_passphrase	readpass.c	/^read_passphrase(const char *prompt, int flags)$/;"	f	typeref:typename:char *
+read_rks	sk-usbhid.c	/^read_rks(struct sk_usbhid *sk, const char *pin,$/;"	f	typeref:typename:int	file:
+read_wait	ssh-keyscan.c	/^struct pollfd *read_wait;$/;"	v	typeref:struct:pollfd *
+readonly	sftp-server.c	/^static int readonly;$/;"	v	typeref:typename:int	file:
+readonly	sshbuf.h	/^	int readonly;		\/* Refers to external, const data *\/$/;"	m	struct:sshbuf	typeref:typename:int
+readpassphrase	openbsd-compat/readpassphrase.c	/^readpassphrase(const char *prompt, char *buf, size_t bufsiz, int flags)$/;"	f	typeref:typename:char *
+readwrite	regress/netcat.c	/^readwrite(int net_fd)$/;"	f	typeref:typename:void
+realclean	Makefile.in	/^realclean: veryclean$/;"	t
+reallocarray	openbsd-compat/reallocarray.c	/^reallocarray(void *optr, size_t nmemb, size_t size)$/;"	f	typeref:typename:void *
+realpath	openbsd-compat/bsd-misc.h	/^#define realpath(/;"	d
+reap_helper	ssh-sk-client.c	/^reap_helper(pid_t pid)$/;"	f	typeref:typename:int	file:
+reaper	ssh-agent.c	/^reaper(void)$/;"	f	typeref:typename:time_t	file:
+reason2txt	channels.c	/^reason2txt(int reason)$/;"	f	typeref:typename:char *	file:
+recallocarray	openbsd-compat/recallocarray.c	/^recallocarray(void *ptr, size_t oldnmemb, size_t newnmemb, size_t size)$/;"	f	typeref:typename:void *
+recargchar	openbsd-compat/getopt_long.c	/^static const char recargchar[] = "option requires an argument -- %c";$/;"	v	typeref:typename:const char[]	file:
+recargstring	openbsd-compat/getopt_long.c	/^static const char recargstring[] = "option requires an argument -- %s";$/;"	v	typeref:typename:const char[]	file:
+receive_context	packet.c	/^	struct sshcipher_ctx *receive_context;$/;"	m	struct:session_state	typeref:struct:sshcipher_ctx *	file:
+received_sighup	sshd.c	/^static volatile sig_atomic_t received_sighup = 0;$/;"	v	typeref:typename:volatile sig_atomic_t	file:
+received_signal	clientloop.c	/^static volatile sig_atomic_t received_signal = 0;$/;"	v	typeref:typename:volatile sig_atomic_t	file:
+received_sigterm	serverloop.c	/^static volatile sig_atomic_t received_sigterm = 0;$/;"	v	typeref:typename:volatile sig_atomic_t	file:
+received_sigterm	sshd.c	/^static volatile sig_atomic_t received_sigterm = 0;$/;"	v	typeref:typename:volatile sig_atomic_t	file:
+received_window_change_signal	clientloop.c	/^static volatile sig_atomic_t received_window_change_signal = 0;$/;"	v	typeref:typename:volatile sig_atomic_t	file:
+recip	smult_curve25519_ref.c	/^static void recip(unsigned int out[32],const unsigned int z[32])$/;"	f	typeref:typename:void	file:
+record_failed_login	loginrec.c	/^record_failed_login(struct ssh *ssh, const char *username, const char *hostname,$/;"	f	typeref:typename:void
+record_failed_login	openbsd-compat/port-aix.c	/^record_failed_login(struct ssh *ssh, const char *user, const char *hostname,$/;"	f	typeref:typename:void
+record_hostkey	hostfile.c	/^record_hostkey(struct hostkey_foreach_line *l, void *_ctx)$/;"	f	typeref:typename:int	file:
+record_login	sshlogin.c	/^record_login(pid_t pid, const char *tty, const char *user, uid_t uid,$/;"	f	typeref:typename:void
+record_logout	sshlogin.c	/^record_logout(pid_t pid, const char *tty, const char *user)$/;"	f	typeref:typename:void
+record_utmp_only	sshlogin.c	/^record_utmp_only(pid_t pid, const char *ttyname, const char *user,$/;"	f	typeref:typename:void
+recv_msg	ssh-pkcs11-client.c	/^recv_msg(struct sshbuf *m)$/;"	f	typeref:typename:int	file:
+recv_rexec_state	sshd.c	/^recv_rexec_state(int fd, struct sshbuf *conf)$/;"	f	typeref:typename:void	file:
+reduce_add_sub	fe25519.c	/^static void reduce_add_sub(fe25519 *r)$/;"	f	typeref:typename:void	file:
+reduce_add_sub	sc25519.c	/^static void reduce_add_sub(sc25519 *r)$/;"	f	typeref:typename:void	file:
+reduce_mul	fe25519.c	/^static void reduce_mul(fe25519 *r)$/;"	f	typeref:typename:void	file:
+ref_count	clientloop.c	/^	int ref_count;$/;"	m	struct:global_confirm	typeref:typename:int	file:
+refcount	ssh-pkcs11.c	/^	int			refcount;$/;"	m	struct:pkcs11_provider	typeref:typename:int	file:
+refcount	sshbuf.h	/^	u_int refcount;		\/* Tracks self and number of child buffers *\/$/;"	m	struct:sshbuf	typeref:typename:u_int
+refresh_progress_meter	progressmeter.c	/^refresh_progress_meter(int force_update)$/;"	f	typeref:typename:void
+regress	regress/unittests/test_helper/Makefile	/^regress: all$/;"	t
+regress-binaries	Makefile.in	/^regress-binaries: regress-prep $(LIBCOMPAT) \\$/;"	t
+regress-prep	Makefile.in	/^regress-prep:$/;"	t
+regress-unit-binaries	Makefile.in	/^regress-unit-binaries: regress-prep $(REGRESSLIBS) \\$/;"	t
+regress/check-perm$(EXEEXT)	Makefile.in	/^regress\/check-perm$(EXEEXT): $(srcdir)\/regress\/check-perm.c $(REGRESSLIBS)$/;"	t
+regress/misc/sk-dummy/sk-dummy.so	Makefile.in	/^regress\/misc\/sk-dummy\/sk-dummy.so: $(SK_DUMMY_OBJS)$/;"	t
+regress/mkdtemp$(EXEEXT)	Makefile.in	/^regress\/mkdtemp$(EXEEXT): $(srcdir)\/regress\/mkdtemp.c $(REGRESSLIBS)$/;"	t
+regress/modpipe$(EXEEXT)	Makefile.in	/^regress\/modpipe$(EXEEXT): $(srcdir)\/regress\/modpipe.c $(REGRESSLIBS)$/;"	t
+regress/netcat$(EXEEXT)	Makefile.in	/^regress\/netcat$(EXEEXT): $(srcdir)\/regress\/netcat.c $(REGRESSLIBS)$/;"	t
+regress/setuid-allowed$(EXEEXT)	Makefile.in	/^regress\/setuid-allowed$(EXEEXT): $(srcdir)\/regress\/setuid-allowed.c $(REGRESSLIBS)$/;"	t
+regress/unittests/authopt/test_authopt$(EXEEXT)	Makefile.in	/^regress\/unittests\/authopt\/test_authopt$(EXEEXT): \\$/;"	t
+regress/unittests/bitmap/test_bitmap$(EXEEXT)	Makefile.in	/^regress\/unittests\/bitmap\/test_bitmap$(EXEEXT): ${UNITTESTS_TEST_BITMAP_OBJS} \\$/;"	t
+regress/unittests/conversion/test_conversion$(EXEEXT)	Makefile.in	/^regress\/unittests\/conversion\/test_conversion$(EXEEXT): \\$/;"	t
+regress/unittests/hostkeys/test_hostkeys$(EXEEXT)	Makefile.in	/^regress\/unittests\/hostkeys\/test_hostkeys$(EXEEXT): \\$/;"	t
+regress/unittests/kex/test_kex$(EXEEXT)	Makefile.in	/^regress\/unittests\/kex\/test_kex$(EXEEXT): ${UNITTESTS_TEST_KEX_OBJS} \\$/;"	t
+regress/unittests/match/test_match$(EXEEXT)	Makefile.in	/^regress\/unittests\/match\/test_match$(EXEEXT): \\$/;"	t
+regress/unittests/misc/test_misc$(EXEEXT)	Makefile.in	/^regress\/unittests\/misc\/test_misc$(EXEEXT): \\$/;"	t
+regress/unittests/sshbuf/test_sshbuf$(EXEEXT)	Makefile.in	/^regress\/unittests\/sshbuf\/test_sshbuf$(EXEEXT): ${UNITTESTS_TEST_SSHBUF_OBJS} \\$/;"	t
+regress/unittests/sshkey/test_sshkey$(EXEEXT)	Makefile.in	/^regress\/unittests\/sshkey\/test_sshkey$(EXEEXT): ${UNITTESTS_TEST_SSHKEY_OBJS} \\$/;"	t
+regress/unittests/sshsig/test_sshsig$(EXEEXT)	Makefile.in	/^regress\/unittests\/sshsig\/test_sshsig$(EXEEXT): ${UNITTESTS_TEST_SSHSIG_OBJS} \\$/;"	t
+regress/unittests/test_helper/libtest_helper.a	Makefile.in	/^regress\/unittests\/test_helper\/libtest_helper.a: ${UNITTESTS_TEST_HELPER_OBJS}$/;"	t
+regress/unittests/utf8/test_utf8$(EXEEXT)	Makefile.in	/^regress\/unittests\/utf8\/test_utf8$(EXEEXT): \\$/;"	t
+regressclean	Makefile.in	/^regressclean:$/;"	t
+rekey_interval	packet.c	/^	u_int32_t rekey_interval;	\/* how often in seconds *\/$/;"	m	struct:session_state	typeref:typename:u_int32_t	file:
+rekey_interval	readconf.h	/^	int	rekey_interval;$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+rekey_interval	servconf.h	/^	int	rekey_interval;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+rekey_limit	packet.c	/^	u_int64_t max_blocks_in, max_blocks_out, rekey_limit;$/;"	m	struct:session_state	typeref:typename:u_int64_t	file:
+rekey_limit	readconf.h	/^	int64_t rekey_limit;$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int64_t
+rekey_limit	servconf.h	/^	int64_t rekey_limit;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int64_t
+rekey_time	packet.c	/^	time_t rekey_time;	\/* time of last rekeying *\/$/;"	m	struct:session_state	typeref:typename:time_t	file:
+rekeying	packet.c	/^	int rekeying;$/;"	m	struct:session_state	typeref:typename:int	file:
+rel	contrib/redhat/openssh.spec	/^%global rel 1%{?dist}$/;"	g
+reload	contrib/redhat/sshd.init	/^reload()$/;"	f
+remhost	sshconnect.h	/^	char *remhost;$/;"	m	struct:ssh_conn_info	typeref:typename:char *
+remin	scp.c	/^int errs, remin, remout, remin2, remout2;$/;"	v	typeref:typename:int
+remin2	scp.c	/^int errs, remin, remout, remin2, remout2;$/;"	v	typeref:typename:int
+remote_command	readconf.h	/^	char	*remote_command;$/;"	m	struct:__anon7d31da1d0108	typeref:typename:char *
+remote_connect	regress/netcat.c	/^remote_connect(const char *host, const char *port, struct addrinfo hints)$/;"	f	typeref:typename:int
+remote_forwards	readconf.h	/^	struct Forward *remote_forwards;$/;"	m	struct:__anon7d31da1d0108	typeref:struct:Forward *
+remote_glob	sftp-glob.c	/^remote_glob(struct sftp_conn *conn, const char *pattern, int flags,$/;"	f	typeref:typename:int
+remote_hostname	auth.c	/^remote_hostname(struct ssh *ssh)$/;"	f	typeref:typename:char *	file:
+remote_id	channels.h	/^	uint32_t remote_id;	\/* channel identifier for remote peer *\/$/;"	m	struct:Channel	typeref:typename:uint32_t
+remote_ipaddr	packet.h	/^	char *remote_ipaddr;$/;"	m	struct:ssh	typeref:typename:char *
+remote_is_dir	sftp-client.c	/^remote_is_dir(struct sftp_conn *conn, const char *path)$/;"	f	typeref:typename:int
+remote_maxpacket	channels.h	/^	u_int	remote_maxpacket;$/;"	m	struct:Channel	typeref:typename:u_int
+remote_name	channels.h	/^	char   *remote_name;	\/* remote hostname *\/$/;"	m	struct:Channel	typeref:typename:char *
+remote_open_match	channels.c	/^remote_open_match(struct permission *allowed_open, struct Forward *fwd)$/;"	f	typeref:typename:int	file:
+remote_pathp	sftp.c	/^	char **remote_pathp;$/;"	m	struct:complete_ctx	typeref:typename:char **	file:
+remote_perms	channels.c	/^	struct permission_set remote_perms;$/;"	m	struct:ssh_channels	typeref:struct:permission_set	file:
+remote_port	packet.h	/^	int remote_port;$/;"	m	struct:ssh	typeref:typename:int
+remote_protocol_flags	packet.c	/^	u_int remote_protocol_flags;$/;"	m	struct:session_state	typeref:typename:u_int	file:
+remote_remote_args	scp.c	/^arglist remote_remote_args;$/;"	v	typeref:typename:arglist
+remote_window	channels.h	/^	u_int	remote_window;$/;"	m	struct:Channel	typeref:typename:u_int
+remout	scp.c	/^int errs, remin, remout, remin2, remout2;$/;"	v	typeref:typename:int
+remout2	scp.c	/^int errs, remin, remout, remin2, remout2;$/;"	v	typeref:typename:int
+remove-empty-dir	contrib/cygwin/Makefile	/^remove-empty-dir:$/;"	t
+remove_kbdint_device	auth2-chall.c	/^remove_kbdint_device(const char *devname)$/;"	f	typeref:typename:void
+remove_method	auth2.c	/^remove_method(char **methods, const char *method, const char *submethod)$/;"	f	typeref:typename:int	file:
+remuser	sshconnect.h	/^	char *remuser;$/;"	m	struct:ssh_conn_info	typeref:typename:char *
+repl	misc.c	/^		const char *repl;$/;"	m	struct:vdollar_percent_expand::__anon0dce19420108	typeref:typename:const char *	file:
+replacearg	misc.c	/^replacearg(arglist *args, u_int which, char *fmt, ...)$/;"	f	typeref:typename:void
+reply_error	mux.c	/^reply_error(struct sshbuf *reply, u_int type, u_int rid, const char *msg)$/;"	f	typeref:typename:void	file:
+reply_error	ssh-sk-helper.c	/^reply_error(int r, char *fmt, ...)$/;"	f	typeref:struct:sshbuf *	file:
+reply_ok	mux.c	/^reply_ok(struct sshbuf *reply, u_int rid)$/;"	f	typeref:typename:void	file:
+report_connect	regress/netcat.c	/^report_connect(const struct sockaddr *sa, socklen_t salen)$/;"	f	typeref:typename:void
+report_failed_grab	contrib/gnome-ssh-askpass1.c	/^report_failed_grab (void)$/;"	f	typeref:typename:void
+report_failed_grab	contrib/gnome-ssh-askpass2.c	/^report_failed_grab (GtkWidget *parent_window, const char *what)$/;"	f	typeref:typename:void	file:
+request	sftp-client.c	/^struct request {$/;"	s	file:
+request	ssh-agent.c	/^	struct sshbuf *request;$/;"	m	struct:socket_entry	typeref:struct:sshbuf *	file:
+request_allowlist	sftp-server.c	/^static char *request_allowlist, *request_denylist;$/;"	v	typeref:typename:char *	file:
+request_denylist	sftp-server.c	/^static char *request_allowlist, *request_denylist;$/;"	v	typeref:typename:char *	file:
+request_enqueue	sftp-client.c	/^request_enqueue(struct requests *requests, u_int id, size_t len,$/;"	f	typeref:struct:request *	file:
+request_find	sftp-client.c	/^request_find(struct requests *requests, u_int id)$/;"	f	typeref:struct:request *	file:
+request_permitted	sftp-server.c	/^request_permitted(const struct sftp_handler *h)$/;"	f	typeref:typename:int	file:
+request_tty	readconf.h	/^	int	request_tty;$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+request_type	clientloop.c	/^	const char *request_type;$/;"	m	struct:channel_reply_ctx	typeref:typename:const char *	file:
+require_verify	auth-options.h	/^	int require_verify;$/;"	m	struct:sshauthopt	typeref:typename:int
+required	sk-api.h	/^	uint8_t required;$/;"	m	struct:sk_option	typeref:typename:uint8_t
+required_argument	openbsd-compat/getopt.h	/^#define required_argument /;"	d
+required_from_host_cert	auth-options.h	/^	char *required_from_host_cert;$/;"	m	struct:sshauthopt	typeref:typename:char *
+required_from_host_keys	auth-options.h	/^	char *required_from_host_keys;$/;"	m	struct:sshauthopt	typeref:typename:char *
+required_rsa_size	readconf.h	/^	int	required_rsa_size;	\/* minimum size of RSA keys *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+required_rsa_size	servconf.h	/^	int	required_rsa_size;	\/* minimum size of RSA keys *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+rescue	contrib/redhat/openssh.spec	/^%global rescue 0$/;"	g
+reseed_prngs	sshd.c	/^reseed_prngs(void)$/;"	f	typeref:typename:void	file:
+reserve	bitmap.c	/^reserve(struct bitmap *b, u_int n)$/;"	f	typeref:typename:int	file:
+reserved	channels.c	/^		u_int8_t reserved;$/;"	m	struct:channel_decode_socks5::__anonb8c1f4220208	typeref:typename:u_int8_t	file:
+reserved	pkcs11.h	/^  void *reserved;$/;"	m	struct:ck_c_initialize_args	typeref:typename:void *
+reserved	pkcs11.h	/^#define reserved /;"	d
+reset_expect_keys	regress/agent-restrict.sh	/^reset_expect_keys() {$/;"	f
+reset_idtab	regress/misc/fuzz-harness/agent_fuzz_helper.c	/^reset_idtab(void)$/;"	f	typeref:typename:void	file:
+reset_keys	regress/agent-restrict.sh	/^reset_keys() {$/;"	f
+reset_sockettab	regress/misc/fuzz-harness/agent_fuzz_helper.c	/^reset_sockettab(int devnull)$/;"	f	typeref:typename:void	file:
+resolve_addr	ssh.c	/^resolve_addr(const char *name, int port, char *caddr, size_t clen)$/;"	f	typeref:struct:addrinfo *	file:
+resolve_canonicalize	ssh.c	/^resolve_canonicalize(char **hostp, int port)$/;"	f	typeref:struct:addrinfo *	file:
+resolve_host	ssh.c	/^resolve_host(const char *name, int port, int logerr, char *cname, size_t clen)$/;"	f	typeref:struct:addrinfo *	file:
+respond	auth.h	/^	int	(*respond)(void *ctx, u_int numresp, char **responses);$/;"	m	struct:KbdintDevice	typeref:typename:int (*)(void * ctx,u_int numresp,char ** responses)
+response	scp.c	/^response(void)$/;"	f	typeref:typename:int
+restore_block	channels.h	/^	int	restore_block;	\/* fd mask to restore blocking status *\/$/;"	m	struct:Channel	typeref:typename:int
+restore_privatekeys	regress/agent-restrict.sh	/^restore_privatekeys() {$/;"	f
+restore_uid	uidswap.c	/^restore_uid(void)$/;"	f	typeref:typename:void
+restrict_websafe	ssh-agent.c	/^static int restrict_websafe = 1;$/;"	v	typeref:typename:int	file:
+restricted	auth-options.h	/^	int restricted;$/;"	m	struct:sshauthopt	typeref:typename:int
+result	openbsd-compat/regress/opensslvertest.c	/^	int result;$/;"	m	struct:version_test	typeref:typename:int	file:
+retain	sshkey-xmss.c	/^	u_char		*retain;$/;"	m	struct:ssh_xmss_state	typeref:typename:u_char *	file:
+retain	xmss_fast.h	/^  unsigned char *retain;$/;"	m	struct:__anon22bef5f30508	typeref:typename:unsigned char *
+retop	bitmap.c	/^retop(struct bitmap *b)$/;"	f	typeref:typename:void	file:
+rev	regress/test-exec.sh	/^rev()$/;"	f
+revents	openbsd-compat/bsd-poll.h	/^	short	revents;$/;"	m	struct:pollfd	typeref:typename:short
+revoke_blob	krl.c	/^revoke_blob(struct revoked_blob_tree *rbt, u_char *blob, size_t len)$/;"	f	typeref:typename:int	file:
+revoke_by_hash	krl.c	/^revoke_by_hash(struct revoked_blob_tree *target, const u_char *p, size_t len)$/;"	f	typeref:typename:int	file:
+revoked_blob	krl.c	/^struct revoked_blob {$/;"	s	file:
+revoked_certs	krl.c	/^	struct revoked_certs_list revoked_certs;$/;"	m	struct:ssh_krl	typeref:struct:revoked_certs_list	file:
+revoked_certs	krl.c	/^struct revoked_certs {$/;"	s	file:
+revoked_certs_for_ca_key	krl.c	/^revoked_certs_for_ca_key(struct ssh_krl *krl, const struct sshkey *ca_key,$/;"	f	typeref:typename:int	file:
+revoked_certs_free	krl.c	/^revoked_certs_free(struct revoked_certs *rc)$/;"	f	typeref:typename:void	file:
+revoked_certs_generate	krl.c	/^revoked_certs_generate(struct revoked_certs *rc, struct sshbuf *buf)$/;"	f	typeref:typename:int	file:
+revoked_host_keys	readconf.h	/^	char	*revoked_host_keys;$/;"	m	struct:__anon7d31da1d0108	typeref:typename:char *
+revoked_key_id	krl.c	/^struct revoked_key_id {$/;"	s	file:
+revoked_key_ids	krl.c	/^	struct revoked_key_id_tree revoked_key_ids;$/;"	m	struct:revoked_certs	typeref:struct:revoked_key_id_tree	file:
+revoked_keys	krl.c	/^	struct revoked_blob_tree revoked_keys;$/;"	m	struct:ssh_krl	typeref:struct:revoked_blob_tree	file:
+revoked_keys_file	servconf.h	/^	char   *revoked_keys_file;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:char *
+revoked_serial	krl.c	/^struct revoked_serial {$/;"	s	file:
+revoked_serials	krl.c	/^	struct revoked_serial_tree revoked_serials;$/;"	m	struct:revoked_certs	typeref:struct:revoked_serial_tree	file:
+revoked_sha1s	krl.c	/^	struct revoked_blob_tree revoked_sha1s;$/;"	m	struct:ssh_krl	typeref:struct:revoked_blob_tree	file:
+revoked_sha256s	krl.c	/^	struct revoked_blob_tree revoked_sha256s;$/;"	m	struct:ssh_krl	typeref:struct:revoked_blob_tree	file:
+rexec_argc	sshd.c	/^static int rexec_argc = 0;$/;"	v	typeref:typename:int	file:
+rexec_argv	sshd.c	/^static char **rexec_argv;$/;"	v	typeref:typename:char **	file:
+rexec_flag	sshd.c	/^static int rexec_flag = 1;$/;"	v	typeref:typename:int	file:
+rexec_recv_rng_seed	entropy.c	/^rexec_recv_rng_seed(struct sshbuf *m)$/;"	f	typeref:typename:void
+rexec_send_rng_seed	entropy.c	/^rexec_send_rng_seed(struct sshbuf *m)$/;"	f	typeref:typename:void
+rexeced_flag	sshd.c	/^static int rexeced_flag = 0;$/;"	v	typeref:typename:int	file:
+rfd	channels.h	/^	int     rfd;		\/* read fd *\/$/;"	m	struct:Channel	typeref:typename:int
+rflag	regress/netcat.c	/^int	rflag;					\/* Random ports flag *\/$/;"	v	typeref:typename:int
+rgroup_name	sftp-usergroup.c	/^rgroup_name(uid_t gid)$/;"	f	typeref:typename:const char *
+rid	mux.c	/^	u_int rid;	\/* request id *\/$/;"	m	struct:mux_channel_confirm_ctx	typeref:typename:u_int	file:
+rid	mux.c	/^	u_int rid;$/;"	m	struct:mux_session_confirm_ctx	typeref:typename:u_int	file:
+rid	mux.c	/^	u_int rid;$/;"	m	struct:mux_stdio_confirm_ctx	typeref:typename:u_int	file:
+rijndaelEncrypt	rijndael.c	/^rijndaelEncrypt(const u32 rk[\/*4*(Nr + 1)*\/], int Nr, const u8 pt[16],$/;"	f	typeref:typename:void
+rijndaelKeySetupEnc	rijndael.c	/^rijndaelKeySetupEnc(u32 rk[\/*4*(Nr + 1)*\/], const u8 cipherKey[], int keyBits)$/;"	f	typeref:typename:int
+rijndael_ctx	rijndael.h	/^} rijndael_ctx;$/;"	t	typeref:struct:__anona08d75440108
+rm_env	readconf.c	/^rm_env(Options *options, const char *arg, const char *filename, int linenum)$/;"	f	typeref:typename:void	file:
+rmspace	ssh-pkcs11.c	/^rmspace(u_char *buf, size_t len)$/;"	f	typeref:typename:void	file:
+ro_test	regress/sftp-perm.sh	/^ro_test() {$/;"	f
+rol	openbsd-compat/sha1.c	/^#define rol(/;"	d	file:
+rounds	cipher-aesctr.h	/^	int	rounds;				\/* keylen-dependent #rounds *\/$/;"	m	struct:aesctr_ctx	typeref:typename:int
+rounds	ssh-keygen.c	/^static int rounds = 0;$/;"	v	typeref:typename:int	file:
+roundup	defines.h	/^# define roundup(/;"	d
+roundup	regress/unittests/sshbuf/test_sshbuf.c	/^#define roundup(/;"	d	file:
+routing_domain	servconf.h	/^	char	*routing_domain;	\/* Bind session to routing domain *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:char *
+row	session.h	/^	u_int	row, col, xpixel, ypixel;$/;"	m	struct:Session	typeref:typename:u_int
+rpath	configure.ac	/^AC_ARG_WITH([rpath],$/;"	w
+rperm_tests	regress/forward-control.sh	/^rperm_tests() {$/;"	f
+rpl_calloc	openbsd-compat/bsd-malloc.c	/^rpl_calloc(size_t nmemb, size_t size)$/;"	f	typeref:typename:void *
+rpl_malloc	openbsd-compat/bsd-malloc.c	/^rpl_malloc(size_t size)$/;"	f	typeref:typename:void *
+rpl_realloc	openbsd-compat/bsd-malloc.c	/^rpl_realloc(void *ptr, size_t size)$/;"	f	typeref:typename:void *
+rresvport_af	openbsd-compat/rresvport.c	/^rresvport_af(int *alport, sa_family_t af)$/;"	f	typeref:typename:int
+rri_flags	openbsd-compat/getrrsetbyname.h	/^	unsigned int		rri_flags;	\/* RRSET_VALIDATED ... *\/$/;"	m	struct:rrsetinfo	typeref:typename:unsigned int
+rri_name	openbsd-compat/getrrsetbyname.h	/^	char			*rri_name;	\/* canonical name *\/$/;"	m	struct:rrsetinfo	typeref:typename:char *
+rri_nrdatas	openbsd-compat/getrrsetbyname.h	/^	unsigned int		rri_nrdatas;	\/* size of rdatas array *\/$/;"	m	struct:rrsetinfo	typeref:typename:unsigned int
+rri_nsigs	openbsd-compat/getrrsetbyname.h	/^	unsigned int		rri_nsigs;	\/* size of sigs array *\/$/;"	m	struct:rrsetinfo	typeref:typename:unsigned int
+rri_rdatas	openbsd-compat/getrrsetbyname.h	/^	struct rdatainfo	*rri_rdatas;	\/* individual records *\/$/;"	m	struct:rrsetinfo	typeref:struct:rdatainfo *
+rri_rdclass	openbsd-compat/getrrsetbyname.h	/^	unsigned int		rri_rdclass;	\/* class number *\/$/;"	m	struct:rrsetinfo	typeref:typename:unsigned int
+rri_rdtype	openbsd-compat/getrrsetbyname.h	/^	unsigned int		rri_rdtype;	\/* RR type number *\/$/;"	m	struct:rrsetinfo	typeref:typename:unsigned int
+rri_sigs	openbsd-compat/getrrsetbyname.h	/^	struct rdatainfo	*rri_sigs;	\/* individual signatures *\/$/;"	m	struct:rrsetinfo	typeref:struct:rdatainfo *
+rri_ttl	openbsd-compat/getrrsetbyname.h	/^	unsigned int		rri_ttl;	\/* time to live *\/$/;"	m	struct:rrsetinfo	typeref:typename:unsigned int
+rrsetinfo	openbsd-compat/getrrsetbyname.h	/^struct rrsetinfo {$/;"	s
+rs	openbsd-compat/arc4random.c	/^} *rs;$/;"	v	typeref:struct:_rs *
+rs_buf	openbsd-compat/arc4random.c	/^	u_char		rs_buf[RSBUFSZ];	\/* keystream blocks *\/$/;"	m	struct:_rsx	typeref:typename:u_char[]	file:
+rs_chacha	openbsd-compat/arc4random.c	/^	chacha_ctx	rs_chacha;	\/* chacha context for random keystream *\/$/;"	m	struct:_rsx	typeref:typename:chacha_ctx	file:
+rs_count	openbsd-compat/arc4random.c	/^	size_t		rs_count;	\/* bytes till reseed *\/$/;"	m	struct:_rs	typeref:typename:size_t	file:
+rs_have	openbsd-compat/arc4random.c	/^	size_t		rs_have;	\/* valid bytes at end of rs_buf *\/$/;"	m	struct:_rs	typeref:typename:size_t	file:
+rsa	sshkey.h	/^	RSA	*rsa;$/;"	m	struct:sshkey	typeref:typename:RSA *
+rsa_e	regress/unittests/sshkey/common.c	/^rsa_e(struct sshkey *k)$/;"	f	typeref:typename:const BIGNUM *
+rsa_encrypt	ssh-pkcs11-client.c	/^rsa_encrypt(int flen, const u_char *from, u_char *to, RSA *rsa, int padding)$/;"	f	typeref:typename:int	file:
+rsa_generate_private_key	sshkey.c	/^rsa_generate_private_key(u_int bits, RSA **rsap)$/;"	f	typeref:typename:int	file:
+rsa_hash_alg_ident	ssh-rsa.c	/^rsa_hash_alg_ident(int hash_alg)$/;"	f	typeref:typename:const char *	file:
+rsa_hash_alg_nid	ssh-rsa.c	/^rsa_hash_alg_nid(int type)$/;"	f	typeref:typename:int	file:
+rsa_hash_alg_oid	ssh-rsa.c	/^rsa_hash_alg_oid(int hash_alg, const u_char **oidp, size_t *oidlenp)$/;"	f	typeref:typename:int	file:
+rsa_hash_id_from_ident	ssh-rsa.c	/^rsa_hash_id_from_ident(const char *ident)$/;"	f	typeref:typename:int	file:
+rsa_hash_id_from_keyname	ssh-rsa.c	/^rsa_hash_id_from_keyname(const char *alg)$/;"	f	typeref:typename:int	file:
+rsa_idx	ssh-pkcs11.c	/^static int rsa_idx = 0;$/;"	v	typeref:typename:int	file:
+rsa_method	ssh-pkcs11.c	/^static RSA_METHOD *rsa_method;$/;"	v	typeref:typename:RSA_METHOD *	file:
+rsa_n	regress/unittests/sshkey/common.c	/^rsa_n(struct sshkey *k)$/;"	f	typeref:typename:const BIGNUM *
+rsa_p	regress/unittests/sshkey/common.c	/^rsa_p(struct sshkey *k)$/;"	f	typeref:typename:const BIGNUM *
+rsa_params	regress/unittests/sshkey/mktestdata.sh	/^rsa_params() {$/;"	f
+rsa_q	regress/unittests/sshkey/common.c	/^rsa_q(struct sshkey *k)$/;"	f	typeref:typename:const BIGNUM *
+rsource	scp.c	/^rsource(char *name, struct stat *statp)$/;"	f	typeref:typename:void
+rsx	openbsd-compat/arc4random.c	/^} *rsx;$/;"	v	typeref:struct:_rsx *
+rtableid	regress/netcat.c	/^int	rtableid = -1;$/;"	v	typeref:typename:int
+rtrim	misc.c	/^rtrim(char *s)$/;"	f	typeref:typename:void
+run-regress-${PROG}	regress/unittests/authopt/Makefile	/^run-regress-${PROG}: ${PROG}$/;"	t
+run-regress-${PROG}	regress/unittests/bitmap/Makefile	/^run-regress-${PROG}: ${PROG}$/;"	t
+run-regress-${PROG}	regress/unittests/conversion/Makefile	/^run-regress-${PROG}: ${PROG}$/;"	t
+run-regress-${PROG}	regress/unittests/hostkeys/Makefile	/^run-regress-${PROG}: ${PROG}$/;"	t
+run-regress-${PROG}	regress/unittests/kex/Makefile	/^run-regress-${PROG}: ${PROG}$/;"	t
+run-regress-${PROG}	regress/unittests/match/Makefile	/^run-regress-${PROG}: ${PROG}$/;"	t
+run-regress-${PROG}	regress/unittests/misc/Makefile	/^run-regress-${PROG}: ${PROG}$/;"	t
+run-regress-${PROG}	regress/unittests/sshbuf/Makefile	/^run-regress-${PROG}: ${PROG}$/;"	t
+run-regress-${PROG}	regress/unittests/sshkey/Makefile	/^run-regress-${PROG}: ${PROG}$/;"	t
+run-regress-${PROG}	regress/unittests/sshsig/Makefile	/^run-regress-${PROG}: ${PROG}$/;"	t
+run-regress-${PROG}	regress/unittests/utf8/Makefile	/^run-regress-${PROG}: ${PROG}$/;"	t
+run_client	regress/sftp-perm.sh	/^run_client() {$/;"	f
+run_err	scp.c	/^run_err(const char *fmt,...)$/;"	f	typeref:typename:void
+run_kex	regress/misc/fuzz-harness/kex_fuzz.cc	/^run_kex(struct test_state *ts, struct ssh *client, struct ssh *server)$/;"	f	typeref:typename:int	file:
+run_kex	regress/unittests/kex/test_kex.c	/^run_kex(struct ssh *client, struct ssh *server)$/;"	f	typeref:typename:void	file:
+run_trial	regress/addrmatch.sh	/^run_trial()$/;"	f
+ruser_name	sftp-usergroup.c	/^ruser_name(uid_t uid)$/;"	f	typeref:typename:const char *
+rw_session_count	pkcs11.h	/^  unsigned long rw_session_count;$/;"	m	struct:ck_token_info	typeref:typename:unsigned long
+rw_session_count	pkcs11.h	/^#define rw_session_count /;"	d
+s6_addr	openbsd-compat/fake-rfc2553.h	/^	u_int8_t	s6_addr[16];$/;"	m	struct:in6_addr	typeref:typename:u_int8_t[16]
+sAcceptEnv	servconf.c	/^	sAcceptEnv, sSetEnv, sPermitTunnel,$/;"	e	enum:__anon9b33d3bc0103	file:
+sAddressFamily	servconf.c	/^	sKbdInteractiveAuthentication, sListenAddress, sAddressFamily,$/;"	e	enum:__anon9b33d3bc0103	file:
+sAllowAgentForwarding	servconf.c	/^	sUsePrivilegeSeparation, sAllowAgentForwarding,$/;"	e	enum:__anon9b33d3bc0103	file:
+sAllowGroups	servconf.c	/^	sRekeyLimit, sAllowUsers, sDenyUsers, sAllowGroups, sDenyGroups,$/;"	e	enum:__anon9b33d3bc0103	file:
+sAllowStreamLocalForwarding	servconf.c	/^	sAllowStreamLocalForwarding, sFingerprintHash, sDisableForwarding,$/;"	e	enum:__anon9b33d3bc0103	file:
+sAllowTcpForwarding	servconf.c	/^	sPermitUserEnvironment, sAllowTcpForwarding, sCompression,$/;"	e	enum:__anon9b33d3bc0103	file:
+sAllowUsers	servconf.c	/^	sRekeyLimit, sAllowUsers, sDenyUsers, sAllowGroups, sDenyGroups,$/;"	e	enum:__anon9b33d3bc0103	file:
+sAuthenticationMethods	servconf.c	/^	sAuthenticationMethods, sHostKeyAgent, sPermitUserRC,$/;"	e	enum:__anon9b33d3bc0103	file:
+sAuthorizedKeysCommand	servconf.c	/^	sAuthorizedKeysCommand, sAuthorizedKeysCommandUser,$/;"	e	enum:__anon9b33d3bc0103	file:
+sAuthorizedKeysCommandUser	servconf.c	/^	sAuthorizedKeysCommand, sAuthorizedKeysCommandUser,$/;"	e	enum:__anon9b33d3bc0103	file:
+sAuthorizedKeysFile	servconf.c	/^	sClientAliveInterval, sClientAliveCountMax, sAuthorizedKeysFile,$/;"	e	enum:__anon9b33d3bc0103	file:
+sAuthorizedPrincipalsCommand	servconf.c	/^	sAuthorizedPrincipalsCommand, sAuthorizedPrincipalsCommandUser,$/;"	e	enum:__anon9b33d3bc0103	file:
+sAuthorizedPrincipalsCommandUser	servconf.c	/^	sAuthorizedPrincipalsCommand, sAuthorizedPrincipalsCommandUser,$/;"	e	enum:__anon9b33d3bc0103	file:
+sAuthorizedPrincipalsFile	servconf.c	/^	sRevokedKeys, sTrustedUserCAKeys, sAuthorizedPrincipalsFile,$/;"	e	enum:__anon9b33d3bc0103	file:
+sBadOption	servconf.c	/^	sBadOption,		\/* == unknown option *\/$/;"	e	enum:__anon9b33d3bc0103	file:
+sBanner	servconf.c	/^	sBanner, sUseDNS, sHostbasedAuthentication,$/;"	e	enum:__anon9b33d3bc0103	file:
+sCASignatureAlgorithms	servconf.c	/^	sKexAlgorithms, sCASignatureAlgorithms, sIPQoS, sVersionAddendum,$/;"	e	enum:__anon9b33d3bc0103	file:
+sChrootDirectory	servconf.c	/^	sMatch, sPermitOpen, sPermitListen, sForceCommand, sChrootDirectory,$/;"	e	enum:__anon9b33d3bc0103	file:
+sCiphers	servconf.c	/^	sIgnoreUserKnownHosts, sCiphers, sMacs, sPidFile, sModuliFile,$/;"	e	enum:__anon9b33d3bc0103	file:
+sClientAliveCountMax	servconf.c	/^	sClientAliveInterval, sClientAliveCountMax, sAuthorizedKeysFile,$/;"	e	enum:__anon9b33d3bc0103	file:
+sClientAliveInterval	servconf.c	/^	sClientAliveInterval, sClientAliveCountMax, sAuthorizedKeysFile,$/;"	e	enum:__anon9b33d3bc0103	file:
+sCompression	servconf.c	/^	sPermitUserEnvironment, sAllowTcpForwarding, sCompression,$/;"	e	enum:__anon9b33d3bc0103	file:
+sDenyGroups	servconf.c	/^	sRekeyLimit, sAllowUsers, sDenyUsers, sAllowGroups, sDenyGroups,$/;"	e	enum:__anon9b33d3bc0103	file:
+sDenyUsers	servconf.c	/^	sRekeyLimit, sAllowUsers, sDenyUsers, sAllowGroups, sDenyGroups,$/;"	e	enum:__anon9b33d3bc0103	file:
+sDeprecated	servconf.c	/^	sDeprecated, sIgnore, sUnsupported$/;"	e	enum:__anon9b33d3bc0103	file:
+sDisableForwarding	servconf.c	/^	sAllowStreamLocalForwarding, sFingerprintHash, sDisableForwarding,$/;"	e	enum:__anon9b33d3bc0103	file:
+sEmptyPasswd	servconf.c	/^	sPermitTTY, sStrictModes, sEmptyPasswd, sTCPKeepAlive,$/;"	e	enum:__anon9b33d3bc0103	file:
+sExposeAuthInfo	servconf.c	/^	sExposeAuthInfo, sRDomain, sPubkeyAuthOptions, sSecurityKeyProvider,$/;"	e	enum:__anon9b33d3bc0103	file:
+sFingerprintHash	servconf.c	/^	sAllowStreamLocalForwarding, sFingerprintHash, sDisableForwarding,$/;"	e	enum:__anon9b33d3bc0103	file:
+sForceCommand	servconf.c	/^	sMatch, sPermitOpen, sPermitListen, sForceCommand, sChrootDirectory,$/;"	e	enum:__anon9b33d3bc0103	file:
+sGatewayPorts	servconf.c	/^	sGatewayPorts, sPubkeyAuthentication, sPubkeyAcceptedAlgorithms,$/;"	e	enum:__anon9b33d3bc0103	file:
+sGssAuthentication	servconf.c	/^	sGssAuthentication, sGssCleanupCreds, sGssStrictAcceptor,$/;"	e	enum:__anon9b33d3bc0103	file:
+sGssCleanupCreds	servconf.c	/^	sGssAuthentication, sGssCleanupCreds, sGssStrictAcceptor,$/;"	e	enum:__anon9b33d3bc0103	file:
+sGssStrictAcceptor	servconf.c	/^	sGssAuthentication, sGssCleanupCreds, sGssStrictAcceptor,$/;"	e	enum:__anon9b33d3bc0103	file:
+sHostCertificate	servconf.c	/^	sHostCertificate, sInclude,$/;"	e	enum:__anon9b33d3bc0103	file:
+sHostKeyAgent	servconf.c	/^	sAuthenticationMethods, sHostKeyAgent, sPermitUserRC,$/;"	e	enum:__anon9b33d3bc0103	file:
+sHostKeyAlgorithms	servconf.c	/^	sHostKeyAlgorithms, sPerSourceMaxStartups, sPerSourceNetBlockSize,$/;"	e	enum:__anon9b33d3bc0103	file:
+sHostKeyFile	servconf.c	/^	sPort, sHostKeyFile, sLoginGraceTime,$/;"	e	enum:__anon9b33d3bc0103	file:
+sHostbasedAcceptedAlgorithms	servconf.c	/^	sHostbasedUsesNameFromPacketOnly, sHostbasedAcceptedAlgorithms,$/;"	e	enum:__anon9b33d3bc0103	file:
+sHostbasedAuthentication	servconf.c	/^	sBanner, sUseDNS, sHostbasedAuthentication,$/;"	e	enum:__anon9b33d3bc0103	file:
+sHostbasedUsesNameFromPacketOnly	servconf.c	/^	sHostbasedUsesNameFromPacketOnly, sHostbasedAcceptedAlgorithms,$/;"	e	enum:__anon9b33d3bc0103	file:
+sIPQoS	servconf.c	/^	sKexAlgorithms, sCASignatureAlgorithms, sIPQoS, sVersionAddendum,$/;"	e	enum:__anon9b33d3bc0103	file:
+sIgnore	servconf.c	/^	sDeprecated, sIgnore, sUnsupported$/;"	e	enum:__anon9b33d3bc0103	file:
+sIgnoreRhosts	servconf.c	/^	sPrintMotd, sPrintLastLog, sIgnoreRhosts,$/;"	e	enum:__anon9b33d3bc0103	file:
+sIgnoreUserKnownHosts	servconf.c	/^	sIgnoreUserKnownHosts, sCiphers, sMacs, sPidFile, sModuliFile,$/;"	e	enum:__anon9b33d3bc0103	file:
+sInclude	servconf.c	/^	sHostCertificate, sInclude,$/;"	e	enum:__anon9b33d3bc0103	file:
+sKbdInteractiveAuthentication	servconf.c	/^	sKbdInteractiveAuthentication, sListenAddress, sAddressFamily,$/;"	e	enum:__anon9b33d3bc0103	file:
+sKerberosAuthentication	servconf.c	/^	sKerberosAuthentication, sKerberosOrLocalPasswd, sKerberosTicketCleanup,$/;"	e	enum:__anon9b33d3bc0103	file:
+sKerberosGetAFSToken	servconf.c	/^	sKerberosGetAFSToken, sPasswordAuthentication,$/;"	e	enum:__anon9b33d3bc0103	file:
+sKerberosOrLocalPasswd	servconf.c	/^	sKerberosAuthentication, sKerberosOrLocalPasswd, sKerberosTicketCleanup,$/;"	e	enum:__anon9b33d3bc0103	file:
+sKerberosTicketCleanup	servconf.c	/^	sKerberosAuthentication, sKerberosOrLocalPasswd, sKerberosTicketCleanup,$/;"	e	enum:__anon9b33d3bc0103	file:
+sKexAlgorithms	servconf.c	/^	sKexAlgorithms, sCASignatureAlgorithms, sIPQoS, sVersionAddendum,$/;"	e	enum:__anon9b33d3bc0103	file:
+sListenAddress	servconf.c	/^	sKbdInteractiveAuthentication, sListenAddress, sAddressFamily,$/;"	e	enum:__anon9b33d3bc0103	file:
+sLogFacility	servconf.c	/^	sPermitRootLogin, sLogFacility, sLogLevel, sLogVerbose,$/;"	e	enum:__anon9b33d3bc0103	file:
+sLogLevel	servconf.c	/^	sPermitRootLogin, sLogFacility, sLogLevel, sLogVerbose,$/;"	e	enum:__anon9b33d3bc0103	file:
+sLogVerbose	servconf.c	/^	sPermitRootLogin, sLogFacility, sLogLevel, sLogVerbose,$/;"	e	enum:__anon9b33d3bc0103	file:
+sLoginGraceTime	servconf.c	/^	sPort, sHostKeyFile, sLoginGraceTime,$/;"	e	enum:__anon9b33d3bc0103	file:
+sMacs	servconf.c	/^	sIgnoreUserKnownHosts, sCiphers, sMacs, sPidFile, sModuliFile,$/;"	e	enum:__anon9b33d3bc0103	file:
+sMatch	servconf.c	/^	sMatch, sPermitOpen, sPermitListen, sForceCommand, sChrootDirectory,$/;"	e	enum:__anon9b33d3bc0103	file:
+sMaxAuthTries	servconf.c	/^	sXAuthLocation, sSubsystem, sMaxStartups, sMaxAuthTries, sMaxSessions,$/;"	e	enum:__anon9b33d3bc0103	file:
+sMaxSessions	servconf.c	/^	sXAuthLocation, sSubsystem, sMaxStartups, sMaxAuthTries, sMaxSessions,$/;"	e	enum:__anon9b33d3bc0103	file:
+sMaxStartups	servconf.c	/^	sXAuthLocation, sSubsystem, sMaxStartups, sMaxAuthTries, sMaxSessions,$/;"	e	enum:__anon9b33d3bc0103	file:
+sModuliFile	servconf.c	/^	sIgnoreUserKnownHosts, sCiphers, sMacs, sPidFile, sModuliFile,$/;"	e	enum:__anon9b33d3bc0103	file:
+sPasswordAuthentication	servconf.c	/^	sKerberosGetAFSToken, sPasswordAuthentication,$/;"	e	enum:__anon9b33d3bc0103	file:
+sPerSourceMaxStartups	servconf.c	/^	sHostKeyAlgorithms, sPerSourceMaxStartups, sPerSourceNetBlockSize,$/;"	e	enum:__anon9b33d3bc0103	file:
+sPerSourceNetBlockSize	servconf.c	/^	sHostKeyAlgorithms, sPerSourceMaxStartups, sPerSourceNetBlockSize,$/;"	e	enum:__anon9b33d3bc0103	file:
+sPermitListen	servconf.c	/^	sMatch, sPermitOpen, sPermitListen, sForceCommand, sChrootDirectory,$/;"	e	enum:__anon9b33d3bc0103	file:
+sPermitOpen	servconf.c	/^	sMatch, sPermitOpen, sPermitListen, sForceCommand, sChrootDirectory,$/;"	e	enum:__anon9b33d3bc0103	file:
+sPermitRootLogin	servconf.c	/^	sPermitRootLogin, sLogFacility, sLogLevel, sLogVerbose,$/;"	e	enum:__anon9b33d3bc0103	file:
+sPermitTTY	servconf.c	/^	sPermitTTY, sStrictModes, sEmptyPasswd, sTCPKeepAlive,$/;"	e	enum:__anon9b33d3bc0103	file:
+sPermitTunnel	servconf.c	/^	sAcceptEnv, sSetEnv, sPermitTunnel,$/;"	e	enum:__anon9b33d3bc0103	file:
+sPermitUserEnvironment	servconf.c	/^	sPermitUserEnvironment, sAllowTcpForwarding, sCompression,$/;"	e	enum:__anon9b33d3bc0103	file:
+sPermitUserRC	servconf.c	/^	sAuthenticationMethods, sHostKeyAgent, sPermitUserRC,$/;"	e	enum:__anon9b33d3bc0103	file:
+sPidFile	servconf.c	/^	sIgnoreUserKnownHosts, sCiphers, sMacs, sPidFile, sModuliFile,$/;"	e	enum:__anon9b33d3bc0103	file:
+sPort	servconf.c	/^	sPort, sHostKeyFile, sLoginGraceTime,$/;"	e	enum:__anon9b33d3bc0103	file:
+sPrintLastLog	servconf.c	/^	sPrintMotd, sPrintLastLog, sIgnoreRhosts,$/;"	e	enum:__anon9b33d3bc0103	file:
+sPrintMotd	servconf.c	/^	sPrintMotd, sPrintLastLog, sIgnoreRhosts,$/;"	e	enum:__anon9b33d3bc0103	file:
+sPubkeyAcceptedAlgorithms	servconf.c	/^	sGatewayPorts, sPubkeyAuthentication, sPubkeyAcceptedAlgorithms,$/;"	e	enum:__anon9b33d3bc0103	file:
+sPubkeyAuthOptions	servconf.c	/^	sExposeAuthInfo, sRDomain, sPubkeyAuthOptions, sSecurityKeyProvider,$/;"	e	enum:__anon9b33d3bc0103	file:
+sPubkeyAuthentication	servconf.c	/^	sGatewayPorts, sPubkeyAuthentication, sPubkeyAcceptedAlgorithms,$/;"	e	enum:__anon9b33d3bc0103	file:
+sRDomain	servconf.c	/^	sExposeAuthInfo, sRDomain, sPubkeyAuthOptions, sSecurityKeyProvider,$/;"	e	enum:__anon9b33d3bc0103	file:
+sRekeyLimit	servconf.c	/^	sRekeyLimit, sAllowUsers, sDenyUsers, sAllowGroups, sDenyGroups,$/;"	e	enum:__anon9b33d3bc0103	file:
+sRequiredRSASize	servconf.c	/^	sRequiredRSASize,$/;"	e	enum:__anon9b33d3bc0103	file:
+sRevokedKeys	servconf.c	/^	sRevokedKeys, sTrustedUserCAKeys, sAuthorizedPrincipalsFile,$/;"	e	enum:__anon9b33d3bc0103	file:
+sSecurityKeyProvider	servconf.c	/^	sExposeAuthInfo, sRDomain, sPubkeyAuthOptions, sSecurityKeyProvider,$/;"	e	enum:__anon9b33d3bc0103	file:
+sSetEnv	servconf.c	/^	sAcceptEnv, sSetEnv, sPermitTunnel,$/;"	e	enum:__anon9b33d3bc0103	file:
+sStreamLocalBindMask	servconf.c	/^	sStreamLocalBindMask, sStreamLocalBindUnlink,$/;"	e	enum:__anon9b33d3bc0103	file:
+sStreamLocalBindUnlink	servconf.c	/^	sStreamLocalBindMask, sStreamLocalBindUnlink,$/;"	e	enum:__anon9b33d3bc0103	file:
+sStrictModes	servconf.c	/^	sPermitTTY, sStrictModes, sEmptyPasswd, sTCPKeepAlive,$/;"	e	enum:__anon9b33d3bc0103	file:
+sSubsystem	servconf.c	/^	sXAuthLocation, sSubsystem, sMaxStartups, sMaxAuthTries, sMaxSessions,$/;"	e	enum:__anon9b33d3bc0103	file:
+sTCPKeepAlive	servconf.c	/^	sPermitTTY, sStrictModes, sEmptyPasswd, sTCPKeepAlive,$/;"	e	enum:__anon9b33d3bc0103	file:
+sTrustedUserCAKeys	servconf.c	/^	sRevokedKeys, sTrustedUserCAKeys, sAuthorizedPrincipalsFile,$/;"	e	enum:__anon9b33d3bc0103	file:
+sUnsupported	servconf.c	/^	sDeprecated, sIgnore, sUnsupported$/;"	e	enum:__anon9b33d3bc0103	file:
+sUseDNS	servconf.c	/^	sBanner, sUseDNS, sHostbasedAuthentication,$/;"	e	enum:__anon9b33d3bc0103	file:
+sUsePAM	servconf.c	/^	sUsePAM,$/;"	e	enum:__anon9b33d3bc0103	file:
+sUsePrivilegeSeparation	servconf.c	/^	sUsePrivilegeSeparation, sAllowAgentForwarding,$/;"	e	enum:__anon9b33d3bc0103	file:
+sVersionAddendum	servconf.c	/^	sKexAlgorithms, sCASignatureAlgorithms, sIPQoS, sVersionAddendum,$/;"	e	enum:__anon9b33d3bc0103	file:
+sX11DisplayOffset	servconf.c	/^	sX11Forwarding, sX11DisplayOffset, sX11UseLocalhost,$/;"	e	enum:__anon9b33d3bc0103	file:
+sX11Forwarding	servconf.c	/^	sX11Forwarding, sX11DisplayOffset, sX11UseLocalhost,$/;"	e	enum:__anon9b33d3bc0103	file:
+sX11UseLocalhost	servconf.c	/^	sX11Forwarding, sX11DisplayOffset, sX11UseLocalhost,$/;"	e	enum:__anon9b33d3bc0103	file:
+sXAuthLocation	servconf.c	/^	sXAuthLocation, sSubsystem, sMaxStartups, sMaxAuthTries, sMaxSessions,$/;"	e	enum:__anon9b33d3bc0103	file:
+s_template	regress/misc/fuzz-harness/kex_fuzz.cc	/^	struct sshbuf *s_template, *c_template; \/* main copy of input *\/$/;"	m	struct:test_state	typeref:struct:sshbuf *	file:
+sa	loginrec.h	/^	struct sockaddr sa;$/;"	m	union:login_netinfo	typeref:struct:sockaddr
+sa_family_t	defines.h	/^typedef int sa_family_t;$/;"	t	typeref:typename:int
+sa_flags	openbsd-compat/sigact.h	/^#define sa_flags /;"	d
+sa_handler	openbsd-compat/sigact.h	/^#define sa_handler /;"	d
+sa_in	loginrec.h	/^	struct sockaddr_in sa_in;$/;"	m	union:login_netinfo	typeref:struct:sockaddr_in
+sa_mask	openbsd-compat/sigact.h	/^#define sa_mask /;"	d
+sa_storage	loginrec.h	/^	struct sockaddr_storage sa_storage;$/;"	m	union:login_netinfo	typeref:struct:sockaddr_storage
+safe_path	misc.c	/^safe_path(const char *name, struct stat *stp, const char *pw_dir,$/;"	f	typeref:typename:int
+safe_path_fd	misc.c	/^safe_path_fd(int fd, const char *file, struct passwd *pw,$/;"	f	typeref:typename:int
+safely_chroot	regress/check-perm.c	/^safely_chroot(const char *path, uid_t uid)$/;"	f	typeref:typename:void	file:
+safely_chroot	session.c	/^safely_chroot(const char *path, uid_t uid)$/;"	f	typeref:typename:void	file:
+sandbox	configure.ac	/^AC_ARG_WITH([sandbox],$/;"	w
+sandbox_policy	sandbox-systrace.c	/^struct sandbox_policy {$/;"	s	file:
+sanitise_stdfd	misc.c	/^sanitise_stdfd(void)$/;"	f	typeref:typename:void
+save_attestation	ssh-keygen.c	/^save_attestation(struct sshbuf *attest, const char *path)$/;"	f	typeref:typename:void	file:
+save_debug_log	regress/test-exec.sh	/^save_debug_log ()$/;"	f
+saved_argc	sshd.c	/^static int saved_argc;$/;"	v	typeref:typename:int	file:
+saved_argv	sshd.c	/^static char **saved_argv;$/;"	v	typeref:typename:char **	file:
+saved_av	ssh.c	/^static char **saved_av;$/;"	v	typeref:typename:char **	file:
+saved_egid	uidswap.c	/^static gid_t	saved_egid = 0;$/;"	v	typeref:typename:gid_t	file:
+saved_egroups	uidswap.c	/^static gid_t	*saved_egroups = NULL, *user_groups = NULL;$/;"	v	typeref:typename:gid_t *	file:
+saved_egroupslen	uidswap.c	/^static int	saved_egroupslen = -1, user_groupslen = -1;$/;"	v	typeref:typename:int	file:
+saved_euid	uidswap.c	/^static uid_t	saved_euid = 0;$/;"	v	typeref:typename:uid_t	file:
+saved_sighandler	openbsd-compat/bsd-pselect.c	/^static sighandler_t saved_sighandler[_NSIG];$/;"	v	typeref:typename:sighandler_t[]	file:
+sbindir	Makefile.in	/^sbindir=@sbindir@$/;"	m
+sc25519	sc25519.h	/^#define sc25519 /;"	d
+sc25519	sc25519.h	/^sc25519;$/;"	t	typeref:struct:__anon2bd4d2370108
+sc25519_2interleave2	sc25519.c	/^void sc25519_2interleave2(unsigned char r[127], const sc25519 *s1, const sc25519 *s2)$/;"	f	typeref:typename:void
+sc25519_2interleave2	sc25519.h	/^#define sc25519_2interleave2 /;"	d
+sc25519_add	sc25519.c	/^void sc25519_add(sc25519 *r, const sc25519 *x, const sc25519 *y)$/;"	f	typeref:typename:void
+sc25519_add	sc25519.h	/^#define sc25519_add /;"	d
+sc25519_from32bytes	sc25519.c	/^void sc25519_from32bytes(sc25519 *r, const unsigned char x[32])$/;"	f	typeref:typename:void
+sc25519_from32bytes	sc25519.h	/^#define sc25519_from32bytes /;"	d
+sc25519_from64bytes	sc25519.c	/^void sc25519_from64bytes(sc25519 *r, const unsigned char x[64])$/;"	f	typeref:typename:void
+sc25519_from64bytes	sc25519.h	/^#define sc25519_from64bytes /;"	d
+sc25519_from_shortsc	sc25519.c	/^void sc25519_from_shortsc(sc25519 *r, const shortsc25519 *x)$/;"	f	typeref:typename:void
+sc25519_from_shortsc	sc25519.h	/^#define sc25519_from_shortsc /;"	d
+sc25519_isshort_vartime	sc25519.c	/^int sc25519_isshort_vartime(const sc25519 *x)$/;"	f	typeref:typename:int
+sc25519_isshort_vartime	sc25519.h	/^#define sc25519_isshort_vartime /;"	d
+sc25519_iszero_vartime	sc25519.c	/^int sc25519_iszero_vartime(const sc25519 *x)$/;"	f	typeref:typename:int
+sc25519_iszero_vartime	sc25519.h	/^#define sc25519_iszero_vartime /;"	d
+sc25519_lt_vartime	sc25519.c	/^int sc25519_lt_vartime(const sc25519 *x, const sc25519 *y)$/;"	f	typeref:typename:int
+sc25519_lt_vartime	sc25519.h	/^#define sc25519_lt_vartime /;"	d
+sc25519_mul	sc25519.c	/^void sc25519_mul(sc25519 *r, const sc25519 *x, const sc25519 *y)$/;"	f	typeref:typename:void
+sc25519_mul	sc25519.h	/^#define sc25519_mul /;"	d
+sc25519_mul_shortsc	sc25519.c	/^void sc25519_mul_shortsc(sc25519 *r, const sc25519 *x, const shortsc25519 *y)$/;"	f	typeref:typename:void
+sc25519_mul_shortsc	sc25519.h	/^#define sc25519_mul_shortsc /;"	d
+sc25519_sub_nored	sc25519.c	/^void sc25519_sub_nored(sc25519 *r, const sc25519 *x, const sc25519 *y)$/;"	f	typeref:typename:void
+sc25519_sub_nored	sc25519.h	/^#define sc25519_sub_nored /;"	d
+sc25519_to32bytes	sc25519.c	/^void sc25519_to32bytes(unsigned char r[32], const sc25519 *x)$/;"	f	typeref:typename:void
+sc25519_to32bytes	sc25519.h	/^#define sc25519_to32bytes /;"	d
+sc25519_window3	sc25519.c	/^void sc25519_window3(signed char r[85], const sc25519 *s)$/;"	f	typeref:typename:void
+sc25519_window3	sc25519.h	/^#define sc25519_window3 /;"	d
+sc25519_window5	sc25519.c	/^void sc25519_window5(signed char r[51], const sc25519 *s)$/;"	f	typeref:typename:void
+sc25519_window5	sc25519.h	/^#define sc25519_window5 /;"	d
+scale_chars	openbsd-compat/fmt_scaled.c	/^static const char scale_chars[] = "BKMGTPE";$/;"	v	typeref:typename:const char[]	file:
+scale_factors	openbsd-compat/fmt_scaled.c	/^static const long long scale_factors[] = {$/;"	v	typeref:typename:const long long[]	file:
+scan_scaled	openbsd-compat/fmt_scaled.c	/^scan_scaled(char *scaled, long long *result)$/;"	f	typeref:typename:int
+scard	contrib/redhat/openssh.spec	/^%global scard 0$/;"	g
+schedule_server_alive_check	clientloop.c	/^schedule_server_alive_check(void)$/;"	f	typeref:typename:void	file:
+scope_id	addr.h	/^	u_int32_t	scope_id;	\/* iface scope id for v6 *\/$/;"	m	struct:xaddr	typeref:typename:u_int32_t
+scp$(EXEEXT)	Makefile.in	/^scp$(EXEEXT): $(LIBCOMPAT) libssh.a $(SCP_OBJS)$/;"	t
+scp_mode_e	scp.c	/^enum scp_mode_e {$/;"	g	file:
+scpclean	regress/scp-uri.sh	/^scpclean() {$/;"	f
+scpclean	regress/scp.sh	/^scpclean() {$/;"	f
+scpclean	regress/scp3.sh	/^scpclean() {$/;"	f
+scpio	scp.c	/^scpio(void *_cnt, size_t s)$/;"	f	typeref:typename:int	file:
+screen	session.h	/^	u_int	screen;$/;"	m	struct:Session	typeref:typename:u_int
+sdirent_comp	sftp.c	/^sdirent_comp(const void *aa, const void *bb)$/;"	f	typeref:typename:int	file:
+security-key	configure.ac	/^AC_ARG_ENABLE([security-key],$/;"	e
+security-key-builtin	configure.ac	/^AC_ARG_WITH([security-key-builtin],$/;"	w
+seed	regress/unittests/test_helper/fuzz.c	/^	void *seed;$/;"	m	struct:fuzz	typeref:typename:void *	file:
+seed_from_prngd	openbsd-compat/port-prngd.c	/^seed_from_prngd(unsigned char *buf, size_t bytes)$/;"	f	typeref:typename:int
+seed_rng	entropy.c	/^seed_rng(void)$/;"	f	typeref:typename:void
+select	smult_curve25519_ref.c	/^static void select(unsigned int p[64],unsigned int q[64],const unsigned int r[64],const unsigned/;"	f	typeref:typename:void	file:
+selected	audit-bsm.c	/^selected(char *username, uid_t uid, au_event_t event, int sf)$/;"	f	typeref:typename:int	file:
+selector	servconf.h	/^	char *selector;$/;"	m	struct:include_item	typeref:typename:char *
+self	channels.h	/^	int     self;		\/* my own channel identifier *\/$/;"	m	struct:Channel	typeref:typename:int
+self	session.h	/^	int	self;$/;"	m	struct:Session	typeref:typename:int
+selinux	configure.ac	/^AC_ARG_WITH([selinux],$/;"	w
+send-survey	Makefile.in	/^send-survey:	survey$/;"	t
+send_attrib	sftp-server.c	/^send_attrib(u_int32_t id, const Attrib *a)$/;"	f	typeref:typename:void	file:
+send_context	packet.c	/^	struct sshcipher_ctx *send_context;$/;"	m	struct:session_state	typeref:struct:sshcipher_ctx *	file:
+send_data	sftp-server.c	/^send_data(u_int32_t id, const u_char *data, int dlen)$/;"	f	typeref:typename:void	file:
+send_data_or_handle	sftp-server.c	/^send_data_or_handle(char type, u_int32_t id, const u_char *data, int dlen)$/;"	f	typeref:typename:void	file:
+send_env	readconf.h	/^	char	**send_env;$/;"	m	struct:__anon7d31da1d0108	typeref:typename:char **
+send_error	kex.c	/^send_error(struct ssh *ssh, char *msg)$/;"	f	typeref:typename:void	file:
+send_handle	sftp-server.c	/^send_handle(u_int32_t id, int handle)$/;"	f	typeref:typename:void	file:
+send_msg	sftp-client.c	/^send_msg(struct sftp_conn *conn, struct sshbuf *m)$/;"	f	typeref:typename:void	file:
+send_msg	sftp-server.c	/^send_msg(struct sshbuf *m)$/;"	f	typeref:typename:void	file:
+send_msg	ssh-pkcs11-client.c	/^send_msg(struct sshbuf *m)$/;"	f	typeref:typename:void	file:
+send_msg	ssh-pkcs11-helper.c	/^send_msg(struct sshbuf *m)$/;"	f	typeref:typename:void	file:
+send_names	sftp-server.c	/^send_names(u_int32_t id, int count, const Stat *stats)$/;"	f	typeref:typename:void	file:
+send_open	sftp-client.c	/^send_open(struct sftp_conn *conn, const char *path, const char *tag,$/;"	f	typeref:typename:int	file:
+send_pubkey_test	sshconnect2.c	/^send_pubkey_test(struct ssh *ssh, Identity *id)$/;"	f	typeref:typename:int	file:
+send_read_request	sftp-client.c	/^send_read_request(struct sftp_conn *conn, u_int id, u_int64_t offset,$/;"	f	typeref:typename:void	file:
+send_rexec_state	sshd.c	/^send_rexec_state(int fd, struct sshbuf *conf)$/;"	f	typeref:typename:void	file:
+send_status	sftp-server.c	/^send_status(u_int32_t id, u_int32_t status)$/;"	f	typeref:typename:void	file:
+send_status	ssh-agent.c	/^send_status(SocketEntry *e, int success)$/;"	f	typeref:typename:void	file:
+send_status_errmsg	sftp-server.c	/^send_status_errmsg(u_int32_t id, u_int32_t status, const char *errmsg)$/;"	f	typeref:typename:void	file:
+send_statvfs	sftp-server.c	/^send_statvfs(u_int32_t id, struct statvfs *st)$/;"	f	typeref:typename:void	file:
+send_string_attrs_request	sftp-client.c	/^send_string_attrs_request(struct sftp_conn *conn, u_int id, u_int code,$/;"	f	typeref:typename:void	file:
+send_string_request	sftp-client.c	/^send_string_request(struct sftp_conn *conn, u_int id, u_int code, const char *s,$/;"	f	typeref:typename:void	file:
+send_userauth_info_request	auth2-chall.c	/^send_userauth_info_request(struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+sensitive	sshconnect2.c	/^	Sensitive *sensitive;$/;"	m	struct:cauthctxt	typeref:typename:Sensitive *	file:
+sensitive_data	ssh.c	/^Sensitive sensitive_data;$/;"	v	typeref:typename:Sensitive
+sensitive_data	sshd.c	/^} sensitive_data;$/;"	v	typeref:struct:__anon1c7bfe280108
+seqnr	packet.c	/^	u_int32_t seqnr;$/;"	m	struct:packet_state	typeref:typename:u_int32_t	file:
+serial	sshkey.h	/^	u_int64_t	 serial;$/;"	m	struct:sshkey_cert	typeref:typename:u_int64_t
+serial_cmp	krl.c	/^serial_cmp(struct revoked_serial *a, struct revoked_serial *b)$/;"	f	typeref:typename:int	file:
+serial_number	pkcs11.h	/^  unsigned char serial_number[16];$/;"	m	struct:ck_token_info	typeref:typename:unsigned char[16]
+serial_number	pkcs11.h	/^#define serial_number /;"	d
+serialise_array	auth-options.c	/^serialise_array(struct sshbuf *m, char **a, size_t n)$/;"	f	typeref:typename:int	file:
+serialise_nullable_string	auth-options.c	/^serialise_nullable_string(struct sshbuf *m, const char *s)$/;"	f	typeref:typename:int	file:
+servconf_add_hostcert	servconf.c	/^servconf_add_hostcert(const char *file, const int line,$/;"	f	typeref:typename:void
+servconf_add_hostkey	servconf.c	/^servconf_add_hostkey(const char *file, const int line,$/;"	f	typeref:typename:void
+server	contrib/redhat/openssh.spec	/^%package server$/;"	p	package:openssh
+server	kex.h	/^	int	server;$/;"	m	struct:kex	typeref:typename:int
+server_accept_inetd	sshd.c	/^server_accept_inetd(int *sock_in, int *sock_out)$/;"	f	typeref:typename:void	file:
+server_accept_loop	sshd.c	/^server_accept_loop(int *sock_in, int *sock_out, int *newsock, int *config_s)$/;"	f	typeref:typename:void	file:
+server_alive_check	clientloop.c	/^server_alive_check(struct ssh *ssh)$/;"	f	typeref:typename:void	file:
+server_alive_count_max	readconf.h	/^	int	server_alive_count_max;$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+server_alive_interval	readconf.h	/^	int	server_alive_interval;$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+server_alive_time	clientloop.c	/^static time_t server_alive_time;	\/* Time to do server_alive_check *\/$/;"	v	typeref:typename:time_t	file:
+server_caused_failure	auth.h	/^	int		 server_caused_failure;$/;"	m	struct:Authctxt	typeref:typename:int
+server_init_dispatch	serverloop.c	/^server_init_dispatch(struct ssh *ssh)$/;"	f	typeref:typename:void	file:
+server_input_channel_open	serverloop.c	/^server_input_channel_open(int type, u_int32_t seq, struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+server_input_channel_req	serverloop.c	/^server_input_channel_req(int type, u_int32_t seq, struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+server_input_global_request	serverloop.c	/^server_input_global_request(int type, u_int32_t seq, struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+server_input_hostkeys_prove	serverloop.c	/^server_input_hostkeys_prove(struct ssh *ssh, struct sshbuf **respp)$/;"	f	typeref:typename:int	file:
+server_input_keep_alive	serverloop.c	/^server_input_keep_alive(int type, u_int32_t seq, struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+server_listen	sshd.c	/^server_listen(void)$/;"	f	typeref:typename:void	file:
+server_loop2	serverloop.c	/^server_loop2(struct ssh *ssh, Authctxt *authctxt)$/;"	f	typeref:typename:void
+server_request_direct_streamlocal	serverloop.c	/^server_request_direct_streamlocal(struct ssh *ssh)$/;"	f	typeref:typename:Channel *	file:
+server_request_direct_tcpip	serverloop.c	/^server_request_direct_tcpip(struct ssh *ssh, int *reason, const char **errmsg)$/;"	f	typeref:typename:Channel *	file:
+server_request_session	serverloop.c	/^server_request_session(struct ssh *ssh)$/;"	f	typeref:typename:Channel *	file:
+server_request_tun	serverloop.c	/^server_request_tun(struct ssh *ssh)$/;"	f	typeref:typename:Channel *	file:
+server_side	packet.c	/^	int server_side;$/;"	m	struct:session_state	typeref:typename:int	file:
+server_sig_algs	kex.h	/^	char	*server_sig_algs;$/;"	m	struct:kex	typeref:typename:char *
+server_user	sshconnect2.c	/^	const char *server_user;$/;"	m	struct:cauthctxt	typeref:typename:const char *	file:
+server_version	kex.h	/^	struct sshbuf *server_version;$/;"	m	struct:kex	typeref:struct:sshbuf *
+service	auth.h	/^	char		*service;$/;"	m	struct:Authctxt	typeref:typename:char *
+service	sshconnect2.c	/^	const char *service;$/;"	m	struct:cauthctxt	typeref:typename:const char *	file:
+session	ssh-pkcs11.c	/^	CK_SESSION_HANDLE	session;$/;"	m	struct:pkcs11_slotinfo	typeref:typename:CK_SESSION_HANDLE	file:
+session_auth_agent_req	session.c	/^session_auth_agent_req(struct ssh *ssh, Session *s)$/;"	f	typeref:typename:int	file:
+session_break_req	session.c	/^session_break_req(struct ssh *ssh, Session *s)$/;"	f	typeref:typename:int	file:
+session_by_channel	session.c	/^session_by_channel(int id)$/;"	f	typeref:typename:Session *	file:
+session_by_pid	session.c	/^session_by_pid(pid_t pid)$/;"	f	typeref:typename:Session *	file:
+session_by_tty	session.c	/^session_by_tty(char *tty)$/;"	f	typeref:typename:Session *
+session_by_x11_channel	session.c	/^session_by_x11_channel(int id)$/;"	f	typeref:typename:Session *	file:
+session_close	session.c	/^session_close(struct ssh *ssh, Session *s)$/;"	f	typeref:typename:void
+session_close_by_channel	session.c	/^session_close_by_channel(struct ssh *ssh, int id, void *arg)$/;"	f	typeref:typename:void
+session_close_by_pid	session.c	/^session_close_by_pid(struct ssh *ssh, pid_t pid, int status)$/;"	f	typeref:typename:void
+session_close_single_x11	session.c	/^session_close_single_x11(struct ssh *ssh, int id, void *arg)$/;"	f	typeref:typename:void	file:
+session_close_x11	session.c	/^session_close_x11(struct ssh *ssh, int id)$/;"	f	typeref:typename:void	file:
+session_closed	clientloop.c	/^static int session_closed;	\/* In SSH2: login session closed. *\/$/;"	v	typeref:typename:int	file:
+session_count	pkcs11.h	/^  unsigned long session_count;$/;"	m	struct:ck_token_info	typeref:typename:unsigned long
+session_count	pkcs11.h	/^#define session_count /;"	d
+session_destroy_all	session.c	/^session_destroy_all(struct ssh *ssh, void (*closefunc)(Session *))$/;"	f	typeref:typename:void
+session_dump	session.c	/^session_dump(void)$/;"	f	typeref:typename:void	file:
+session_env_req	session.c	/^session_env_req(struct ssh *ssh, Session *s)$/;"	f	typeref:typename:int	file:
+session_exec_req	session.c	/^session_exec_req(struct ssh *ssh, Session *s)$/;"	f	typeref:typename:int	file:
+session_exit_message	session.c	/^session_exit_message(struct ssh *ssh, Session *s, int status)$/;"	f	typeref:typename:void	file:
+session_get_remote_name_or_ip	session.c	/^session_get_remote_name_or_ip(struct ssh *ssh, u_int utmp_size, int use_dns)$/;"	f	typeref:typename:const char *
+session_id	kex.h	/^	struct sshbuf *session_id;$/;"	m	struct:kex	typeref:struct:sshbuf *
+session_id2	monitor.c	/^static u_char *session_id2 = NULL;$/;"	v	typeref:typename:u_char *	file:
+session_id2_len	monitor.c	/^static u_int session_id2_len = 0;$/;"	v	typeref:typename:u_int	file:
+session_ident	clientloop.c	/^int	session_ident = -1;$/;"	v	typeref:typename:int
+session_ids	ssh-agent.c	/^	struct hostkey_sid *session_ids;$/;"	m	struct:socket_entry	typeref:struct:hostkey_sid *	file:
+session_info	auth.h	/^	struct sshbuf	*session_info;	\/* Auth info for environment *\/$/;"	m	struct:Authctxt	typeref:struct:sshbuf *
+session_input_channel_req	session.c	/^session_input_channel_req(struct ssh *ssh, Channel *c, const char *rtype)$/;"	f	typeref:typename:int
+session_new	session.c	/^session_new(void)$/;"	f	typeref:typename:Session *
+session_open	session.c	/^session_open(Authctxt *authctxt, int chanid)$/;"	f	typeref:typename:int
+session_proctitle	session.c	/^session_proctitle(Session *s)$/;"	f	typeref:typename:void
+session_pty_cleanup	session.c	/^session_pty_cleanup(Session *s)$/;"	f	typeref:typename:void
+session_pty_cleanup2	session.c	/^session_pty_cleanup2(Session *s)$/;"	f	typeref:typename:void
+session_pty_req	session.c	/^session_pty_req(struct ssh *ssh, Session *s)$/;"	f	typeref:typename:int	file:
+session_set_fds	session.c	/^session_set_fds(struct ssh *ssh, Session *s,$/;"	f	typeref:typename:void
+session_setup_sia	auth-sia.c	/^session_setup_sia(struct passwd *pw, char *tty)$/;"	f	typeref:typename:void
+session_setup_x11fwd	session.c	/^session_setup_x11fwd(struct ssh *ssh, Session *s)$/;"	f	typeref:typename:int
+session_shell_req	session.c	/^session_shell_req(struct ssh *ssh, Session *s)$/;"	f	typeref:typename:int	file:
+session_signal_req	session.c	/^session_signal_req(struct ssh *ssh, Session *s)$/;"	f	typeref:typename:int	file:
+session_state	packet.c	/^struct session_state {$/;"	s	file:
+session_subsystem_req	session.c	/^session_subsystem_req(struct ssh *ssh, Session *s)$/;"	f	typeref:typename:int	file:
+session_tty_list	session.c	/^session_tty_list(void)$/;"	f	typeref:typename:char *	file:
+session_type	readconf.h	/^	int	session_type;$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+session_unused	session.c	/^session_unused(int id)$/;"	f	typeref:typename:void
+session_window_change_req	session.c	/^session_window_change_req(struct ssh *ssh, Session *s)$/;"	f	typeref:typename:int	file:
+session_x11_req	session.c	/^session_x11_req(struct ssh *ssh, Session *s)$/;"	f	typeref:typename:int	file:
+sessions	session.c	/^static Session *sessions = NULL;$/;"	v	typeref:typename:Session *	file:
+sessions_first_unused	session.c	/^static int sessions_first_unused = -1;$/;"	v	typeref:typename:int	file:
+sessions_nalloc	session.c	/^static int sessions_nalloc = 0;$/;"	v	typeref:typename:int	file:
+setChainADRS	xmss_hash_address.c	/^void setChainADRS(uint32_t adrs[8], uint32_t chain){$/;"	f	typeref:typename:void
+setHashADRS	xmss_hash_address.c	/^void setHashADRS(uint32_t adrs[8], uint32_t hash){$/;"	f	typeref:typename:void
+setKeyAndMask	xmss_hash_address.c	/^void setKeyAndMask(uint32_t adrs[8], uint32_t keyAndMask){$/;"	f	typeref:typename:void
+setLayerADRS	xmss_hash_address.c	/^void setLayerADRS(uint32_t adrs[8], uint32_t layer){$/;"	f	typeref:typename:void
+setLtreeADRS	xmss_hash_address.c	/^void setLtreeADRS(uint32_t adrs[8], uint32_t ltree){$/;"	f	typeref:typename:void
+setOTSADRS	xmss_hash_address.c	/^void setOTSADRS(uint32_t adrs[8], uint32_t ots){$/;"	f	typeref:typename:void
+setTreeADRS	xmss_hash_address.c	/^void setTreeADRS(uint32_t adrs[8], uint64_t tree){$/;"	f	typeref:typename:void
+setTreeHeight	xmss_hash_address.c	/^void setTreeHeight(uint32_t adrs[8], uint32_t treeHeight){$/;"	f	typeref:typename:void
+setTreeIndex	xmss_hash_address.c	/^void setTreeIndex(uint32_t adrs[8], uint32_t treeIndex){$/;"	f	typeref:typename:void
+setType	xmss_hash_address.c	/^void setType(uint32_t adrs[8], uint32_t type){$/;"	f	typeref:typename:void
+set_addrinfo_port	ssh.c	/^set_addrinfo_port(struct addrinfo *addrs, int port)$/;"	f	typeref:typename:void	file:
+set_cc_for_build	config.guess	/^set_cc_for_build() {$/;"	f
+set_common_sockopts	regress/netcat.c	/^set_common_sockopts(int s, int af)$/;"	f	typeref:typename:void
+set_control_persist_exit_time	clientloop.c	/^set_control_persist_exit_time(struct ssh *ssh)$/;"	f	typeref:typename:void	file:
+set_fwdpermit_from_authopts	session.c	/^set_fwdpermit_from_authopts(struct ssh *ssh, const struct sshauthopt *opts)$/;"	f	typeref:typename:void	file:
+set_interactive_called	packet.c	/^	int set_interactive_called;$/;"	m	struct:session_state	typeref:typename:int	file:
+set_log_handler	log.c	/^set_log_handler(log_handler_fn *handler, void *ctx)$/;"	f	typeref:typename:void
+set_maxsize_called	packet.c	/^	int set_maxsize_called;$/;"	m	struct:session_state	typeref:typename:int	file:
+set_nodelay	misc.c	/^set_nodelay(int fd)$/;"	f	typeref:typename:void
+set_nonblock	misc.c	/^set_nonblock(int fd)$/;"	f	typeref:typename:int
+set_onerror_func	regress/unittests/test_helper/test_helper.c	/^set_onerror_func(test_onerror_func_t *f, void *ctx)$/;"	f	typeref:typename:void
+set_process_rdomain	sshd.c	/^set_process_rdomain(struct ssh *ssh, const char *name)$/;"	f	typeref:typename:void	file:
+set_rdomain	misc.c	/^set_rdomain(int fd, const char *name)$/;"	f	typeref:typename:int
+set_reuseaddr	misc.c	/^set_reuseaddr(int fd)$/;"	f	typeref:typename:int
+set_sock_tos	misc.c	/^set_sock_tos(int fd, int tos)$/;"	f	typeref:typename:void
+set_utmp_time	loginrec.c	/^set_utmp_time(struct logininfo *li, struct utmp *ut)$/;"	f	typeref:typename:void
+set_utmpx_time	loginrec.c	/^set_utmpx_time(struct logininfo *li, struct utmpx *utx)$/;"	f	typeref:typename:void
+setegid	openbsd-compat/bsd-misc.c	/^int setegid(uid_t egid)$/;"	f	typeref:typename:int
+setenv	openbsd-compat/setenv.c	/^setenv(const char *name, const char *value, int rewrite)$/;"	f	typeref:typename:int
+setenv	readconf.h	/^	char	**setenv;$/;"	m	struct:__anon7d31da1d0108	typeref:typename:char **
+setenv	servconf.h	/^	char   **setenv;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:char **
+seteuid	openbsd-compat/bsd-misc.c	/^int seteuid(uid_t euid)$/;"	f	typeref:typename:int
+setlinebuf	openbsd-compat/bsd-misc.h	/^#define setlinebuf(/;"	d
+setlogin	openbsd-compat/bsd-misc.c	/^int setlogin(const char *name)$/;"	f	typeref:typename:int
+setneutral	ge25519.c	/^static void setneutral(ge25519 *r)$/;"	f	typeref:typename:void	file:
+setproctitle	openbsd-compat/setproctitle.c	/^setproctitle(const char *fmt, ...)$/;"	f	typeref:typename:void
+setresgid	openbsd-compat/bsd-setres_id.c	/^setresgid(gid_t rgid, gid_t egid, gid_t sgid)$/;"	f	typeref:typename:int
+setresuid	openbsd-compat/bsd-setres_id.c	/^setresuid(uid_t ruid, uid_t euid, uid_t suid)$/;"	f	typeref:typename:int
+setscreensize	progressmeter.c	/^setscreensize(void)$/;"	f	typeref:typename:void	file:
+setsid	openbsd-compat/bsd-misc.h	/^#define setsid(/;"	d
+sflag	regress/netcat.c	/^char   *sflag;					\/* Source Address *\/$/;"	v	typeref:typename:char *
+sftp$(EXEEXT)	Makefile.in	/^sftp$(EXEEXT): $(LIBCOMPAT) libssh.a $(SFTP_OBJS)$/;"	t
+sftp-server$(EXEEXT)	Makefile.in	/^sftp-server$(EXEEXT): $(LIBCOMPAT) libssh.a $(SFTPSERVER_OBJS)$/;"	t
+sftp_command	sftp.c	/^enum sftp_command {$/;"	g	file:
+sftp_conn	sftp-client.c	/^struct sftp_conn {$/;"	s	file:
+sftp_handler	sftp-server.c	/^struct sftp_handler {$/;"	s	file:
+sftp_limits	sftp-client.h	/^struct sftp_limits {$/;"	s
+sftp_ls	regress/sftp-glob.sh	/^sftp_ls() {$/;"	f
+sftp_proto_version	sftp-client.c	/^sftp_proto_version(struct sftp_conn *conn)$/;"	f	typeref:typename:u_int
+sftp_realpath	sftp-realpath.c	/^sftp_realpath(const char *path, char *resolved)$/;"	f	typeref:typename:char *
+sftp_server_cleanup_exit	sftp-server.c	/^sftp_server_cleanup_exit(int i)$/;"	f	typeref:typename:void
+sftp_server_main	sftp-server.c	/^sftp_server_main(int argc, char **argv, struct passwd *user_pw)$/;"	f	typeref:typename:int
+sftp_server_usage	sftp-server.c	/^sftp_server_usage(void)$/;"	f	typeref:typename:void	file:
+sftp_statvfs	sftp-client.h	/^struct sftp_statvfs {$/;"	s
+sftpclean	regress/sftp-uri.sh	/^sftpclean() {$/;"	f
+sftpio	sftp-client.c	/^sftpio(void *_bwlimit, size_t amount)$/;"	f	typeref:typename:int	file:
+sglob_comp	sftp.c	/^sglob_comp(const void *aa, const void *bb)$/;"	f	typeref:typename:int	file:
+sha256_initial_hash_value	openbsd-compat/sha2.c	/^static const u_int32_t sha256_initial_hash_value[8] = {$/;"	v	typeref:typename:const u_int32_t[8]	file:
+sha256_mem	sk-usbhid.c	/^sha256_mem(const void *m, size_t mlen, u_char *d, size_t dlen)$/;"	f	typeref:typename:int	file:
+sha384_initial_hash_value	openbsd-compat/sha2.c	/^static const u_int64_t sha384_initial_hash_value[8] = {$/;"	v	typeref:typename:const u_int64_t[8]	file:
+sha512_initial_hash_value	openbsd-compat/sha2.c	/^static const u_int64_t sha512_initial_hash_value[8] = {$/;"	v	typeref:typename:const u_int64_t[8]	file:
+shadow	configure.ac	/^AC_ARG_WITH([shadow],$/;"	w
+shadow_pw	openbsd-compat/xcrypt.c	/^shadow_pw(struct passwd *pw)$/;"	f	typeref:typename:char *
+shared_state	regress/misc/fuzz-harness/kex_fuzz.cc	/^struct shared_state {$/;"	s	file:
+shield_prekey	sshkey.h	/^	u_char	*shield_prekey;$/;"	m	struct:sshkey	typeref:typename:u_char *
+shield_prekey_len	sshkey.h	/^	size_t	shield_prekey_len;$/;"	m	struct:sshkey	typeref:typename:size_t
+shielded_len	sshkey.h	/^	size_t	shielded_len;$/;"	m	struct:sshkey	typeref:typename:size_t
+shielded_private	sshkey.h	/^	u_char	*shielded_private;$/;"	m	struct:sshkey	typeref:typename:u_char *
+shorthost	sshconnect.h	/^	char *shorthost;$/;"	m	struct:ssh_conn_info	typeref:typename:char *
+shortname	sshkey.c	/^	const char *shortname;$/;"	m	struct:keytype	typeref:typename:const char *	file:
+shortsc25519	sc25519.h	/^#define shortsc25519 /;"	d
+shortsc25519	sc25519.h	/^shortsc25519;$/;"	t	typeref:struct:__anon2bd4d2370208
+shortsc25519_from16bytes	sc25519.c	/^void shortsc25519_from16bytes(shortsc25519 *r, const unsigned char x[16])$/;"	f	typeref:typename:void
+shortsc25519_from16bytes	sc25519.h	/^#define shortsc25519_from16bytes /;"	d
+should_drop_connection	sshd.c	/^should_drop_connection(int startups)$/;"	f	typeref:typename:int	file:
+showOptions	logintest.c	/^showOptions(void)$/;"	f	typeref:typename:void
+show_options	ssh-keygen.c	/^show_options(struct sshbuf *optbuf, int in_critical)$/;"	f	typeref:typename:void	file:
+show_other_keys	sshconnect.c	/^show_other_keys(struct hostkeys *hostkeys, struct sshkey *key)$/;"	f	typeref:typename:int	file:
+showprogress	scp.c	/^int showprogress = 1;$/;"	v	typeref:typename:int
+showprogress	sftp.c	/^int showprogress = 1;$/;"	v	typeref:typename:int
+sid	ssh-agent.c	/^	struct sshbuf *sid;$/;"	m	struct:hostkey_sid	typeref:struct:sshbuf *	file:
+sieve_large	moduli.c	/^sieve_large(u_int32_t s32)$/;"	f	typeref:typename:void	file:
+sig2name	session.c	/^sig2name(int sig)$/;"	f	typeref:typename:char *	file:
+sig_alarm	progressmeter.c	/^sig_alarm(int ignore)$/;"	f	typeref:typename:void	file:
+sig_atomic_t	defines.h	/^typedef int sig_atomic_t;$/;"	t	typeref:typename:int
+sig_ecdsa	regress/misc/sk-dummy/sk-dummy.c	/^sig_ecdsa(const uint8_t *message, size_t message_len,$/;"	f	typeref:typename:int	file:
+sig_ed25519	regress/misc/sk-dummy/sk-dummy.c	/^sig_ed25519(const uint8_t *message, size_t message_len,$/;"	f	typeref:typename:int	file:
+sig_find_principals	ssh-keygen.c	/^sig_find_principals(const char *signature, const char *allowed_keys,$/;"	f	typeref:typename:int	file:
+sig_fuzz	regress/misc/fuzz-harness/Makefile	/^sig_fuzz: sig_fuzz.o $(SK_NULL_OBJS) $(COMMON_DEPS)$/;"	t
+sig_fuzz	regress/unittests/sshkey/test_fuzz.c	/^sig_fuzz(struct sshkey *k, const char *sig_alg)$/;"	f	typeref:typename:void	file:
+sig_match_principals	ssh-keygen.c	/^sig_match_principals(const char *allowed_keys, char *principal,$/;"	f	typeref:typename:int	file:
+sig_process_opts	ssh-keygen.c	/^sig_process_opts(char * const *opts, size_t nopts, char **hashalgp,$/;"	f	typeref:typename:int	file:
+sig_r	sk-api.h	/^	uint8_t *sig_r;$/;"	m	struct:sk_sign_response	typeref:typename:uint8_t *
+sig_r_len	sk-api.h	/^	size_t sig_r_len;$/;"	m	struct:sk_sign_response	typeref:typename:size_t
+sig_s	sk-api.h	/^	uint8_t *sig_s;$/;"	m	struct:sk_sign_response	typeref:typename:uint8_t *
+sig_s_len	sk-api.h	/^	size_t sig_s_len;$/;"	m	struct:sk_sign_response	typeref:typename:size_t
+sig_sign	ssh-keygen.c	/^sig_sign(const char *keypath, const char *sig_namespace, int require_agent,$/;"	f	typeref:typename:int	file:
+sig_verify	ssh-keygen.c	/^sig_verify(const char *signature, const char *sig_namespace,$/;"	f	typeref:typename:int	file:
+sig_winch	progressmeter.c	/^sig_winch(int sig)$/;"	f	typeref:typename:void	file:
+sigaction	openbsd-compat/sigact.c	/^sigaction(int sig, struct sigaction *sigact, struct sigaction *osigact)$/;"	f	typeref:typename:int
+sigaction	openbsd-compat/sigact.h	/^struct sigaction$/;"	s
+sigaddset	openbsd-compat/sigact.c	/^sigaddset (sigset_t *mask, int sig)$/;"	f	typeref:typename:int
+sigalg	sshkey.c	/^	const char *sigalg;$/;"	m	struct:keytype	typeref:typename:const char *	file:
+sigchld_handler	serverloop.c	/^sigchld_handler(int sig)$/;"	f	typeref:typename:void	file:
+sigchld_handler	sftp.c	/^sigchld_handler(int sig)$/;"	f	typeref:typename:void	file:
+sigdelset	openbsd-compat/sigact.c	/^sigdelset (sigset_t *mask, int sig)$/;"	f	typeref:typename:int
+sigdie	log.h	/^#define sigdie(/;"	d
+sigdie_f	log.h	/^#define sigdie_f(/;"	d
+sigdie_fr	log.h	/^#define sigdie_fr(/;"	d
+sigdie_r	log.h	/^#define sigdie_r(/;"	d
+sigemptyset	openbsd-compat/sigact.c	/^sigemptyset (sigset_t *mask)$/;"	f	typeref:typename:int
+sighandler_t	openbsd-compat/bsd-pselect.c	/^typedef void (*sighandler_t)(int);$/;"	t	typeref:typename:void (*)(int)	file:
+sighup_handler	sshd.c	/^sighup_handler(int sig)$/;"	f	typeref:typename:void	file:
+sighup_restart	sshd.c	/^sighup_restart(void)$/;"	f	typeref:typename:void	file:
+siginfo	regress/unittests/test_helper/fuzz.c	/^siginfo(int unused __attribute__((__unused__)))$/;"	f	typeref:typename:void	file:
+siginfo	regress/unittests/test_helper/test_helper.c	/^siginfo(int unused __attribute__((__unused__)))$/;"	f	typeref:typename:void	file:
+sigismember	openbsd-compat/sigact.c	/^sigismember (sigset_t *mask, int sig)$/;"	f	typeref:typename:int
+sigma	chacha.c	/^static const char sigma[16] = "expand 32-byte k";$/;"	v	typeref:typename:const char[16]	file:
+sigma	openbsd-compat/chacha_private.h	/^static const char sigma[16] = "expand 32-byte k";$/;"	v	typeref:typename:const char[16]
+sigma0_256	openbsd-compat/sha2.c	/^#define sigma0_256(/;"	d	file:
+sigma0_512	openbsd-compat/sha2.c	/^#define sigma0_512(/;"	d	file:
+sigma1_256	openbsd-compat/sha2.c	/^#define sigma1_256(/;"	d	file:
+sigma1_512	openbsd-compat/sha2.c	/^#define sigma1_512(/;"	d	file:
+sign	kex.h	/^	int	(*sign)(struct ssh *, struct sshkey *, struct sshkey *,$/;"	m	struct:kex	typeref:typename:int (*)(struct ssh *,struct sshkey *,struct sshkey *,u_char **,size_t *,const u_char *,size_t,const char *)
+sign	regress/unittests/authopt/testdata/mktestdata.sh	/^sign() {$/;"	f
+sign_and_send_pubkey	sshconnect2.c	/^sign_and_send_pubkey(struct ssh *ssh, Identity *id)$/;"	f	typeref:typename:int	file:
+sign_one	ssh-keygen.c	/^sign_one(struct sshkey *signkey, const char *filename, int fd,$/;"	f	typeref:typename:int	file:
+signal_handler	clientloop.c	/^signal_handler(int sig)$/;"	f	typeref:typename:void	file:
+signature	sk-api.h	/^	uint8_t *signature;$/;"	m	struct:sk_enroll_response	typeref:typename:uint8_t *
+signature in SSH format	regress/unittests/sshsig/webauthn.html	/^<h2>signature in SSH format<\/h2>$/;"	i
+signature in SSH format (base64 encoded)	regress/unittests/sshsig/webauthn.html	/^<h2>signature in SSH format (base64 encoded)<\/h2>$/;"	i
+signature raw	regress/unittests/sshsig/webauthn.html	/^<h2>signature raw<\/h2>$/;"	i
+signature_key	sshkey.h	/^	struct sshkey	*signature_key;$/;"	m	struct:sshkey_cert	typeref:struct:sshkey *
+signature_len	sk-api.h	/^	size_t signature_len;$/;"	m	struct:sk_enroll_response	typeref:typename:size_t
+signature_test	regress/unittests/sshkey/test_sshkey.c	/^signature_test(struct sshkey *k, struct sshkey *bad, const char *sig_alg,$/;"	f	typeref:typename:void	file:
+signature_tests	regress/unittests/sshkey/test_sshkey.c	/^signature_tests(struct sshkey *k, struct sshkey *bad, const char *sig_alg)$/;"	f	typeref:typename:void	file:
+signature_type	sshkey.h	/^	char		*signature_type;$/;"	m	struct:sshkey_cert	typeref:typename:char *
+signo	openbsd-compat/readpassphrase.c	/^static volatile sig_atomic_t signo[_NSIG];$/;"	v	typeref:typename:volatile sig_atomic_t[]	file:
+sigonly	sshkey.c	/^	int sigonly;$/;"	m	struct:keytype	typeref:typename:int	file:
+sigprocmask	openbsd-compat/sigact.c	/^sigprocmask (int mode, sigset_t *mask, sigset_t *omask)$/;"	f	typeref:typename:int
+sigset_t	openbsd-compat/sigact.h	/^typedef unsigned long sigset_t;$/;"	t	typeref:typename:unsigned long
+sigsuspend	openbsd-compat/sigact.c	/^sigsuspend (sigset_t *mask)$/;"	f	typeref:typename:int
+sigterm_handler	serverloop.c	/^sigterm_handler(int sig)$/;"	f	typeref:typename:void	file:
+sigterm_handler	sshd.c	/^sigterm_handler(int sig)$/;"	f	typeref:typename:void	file:
+sin	regress/misc/fuzz-harness/kex_fuzz.cc	/^	struct sshbuf *sin, *cin; \/* input; setup per-test in do_kex_with_key *\/$/;"	m	struct:test_state	typeref:struct:sshbuf *	file:
+sin6_addr	openbsd-compat/fake-rfc2553.h	/^	struct in6_addr	sin6_addr;$/;"	m	struct:sockaddr_in6	typeref:struct:in6_addr
+sin6_family	openbsd-compat/fake-rfc2553.h	/^	unsigned short	sin6_family;$/;"	m	struct:sockaddr_in6	typeref:typename:unsigned short
+sin6_flowinfo	openbsd-compat/fake-rfc2553.h	/^	u_int32_t	sin6_flowinfo;$/;"	m	struct:sockaddr_in6	typeref:typename:u_int32_t
+sin6_port	openbsd-compat/fake-rfc2553.h	/^	u_int16_t	sin6_port;$/;"	m	struct:sockaddr_in6	typeref:typename:u_int16_t
+sin6_scope_id	openbsd-compat/fake-rfc2553.h	/^	u_int32_t	sin6_scope_id;$/;"	m	struct:sockaddr_in6	typeref:typename:u_int32_t
+single_connection	channels.h	/^	int	single_connection;$/;"	m	struct:Channel	typeref:typename:int
+single_connection	session.h	/^	int	single_connection;$/;"	m	struct:Session	typeref:typename:int
+sink	scp.c	/^sink(int argc, char **argv, const char *src)$/;"	f	typeref:typename:void
+sink_sftp	scp.c	/^sink_sftp(int argc, char *dst, const char *src, struct sftp_conn *conn)$/;"	f	typeref:typename:void
+size	dh.h	/^	int size;$/;"	m	struct:dhgroup	typeref:typename:int
+size	openbsd-compat/getrrsetbyname.c	/^	u_int16_t		size;$/;"	m	struct:dns_rr	typeref:typename:u_int16_t	file:
+size	sftp-common.h	/^	u_int64_t	size;$/;"	m	struct:Attrib	typeref:typename:u_int64_t
+size	ssh-pkcs11.c	/^	size_t		 size;$/;"	m	struct:ec_curve_info	typeref:typename:size_t	file:
+size	sshbuf.h	/^	size_t size;		\/* Last byte is buf->d + buf->size - 1 *\/$/;"	m	struct:sshbuf	typeref:typename:size_t
+size_t	defines.h	/^typedef unsigned int size_t;$/;"	t	typeref:typename:unsigned int
+sk-dummy.o	regress/misc/fuzz-harness/Makefile	/^sk-dummy.o: ..\/sk-dummy\/sk-dummy.c$/;"	t
+sk_api_version	regress/misc/sk-dummy/sk-dummy.c	/^# define sk_api_version	/;"	d	file:
+sk_api_version	regress/misc/sk-dummy/sk-dummy.c	/^sk_api_version(void)$/;"	f	typeref:typename:uint32_t
+sk_api_version	sk-usbhid.c	/^# define sk_api_version	/;"	d	file:
+sk_api_version	sk-usbhid.c	/^sk_api_version(void)$/;"	f	typeref:typename:uint32_t
+sk_api_version	ssh-sk.c	/^	uint32_t (*sk_api_version)(void);$/;"	m	struct:sshsk_provider	typeref:typename:uint32_t (*)(void)	file:
+sk_application	sshkey.h	/^	char	*sk_application;$/;"	m	struct:sshkey	typeref:typename:char *
+sk_close	sk-usbhid.c	/^sk_close(struct sk_usbhid *sk)$/;"	f	typeref:typename:void	file:
+sk_closev	sk-usbhid.c	/^sk_closev(struct sk_usbhid **skv, size_t nsk)$/;"	f	typeref:typename:void	file:
+sk_counter	sshkey.h	/^	uint32_t sk_counter;	\/* U2F signature counter *\/$/;"	m	struct:sshkey_sig_details	typeref:typename:uint32_t
+sk_enroll	regress/misc/sk-dummy/sk-dummy.c	/^# define sk_enroll	/;"	d	file:
+sk_enroll	regress/misc/sk-dummy/sk-dummy.c	/^sk_enroll(uint32_t alg, const uint8_t *challenge, size_t challenge_len,$/;"	f	typeref:typename:int
+sk_enroll	sk-usbhid.c	/^# define sk_enroll	/;"	d	file:
+sk_enroll	sk-usbhid.c	/^sk_enroll(uint32_t alg, const uint8_t *challenge, size_t challenge_len,$/;"	f	typeref:typename:int
+sk_enroll	ssh-sk.c	/^	int (*sk_enroll)(int alg, const uint8_t *challenge,$/;"	m	struct:sshsk_provider	typeref:typename:int (*)(int alg,const uint8_t * challenge,size_t challenge_len,const char * application,uint8_t flags,const char * pin,struct sk_option ** opts,struct sk_enroll_response ** enroll_response)	file:
+sk_enroll_response	sk-api.h	/^struct sk_enroll_response {$/;"	s
+sk_flags	sshkey.h	/^	uint8_t	sk_flags;$/;"	m	struct:sshkey	typeref:typename:uint8_t
+sk_flags	sshkey.h	/^	uint8_t sk_flags;	\/* U2F signature flags; see ssh-sk.h *\/$/;"	m	struct:sshkey_sig_details	typeref:typename:uint8_t
+sk_key_handle	sshkey.h	/^	struct sshbuf *sk_key_handle;$/;"	m	struct:sshkey	typeref:struct:sshbuf *
+sk_load_resident_keys	regress/misc/sk-dummy/sk-dummy.c	/^# define sk_load_resident_keys	/;"	d	file:
+sk_load_resident_keys	regress/misc/sk-dummy/sk-dummy.c	/^sk_load_resident_keys(const char *pin, struct sk_option **options,$/;"	f	typeref:typename:int
+sk_load_resident_keys	sk-usbhid.c	/^# define sk_load_resident_keys	/;"	d	file:
+sk_load_resident_keys	sk-usbhid.c	/^sk_load_resident_keys(const char *pin, struct sk_option **options,$/;"	f	typeref:typename:int
+sk_load_resident_keys	ssh-sk.c	/^	int (*sk_load_resident_keys)(const char *pin, struct sk_option **opts,$/;"	m	struct:sshsk_provider	typeref:typename:int (*)(const char * pin,struct sk_option ** opts,struct sk_resident_key *** rks,size_t * nrks)	file:
+sk_open	sk-usbhid.c	/^sk_open(const char *path)$/;"	f	typeref:struct:sk_usbhid *	file:
+sk_openv	sk-usbhid.c	/^sk_openv(const fido_dev_info_t *devlist, size_t ndevs, size_t *nopen)$/;"	f	typeref:struct:sk_usbhid **	file:
+sk_option	sk-api.h	/^struct sk_option {$/;"	s
+sk_probe	sk-usbhid.c	/^sk_probe(const char *application, const uint8_t *key_handle,$/;"	f	typeref:struct:sk_usbhid *	file:
+sk_provider	readconf.h	/^	char   *sk_provider; \/* Security key provider *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:char *
+sk_provider	servconf.h	/^	char   *sk_provider;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:char *
+sk_provider	ssh-agent.c	/^	char *sk_provider;$/;"	m	struct:identity	typeref:typename:char *	file:
+sk_provider	ssh-keygen.c	/^static char *sk_provider = NULL;$/;"	v	typeref:typename:char *	file:
+sk_reserved	sshkey.h	/^	struct sshbuf *sk_reserved;$/;"	m	struct:sshkey	typeref:struct:sshbuf *
+sk_resident_key	sk-api.h	/^struct sk_resident_key {$/;"	s
+sk_select_by_cred	sk-usbhid.c	/^sk_select_by_cred(const fido_dev_info_t *devlist, size_t ndevs,$/;"	f	typeref:struct:sk_usbhid *	file:
+sk_select_by_touch	sk-usbhid.c	/^sk_select_by_touch(const fido_dev_info_t *devlist, size_t ndevs)$/;"	f	typeref:struct:sk_usbhid *	file:
+sk_sign	regress/misc/sk-dummy/sk-dummy.c	/^# define sk_sign	/;"	d	file:
+sk_sign	regress/misc/sk-dummy/sk-dummy.c	/^sk_sign(uint32_t alg, const uint8_t *data, size_t datalen,$/;"	f	typeref:typename:int
+sk_sign	sk-usbhid.c	/^# define sk_sign	/;"	d	file:
+sk_sign	sk-usbhid.c	/^sk_sign(uint32_t alg, const uint8_t *data, size_t datalen,$/;"	f	typeref:typename:int
+sk_sign	ssh-sk.c	/^	int (*sk_sign)(int alg, const uint8_t *message, size_t message_len,$/;"	m	struct:sshsk_provider	typeref:typename:int (*)(int alg,const uint8_t * message,size_t message_len,const char * application,const uint8_t * key_handle,size_t key_handle_len,uint8_t flags,const char * pin,struct sk_option ** opts,struct sk_sign_response ** sign_response)	file:
+sk_sign_response	sk-api.h	/^struct sk_sign_response {$/;"	s
+sk_suffix	ssh-keygen.c	/^sk_suffix(const char *application, const uint8_t *user, size_t userlen)$/;"	f	typeref:typename:char *	file:
+sk_touch_begin	sk-usbhid.c	/^sk_touch_begin(struct sk_usbhid **skv, size_t nsk)$/;"	f	typeref:typename:int	file:
+sk_touch_poll	sk-usbhid.c	/^sk_touch_poll(struct sk_usbhid **skv, size_t nsk, int *touch, size_t *idx)$/;"	f	typeref:typename:int	file:
+sk_try	sk-usbhid.c	/^sk_try(const struct sk_usbhid *sk, const char *application,$/;"	f	typeref:typename:int	file:
+sk_usbhid	sk-usbhid.c	/^struct sk_usbhid {$/;"	s	file:
+skdebug	regress/misc/sk-dummy/sk-dummy.c	/^skdebug(const char *func, const char *fmt, ...)$/;"	f	typeref:typename:void	file:
+skdebug	sk-usbhid.c	/^skdebug(const char *func, const char *fmt, ...)$/;"	f	typeref:typename:void	file:
+skerr_to_ssherr	ssh-sk.c	/^skerr_to_ssherr(int skerr)$/;"	f	typeref:typename:int	file:
+skip	regress/test-exec.sh	/^skip ()$/;"	f
+skip_space	misc.c	/^skip_space(char **cpp)$/;"	f	typeref:typename:void
+slen	regress/unittests/test_helper/fuzz.c	/^	size_t slen;$/;"	m	struct:fuzz	typeref:typename:size_t	file:
+slot	sk-api.h	/^	size_t slot;$/;"	m	struct:sk_resident_key	typeref:typename:size_t
+slot_description	pkcs11.h	/^  unsigned char slot_description[64];$/;"	m	struct:ck_slot_info	typeref:typename:unsigned char[64]
+slot_description	pkcs11.h	/^#define slot_description /;"	d
+slot_id	pkcs11.h	/^  ck_slot_id_t slot_id;$/;"	m	struct:ck_session_info	typeref:typename:ck_slot_id_t
+slot_id	pkcs11.h	/^#define slot_id /;"	d
+slotidx	ssh-pkcs11.c	/^	CK_ULONG		slotidx;$/;"	m	struct:pkcs11_key	typeref:typename:CK_ULONG	file:
+slotinfo	ssh-pkcs11.c	/^	struct pkcs11_slotinfo	*slotinfo;$/;"	m	struct:pkcs11_provider	typeref:struct:pkcs11_slotinfo *	file:
+slotlist	ssh-pkcs11.c	/^	CK_SLOT_ID		*slotlist;$/;"	m	struct:pkcs11_provider	typeref:typename:CK_SLOT_ID *	file:
+slow	regress/unittests/test_helper/test_helper.c	/^static int slow = 0;$/;"	v	typeref:typename:int	file:
+small	sntrup761.c	/^typedef int8 small;$/;"	t	typeref:typename:int8	file:
+small_random32	crypto_api.h	/^#define small_random32(/;"	d
+smallbase	moduli.c	/^static u_int32_t *SmallSieve, smallbits, smallbase;$/;"	v	typeref:typename:u_int32_t	file:
+smallbits	moduli.c	/^static u_int32_t *SmallSieve, smallbits, smallbase;$/;"	v	typeref:typename:u_int32_t	file:
+smsgs	regress/misc/fuzz-harness/kex_fuzz.cc	/^	struct sshbuf *smsgs, *cmsgs; \/* output, for standalone mode *\/$/;"	m	struct:test_state	typeref:struct:sshbuf *	file:
+snmprintf	utf8.c	/^snmprintf(char *str, size_t sz, int *wp, const char *fmt, ...)$/;"	f	typeref:typename:int
+snprintf	openbsd-compat/bsd-snprintf.c	/^snprintf(char *str, size_t count, SNPRINTF_CONST char *fmt, ...)$/;"	f	typeref:typename:int
+sntrup761_client_key	kex.h	/^	u_char sntrup761_client_key[crypto_kem_sntrup761_SECRETKEYBYTES]; \/* KEM *\/$/;"	m	struct:kex	typeref:typename:u_char[]
+sock	channels.h	/^	int     sock;		\/* sock fd *\/$/;"	m	struct:Channel	typeref:typename:int
+sock_set_v6only	misc.c	/^sock_set_v6only(int s)$/;"	f	typeref:typename:void
+sock_type	ssh-agent.c	/^} sock_type;$/;"	t	typeref:enum:__anona16508200103	file:
+sockaddr_in6	openbsd-compat/fake-rfc2553.h	/^struct sockaddr_in6 {$/;"	s
+sockaddr_is_local	sshconnect.c	/^sockaddr_is_local(struct sockaddr *hostaddr)$/;"	f	typeref:typename:int	file:
+sockaddr_storage	openbsd-compat/fake-rfc2553.h	/^struct sockaddr_storage {$/;"	s
+sockaddr_un	defines.h	/^struct	sockaddr_un {$/;"	s
+socket_dir	ssh-agent.c	/^char socket_dir[PATH_MAX];$/;"	v	typeref:typename:char[]
+socket_entry	ssh-agent.c	/^typedef struct socket_entry {$/;"	s	file:
+socket_name	ssh-agent.c	/^char socket_name[PATH_MAX];$/;"	v	typeref:typename:char[]
+sockets	ssh-agent.c	/^SocketEntry *sockets = NULL;$/;"	v	typeref:typename:SocketEntry *
+sockets_alloc	ssh-agent.c	/^u_int sockets_alloc = 0;$/;"	v	typeref:typename:u_int
+socks_connect	regress/netcat.c	/^socks_connect(const char *host, const char *port,$/;"	f	typeref:typename:int
+solaris-contracts	configure.ac	/^	AC_ARG_WITH([solaris-contracts],$/;"	w
+solaris-privs	configure.ac	/^	AC_ARG_WITH([solaris-privs],$/;"	w
+solaris-projects	configure.ac	/^	AC_ARG_WITH([solaris-projects],$/;"	w
+solaris_basic_privset	openbsd-compat/port-solaris.c	/^solaris_basic_privset(void)$/;"	f	typeref:typename:priv_set_t *
+solaris_contract_post_fork_child	openbsd-compat/port-solaris.c	/^solaris_contract_post_fork_child()$/;"	f	typeref:typename:void
+solaris_contract_post_fork_parent	openbsd-compat/port-solaris.c	/^solaris_contract_post_fork_parent(pid_t pid)$/;"	f	typeref:typename:void
+solaris_contract_pre_fork	openbsd-compat/port-solaris.c	/^solaris_contract_pre_fork(void)$/;"	f	typeref:typename:void
+solaris_drop_privs_pinfo_net_fork_exec	openbsd-compat/port-solaris.c	/^solaris_drop_privs_pinfo_net_fork_exec(void)$/;"	f	typeref:typename:void
+solaris_drop_privs_root_pinfo_net	openbsd-compat/port-solaris.c	/^solaris_drop_privs_root_pinfo_net(void)$/;"	f	typeref:typename:void
+solaris_drop_privs_root_pinfo_net_exec	openbsd-compat/port-solaris.c	/^solaris_drop_privs_root_pinfo_net_exec(void)$/;"	f	typeref:typename:void
+solaris_set_default_project	openbsd-compat/port-solaris.c	/^solaris_set_default_project(struct passwd *pw)$/;"	f	typeref:typename:void
+sort_flag	sftp.c	/^int sort_flag;$/;"	v	typeref:typename:int
+sort_glob	sftp.c	/^glob_t *sort_glob;$/;"	v	typeref:typename:glob_t *
+source	scp.c	/^source(int argc, char **argv)$/;"	f	typeref:typename:void
+source_list	readconf.h	/^	char *source_list;$/;"	m	struct:allowed_cname	typeref:typename:char *
+source_sftp	scp.c	/^source_sftp(int argc, char *src, char *targ, struct sftp_conn *conn)$/;"	f	typeref:typename:void
+sp_pthread_t	auth-pam.c	/^typedef pid_t sp_pthread_t;$/;"	t	typeref:typename:pid_t	file:
+sp_pthread_t	auth-pam.c	/^typedef pthread_t sp_pthread_t;$/;"	t	typeref:typename:pthread_t	file:
+special_char_decode	ttymodes.c	/^special_char_decode(u_int c)$/;"	f	typeref:typename:cc_t	file:
+special_char_encode	ttymodes.c	/^special_char_encode(cc_t c)$/;"	f	typeref:typename:u_int	file:
+speed_to_baud	ttymodes.c	/^speed_to_baud(speed_t speed)$/;"	f	typeref:typename:int	file:
+square	smult_curve25519_ref.c	/^static void square(unsigned int out[32],const unsigned int a[32])$/;"	f	typeref:typename:void	file:
+squeeze	smult_curve25519_ref.c	/^static void squeeze(unsigned int a[32])$/;"	f	typeref:typename:void	file:
+srcdir	Makefile.in	/^srcdir=@srcdir@$/;"	m
+srcdir	contrib/cygwin/Makefile	/^srcdir=..\/..$/;"	m
+srcdir	openbsd-compat/Makefile.in	/^srcdir=@srcdir@$/;"	m
+srcdir	openbsd-compat/regress/Makefile.in	/^srcdir=@srcdir@$/;"	m
+srclimit_check_allow	srclimit.c	/^srclimit_check_allow(int sock, int id)$/;"	f	typeref:typename:int
+srclimit_done	srclimit.c	/^srclimit_done(int id)$/;"	f	typeref:typename:void
+srclimit_init	srclimit.c	/^srclimit_init(int max, int persource, int ipv4len, int ipv6len)$/;"	f	typeref:typename:void
+ss_family	defines.h	/^# define ss_family /;"	d
+ss_family	openbsd-compat/fake-rfc2553.h	/^# define ss_family /;"	d
+ss_sa	openbsd-compat/fake-rfc2553.h	/^	struct sockaddr	ss_sa;$/;"	m	struct:sockaddr_storage	typeref:struct:sockaddr
+ssh	packet.h	/^struct ssh {$/;"	s
+ssh$(EXEEXT)	Makefile.in	/^ssh$(EXEEXT): $(LIBCOMPAT) libssh.a $(SSHOBJS)$/;"	t
+ssh-add$(EXEEXT)	Makefile.in	/^ssh-add$(EXEEXT): $(LIBCOMPAT) libssh.a $(SSHADD_OBJS)$/;"	t
+ssh-agent$(EXEEXT)	Makefile.in	/^ssh-agent$(EXEEXT): $(LIBCOMPAT) libssh.a $(SSHAGENT_OBJS)$/;"	t
+ssh-keygen$(EXEEXT)	Makefile.in	/^ssh-keygen$(EXEEXT): $(LIBCOMPAT) libssh.a $(SSHKEYGEN_OBJS)$/;"	t
+ssh-keyscan$(EXEEXT)	Makefile.in	/^ssh-keyscan$(EXEEXT): $(LIBCOMPAT) libssh.a $(SSHKEYSCAN_OBJS)$/;"	t
+ssh-keysign$(EXEEXT)	Makefile.in	/^ssh-keysign$(EXEEXT): $(LIBCOMPAT) libssh.a $(SSHKEYSIGN_OBJS)$/;"	t
+ssh-pkcs11-helper$(EXEEXT)	Makefile.in	/^ssh-pkcs11-helper$(EXEEXT): $(LIBCOMPAT) libssh.a $(P11HELPER_OBJS)$/;"	t
+ssh-sk-helper$(EXEEXT)	Makefile.in	/^ssh-sk-helper$(EXEEXT): $(LIBCOMPAT) libssh.a $(SKHELPER_OBJS)$/;"	t
+ssh2_capable	ssh-keyscan.c	/^ssh2_capable(int remote_major, int remote_minor)$/;"	f	typeref:typename:int	file:
+ssh_add_hostkey	ssh_api.c	/^ssh_add_hostkey(struct ssh *ssh, struct sshkey *key)$/;"	f	typeref:typename:int
+ssh_add_identity_constrained	authfd.c	/^ssh_add_identity_constrained(int sock, struct sshkey *key,$/;"	f	typeref:typename:int
+ssh_agent_bind_hostkey	authfd.c	/^ssh_agent_bind_hostkey(int sock, const struct sshkey *key,$/;"	f	typeref:typename:int
+ssh_agent_has_key	authfd.c	/^ssh_agent_has_key(int sock, const struct sshkey *key)$/;"	f	typeref:typename:int
+ssh_agent_sign	authfd.c	/^ssh_agent_sign(int sock, const struct sshkey *key,$/;"	f	typeref:typename:int
+ssh_alloc_session_state	packet.c	/^ssh_alloc_session_state(void)$/;"	f	typeref:struct:ssh *
+ssh_askpass	readpass.c	/^ssh_askpass(char *askpass, const char *msg, const char *env_hint)$/;"	f	typeref:typename:char *	file:
+ssh_audit_event_t	audit.h	/^typedef enum ssh_audit_event_type ssh_audit_event_t;$/;"	t	typeref:enum:ssh_audit_event_type
+ssh_audit_event_type	audit.h	/^enum ssh_audit_event_type {$/;"	g
+ssh_bsm_tid	audit-bsm.c	/^static AuditInfoTermID ssh_bsm_tid;$/;"	v	typeref:typename:AuditInfoTermID	file:
+ssh_bzero	openbsd-compat/explicit_bzero.c	/^static void (* volatile ssh_bzero)(void *, size_t) = bzero;$/;"	v	typeref:typename:void (* volatile)(void *,size_t)	file:
+ssh_channels	channels.c	/^struct ssh_channels {$/;"	s	file:
+ssh_clear_newkeys	packet.c	/^ssh_clear_newkeys(struct ssh *ssh, int mode)$/;"	f	typeref:typename:void
+ssh_close_authentication_socket	authfd.c	/^ssh_close_authentication_socket(int sock)$/;"	f	typeref:typename:void
+ssh_compatible_openssl	openbsd-compat/openssl-compat.c	/^ssh_compatible_openssl(long headerver, long libver)$/;"	f	typeref:typename:int
+ssh_confirm_remote_forward	ssh.c	/^ssh_confirm_remote_forward(struct ssh *ssh, int type, u_int32_t seq, void *ctxt)$/;"	f	typeref:typename:void	file:
+ssh_conn_info	sshconnect.h	/^struct ssh_conn_info {$/;"	s
+ssh_conn_info_free	ssh.c	/^ssh_conn_info_free(struct ssh_conn_info *cinfo)$/;"	f	typeref:typename:void	file:
+ssh_connect	sshconnect.c	/^ssh_connect(struct ssh *ssh, const char *host, const char *host_arg,$/;"	f	typeref:typename:int
+ssh_connect_direct	sshconnect.c	/^ssh_connect_direct(struct ssh *ssh, const char *host, struct addrinfo *aitop,$/;"	f	typeref:typename:int	file:
+ssh_connection_hash	readconf.c	/^ssh_connection_hash(const char *thishost, const char *host, const char *portstr,$/;"	f	typeref:typename:char *
+ssh_create_socket	sshconnect.c	/^ssh_create_socket(struct addrinfo *ai)$/;"	f	typeref:typename:int	file:
+ssh_data_rekeying	regress/rekey.sh	/^ssh_data_rekeying()$/;"	f
+ssh_digest	digest-libc.c	/^struct ssh_digest {$/;"	s	file:
+ssh_digest	digest-openssl.c	/^struct ssh_digest {$/;"	s	file:
+ssh_digest_alg_by_name	digest-libc.c	/^ssh_digest_alg_by_name(const char *name)$/;"	f	typeref:typename:int
+ssh_digest_alg_by_name	digest-openssl.c	/^ssh_digest_alg_by_name(const char *name)$/;"	f	typeref:typename:int
+ssh_digest_alg_name	digest-libc.c	/^ssh_digest_alg_name(int alg)$/;"	f	typeref:typename:const char *
+ssh_digest_alg_name	digest-openssl.c	/^ssh_digest_alg_name(int alg)$/;"	f	typeref:typename:const char *
+ssh_digest_blocksize	digest-libc.c	/^ssh_digest_blocksize(struct ssh_digest_ctx *ctx)$/;"	f	typeref:typename:size_t
+ssh_digest_blocksize	digest-openssl.c	/^ssh_digest_blocksize(struct ssh_digest_ctx *ctx)$/;"	f	typeref:typename:size_t
+ssh_digest_buffer	digest-libc.c	/^ssh_digest_buffer(int alg, const struct sshbuf *b, u_char *d, size_t dlen)$/;"	f	typeref:typename:int
+ssh_digest_buffer	digest-openssl.c	/^ssh_digest_buffer(int alg, const struct sshbuf *b, u_char *d, size_t dlen)$/;"	f	typeref:typename:int
+ssh_digest_by_alg	digest-libc.c	/^ssh_digest_by_alg(int alg)$/;"	f	typeref:typename:const struct ssh_digest *	file:
+ssh_digest_by_alg	digest-openssl.c	/^ssh_digest_by_alg(int alg)$/;"	f	typeref:typename:const struct ssh_digest *	file:
+ssh_digest_bytes	digest-libc.c	/^ssh_digest_bytes(int alg)$/;"	f	typeref:typename:size_t
+ssh_digest_bytes	digest-openssl.c	/^ssh_digest_bytes(int alg)$/;"	f	typeref:typename:size_t
+ssh_digest_copy_state	digest-libc.c	/^ssh_digest_copy_state(struct ssh_digest_ctx *from, struct ssh_digest_ctx *to)$/;"	f	typeref:typename:int
+ssh_digest_copy_state	digest-openssl.c	/^ssh_digest_copy_state(struct ssh_digest_ctx *from, struct ssh_digest_ctx *to)$/;"	f	typeref:typename:int
+ssh_digest_ctx	digest-libc.c	/^struct ssh_digest_ctx {$/;"	s	file:
+ssh_digest_ctx	digest-openssl.c	/^struct ssh_digest_ctx {$/;"	s	file:
+ssh_digest_final	digest-libc.c	/^ssh_digest_final(struct ssh_digest_ctx *ctx, u_char *d, size_t dlen)$/;"	f	typeref:typename:int
+ssh_digest_final	digest-openssl.c	/^ssh_digest_final(struct ssh_digest_ctx *ctx, u_char *d, size_t dlen)$/;"	f	typeref:typename:int
+ssh_digest_free	digest-libc.c	/^ssh_digest_free(struct ssh_digest_ctx *ctx)$/;"	f	typeref:typename:void
+ssh_digest_free	digest-openssl.c	/^ssh_digest_free(struct ssh_digest_ctx *ctx)$/;"	f	typeref:typename:void
+ssh_digest_memory	digest-libc.c	/^ssh_digest_memory(int alg, const void *m, size_t mlen, u_char *d, size_t dlen)$/;"	f	typeref:typename:int
+ssh_digest_memory	digest-openssl.c	/^ssh_digest_memory(int alg, const void *m, size_t mlen, u_char *d, size_t dlen)$/;"	f	typeref:typename:int
+ssh_digest_start	digest-libc.c	/^ssh_digest_start(int alg)$/;"	f	typeref:struct:ssh_digest_ctx *
+ssh_digest_start	digest-openssl.c	/^ssh_digest_start(int alg)$/;"	f	typeref:struct:ssh_digest_ctx *
+ssh_digest_update	digest-libc.c	/^ssh_digest_update(struct ssh_digest_ctx *ctx, const void *m, size_t mlen)$/;"	f	typeref:typename:int
+ssh_digest_update	digest-openssl.c	/^ssh_digest_update(struct ssh_digest_ctx *ctx, const void *m, size_t mlen)$/;"	f	typeref:typename:int
+ssh_digest_update_buffer	digest-libc.c	/^ssh_digest_update_buffer(struct ssh_digest_ctx *ctx, const struct sshbuf *b)$/;"	f	typeref:typename:int
+ssh_digest_update_buffer	digest-openssl.c	/^ssh_digest_update_buffer(struct ssh_digest_ctx *ctx, const struct sshbuf *b)$/;"	f	typeref:typename:int
+ssh_dispatch_init	dispatch.c	/^ssh_dispatch_init(struct ssh *ssh, dispatch_fn *dflt)$/;"	f	typeref:typename:void
+ssh_dispatch_range	dispatch.c	/^ssh_dispatch_range(struct ssh *ssh, u_int from, u_int to, dispatch_fn *fn)$/;"	f	typeref:typename:void
+ssh_dispatch_run	dispatch.c	/^ssh_dispatch_run(struct ssh *ssh, int mode, volatile sig_atomic_t *done)$/;"	f	typeref:typename:int
+ssh_dispatch_run_fatal	dispatch.c	/^ssh_dispatch_run_fatal(struct ssh *ssh, int mode, volatile sig_atomic_t *done)$/;"	f	typeref:typename:void
+ssh_dispatch_set	dispatch.c	/^ssh_dispatch_set(struct ssh *ssh, int type, dispatch_fn *fn)$/;"	f	typeref:typename:void
+ssh_dss_sign	ssh-dss.c	/^ssh_dss_sign(const struct sshkey *key, u_char **sigp, size_t *lenp,$/;"	f	typeref:typename:int
+ssh_dss_verify	ssh-dss.c	/^ssh_dss_verify(const struct sshkey *key,$/;"	f	typeref:typename:int
+ssh_ecdsa_sign	ssh-ecdsa.c	/^ssh_ecdsa_sign(const struct sshkey *key, u_char **sigp, size_t *lenp,$/;"	f	typeref:typename:int
+ssh_ecdsa_sk_verify	ssh-ecdsa-sk.c	/^ssh_ecdsa_sk_verify(const struct sshkey *key,$/;"	f	typeref:typename:int
+ssh_ecdsa_verify	ssh-ecdsa.c	/^ssh_ecdsa_verify(const struct sshkey *key,$/;"	f	typeref:typename:int
+ssh_ed25519_sign	ssh-ed25519.c	/^ssh_ed25519_sign(const struct sshkey *key, u_char **sigp, size_t *lenp,$/;"	f	typeref:typename:int
+ssh_ed25519_sk_verify	ssh-ed25519-sk.c	/^ssh_ed25519_sk_verify(const struct sshkey *key,$/;"	f	typeref:typename:int
+ssh_ed25519_verify	ssh-ed25519.c	/^ssh_ed25519_verify(const struct sshkey *key,$/;"	f	typeref:typename:int
+ssh_err	ssherr.c	/^ssh_err(int n)$/;"	f	typeref:typename:const char *
+ssh_fetch_identitylist	authfd.c	/^ssh_fetch_identitylist(int sock, struct ssh_identitylist **idlp)$/;"	f	typeref:typename:int
+ssh_free	ssh_api.c	/^ssh_free(struct ssh *ssh)$/;"	f	typeref:typename:void
+ssh_free_identitylist	authfd.c	/^ssh_free_identitylist(struct ssh_identitylist *idl)$/;"	f	typeref:typename:void
+ssh_gai_strerror	misc.c	/^ssh_gai_strerror(int gaierr)$/;"	f	typeref:typename:const char *
+ssh_get_app_data	ssh_api.c	/^ssh_get_app_data(struct ssh *ssh)$/;"	f	typeref:typename:void *
+ssh_get_authentication_socket	authfd.c	/^ssh_get_authentication_socket(int *fdp)$/;"	f	typeref:typename:int
+ssh_get_authentication_socket_path	authfd.c	/^ssh_get_authentication_socket_path(const char *authsocket, int *fdp)$/;"	f	typeref:typename:int
+ssh_get_progname	openbsd-compat/bsd-misc.c	/^char *ssh_get_progname(char *argv0)$/;"	f	typeref:typename:char *
+ssh_gssapi_accept_ctx	gss-serv.c	/^ssh_gssapi_accept_ctx(Gssctxt *ctx, gss_buffer_desc *recv_tok,$/;"	f	typeref:typename:OM_uint32
+ssh_gssapi_acquire_cred	gss-serv.c	/^ssh_gssapi_acquire_cred(Gssctxt *ctx)$/;"	f	typeref:typename:OM_uint32	file:
+ssh_gssapi_build_ctx	gss-genr.c	/^ssh_gssapi_build_ctx(Gssctxt **ctx)$/;"	f	typeref:typename:void
+ssh_gssapi_buildmic	gss-genr.c	/^ssh_gssapi_buildmic(struct sshbuf *b, const char *user, const char *service,$/;"	f	typeref:typename:void
+ssh_gssapi_ccache	ssh-gss.h	/^} ssh_gssapi_ccache;$/;"	t	typeref:struct:__anon1dbf9ce30108
+ssh_gssapi_check_mechanism	gss-genr.c	/^ssh_gssapi_check_mechanism(Gssctxt **ctx, gss_OID oid, const char *host)$/;"	f	typeref:typename:int
+ssh_gssapi_check_oid	gss-genr.c	/^ssh_gssapi_check_oid(Gssctxt *ctx, void *data, size_t len)$/;"	f	typeref:typename:int
+ssh_gssapi_checkmic	gss-serv.c	/^ssh_gssapi_checkmic(Gssctxt *ctx, gss_buffer_t gssbuf, gss_buffer_t gssmic)$/;"	f	typeref:typename:OM_uint32
+ssh_gssapi_cleanup_creds	gss-serv.c	/^ssh_gssapi_cleanup_creds(void)$/;"	f	typeref:typename:void
+ssh_gssapi_client	ssh-gss.h	/^} ssh_gssapi_client;$/;"	t	typeref:struct:__anon1dbf9ce30208
+ssh_gssapi_delete_ctx	gss-genr.c	/^ssh_gssapi_delete_ctx(Gssctxt **ctx)$/;"	f	typeref:typename:void
+ssh_gssapi_displayname	gss-serv.c	/^const char *ssh_gssapi_displayname(void)$/;"	f	typeref:typename:const char *
+ssh_gssapi_do_child	gss-serv.c	/^ssh_gssapi_do_child(char ***envp, u_int *envsizep)$/;"	f	typeref:typename:void
+ssh_gssapi_error	gss-genr.c	/^ssh_gssapi_error(Gssctxt *ctxt)$/;"	f	typeref:typename:void
+ssh_gssapi_get_buffer_desc	gss-genr.c	/^ssh_gssapi_get_buffer_desc(struct sshbuf *b, gss_buffer_desc *g)$/;"	f	typeref:typename:int
+ssh_gssapi_getclient	gss-serv.c	/^ssh_gssapi_getclient(Gssctxt *ctx, ssh_gssapi_client *client)$/;"	f	typeref:typename:OM_uint32
+ssh_gssapi_import_name	gss-genr.c	/^ssh_gssapi_import_name(Gssctxt *ctx, const char *host)$/;"	f	typeref:typename:OM_uint32
+ssh_gssapi_init_ctx	gss-genr.c	/^ssh_gssapi_init_ctx(Gssctxt *ctx, int deleg_creds, gss_buffer_desc *recv_tok,$/;"	f	typeref:typename:OM_uint32
+ssh_gssapi_krb5_init	gss-serv-krb5.c	/^ssh_gssapi_krb5_init(void)$/;"	f	typeref:typename:int	file:
+ssh_gssapi_krb5_storecreds	gss-serv-krb5.c	/^ssh_gssapi_krb5_storecreds(ssh_gssapi_client *client)$/;"	f	typeref:typename:void	file:
+ssh_gssapi_krb5_userok	gss-serv-krb5.c	/^ssh_gssapi_krb5_userok(ssh_gssapi_client *client, char *name)$/;"	f	typeref:typename:int	file:
+ssh_gssapi_last_error	gss-genr.c	/^ssh_gssapi_last_error(Gssctxt *ctxt, OM_uint32 *major_status,$/;"	f	typeref:typename:char *
+ssh_gssapi_mech	ssh-gss.h	/^} ssh_gssapi_mech;$/;"	t	typeref:struct:ssh_gssapi_mech_struct
+ssh_gssapi_mech_struct	ssh-gss.h	/^typedef struct ssh_gssapi_mech_struct {$/;"	s
+ssh_gssapi_parse_ename	gss-serv.c	/^ssh_gssapi_parse_ename(Gssctxt *ctx, gss_buffer_t ename, gss_buffer_t name)$/;"	f	typeref:typename:OM_uint32	file:
+ssh_gssapi_prepare_supported_oids	gss-serv.c	/^ssh_gssapi_prepare_supported_oids(void)$/;"	f	typeref:typename:void
+ssh_gssapi_server_ctx	gss-serv.c	/^ssh_gssapi_server_ctx(Gssctxt **ctx, gss_OID oid)$/;"	f	typeref:typename:OM_uint32
+ssh_gssapi_set_oid	gss-genr.c	/^ssh_gssapi_set_oid(Gssctxt *ctx, gss_OID oid)$/;"	f	typeref:typename:void
+ssh_gssapi_set_oid_data	gss-genr.c	/^ssh_gssapi_set_oid_data(Gssctxt *ctx, void *data, size_t len)$/;"	f	typeref:typename:void
+ssh_gssapi_sign	gss-genr.c	/^ssh_gssapi_sign(Gssctxt *ctx, gss_buffer_t buffer, gss_buffer_t hash)$/;"	f	typeref:typename:OM_uint32
+ssh_gssapi_storecreds	gss-serv.c	/^ssh_gssapi_storecreds(void)$/;"	f	typeref:typename:void
+ssh_gssapi_supported_oids	gss-serv.c	/^ssh_gssapi_supported_oids(gss_OID_set *oidset)$/;"	f	typeref:typename:void
+ssh_gssapi_test_oid_supported	gss-serv.c	/^ssh_gssapi_test_oid_supported(OM_uint32 *ms, gss_OID member, int *present)$/;"	f	typeref:typename:OM_uint32
+ssh_gssapi_userok	gss-serv.c	/^ssh_gssapi_userok(char *user)$/;"	f	typeref:typename:int
+ssh_hmac_bytes	hmac.c	/^ssh_hmac_bytes(int alg)$/;"	f	typeref:typename:size_t
+ssh_hmac_ctx	hmac.c	/^struct ssh_hmac_ctx {$/;"	s	file:
+ssh_hmac_final	hmac.c	/^ssh_hmac_final(struct ssh_hmac_ctx *ctx, u_char *d, size_t dlen)$/;"	f	typeref:typename:int
+ssh_hmac_free	hmac.c	/^ssh_hmac_free(struct ssh_hmac_ctx *ctx)$/;"	f	typeref:typename:void
+ssh_hmac_init	hmac.c	/^ssh_hmac_init(struct ssh_hmac_ctx *ctx, const void *key, size_t klen)$/;"	f	typeref:typename:int
+ssh_hmac_start	hmac.c	/^ssh_hmac_start(int alg)$/;"	f	typeref:struct:ssh_hmac_ctx *
+ssh_hmac_update	hmac.c	/^ssh_hmac_update(struct ssh_hmac_ctx *ctx, const void *m, size_t mlen)$/;"	f	typeref:typename:int
+ssh_hmac_update_buffer	hmac.c	/^ssh_hmac_update_buffer(struct ssh_hmac_ctx *ctx, const struct sshbuf *b)$/;"	f	typeref:typename:int
+ssh_identitylist	authfd.h	/^struct ssh_identitylist {$/;"	s
+ssh_init	ssh_api.c	/^ssh_init(struct ssh **sshp, int is_server, struct kex_params *kex_params)$/;"	f	typeref:typename:int
+ssh_init_forward_permissions	ssh.c	/^ssh_init_forward_permissions(struct ssh *ssh, const char *what, char **opens,$/;"	f	typeref:typename:void	file:
+ssh_init_forwarding	ssh.c	/^ssh_init_forwarding(struct ssh *ssh, char **ifname)$/;"	f	typeref:typename:void	file:
+ssh_init_stdio_forwarding	ssh.c	/^ssh_init_stdio_forwarding(struct ssh *ssh)$/;"	f	typeref:typename:void	file:
+ssh_input_append	ssh_api.c	/^ssh_input_append(struct ssh *ssh, const u_char *data, size_t len)$/;"	f	typeref:typename:int
+ssh_input_space	ssh_api.c	/^ssh_input_space(struct ssh *ssh, size_t len)$/;"	f	typeref:typename:int
+ssh_kex2	sshconnect2.c	/^ssh_kex2(struct ssh *ssh, char *host, struct sockaddr *hostaddr, u_short port,$/;"	f	typeref:typename:void
+ssh_keysign	sshconnect2.c	/^ssh_keysign(struct ssh *ssh, struct sshkey *key, u_char **sigp, size_t *lenp,$/;"	f	typeref:typename:int	file:
+ssh_kill_proxy_command	sshconnect.c	/^ssh_kill_proxy_command(void)$/;"	f	typeref:typename:void
+ssh_krb5_cc_gen	auth-krb5.c	/^ssh_krb5_cc_gen(krb5_context ctx, krb5_ccache *ccache) {$/;"	f	typeref:typename:krb5_error_code
+ssh_krl	krl.c	/^struct ssh_krl {$/;"	s	file:
+ssh_krl_check_key	krl.c	/^ssh_krl_check_key(struct ssh_krl *krl, const struct sshkey *key)$/;"	f	typeref:typename:int
+ssh_krl_file_contains_key	krl.c	/^ssh_krl_file_contains_key(const char *path, const struct sshkey *key)$/;"	f	typeref:typename:int
+ssh_krl_free	krl.c	/^ssh_krl_free(struct ssh_krl *krl)$/;"	f	typeref:typename:void
+ssh_krl_from_blob	krl.c	/^ssh_krl_from_blob(struct sshbuf *buf, struct ssh_krl **krlp,$/;"	f	typeref:typename:int
+ssh_krl_init	krl.c	/^ssh_krl_init(void)$/;"	f	typeref:struct:ssh_krl *
+ssh_krl_revoke_cert_by_key_id	krl.c	/^ssh_krl_revoke_cert_by_key_id(struct ssh_krl *krl, const struct sshkey *ca_key,$/;"	f	typeref:typename:int
+ssh_krl_revoke_cert_by_serial	krl.c	/^ssh_krl_revoke_cert_by_serial(struct ssh_krl *krl, const struct sshkey *ca_key,$/;"	f	typeref:typename:int
+ssh_krl_revoke_cert_by_serial_range	krl.c	/^ssh_krl_revoke_cert_by_serial_range(struct ssh_krl *krl,$/;"	f	typeref:typename:int
+ssh_krl_revoke_key	krl.c	/^ssh_krl_revoke_key(struct ssh_krl *krl, const struct sshkey *key)$/;"	f	typeref:typename:int
+ssh_krl_revoke_key_explicit	krl.c	/^ssh_krl_revoke_key_explicit(struct ssh_krl *krl, const struct sshkey *key)$/;"	f	typeref:typename:int
+ssh_krl_revoke_key_sha1	krl.c	/^ssh_krl_revoke_key_sha1(struct ssh_krl *krl, const u_char *p, size_t len)$/;"	f	typeref:typename:int
+ssh_krl_revoke_key_sha256	krl.c	/^ssh_krl_revoke_key_sha256(struct ssh_krl *krl, const u_char *p, size_t len)$/;"	f	typeref:typename:int
+ssh_krl_set_comment	krl.c	/^ssh_krl_set_comment(struct ssh_krl *krl, const char *comment)$/;"	f	typeref:typename:int
+ssh_krl_set_version	krl.c	/^ssh_krl_set_version(struct ssh_krl *krl, u_int64_t version)$/;"	f	typeref:typename:void
+ssh_krl_to_blob	krl.c	/^ssh_krl_to_blob(struct ssh_krl *krl, struct sshbuf *buf,$/;"	f	typeref:typename:int
+ssh_libcrypto_init	openbsd-compat/openssl-compat.c	/^ssh_libcrypto_init(void)$/;"	f	typeref:typename:void
+ssh_local_cmd	sshconnect.c	/^ssh_local_cmd(const char *args)$/;"	f	typeref:typename:int
+ssh_local_ipaddr	packet.c	/^ssh_local_ipaddr(struct ssh *ssh)$/;"	f	typeref:typename:const char *
+ssh_local_port	packet.c	/^ssh_local_port(struct ssh *ssh)$/;"	f	typeref:typename:int
+ssh_lock_agent	authfd.c	/^ssh_lock_agent(int sock, int lock, const char *password)$/;"	f	typeref:typename:int
+ssh_login	sshconnect.c	/^ssh_login(struct ssh *ssh, Sensitive *sensitive, const char *orighost,$/;"	f	typeref:typename:void
+ssh_msg_recv	msg.c	/^ssh_msg_recv(int fd, struct sshbuf *m)$/;"	f	typeref:typename:int
+ssh_msg_send	msg.c	/^ssh_msg_send(int fd, u_char type, struct sshbuf *m)$/;"	f	typeref:typename:int
+ssh_output_consume	ssh_api.c	/^ssh_output_consume(struct ssh *ssh, size_t len)$/;"	f	typeref:typename:int
+ssh_output_ptr	ssh_api.c	/^ssh_output_ptr(struct ssh *ssh, size_t *len)$/;"	f	typeref:typename:const u_char *
+ssh_output_space	ssh_api.c	/^ssh_output_space(struct ssh *ssh, size_t len)$/;"	f	typeref:typename:int
+ssh_packet_check_rekey	packet.c	/^ssh_packet_check_rekey(struct ssh *ssh)$/;"	f	typeref:typename:int
+ssh_packet_clear_keys	packet.c	/^ssh_packet_clear_keys(struct ssh *ssh)$/;"	f	typeref:typename:void
+ssh_packet_close	packet.c	/^ssh_packet_close(struct ssh *ssh)$/;"	f	typeref:typename:void
+ssh_packet_close_internal	packet.c	/^ssh_packet_close_internal(struct ssh *ssh, int do_close)$/;"	f	typeref:typename:void	file:
+ssh_packet_connection_af	packet.c	/^ssh_packet_connection_af(struct ssh *ssh)$/;"	f	typeref:typename:int
+ssh_packet_connection_is_on_socket	packet.c	/^ssh_packet_connection_is_on_socket(struct ssh *ssh)$/;"	f	typeref:typename:int
+ssh_packet_disconnect	packet.c	/^ssh_packet_disconnect(struct ssh *ssh, const char *fmt,...)$/;"	f	typeref:typename:void
+ssh_packet_enable_delayed_compress	packet.c	/^ssh_packet_enable_delayed_compress(struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+ssh_packet_get_bytes	packet.c	/^ssh_packet_get_bytes(struct ssh *ssh, u_int64_t *ibytes, u_int64_t *obytes)$/;"	f	typeref:typename:void
+ssh_packet_get_connection_in	packet.c	/^ssh_packet_get_connection_in(struct ssh *ssh)$/;"	f	typeref:typename:int
+ssh_packet_get_connection_out	packet.c	/^ssh_packet_get_connection_out(struct ssh *ssh)$/;"	f	typeref:typename:int
+ssh_packet_get_input	packet.c	/^ssh_packet_get_input(struct ssh *ssh)$/;"	f	typeref:typename:void *
+ssh_packet_get_maxsize	packet.c	/^ssh_packet_get_maxsize(struct ssh *ssh)$/;"	f	typeref:typename:u_int
+ssh_packet_get_mux	packet.c	/^ssh_packet_get_mux(struct ssh *ssh)$/;"	f	typeref:typename:int
+ssh_packet_get_output	packet.c	/^ssh_packet_get_output(struct ssh *ssh)$/;"	f	typeref:typename:void *
+ssh_packet_get_protocol_flags	packet.c	/^ssh_packet_get_protocol_flags(struct ssh *ssh)$/;"	f	typeref:typename:u_int
+ssh_packet_get_rekey_timeout	packet.c	/^ssh_packet_get_rekey_timeout(struct ssh *ssh)$/;"	f	typeref:typename:time_t
+ssh_packet_get_state	packet.c	/^ssh_packet_get_state(struct ssh *ssh, struct sshbuf *m)$/;"	f	typeref:typename:int
+ssh_packet_have_data_to_write	packet.c	/^ssh_packet_have_data_to_write(struct ssh *ssh)$/;"	f	typeref:typename:int
+ssh_packet_hook_fn	packet.h	/^typedef int (ssh_packet_hook_fn)(struct ssh *, struct sshbuf *,$/;"	t	typeref:typename:int ()(struct ssh *,struct sshbuf *,u_char *,void *)
+ssh_packet_inc_alive_timeouts	packet.c	/^ssh_packet_inc_alive_timeouts(struct ssh *ssh)$/;"	f	typeref:typename:int
+ssh_packet_init_compression	packet.c	/^ssh_packet_init_compression(struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+ssh_packet_is_interactive	packet.c	/^ssh_packet_is_interactive(struct ssh *ssh)$/;"	f	typeref:typename:int
+ssh_packet_is_rekeying	packet.c	/^ssh_packet_is_rekeying(struct ssh *ssh)$/;"	f	typeref:typename:int
+ssh_packet_log_type	packet.c	/^ssh_packet_log_type(u_char type)$/;"	f	typeref:typename:int
+ssh_packet_need_rekeying	packet.c	/^ssh_packet_need_rekeying(struct ssh *ssh, u_int outbound_packet_len)$/;"	f	typeref:typename:int	file:
+ssh_packet_next	ssh_api.c	/^ssh_packet_next(struct ssh *ssh, u_char *typep)$/;"	f	typeref:typename:int
+ssh_packet_not_very_much_data_to_write	packet.c	/^ssh_packet_not_very_much_data_to_write(struct ssh *ssh)$/;"	f	typeref:typename:int
+ssh_packet_payload	ssh_api.c	/^ssh_packet_payload(struct ssh *ssh, size_t *lenp)$/;"	f	typeref:typename:const u_char *
+ssh_packet_process_incoming	packet.c	/^ssh_packet_process_incoming(struct ssh *ssh, const char *buf, u_int len)$/;"	f	typeref:typename:int
+ssh_packet_process_read	packet.c	/^ssh_packet_process_read(struct ssh *ssh, int fd)$/;"	f	typeref:typename:int
+ssh_packet_put	ssh_api.c	/^ssh_packet_put(struct ssh *ssh, int type, const u_char *data, size_t len)$/;"	f	typeref:typename:int
+ssh_packet_rdomain_in	packet.c	/^ssh_packet_rdomain_in(struct ssh *ssh)$/;"	f	typeref:typename:const char *
+ssh_packet_read	packet.c	/^ssh_packet_read(struct ssh *ssh)$/;"	f	typeref:typename:int
+ssh_packet_read_expect	packet.c	/^ssh_packet_read_expect(struct ssh *ssh, u_int expected_type)$/;"	f	typeref:typename:int
+ssh_packet_read_poll2	packet.c	/^ssh_packet_read_poll2(struct ssh *ssh, u_char *typep, u_int32_t *seqnr_p)$/;"	f	typeref:typename:int
+ssh_packet_read_poll2_mux	packet.c	/^ssh_packet_read_poll2_mux(struct ssh *ssh, u_char *typep, u_int32_t *seqnr_p)$/;"	f	typeref:typename:int	file:
+ssh_packet_read_poll_seqnr	packet.c	/^ssh_packet_read_poll_seqnr(struct ssh *ssh, u_char *typep, u_int32_t *seqnr_p)$/;"	f	typeref:typename:int
+ssh_packet_read_seqnr	packet.c	/^ssh_packet_read_seqnr(struct ssh *ssh, u_char *typep, u_int32_t *seqnr_p)$/;"	f	typeref:typename:int
+ssh_packet_remaining	packet.c	/^ssh_packet_remaining(struct ssh *ssh)$/;"	f	typeref:typename:int
+ssh_packet_send2	packet.c	/^ssh_packet_send2(struct ssh *ssh)$/;"	f	typeref:typename:int
+ssh_packet_send2_wrapped	packet.c	/^ssh_packet_send2_wrapped(struct ssh *ssh)$/;"	f	typeref:typename:int
+ssh_packet_send_debug	packet.c	/^ssh_packet_send_debug(struct ssh *ssh, const char *fmt,...)$/;"	f	typeref:typename:void
+ssh_packet_send_mux	packet.c	/^ssh_packet_send_mux(struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+ssh_packet_set_alive_timeouts	packet.c	/^ssh_packet_set_alive_timeouts(struct ssh *ssh, int ka)$/;"	f	typeref:typename:void
+ssh_packet_set_authenticated	packet.c	/^ssh_packet_set_authenticated(struct ssh *ssh)$/;"	f	typeref:typename:void
+ssh_packet_set_connection	packet.c	/^ssh_packet_set_connection(struct ssh *ssh, int fd_in, int fd_out)$/;"	f	typeref:struct:ssh *
+ssh_packet_set_input_hook	packet.c	/^ssh_packet_set_input_hook(struct ssh *ssh, ssh_packet_hook_fn *hook, void *ctx)$/;"	f	typeref:typename:void
+ssh_packet_set_interactive	packet.c	/^ssh_packet_set_interactive(struct ssh *ssh, int interactive, int qos_interactive, int qos_bulk)$/;"	f	typeref:typename:void
+ssh_packet_set_log_preamble	packet.c	/^ssh_packet_set_log_preamble(struct ssh *ssh, const char *fmt, ...)$/;"	f	typeref:typename:int
+ssh_packet_set_maxsize	packet.c	/^ssh_packet_set_maxsize(struct ssh *ssh, u_int s)$/;"	f	typeref:typename:int
+ssh_packet_set_mux	packet.c	/^ssh_packet_set_mux(struct ssh *ssh)$/;"	f	typeref:typename:void
+ssh_packet_set_nonblocking	packet.c	/^ssh_packet_set_nonblocking(struct ssh *ssh)$/;"	f	typeref:typename:void
+ssh_packet_set_postauth	packet.c	/^ssh_packet_set_postauth(struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+ssh_packet_set_protocol_flags	packet.c	/^ssh_packet_set_protocol_flags(struct ssh *ssh, u_int protocol_flags)$/;"	f	typeref:typename:void
+ssh_packet_set_rekey_limits	packet.c	/^ssh_packet_set_rekey_limits(struct ssh *ssh, u_int64_t bytes, u_int32_t seconds)$/;"	f	typeref:typename:void
+ssh_packet_set_server	packet.c	/^ssh_packet_set_server(struct ssh *ssh)$/;"	f	typeref:typename:void
+ssh_packet_set_state	packet.c	/^ssh_packet_set_state(struct ssh *ssh, struct sshbuf *m)$/;"	f	typeref:typename:int
+ssh_packet_set_timeout	packet.c	/^ssh_packet_set_timeout(struct ssh *ssh, int timeout, int count)$/;"	f	typeref:typename:void
+ssh_packet_set_tos	packet.c	/^ssh_packet_set_tos(struct ssh *ssh, int tos)$/;"	f	typeref:typename:void
+ssh_packet_start_discard	packet.c	/^ssh_packet_start_discard(struct ssh *ssh, struct sshenc *enc,$/;"	f	typeref:typename:int	file:
+ssh_packet_stop_discard	packet.c	/^ssh_packet_stop_discard(struct ssh *ssh)$/;"	f	typeref:typename:int
+ssh_packet_type_is_kex	packet.c	/^ssh_packet_type_is_kex(u_char type)$/;"	f	typeref:typename:int	file:
+ssh_packet_write_poll	packet.c	/^ssh_packet_write_poll(struct ssh *ssh)$/;"	f	typeref:typename:int
+ssh_packet_write_wait	packet.c	/^ssh_packet_write_wait(struct ssh *ssh)$/;"	f	typeref:typename:int
+ssh_port	ssh-keyscan.c	/^int ssh_port = SSH_DEFAULT_PORT;$/;"	v	typeref:typename:int
+ssh_program	scp.c	/^char *ssh_program = _PATH_SSH_PROGRAM;$/;"	v	typeref:typename:char *
+ssh_proxy_connect	sshconnect.c	/^ssh_proxy_connect(struct ssh *ssh, const char *host, const char *host_arg,$/;"	f	typeref:typename:int	file:
+ssh_proxy_fdpass_connect	sshconnect.c	/^ssh_proxy_fdpass_connect(struct ssh *ssh, const char *host,$/;"	f	typeref:typename:int	file:
+ssh_remote_ipaddr	packet.c	/^ssh_remote_ipaddr(struct ssh *ssh)$/;"	f	typeref:typename:const char *
+ssh_remote_port	packet.c	/^ssh_remote_port(struct ssh *ssh)$/;"	f	typeref:typename:int
+ssh_remove_all_identities	authfd.c	/^ssh_remove_all_identities(int sock, int version)$/;"	f	typeref:typename:int
+ssh_remove_identity	authfd.c	/^ssh_remove_identity(int sock, const struct sshkey *key)$/;"	f	typeref:typename:int
+ssh_request_reply	authfd.c	/^ssh_request_reply(int sock, struct sshbuf *request, struct sshbuf *reply)$/;"	f	typeref:typename:int	file:
+ssh_request_reply_decode	authfd.c	/^ssh_request_reply_decode(int sock, struct sshbuf *request)$/;"	f	typeref:typename:int	file:
+ssh_rijndael_cbc	cipher-aes.c	/^ssh_rijndael_cbc(EVP_CIPHER_CTX *ctx, u_char *dest, const u_char *src,$/;"	f	typeref:typename:int	file:
+ssh_rijndael_cleanup	cipher-aes.c	/^ssh_rijndael_cleanup(EVP_CIPHER_CTX *ctx)$/;"	f	typeref:typename:int	file:
+ssh_rijndael_ctx	cipher-aes.c	/^struct ssh_rijndael_ctx$/;"	s	file:
+ssh_rijndael_init	cipher-aes.c	/^ssh_rijndael_init(EVP_CIPHER_CTX *ctx, const u_char *key, const u_char *iv,$/;"	f	typeref:typename:int	file:
+ssh_rijndael_iv	cipher-aes.c	/^ssh_rijndael_iv(EVP_CIPHER_CTX *evp, int doset, u_char * iv, u_int len)$/;"	f	typeref:typename:void
+ssh_rsa_complete_crt_parameters	ssh-rsa.c	/^ssh_rsa_complete_crt_parameters(struct sshkey *key, const BIGNUM *iqmp)$/;"	f	typeref:typename:int
+ssh_rsa_sign	ssh-rsa.c	/^ssh_rsa_sign(const struct sshkey *key, u_char **sigp, size_t *lenp,$/;"	f	typeref:typename:int
+ssh_rsa_verify	ssh-rsa.c	/^ssh_rsa_verify(const struct sshkey *key,$/;"	f	typeref:typename:int
+ssh_sandbox	sandbox-capsicum.c	/^struct ssh_sandbox {$/;"	s	file:
+ssh_sandbox	sandbox-darwin.c	/^struct ssh_sandbox {$/;"	s	file:
+ssh_sandbox	sandbox-null.c	/^struct ssh_sandbox {$/;"	s	file:
+ssh_sandbox	sandbox-pledge.c	/^struct ssh_sandbox {$/;"	s	file:
+ssh_sandbox	sandbox-rlimit.c	/^struct ssh_sandbox {$/;"	s	file:
+ssh_sandbox	sandbox-seccomp-filter.c	/^struct ssh_sandbox {$/;"	s	file:
+ssh_sandbox	sandbox-solaris.c	/^struct ssh_sandbox {$/;"	s	file:
+ssh_sandbox	sandbox-systrace.c	/^struct ssh_sandbox {$/;"	s	file:
+ssh_sandbox_child	sandbox-capsicum.c	/^ssh_sandbox_child(struct ssh_sandbox *box)$/;"	f	typeref:typename:void
+ssh_sandbox_child	sandbox-darwin.c	/^ssh_sandbox_child(struct ssh_sandbox *box)$/;"	f	typeref:typename:void
+ssh_sandbox_child	sandbox-null.c	/^ssh_sandbox_child(struct ssh_sandbox *box)$/;"	f	typeref:typename:void
+ssh_sandbox_child	sandbox-pledge.c	/^ssh_sandbox_child(struct ssh_sandbox *box)$/;"	f	typeref:typename:void
+ssh_sandbox_child	sandbox-rlimit.c	/^ssh_sandbox_child(struct ssh_sandbox *box)$/;"	f	typeref:typename:void
+ssh_sandbox_child	sandbox-seccomp-filter.c	/^ssh_sandbox_child(struct ssh_sandbox *box)$/;"	f	typeref:typename:void
+ssh_sandbox_child	sandbox-solaris.c	/^ssh_sandbox_child(struct ssh_sandbox *box)$/;"	f	typeref:typename:void
+ssh_sandbox_child	sandbox-systrace.c	/^ssh_sandbox_child(struct ssh_sandbox *box)$/;"	f	typeref:typename:void
+ssh_sandbox_child_debugging	sandbox-seccomp-filter.c	/^ssh_sandbox_child_debugging(void)$/;"	f	typeref:typename:void	file:
+ssh_sandbox_init	sandbox-capsicum.c	/^ssh_sandbox_init(struct monitor *monitor)$/;"	f	typeref:struct:ssh_sandbox *
+ssh_sandbox_init	sandbox-darwin.c	/^ssh_sandbox_init(struct monitor *monitor)$/;"	f	typeref:struct:ssh_sandbox *
+ssh_sandbox_init	sandbox-null.c	/^ssh_sandbox_init(struct monitor *monitor)$/;"	f	typeref:struct:ssh_sandbox *
+ssh_sandbox_init	sandbox-pledge.c	/^ssh_sandbox_init(struct monitor *m)$/;"	f	typeref:struct:ssh_sandbox *
+ssh_sandbox_init	sandbox-rlimit.c	/^ssh_sandbox_init(struct monitor *monitor)$/;"	f	typeref:struct:ssh_sandbox *
+ssh_sandbox_init	sandbox-seccomp-filter.c	/^ssh_sandbox_init(struct monitor *monitor)$/;"	f	typeref:struct:ssh_sandbox *
+ssh_sandbox_init	sandbox-solaris.c	/^ssh_sandbox_init(struct monitor *monitor)$/;"	f	typeref:struct:ssh_sandbox *
+ssh_sandbox_init	sandbox-systrace.c	/^ssh_sandbox_init(struct monitor *monitor)$/;"	f	typeref:struct:ssh_sandbox *
+ssh_sandbox_parent	sandbox-systrace.c	/^ssh_sandbox_parent(struct ssh_sandbox *box, pid_t child_pid,$/;"	f	typeref:typename:void	file:
+ssh_sandbox_parent_finish	sandbox-capsicum.c	/^ssh_sandbox_parent_finish(struct ssh_sandbox *box)$/;"	f	typeref:typename:void
+ssh_sandbox_parent_finish	sandbox-darwin.c	/^ssh_sandbox_parent_finish(struct ssh_sandbox *box)$/;"	f	typeref:typename:void
+ssh_sandbox_parent_finish	sandbox-null.c	/^ssh_sandbox_parent_finish(struct ssh_sandbox *box)$/;"	f	typeref:typename:void
+ssh_sandbox_parent_finish	sandbox-pledge.c	/^ssh_sandbox_parent_finish(struct ssh_sandbox *box)$/;"	f	typeref:typename:void
+ssh_sandbox_parent_finish	sandbox-rlimit.c	/^ssh_sandbox_parent_finish(struct ssh_sandbox *box)$/;"	f	typeref:typename:void
+ssh_sandbox_parent_finish	sandbox-seccomp-filter.c	/^ssh_sandbox_parent_finish(struct ssh_sandbox *box)$/;"	f	typeref:typename:void
+ssh_sandbox_parent_finish	sandbox-solaris.c	/^ssh_sandbox_parent_finish(struct ssh_sandbox *box)$/;"	f	typeref:typename:void
+ssh_sandbox_parent_finish	sandbox-systrace.c	/^ssh_sandbox_parent_finish(struct ssh_sandbox *box)$/;"	f	typeref:typename:void
+ssh_sandbox_parent_preauth	sandbox-capsicum.c	/^ssh_sandbox_parent_preauth(struct ssh_sandbox *box, pid_t child_pid)$/;"	f	typeref:typename:void
+ssh_sandbox_parent_preauth	sandbox-darwin.c	/^ssh_sandbox_parent_preauth(struct ssh_sandbox *box, pid_t child_pid)$/;"	f	typeref:typename:void
+ssh_sandbox_parent_preauth	sandbox-null.c	/^ssh_sandbox_parent_preauth(struct ssh_sandbox *box, pid_t child_pid)$/;"	f	typeref:typename:void
+ssh_sandbox_parent_preauth	sandbox-pledge.c	/^ssh_sandbox_parent_preauth(struct ssh_sandbox *box, pid_t child_pid)$/;"	f	typeref:typename:void
+ssh_sandbox_parent_preauth	sandbox-rlimit.c	/^ssh_sandbox_parent_preauth(struct ssh_sandbox *box, pid_t child_pid)$/;"	f	typeref:typename:void
+ssh_sandbox_parent_preauth	sandbox-seccomp-filter.c	/^ssh_sandbox_parent_preauth(struct ssh_sandbox *box, pid_t child_pid)$/;"	f	typeref:typename:void
+ssh_sandbox_parent_preauth	sandbox-solaris.c	/^ssh_sandbox_parent_preauth(struct ssh_sandbox *box, pid_t child_pid)$/;"	f	typeref:typename:void
+ssh_sandbox_parent_preauth	sandbox-systrace.c	/^ssh_sandbox_parent_preauth(struct ssh_sandbox *box, pid_t child_pid)$/;"	f	typeref:typename:void
+ssh_sandbox_violation	sandbox-seccomp-filter.c	/^ssh_sandbox_violation(int signum, siginfo_t *info, void *void_context)$/;"	f	typeref:typename:void	file:
+ssh_selinux_change_context	openbsd-compat/port-linux.c	/^ssh_selinux_change_context(const char *newname)$/;"	f	typeref:typename:void
+ssh_selinux_enabled	openbsd-compat/port-linux.c	/^ssh_selinux_enabled(void)$/;"	f	typeref:typename:int
+ssh_selinux_getctxbyname	openbsd-compat/port-linux.c	/^ssh_selinux_getctxbyname(char *pwname)$/;"	f	typeref:typename:char *	file:
+ssh_selinux_setfscreatecon	openbsd-compat/port-linux.c	/^ssh_selinux_setfscreatecon(const char *path)$/;"	f	typeref:typename:void
+ssh_selinux_setup_exec_context	openbsd-compat/port-linux.c	/^ssh_selinux_setup_exec_context(char *pwname)$/;"	f	typeref:typename:void
+ssh_selinux_setup_pty	openbsd-compat/port-linux.c	/^ssh_selinux_setup_pty(char *pwname, const char *tty)$/;"	f	typeref:typename:void
+ssh_session2	ssh.c	/^ssh_session2(struct ssh *ssh, const struct ssh_conn_info *cinfo)$/;"	f	typeref:typename:int	file:
+ssh_session2_open	ssh.c	/^ssh_session2_open(struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+ssh_session2_setup	ssh.c	/^ssh_session2_setup(struct ssh *ssh, int id, int success, void *arg)$/;"	f	typeref:typename:void	file:
+ssh_set_app_data	ssh_api.c	/^ssh_set_app_data(struct ssh *ssh, void *app_data)$/;"	f	typeref:typename:void
+ssh_set_newkeys	packet.c	/^ssh_set_newkeys(struct ssh *ssh, int mode)$/;"	f	typeref:typename:int
+ssh_set_verify_host_key_callback	ssh_api.c	/^ssh_set_verify_host_key_callback(struct ssh *ssh,$/;"	f	typeref:typename:int
+ssh_signal	misc.c	/^ssh_signal(int signum, sshsig_t handler)$/;"	f	typeref:typename:sshsig_t
+ssh_stdio_confirm	ssh.c	/^ssh_stdio_confirm(struct ssh *ssh, int id, int success, void *arg)$/;"	f	typeref:typename:void	file:
+ssh_test_dhgex	regress/dhgex.sh	/^ssh_test_dhgex()$/;"	f
+ssh_tty_make_modes	ttymodes.c	/^ssh_tty_make_modes(struct ssh *ssh, int fd, struct termios *tiop)$/;"	f	typeref:typename:void
+ssh_tty_parse_modes	ttymodes.c	/^ssh_tty_parse_modes(struct ssh *ssh, int fd)$/;"	f	typeref:typename:void
+ssh_tun_confirm	ssh.c	/^ssh_tun_confirm(struct ssh *ssh, int id, int success, void *arg)$/;"	f	typeref:typename:void	file:
+ssh_update_card	authfd.c	/^ssh_update_card(int sock, int add, const char *reader_id, const char *pin,$/;"	f	typeref:typename:int
+ssh_userauth2	sshconnect2.c	/^ssh_userauth2(struct ssh *ssh, const char *local_user,$/;"	f	typeref:typename:void
+ssh_xmss_sign	ssh-xmss.c	/^ssh_xmss_sign(const struct sshkey *key, u_char **sigp, size_t *lenp,$/;"	f	typeref:typename:int
+ssh_xmss_state	sshkey-xmss.c	/^struct ssh_xmss_state {$/;"	s	file:
+ssh_xmss_verify	ssh-xmss.c	/^ssh_xmss_verify(const struct sshkey *key,$/;"	f	typeref:typename:int
+sshaix_getnameinfo	openbsd-compat/port-aix.c	/^sshaix_getnameinfo(const struct sockaddr *sa, size_t salen, char *host,$/;"	f	typeref:typename:int
+sshauthopt	auth-options.h	/^struct sshauthopt {$/;"	s
+sshauthopt_copy	auth-options.c	/^sshauthopt_copy(const struct sshauthopt *orig)$/;"	f	typeref:struct:sshauthopt *
+sshauthopt_deserialise	auth-options.c	/^sshauthopt_deserialise(struct sshbuf *m, struct sshauthopt **optsp)$/;"	f	typeref:typename:int
+sshauthopt_free	auth-options.c	/^sshauthopt_free(struct sshauthopt *opts)$/;"	f	typeref:typename:void
+sshauthopt_from_cert	auth-options.c	/^sshauthopt_from_cert(struct sshkey *k)$/;"	f	typeref:struct:sshauthopt *
+sshauthopt_merge	auth-options.c	/^sshauthopt_merge(const struct sshauthopt *primary,$/;"	f	typeref:struct:sshauthopt *
+sshauthopt_new	auth-options.c	/^sshauthopt_new(void)$/;"	f	typeref:struct:sshauthopt *
+sshauthopt_new_with_keys_defaults	auth-options.c	/^sshauthopt_new_with_keys_defaults(void)$/;"	f	typeref:struct:sshauthopt *
+sshauthopt_parse	auth-options.c	/^sshauthopt_parse(const char *opts, const char **errstrp)$/;"	f	typeref:struct:sshauthopt *
+sshauthopt_serialise	auth-options.c	/^sshauthopt_serialise(const struct sshauthopt *opts, struct sshbuf *m,$/;"	f	typeref:typename:int
+sshbuf	sshbuf.h	/^struct sshbuf {$/;"	s
+sshbuf_alloc	sshbuf.c	/^sshbuf_alloc(const struct sshbuf *buf)$/;"	f	typeref:typename:size_t
+sshbuf_allocate	sshbuf.c	/^sshbuf_allocate(struct sshbuf *buf, size_t len)$/;"	f	typeref:typename:int
+sshbuf_avail	sshbuf.c	/^sshbuf_avail(const struct sshbuf *buf)$/;"	f	typeref:typename:size_t
+sshbuf_b64tod	sshbuf-misc.c	/^sshbuf_b64tod(struct sshbuf *buf, const char *b64)$/;"	f	typeref:typename:int
+sshbuf_check_reserve	sshbuf.c	/^sshbuf_check_reserve(const struct sshbuf *buf, size_t len)$/;"	f	typeref:typename:int
+sshbuf_check_sanity	sshbuf.c	/^sshbuf_check_sanity(const struct sshbuf *buf)$/;"	f	typeref:typename:int	file:
+sshbuf_cmp	sshbuf-misc.c	/^sshbuf_cmp(const struct sshbuf *b, size_t offset,$/;"	f	typeref:typename:int
+sshbuf_consume	sshbuf.c	/^sshbuf_consume(struct sshbuf *buf, size_t len)$/;"	f	typeref:typename:int
+sshbuf_consume_end	sshbuf.c	/^sshbuf_consume_end(struct sshbuf *buf, size_t len)$/;"	f	typeref:typename:int
+sshbuf_dtob16	sshbuf-misc.c	/^sshbuf_dtob16(struct sshbuf *buf)$/;"	f	typeref:typename:char *
+sshbuf_dtob64	sshbuf-misc.c	/^sshbuf_dtob64(const struct sshbuf *d, struct sshbuf *b64, int wrap)$/;"	f	typeref:typename:int
+sshbuf_dtob64_string	sshbuf-misc.c	/^sshbuf_dtob64_string(const struct sshbuf *buf, int wrap)$/;"	f	typeref:typename:char *
+sshbuf_dtourlb64	sshbuf-misc.c	/^sshbuf_dtourlb64(const struct sshbuf *d, struct sshbuf *b64, int wrap)$/;"	f	typeref:typename:int
+sshbuf_dump	sshbuf-misc.c	/^sshbuf_dump(const struct sshbuf *buf, FILE *f)$/;"	f	typeref:typename:void
+sshbuf_dump_data	sshbuf-misc.c	/^sshbuf_dump_data(const void *s, size_t len, FILE *f)$/;"	f	typeref:typename:void
+sshbuf_dup_string	sshbuf-misc.c	/^sshbuf_dup_string(struct sshbuf *buf)$/;"	f	typeref:typename:char *
+sshbuf_find	sshbuf-misc.c	/^sshbuf_find(const struct sshbuf *b, size_t start_offset,$/;"	f	typeref:typename:int
+sshbuf_fixed	regress/unittests/sshbuf/test_sshbuf_fixed.c	/^sshbuf_fixed(void)$/;"	f	typeref:typename:void
+sshbuf_free	sshbuf.c	/^sshbuf_free(struct sshbuf *buf)$/;"	f	typeref:typename:void
+sshbuf_from	sshbuf.c	/^sshbuf_from(const void *blob, size_t len)$/;"	f	typeref:struct:sshbuf *
+sshbuf_fromb	sshbuf.c	/^sshbuf_fromb(struct sshbuf *buf)$/;"	f	typeref:struct:sshbuf *
+sshbuf_froms	sshbuf-getput-basic.c	/^sshbuf_froms(struct sshbuf *buf, struct sshbuf **bufp)$/;"	f	typeref:typename:int
+sshbuf_fuzz_tests	regress/unittests/sshbuf/test_sshbuf_fuzz.c	/^sshbuf_fuzz_tests(void)$/;"	f	typeref:typename:void
+sshbuf_get	sshbuf-getput-basic.c	/^sshbuf_get(struct sshbuf *buf, void *v, size_t len)$/;"	f	typeref:typename:int
+sshbuf_get_bignum2	sshbuf-getput-crypto.c	/^sshbuf_get_bignum2(struct sshbuf *buf, BIGNUM **valp)$/;"	f	typeref:typename:int
+sshbuf_get_bignum2_bytes_direct	sshbuf-getput-basic.c	/^sshbuf_get_bignum2_bytes_direct(struct sshbuf *buf,$/;"	f	typeref:typename:int
+sshbuf_get_cstring	sshbuf-getput-basic.c	/^sshbuf_get_cstring(struct sshbuf *buf, char **valp, size_t *lenp)$/;"	f	typeref:typename:int
+sshbuf_get_ec	sshbuf-getput-crypto.c	/^sshbuf_get_ec(struct sshbuf *buf, EC_POINT *v, const EC_GROUP *g)$/;"	f	typeref:typename:int
+sshbuf_get_eckey	sshbuf-getput-crypto.c	/^sshbuf_get_eckey(struct sshbuf *buf, EC_KEY *v)$/;"	f	typeref:typename:int
+sshbuf_get_string	sshbuf-getput-basic.c	/^sshbuf_get_string(struct sshbuf *buf, u_char **valp, size_t *lenp)$/;"	f	typeref:typename:int
+sshbuf_get_string_direct	sshbuf-getput-basic.c	/^sshbuf_get_string_direct(struct sshbuf *buf, const u_char **valp, size_t *lenp)$/;"	f	typeref:typename:int
+sshbuf_get_stringb	sshbuf-getput-basic.c	/^sshbuf_get_stringb(struct sshbuf *buf, struct sshbuf *v)$/;"	f	typeref:typename:int
+sshbuf_get_u16	sshbuf-getput-basic.c	/^sshbuf_get_u16(struct sshbuf *buf, u_int16_t *valp)$/;"	f	typeref:typename:int
+sshbuf_get_u32	sshbuf-getput-basic.c	/^sshbuf_get_u32(struct sshbuf *buf, u_int32_t *valp)$/;"	f	typeref:typename:int
+sshbuf_get_u64	sshbuf-getput-basic.c	/^sshbuf_get_u64(struct sshbuf *buf, u_int64_t *valp)$/;"	f	typeref:typename:int
+sshbuf_get_u8	sshbuf-getput-basic.c	/^sshbuf_get_u8(struct sshbuf *buf, u_char *valp)$/;"	f	typeref:typename:int
+sshbuf_getput_basic_tests	regress/unittests/sshbuf/test_sshbuf_getput_basic.c	/^sshbuf_getput_basic_tests(void)$/;"	f	typeref:typename:void
+sshbuf_getput_crypto_tests	regress/unittests/sshbuf/test_sshbuf_getput_crypto.c	/^sshbuf_getput_crypto_tests(void)$/;"	f	typeref:typename:void
+sshbuf_getput_fuzz_tests	regress/unittests/sshbuf/test_sshbuf_getput_fuzz.c	/^sshbuf_getput_fuzz_tests(void)$/;"	f	typeref:typename:void
+sshbuf_len	sshbuf.c	/^sshbuf_len(const struct sshbuf *buf)$/;"	f	typeref:typename:size_t
+sshbuf_load_fd	sshbuf-io.c	/^sshbuf_load_fd(int fd, struct sshbuf **blobp)$/;"	f	typeref:typename:int
+sshbuf_load_file	sshbuf-io.c	/^sshbuf_load_file(const char *path, struct sshbuf **bufp)$/;"	f	typeref:typename:int
+sshbuf_max_size	sshbuf.c	/^sshbuf_max_size(const struct sshbuf *buf)$/;"	f	typeref:typename:size_t
+sshbuf_maybe_pack	sshbuf.c	/^sshbuf_maybe_pack(struct sshbuf *buf, int force)$/;"	f	typeref:typename:void	file:
+sshbuf_misc_tests	regress/unittests/sshbuf/test_sshbuf_misc.c	/^sshbuf_misc_tests(void)$/;"	f	typeref:typename:void
+sshbuf_mutable_ptr	sshbuf.c	/^sshbuf_mutable_ptr(const struct sshbuf *buf)$/;"	f	typeref:typename:u_char *
+sshbuf_new	sshbuf.c	/^sshbuf_new(void)$/;"	f	typeref:struct:sshbuf *
+sshbuf_parent	sshbuf.c	/^sshbuf_parent(const struct sshbuf *buf)$/;"	f	typeref:typename:const struct sshbuf *
+sshbuf_peek_string_direct	sshbuf-getput-basic.c	/^sshbuf_peek_string_direct(const struct sshbuf *buf, const u_char **valp,$/;"	f	typeref:typename:int
+sshbuf_peek_u16	sshbuf-getput-basic.c	/^sshbuf_peek_u16(const struct sshbuf *buf, size_t offset, u_int16_t *valp)$/;"	f	typeref:typename:int
+sshbuf_peek_u32	sshbuf-getput-basic.c	/^sshbuf_peek_u32(const struct sshbuf *buf, size_t offset, u_int32_t *valp)$/;"	f	typeref:typename:int
+sshbuf_peek_u64	sshbuf-getput-basic.c	/^sshbuf_peek_u64(const struct sshbuf *buf, size_t offset, u_int64_t *valp)$/;"	f	typeref:typename:int
+sshbuf_peek_u8	sshbuf-getput-basic.c	/^sshbuf_peek_u8(const struct sshbuf *buf, size_t offset, u_char *valp)$/;"	f	typeref:typename:int
+sshbuf_poke	sshbuf-getput-basic.c	/^sshbuf_poke(struct sshbuf *buf, size_t offset, void *v, size_t len)$/;"	f	typeref:typename:int
+sshbuf_poke_u16	sshbuf-getput-basic.c	/^sshbuf_poke_u16(struct sshbuf *buf, size_t offset, u_int16_t val)$/;"	f	typeref:typename:int
+sshbuf_poke_u32	sshbuf-getput-basic.c	/^sshbuf_poke_u32(struct sshbuf *buf, size_t offset, u_int32_t val)$/;"	f	typeref:typename:int
+sshbuf_poke_u64	sshbuf-getput-basic.c	/^sshbuf_poke_u64(struct sshbuf *buf, size_t offset, u_int64_t val)$/;"	f	typeref:typename:int
+sshbuf_poke_u8	sshbuf-getput-basic.c	/^sshbuf_poke_u8(struct sshbuf *buf, size_t offset, u_char val)$/;"	f	typeref:typename:int
+sshbuf_ptr	sshbuf.c	/^sshbuf_ptr(const struct sshbuf *buf)$/;"	f	typeref:typename:const u_char *
+sshbuf_put	sshbuf-getput-basic.c	/^sshbuf_put(struct sshbuf *buf, const void *v, size_t len)$/;"	f	typeref:typename:int
+sshbuf_put_bignum2	sshbuf-getput-crypto.c	/^sshbuf_put_bignum2(struct sshbuf *buf, const BIGNUM *v)$/;"	f	typeref:typename:int
+sshbuf_put_bignum2_bytes	sshbuf-getput-basic.c	/^sshbuf_put_bignum2_bytes(struct sshbuf *buf, const void *v, size_t len)$/;"	f	typeref:typename:int
+sshbuf_put_cstring	sshbuf-getput-basic.c	/^sshbuf_put_cstring(struct sshbuf *buf, const char *v)$/;"	f	typeref:typename:int
+sshbuf_put_ec	sshbuf-getput-crypto.c	/^sshbuf_put_ec(struct sshbuf *buf, const EC_POINT *v, const EC_GROUP *g)$/;"	f	typeref:typename:int
+sshbuf_put_eckey	sshbuf-getput-crypto.c	/^sshbuf_put_eckey(struct sshbuf *buf, const EC_KEY *v)$/;"	f	typeref:typename:int
+sshbuf_put_string	sshbuf-getput-basic.c	/^sshbuf_put_string(struct sshbuf *buf, const void *v, size_t len)$/;"	f	typeref:typename:int
+sshbuf_put_stringb	sshbuf-getput-basic.c	/^sshbuf_put_stringb(struct sshbuf *buf, const struct sshbuf *v)$/;"	f	typeref:typename:int
+sshbuf_put_u16	sshbuf-getput-basic.c	/^sshbuf_put_u16(struct sshbuf *buf, u_int16_t val)$/;"	f	typeref:typename:int
+sshbuf_put_u32	sshbuf-getput-basic.c	/^sshbuf_put_u32(struct sshbuf *buf, u_int32_t val)$/;"	f	typeref:typename:int
+sshbuf_put_u64	sshbuf-getput-basic.c	/^sshbuf_put_u64(struct sshbuf *buf, u_int64_t val)$/;"	f	typeref:typename:int
+sshbuf_put_u8	sshbuf-getput-basic.c	/^sshbuf_put_u8(struct sshbuf *buf, u_char val)$/;"	f	typeref:typename:int
+sshbuf_putb	sshbuf-getput-basic.c	/^sshbuf_putb(struct sshbuf *buf, const struct sshbuf *v)$/;"	f	typeref:typename:int
+sshbuf_putf	sshbuf-getput-basic.c	/^sshbuf_putf(struct sshbuf *buf, const char *fmt, ...)$/;"	f	typeref:typename:int
+sshbuf_putfv	sshbuf-getput-basic.c	/^sshbuf_putfv(struct sshbuf *buf, const char *fmt, va_list ap)$/;"	f	typeref:typename:int
+sshbuf_read	sshbuf-misc.c	/^sshbuf_read(int fd, struct sshbuf *buf, size_t maxlen, size_t *rlen)$/;"	f	typeref:typename:int
+sshbuf_refcount	sshbuf.c	/^sshbuf_refcount(const struct sshbuf *buf)$/;"	f	typeref:typename:u_int
+sshbuf_reserve	sshbuf.c	/^sshbuf_reserve(struct sshbuf *buf, size_t len, u_char **dpp)$/;"	f	typeref:typename:int
+sshbuf_reset	sshbuf.c	/^sshbuf_reset(struct sshbuf *buf)$/;"	f	typeref:typename:void
+sshbuf_set_max_size	sshbuf.c	/^sshbuf_set_max_size(struct sshbuf *buf, size_t max_size)$/;"	f	typeref:typename:int
+sshbuf_set_parent	sshbuf.c	/^sshbuf_set_parent(struct sshbuf *child, struct sshbuf *parent)$/;"	f	typeref:typename:int
+sshbuf_skip_string	sshbuf.h	/^#define sshbuf_skip_string(/;"	d
+sshbuf_tests	regress/unittests/sshbuf/test_sshbuf.c	/^sshbuf_tests(void)$/;"	f	typeref:typename:void
+sshbuf_write_file	sshbuf-io.c	/^sshbuf_write_file(const char *path, struct sshbuf *buf)$/;"	f	typeref:typename:int
+sshcipher	cipher.c	/^struct sshcipher {$/;"	s	file:
+sshcipher_ctx	cipher.c	/^struct sshcipher_ctx {$/;"	s	file:
+sshcomp	kex.h	/^struct sshcomp {$/;"	s
+sshd$(EXEEXT)	Makefile.in	/^sshd$(EXEEXT): libssh.a	$(LIBCOMPAT) $(SSHDOBJS)$/;"	t
+sshd_gid	contrib/redhat/openssh.spec	/^%global sshd_gid    74$/;"	g
+sshd_gid	contrib/suse/openssh.spec	/^%define sshd_gid	65$/;"	m
+sshd_hostkey_sign	sshd.c	/^sshd_hostkey_sign(struct ssh *ssh, struct sshkey *privkey,$/;"	f	typeref:typename:int
+sshd_uid	contrib/redhat/openssh.spec	/^%global sshd_uid    74$/;"	g
+sshd_uid	contrib/suse/openssh.spec	/^%define sshd_uid	71$/;"	m
+sshdocdir	contrib/cygwin/Makefile	/^sshdocdir=$(docdir)\/openssh$/;"	m
+sshenc	kex.h	/^struct sshenc {$/;"	s
+sshfatal	fatal.c	/^sshfatal(const char *file, const char *func, int line, int showfunc,$/;"	f	typeref:typename:void
+sshfatal	regress/misc/sk-dummy/fatal.c	/^sshfatal(const char *file, const char *func, int line, int showfunc,$/;"	f	typeref:typename:void
+sshfatal	ssh-keyscan.c	/^sshfatal(const char *file, const char *func, int line, int showfunc,$/;"	f	typeref:typename:void
+sshfp_hashes	dns.h	/^enum sshfp_hashes {$/;"	g
+sshfp_types	dns.h	/^enum sshfp_types {$/;"	g
+sshkey	sshkey.h	/^struct sshkey {$/;"	s
+sshkey_advance_past_options	authfile.c	/^sshkey_advance_past_options(char **cpp)$/;"	f	typeref:typename:int
+sshkey_alg_list	sshkey.c	/^sshkey_alg_list(int certs_only, int plain_only, int include_sigonly, char sep)$/;"	f	typeref:typename:char *
+sshkey_cert	sshkey.h	/^struct sshkey_cert {$/;"	s
+sshkey_cert_check_authority	sshkey.c	/^sshkey_cert_check_authority(const struct sshkey *k,$/;"	f	typeref:typename:int
+sshkey_cert_check_authority_now	sshkey.c	/^sshkey_cert_check_authority_now(const struct sshkey *k,$/;"	f	typeref:typename:int
+sshkey_cert_check_host	sshkey.c	/^sshkey_cert_check_host(const struct sshkey *key, const char *host,$/;"	f	typeref:typename:int
+sshkey_cert_copy	sshkey.c	/^sshkey_cert_copy(const struct sshkey *from_key, struct sshkey *to_key)$/;"	f	typeref:typename:int
+sshkey_cert_type	sshkey.c	/^sshkey_cert_type(const struct sshkey *k)$/;"	f	typeref:typename:const char *
+sshkey_certify	sshkey.c	/^sshkey_certify(struct sshkey *k, struct sshkey *ca, const char *alg,$/;"	f	typeref:typename:int
+sshkey_certify_custom	sshkey.c	/^sshkey_certify_custom(struct sshkey *k, struct sshkey *ca, const char *alg,$/;"	f	typeref:typename:int
+sshkey_certify_signer	sshkey.h	/^typedef int sshkey_certify_signer(struct sshkey *, u_char **, size_t *,$/;"	t	typeref:typename:int ()(struct sshkey *,u_char **,size_t *,const u_char *,size_t,const char *,const char *,const char *,u_int,void *)
+sshkey_check_cert_sigtype	sshkey.c	/^sshkey_check_cert_sigtype(const struct sshkey *key, const char *allowed)$/;"	f	typeref:typename:int
+sshkey_check_revoked	authfile.c	/^sshkey_check_revoked(struct sshkey *key, const char *revoked_keys_file)$/;"	f	typeref:typename:int
+sshkey_check_rsa_length	sshkey.c	/^sshkey_check_rsa_length(const struct sshkey *k, int min_size)$/;"	f	typeref:typename:int
+sshkey_check_sigtype	sshkey.c	/^sshkey_check_sigtype(const u_char *sig, size_t siglen,$/;"	f	typeref:typename:int
+sshkey_curve_name_to_nid	sshkey.c	/^sshkey_curve_name_to_nid(const char *name)$/;"	f	typeref:typename:int
+sshkey_curve_nid_to_bits	sshkey.c	/^sshkey_curve_nid_to_bits(int nid)$/;"	f	typeref:typename:u_int
+sshkey_curve_nid_to_name	sshkey.c	/^sshkey_curve_nid_to_name(int nid)$/;"	f	typeref:typename:const char *
+sshkey_drop_cert	sshkey.c	/^sshkey_drop_cert(struct sshkey *k)$/;"	f	typeref:typename:int
+sshkey_dump_ec_key	sshkey.c	/^sshkey_dump_ec_key(const EC_KEY *key)$/;"	f	typeref:typename:void
+sshkey_dump_ec_point	sshkey.c	/^sshkey_dump_ec_point(const EC_GROUP *group, const EC_POINT *point)$/;"	f	typeref:typename:void
+sshkey_ec_nid_to_hash_alg	sshkey.c	/^sshkey_ec_nid_to_hash_alg(int nid)$/;"	f	typeref:typename:int
+sshkey_ec_validate_private	sshkey.c	/^sshkey_ec_validate_private(const EC_KEY *key)$/;"	f	typeref:typename:int
+sshkey_ec_validate_public	sshkey.c	/^sshkey_ec_validate_public(const EC_GROUP *group, const EC_POINT *public)$/;"	f	typeref:typename:int
+sshkey_ecdsa_bits_to_nid	sshkey.c	/^sshkey_ecdsa_bits_to_nid(int bits)$/;"	f	typeref:typename:int
+sshkey_ecdsa_key_to_nid	sshkey.c	/^sshkey_ecdsa_key_to_nid(EC_KEY *k)$/;"	f	typeref:typename:int
+sshkey_ecdsa_nid_from_name	sshkey.c	/^sshkey_ecdsa_nid_from_name(const char *name)$/;"	f	typeref:typename:int
+sshkey_enable_maxsign	sshkey.c	/^sshkey_enable_maxsign(struct sshkey *k, u_int32_t maxsign)$/;"	f	typeref:typename:int
+sshkey_equal	sshkey.c	/^sshkey_equal(const struct sshkey *a, const struct sshkey *b)$/;"	f	typeref:typename:int
+sshkey_equal_public	sshkey.c	/^sshkey_equal_public(const struct sshkey *a, const struct sshkey *b)$/;"	f	typeref:typename:int
+sshkey_file_tests	regress/unittests/sshkey/test_file.c	/^sshkey_file_tests(void)$/;"	f	typeref:typename:void
+sshkey_fingerprint	sshkey.c	/^sshkey_fingerprint(const struct sshkey *k, int dgst_alg,$/;"	f	typeref:typename:char *
+sshkey_fingerprint_raw	sshkey.c	/^sshkey_fingerprint_raw(const struct sshkey *k, int dgst_alg,$/;"	f	typeref:typename:int
+sshkey_format_cert_validity	sshkey.c	/^sshkey_format_cert_validity(const struct sshkey_cert *cert, char *s, size_t l)$/;"	f	typeref:typename:size_t
+sshkey_format_text	sshkey.c	/^sshkey_format_text(const struct sshkey *key, struct sshbuf *b)$/;"	f	typeref:typename:int
+sshkey_fp_rep	sshkey.h	/^enum sshkey_fp_rep {$/;"	g
+sshkey_free	sshkey.c	/^sshkey_free(struct sshkey *k)$/;"	f	typeref:typename:void
+sshkey_from_blob	sshkey.c	/^sshkey_from_blob(const u_char *blob, size_t blen, struct sshkey **keyp)$/;"	f	typeref:typename:int
+sshkey_from_blob_internal	sshkey.c	/^sshkey_from_blob_internal(struct sshbuf *b, struct sshkey **keyp,$/;"	f	typeref:typename:int	file:
+sshkey_from_private	sshkey.c	/^sshkey_from_private(const struct sshkey *k, struct sshkey **pkp)$/;"	f	typeref:typename:int
+sshkey_fromb	sshkey.c	/^sshkey_fromb(struct sshbuf *b, struct sshkey **keyp)$/;"	f	typeref:typename:int
+sshkey_froms	sshkey.c	/^sshkey_froms(struct sshbuf *buf, struct sshkey **keyp)$/;"	f	typeref:typename:int
+sshkey_fuzz_tests	regress/unittests/sshkey/test_fuzz.c	/^sshkey_fuzz_tests(void)$/;"	f	typeref:typename:void
+sshkey_generate	sshkey.c	/^sshkey_generate(int type, u_int bits, struct sshkey **keyp)$/;"	f	typeref:typename:int
+sshkey_get_sigtype	sshkey.c	/^sshkey_get_sigtype(const u_char *sig, size_t siglen, char **sigtypep)$/;"	f	typeref:typename:int
+sshkey_in_file	authfile.c	/^sshkey_in_file(struct sshkey *key, const char *filename, int strict_type,$/;"	f	typeref:typename:int
+sshkey_is_cert	sshkey.c	/^sshkey_is_cert(const struct sshkey *k)$/;"	f	typeref:typename:int
+sshkey_is_shielded	sshkey.c	/^sshkey_is_shielded(struct sshkey *k)$/;"	f	typeref:typename:int
+sshkey_is_sk	sshkey.c	/^sshkey_is_sk(const struct sshkey *k)$/;"	f	typeref:typename:int
+sshkey_load_cert	authfile.c	/^sshkey_load_cert(const char *filename, struct sshkey **keyp)$/;"	f	typeref:typename:int
+sshkey_load_private	authfile.c	/^sshkey_load_private(const char *filename, const char *passphrase,$/;"	f	typeref:typename:int
+sshkey_load_private_cert	authfile.c	/^sshkey_load_private_cert(int type, const char *filename, const char *passphrase,$/;"	f	typeref:typename:int
+sshkey_load_private_type	authfile.c	/^sshkey_load_private_type(int type, const char *filename, const char *passphrase,$/;"	f	typeref:typename:int
+sshkey_load_private_type_fd	authfile.c	/^sshkey_load_private_type_fd(int fd, int type, const char *passphrase,$/;"	f	typeref:typename:int
+sshkey_load_pubkey_from_private	authfile.c	/^sshkey_load_pubkey_from_private(const char *filename, struct sshkey **pubkeyp)$/;"	f	typeref:typename:int	file:
+sshkey_load_public	authfile.c	/^sshkey_load_public(const char *filename, struct sshkey **keyp, char **commentp)$/;"	f	typeref:typename:int
+sshkey_match_keyname_to_sigalgs	sshkey.c	/^sshkey_match_keyname_to_sigalgs(const char *keyname, const char *sigalgs)$/;"	f	typeref:typename:int
+sshkey_names_valid2	sshkey.c	/^sshkey_names_valid2(const char *names, int allow_wildcard)$/;"	f	typeref:typename:int
+sshkey_new	sshkey.c	/^sshkey_new(int type)$/;"	f	typeref:struct:sshkey *
+sshkey_parse_private2	sshkey.c	/^sshkey_parse_private2(struct sshbuf *blob, int type, const char *passphrase,$/;"	f	typeref:typename:int	file:
+sshkey_parse_private2_pubkey	sshkey.c	/^sshkey_parse_private2_pubkey(struct sshbuf *blob, int type,$/;"	f	typeref:typename:int	file:
+sshkey_parse_private_fileblob	sshkey.c	/^sshkey_parse_private_fileblob(struct sshbuf *buffer, const char *passphrase,$/;"	f	typeref:typename:int
+sshkey_parse_private_fileblob_type	sshkey.c	/^sshkey_parse_private_fileblob_type(struct sshbuf *blob, int type,$/;"	f	typeref:typename:int
+sshkey_parse_private_pem_fileblob	sshkey.c	/^sshkey_parse_private_pem_fileblob(struct sshbuf *blob, int type,$/;"	f	typeref:typename:int	file:
+sshkey_parse_pubkey_from_private_fileblob_type	sshkey.c	/^sshkey_parse_pubkey_from_private_fileblob_type(struct sshbuf *blob, int type,$/;"	f	typeref:typename:int
+sshkey_perm_ok	authfile.c	/^sshkey_perm_ok(int fd, const char *filename)$/;"	f	typeref:typename:int
+sshkey_plain_to_blob	sshkey.c	/^sshkey_plain_to_blob(const struct sshkey *key, u_char **blobp, size_t *lenp)$/;"	f	typeref:typename:int
+sshkey_private_deserialize	sshkey.c	/^sshkey_private_deserialize(struct sshbuf *buf, struct sshkey **kp)$/;"	f	typeref:typename:int
+sshkey_private_format	sshkey.h	/^enum sshkey_private_format {$/;"	g
+sshkey_private_serialize	sshkey.c	/^sshkey_private_serialize(struct sshkey *key, struct sshbuf *b)$/;"	f	typeref:typename:int
+sshkey_private_serialize_maxsign	sshkey.c	/^sshkey_private_serialize_maxsign(struct sshkey *k, struct sshbuf *b,$/;"	f	typeref:typename:int
+sshkey_private_serialize_opt	sshkey.c	/^sshkey_private_serialize_opt(struct sshkey *key, struct sshbuf *buf,$/;"	f	typeref:typename:int
+sshkey_private_to_blob2	sshkey.c	/^sshkey_private_to_blob2(struct sshkey *prv, struct sshbuf *blob,$/;"	f	typeref:typename:int	file:
+sshkey_private_to_blob_pem_pkcs8	sshkey.c	/^sshkey_private_to_blob_pem_pkcs8(struct sshkey *key, struct sshbuf *buf,$/;"	f	typeref:typename:int	file:
+sshkey_private_to_fileblob	sshkey.c	/^sshkey_private_to_fileblob(struct sshkey *key, struct sshbuf *blob,$/;"	f	typeref:typename:int
+sshkey_putb	sshkey.c	/^sshkey_putb(const struct sshkey *key, struct sshbuf *b)$/;"	f	typeref:typename:int
+sshkey_putb_plain	sshkey.c	/^sshkey_putb_plain(const struct sshkey *key, struct sshbuf *b)$/;"	f	typeref:typename:int
+sshkey_puts	sshkey.c	/^sshkey_puts(const struct sshkey *key, struct sshbuf *b)$/;"	f	typeref:typename:int
+sshkey_puts_opts	sshkey.c	/^sshkey_puts_opts(const struct sshkey *key, struct sshbuf *b,$/;"	f	typeref:typename:int
+sshkey_read	sshkey.c	/^sshkey_read(struct sshkey *ret, char **cpp)$/;"	f	typeref:typename:int
+sshkey_save_private	authfile.c	/^sshkey_save_private(struct sshkey *key, const char *filename,$/;"	f	typeref:typename:int
+sshkey_save_private_blob	authfile.c	/^sshkey_save_private_blob(struct sshbuf *keybuf, const char *filename)$/;"	f	typeref:typename:int	file:
+sshkey_save_public	authfile.c	/^sshkey_save_public(const struct sshkey *key, const char *path,$/;"	f	typeref:typename:int
+sshkey_serialize_rep	sshkey.h	/^enum sshkey_serialize_rep {$/;"	g
+sshkey_set_filename	sshkey.c	/^sshkey_set_filename(struct sshkey *k, const char *filename)$/;"	f	typeref:typename:int
+sshkey_shield_private	sshkey.c	/^sshkey_shield_private(struct sshkey *k)$/;"	f	typeref:typename:int
+sshkey_sig_details	sshkey.h	/^struct sshkey_sig_details {$/;"	s
+sshkey_sig_details_free	sshkey.c	/^sshkey_sig_details_free(struct sshkey_sig_details *details)$/;"	f	typeref:typename:void
+sshkey_sigalg_by_name	sshkey.c	/^sshkey_sigalg_by_name(const char *name)$/;"	f	typeref:typename:const char *
+sshkey_sign	sshkey.c	/^sshkey_sign(struct sshkey *key,$/;"	f	typeref:typename:int
+sshkey_signatures_left	sshkey.c	/^sshkey_signatures_left(const struct sshkey *k)$/;"	f	typeref:typename:u_int32_t
+sshkey_size	sshkey.c	/^sshkey_size(const struct sshkey *k)$/;"	f	typeref:typename:u_int
+sshkey_ssh_name	sshkey.c	/^sshkey_ssh_name(const struct sshkey *k)$/;"	f	typeref:typename:const char *
+sshkey_ssh_name_from_type_nid	sshkey.c	/^sshkey_ssh_name_from_type_nid(int type, int nid)$/;"	f	typeref:typename:const char *	file:
+sshkey_ssh_name_plain	sshkey.c	/^sshkey_ssh_name_plain(const struct sshkey *k)$/;"	f	typeref:typename:const char *
+sshkey_tests	regress/unittests/sshkey/test_sshkey.c	/^sshkey_tests(void)$/;"	f	typeref:typename:void
+sshkey_to_base64	sshkey.c	/^sshkey_to_base64(const struct sshkey *key, char **b64p)$/;"	f	typeref:typename:int
+sshkey_to_blob	sshkey.c	/^sshkey_to_blob(const struct sshkey *key, u_char **blobp, size_t *lenp)$/;"	f	typeref:typename:int
+sshkey_to_certified	sshkey.c	/^sshkey_to_certified(struct sshkey *k)$/;"	f	typeref:typename:int
+sshkey_try_load_public	authfile.c	/^sshkey_try_load_public(struct sshkey **kp, const char *filename,$/;"	f	typeref:typename:int	file:
+sshkey_type	sshkey.c	/^sshkey_type(const struct sshkey *k)$/;"	f	typeref:typename:const char *
+sshkey_type_from_name	sshkey.c	/^sshkey_type_from_name(const char *name)$/;"	f	typeref:typename:int
+sshkey_type_is_cert	sshkey.c	/^sshkey_type_is_cert(int type)$/;"	f	typeref:typename:int
+sshkey_type_is_valid_ca	sshkey.c	/^sshkey_type_is_valid_ca(int type)$/;"	f	typeref:typename:int	file:
+sshkey_type_plain	sshkey.c	/^sshkey_type_plain(int type)$/;"	f	typeref:typename:int
+sshkey_types	sshkey.h	/^enum sshkey_types {$/;"	g
+sshkey_unshield_private	sshkey.c	/^sshkey_unshield_private(struct sshkey *k)$/;"	f	typeref:typename:int
+sshkey_verify	sshkey.c	/^sshkey_verify(const struct sshkey *key,$/;"	f	typeref:typename:int
+sshkey_write	sshkey.c	/^sshkey_write(const struct sshkey *key, FILE *f)$/;"	f	typeref:typename:int
+sshkey_xmss_bds_state	sshkey-xmss.c	/^sshkey_xmss_bds_state(const struct sshkey *key)$/;"	f	typeref:typename:void *
+sshkey_xmss_decrypt_state	sshkey-xmss.c	/^sshkey_xmss_decrypt_state(const struct sshkey *k, struct sshbuf *encoded,$/;"	f	typeref:typename:int
+sshkey_xmss_deserialize_enc_key	sshkey-xmss.c	/^sshkey_xmss_deserialize_enc_key(struct sshkey *k, struct sshbuf *b)$/;"	f	typeref:typename:int
+sshkey_xmss_deserialize_pk_info	sshkey-xmss.c	/^sshkey_xmss_deserialize_pk_info(struct sshkey *k, struct sshbuf *b)$/;"	f	typeref:typename:int
+sshkey_xmss_deserialize_state	sshkey-xmss.c	/^sshkey_xmss_deserialize_state(struct sshkey *k, struct sshbuf *b)$/;"	f	typeref:typename:int
+sshkey_xmss_deserialize_state_opt	sshkey-xmss.c	/^sshkey_xmss_deserialize_state_opt(struct sshkey *k, struct sshbuf *b)$/;"	f	typeref:typename:int
+sshkey_xmss_enable_maxsign	sshkey-xmss.c	/^sshkey_xmss_enable_maxsign(struct sshkey *k, u_int32_t maxsign)$/;"	f	typeref:typename:int
+sshkey_xmss_encrypt_state	sshkey-xmss.c	/^sshkey_xmss_encrypt_state(const struct sshkey *k, struct sshbuf *b,$/;"	f	typeref:typename:int
+sshkey_xmss_forward_state	sshkey-xmss.c	/^sshkey_xmss_forward_state(const struct sshkey *k, u_int32_t reserve)$/;"	f	typeref:typename:int
+sshkey_xmss_free_bds	sshkey-xmss.c	/^sshkey_xmss_free_bds(struct sshkey *key)$/;"	f	typeref:typename:void
+sshkey_xmss_free_state	sshkey-xmss.c	/^sshkey_xmss_free_state(struct sshkey *key)$/;"	f	typeref:typename:void
+sshkey_xmss_generate_private_key	sshkey-xmss.c	/^sshkey_xmss_generate_private_key(struct sshkey *k, u_int bits)$/;"	f	typeref:typename:int
+sshkey_xmss_get_state	sshkey-xmss.c	/^sshkey_xmss_get_state(const struct sshkey *k, int printerror)$/;"	f	typeref:typename:int
+sshkey_xmss_get_state_from_file	sshkey-xmss.c	/^sshkey_xmss_get_state_from_file(struct sshkey *k, const char *filename,$/;"	f	typeref:typename:int
+sshkey_xmss_init	sshkey-xmss.c	/^sshkey_xmss_init(struct sshkey *key, const char *name)$/;"	f	typeref:typename:int
+sshkey_xmss_init_bds_state	sshkey-xmss.c	/^sshkey_xmss_init_bds_state(struct sshkey *key)$/;"	f	typeref:typename:int
+sshkey_xmss_init_enc_key	sshkey-xmss.c	/^sshkey_xmss_init_enc_key(struct sshkey *k, const char *ciphername)$/;"	f	typeref:typename:int
+sshkey_xmss_params	sshkey-xmss.c	/^sshkey_xmss_params(const struct sshkey *key)$/;"	f	typeref:typename:void *
+sshkey_xmss_pklen	sshkey-xmss.c	/^sshkey_xmss_pklen(const struct sshkey *key)$/;"	f	typeref:typename:size_t
+sshkey_xmss_serialize_enc_key	sshkey-xmss.c	/^sshkey_xmss_serialize_enc_key(const struct sshkey *k, struct sshbuf *b)$/;"	f	typeref:typename:int
+sshkey_xmss_serialize_pk_info	sshkey-xmss.c	/^sshkey_xmss_serialize_pk_info(const struct sshkey *k, struct sshbuf *b,$/;"	f	typeref:typename:int
+sshkey_xmss_serialize_state	sshkey-xmss.c	/^sshkey_xmss_serialize_state(const struct sshkey *k, struct sshbuf *b)$/;"	f	typeref:typename:int
+sshkey_xmss_serialize_state_opt	sshkey-xmss.c	/^sshkey_xmss_serialize_state_opt(const struct sshkey *k, struct sshbuf *b,$/;"	f	typeref:typename:int
+sshkey_xmss_siglen	sshkey-xmss.c	/^sshkey_xmss_siglen(const struct sshkey *key, size_t *lenp)$/;"	f	typeref:typename:int
+sshkey_xmss_signatures_left	sshkey-xmss.c	/^sshkey_xmss_signatures_left(const struct sshkey *k)$/;"	f	typeref:typename:u_int32_t
+sshkey_xmss_sklen	sshkey-xmss.c	/^sshkey_xmss_sklen(const struct sshkey *key)$/;"	f	typeref:typename:size_t
+sshkey_xmss_update_state	sshkey-xmss.c	/^sshkey_xmss_update_state(const struct sshkey *k, int printerror)$/;"	f	typeref:typename:int
+sshlog	log.c	/^sshlog(const char *file, const char *func, int line, int showfunc,$/;"	f	typeref:typename:void
+sshlogdie	log.c	/^sshlogdie(const char *file, const char *func, int line, int showfunc,$/;"	f	typeref:typename:void
+sshlogdirect	log.c	/^sshlogdirect(LogLevel level, int forced, const char *fmt, ...)$/;"	f	typeref:typename:void
+sshlogv	log.c	/^sshlogv(const char *file, const char *func, int line, int showfunc,$/;"	f	typeref:typename:void
+sshmac	mac.h	/^struct sshmac {$/;"	s
+sshpam_account_status	auth-pam.c	/^static int sshpam_account_status = -1;$/;"	v	typeref:typename:int	file:
+sshpam_auth_passwd	auth-pam.c	/^sshpam_auth_passwd(Authctxt *authctxt, const char *password)$/;"	f	typeref:typename:int
+sshpam_authctxt	auth-pam.c	/^static Authctxt *sshpam_authctxt = NULL;$/;"	v	typeref:typename:Authctxt *	file:
+sshpam_authenticated	auth-pam.c	/^static int sshpam_authenticated = 0;$/;"	v	typeref:typename:int	file:
+sshpam_authok	monitor.c	/^static void *sshpam_ctxt, *sshpam_authok;$/;"	v	typeref:typename:void *	file:
+sshpam_chauthtok_ruid	auth-pam.c	/^sshpam_chauthtok_ruid(pam_handle_t *pamh, int flags)$/;"	f	typeref:typename:int	file:
+sshpam_cleanup	auth-pam.c	/^sshpam_cleanup(void)$/;"	f	typeref:typename:void
+sshpam_conninfo	auth-pam.c	/^static char *sshpam_conninfo = NULL;$/;"	v	typeref:typename:char *	file:
+sshpam_const	auth-pam.c	/^# define sshpam_const	/;"	d	file:
+sshpam_cred_established	auth-pam.c	/^static int sshpam_cred_established = 0;$/;"	v	typeref:typename:int	file:
+sshpam_ctxt	monitor.c	/^static void *sshpam_ctxt, *sshpam_authok;$/;"	v	typeref:typename:void *	file:
+sshpam_device	auth-pam.c	/^KbdintDevice sshpam_device = {$/;"	v	typeref:typename:KbdintDevice
+sshpam_env	auth-pam.c	/^static char **sshpam_env = NULL;$/;"	v	typeref:typename:char **	file:
+sshpam_err	auth-pam.c	/^static int sshpam_err = 0;$/;"	v	typeref:typename:int	file:
+sshpam_free_ctx	auth-pam.c	/^sshpam_free_ctx(void *ctxtp)$/;"	f	typeref:typename:void	file:
+sshpam_get_maxtries_reached	auth-pam.c	/^sshpam_get_maxtries_reached(void)$/;"	f	typeref:typename:int
+sshpam_handle	auth-pam.c	/^static pam_handle_t *sshpam_handle = NULL;$/;"	v	typeref:typename:pam_handle_t *	file:
+sshpam_init	auth-pam.c	/^sshpam_init(struct ssh *ssh, Authctxt *authctxt)$/;"	f	typeref:typename:int	file:
+sshpam_init_ctx	auth-pam.c	/^sshpam_init_ctx(Authctxt *authctxt)$/;"	f	typeref:typename:void *	file:
+sshpam_laddr	auth-pam.c	/^static char *sshpam_laddr = NULL;$/;"	v	typeref:typename:char *	file:
+sshpam_maxtries_reached	auth-pam.c	/^static int sshpam_maxtries_reached = 0;$/;"	v	typeref:typename:int	file:
+sshpam_null_conv	auth-pam.c	/^sshpam_null_conv(int n, sshpam_const struct pam_message **msg,$/;"	f	typeref:typename:int	file:
+sshpam_oldsig	auth-pam.c	/^static sshsig_t sshpam_oldsig;$/;"	v	typeref:typename:sshsig_t	file:
+sshpam_passwd_conv	auth-pam.c	/^sshpam_passwd_conv(int n, sshpam_const struct pam_message **msg,$/;"	f	typeref:typename:int	file:
+sshpam_password	auth-pam.c	/^static const char *sshpam_password = NULL;$/;"	v	typeref:typename:const char *	file:
+sshpam_password_change_required	auth-pam.c	/^sshpam_password_change_required(int reqd)$/;"	f	typeref:typename:void	file:
+sshpam_query	auth-pam.c	/^sshpam_query(void *ctx, char **name, char **info,$/;"	f	typeref:typename:int	file:
+sshpam_respond	auth-pam.c	/^sshpam_respond(void *ctx, u_int num, char **resp)$/;"	f	typeref:typename:int	file:
+sshpam_rhost	auth-pam.c	/^static char *sshpam_rhost = NULL;$/;"	v	typeref:typename:char *	file:
+sshpam_session_open	auth-pam.c	/^static int sshpam_session_open = 0;$/;"	v	typeref:typename:int	file:
+sshpam_set_maxtries_reached	auth-pam.c	/^sshpam_set_maxtries_reached(int reached)$/;"	f	typeref:typename:void
+sshpam_sigchld_handler	auth-pam.c	/^sshpam_sigchld_handler(int sig)$/;"	f	typeref:typename:void	file:
+sshpam_store_conv	auth-pam.c	/^sshpam_store_conv(int n, sshpam_const struct pam_message **msg,$/;"	f	typeref:typename:int	file:
+sshpam_thread	auth-pam.c	/^sshpam_thread(void *ctxtp)$/;"	f	typeref:typename:void *	file:
+sshpam_thread_cleanup	auth-pam.c	/^sshpam_thread_cleanup(void)$/;"	f	typeref:typename:void
+sshpam_thread_conv	auth-pam.c	/^sshpam_thread_conv(int n, sshpam_const struct pam_message **msg,$/;"	f	typeref:typename:int	file:
+sshpam_thread_status	auth-pam.c	/^static int sshpam_thread_status = -1;$/;"	v	typeref:typename:int	file:
+sshpam_tty_conv	auth-pam.c	/^sshpam_tty_conv(int n, sshpam_const struct pam_message **msg,$/;"	f	typeref:typename:int	file:
+sshpid	sftp.c	/^static volatile pid_t sshpid = -1;$/;"	v	typeref:typename:volatile pid_t	file:
+sshpkt_add_padding	packet.c	/^sshpkt_add_padding(struct ssh *ssh, u_char pad)$/;"	f	typeref:typename:int
+sshpkt_disconnect	packet.c	/^sshpkt_disconnect(struct ssh *ssh, const char *fmt,...)$/;"	f	typeref:typename:int
+sshpkt_fatal	packet.c	/^sshpkt_fatal(struct ssh *ssh, int r, const char *fmt, ...)$/;"	f	typeref:typename:void
+sshpkt_fmt_connection_id	packet.c	/^sshpkt_fmt_connection_id(struct ssh *ssh, char *s, size_t l)$/;"	f	typeref:typename:void
+sshpkt_get	packet.c	/^sshpkt_get(struct ssh *ssh, void *valp, size_t len)$/;"	f	typeref:typename:int
+sshpkt_get_bignum2	packet.c	/^sshpkt_get_bignum2(struct ssh *ssh, BIGNUM **valp)$/;"	f	typeref:typename:int
+sshpkt_get_cstring	packet.c	/^sshpkt_get_cstring(struct ssh *ssh, char **valp, size_t *lenp)$/;"	f	typeref:typename:int
+sshpkt_get_ec	packet.c	/^sshpkt_get_ec(struct ssh *ssh, EC_POINT *v, const EC_GROUP *g)$/;"	f	typeref:typename:int
+sshpkt_get_end	packet.c	/^sshpkt_get_end(struct ssh *ssh)$/;"	f	typeref:typename:int
+sshpkt_get_string	packet.c	/^sshpkt_get_string(struct ssh *ssh, u_char **valp, size_t *lenp)$/;"	f	typeref:typename:int
+sshpkt_get_string_direct	packet.c	/^sshpkt_get_string_direct(struct ssh *ssh, const u_char **valp, size_t *lenp)$/;"	f	typeref:typename:int
+sshpkt_get_u32	packet.c	/^sshpkt_get_u32(struct ssh *ssh, u_int32_t *valp)$/;"	f	typeref:typename:int
+sshpkt_get_u64	packet.c	/^sshpkt_get_u64(struct ssh *ssh, u_int64_t *valp)$/;"	f	typeref:typename:int
+sshpkt_get_u8	packet.c	/^sshpkt_get_u8(struct ssh *ssh, u_char *valp)$/;"	f	typeref:typename:int
+sshpkt_getb_froms	packet.c	/^sshpkt_getb_froms(struct ssh *ssh, struct sshbuf **valp)$/;"	f	typeref:typename:int
+sshpkt_msg_ignore	packet.c	/^sshpkt_msg_ignore(struct ssh *ssh, u_int nbytes)$/;"	f	typeref:typename:int
+sshpkt_peek_string_direct	packet.c	/^sshpkt_peek_string_direct(struct ssh *ssh, const u_char **valp, size_t *lenp)$/;"	f	typeref:typename:int
+sshpkt_ptr	packet.c	/^sshpkt_ptr(struct ssh *ssh, size_t *lenp)$/;"	f	typeref:typename:const u_char *
+sshpkt_put	packet.c	/^sshpkt_put(struct ssh *ssh, const void *v, size_t len)$/;"	f	typeref:typename:int
+sshpkt_put_bignum2	packet.c	/^sshpkt_put_bignum2(struct ssh *ssh, const BIGNUM *v)$/;"	f	typeref:typename:int
+sshpkt_put_cstring	packet.c	/^sshpkt_put_cstring(struct ssh *ssh, const void *v)$/;"	f	typeref:typename:int
+sshpkt_put_ec	packet.c	/^sshpkt_put_ec(struct ssh *ssh, const EC_POINT *v, const EC_GROUP *g)$/;"	f	typeref:typename:int
+sshpkt_put_string	packet.c	/^sshpkt_put_string(struct ssh *ssh, const void *v, size_t len)$/;"	f	typeref:typename:int
+sshpkt_put_stringb	packet.c	/^sshpkt_put_stringb(struct ssh *ssh, const struct sshbuf *v)$/;"	f	typeref:typename:int
+sshpkt_put_u32	packet.c	/^sshpkt_put_u32(struct ssh *ssh, u_int32_t val)$/;"	f	typeref:typename:int
+sshpkt_put_u64	packet.c	/^sshpkt_put_u64(struct ssh *ssh, u_int64_t val)$/;"	f	typeref:typename:int
+sshpkt_put_u8	packet.c	/^sshpkt_put_u8(struct ssh *ssh, u_char val)$/;"	f	typeref:typename:int
+sshpkt_putb	packet.c	/^sshpkt_putb(struct ssh *ssh, const struct sshbuf *b)$/;"	f	typeref:typename:int
+sshpkt_send	packet.c	/^sshpkt_send(struct ssh *ssh)$/;"	f	typeref:typename:int
+sshpkt_start	packet.c	/^sshpkt_start(struct ssh *ssh, u_char type)$/;"	f	typeref:typename:int
+sshpkt_vfatal	packet.c	/^sshpkt_vfatal(struct ssh *ssh, int r, const char *fmt, va_list ap)$/;"	f	typeref:typename:void	file:
+sshport	scp.c	/^int sshport = -1;$/;"	v	typeref:typename:int
+sshsig_armor	sshsig.c	/^sshsig_armor(const struct sshbuf *blob, struct sshbuf **out)$/;"	f	typeref:typename:int
+sshsig_check_allowed_keys	sshsig.c	/^sshsig_check_allowed_keys(const char *path, const struct sshkey *sign_key,$/;"	f	typeref:typename:int
+sshsig_check_hashalg	sshsig.c	/^sshsig_check_hashalg(const char *hashalg)$/;"	f	typeref:typename:int	file:
+sshsig_dearmor	sshsig.c	/^sshsig_dearmor(struct sshbuf *sig, struct sshbuf **out)$/;"	f	typeref:typename:int
+sshsig_find_principals	sshsig.c	/^sshsig_find_principals(const char *path, const struct sshkey *sign_key,$/;"	f	typeref:typename:int
+sshsig_fuzz	regress/misc/fuzz-harness/Makefile	/^sshsig_fuzz: sshsig_fuzz.o $(SK_NULL_OBJS) $(COMMON_DEPS)$/;"	t
+sshsig_get_pubkey	sshsig.c	/^sshsig_get_pubkey(struct sshbuf *signature, struct sshkey **pubkey)$/;"	f	typeref:typename:int
+sshsig_match_principals	sshsig.c	/^sshsig_match_principals(const char *path, const char *principal,$/;"	f	typeref:typename:int
+sshsig_parse_preamble	sshsig.c	/^sshsig_parse_preamble(struct sshbuf *buf)$/;"	f	typeref:typename:int	file:
+sshsig_peek_hashalg	sshsig.c	/^sshsig_peek_hashalg(struct sshbuf *signature, char **hashalgp)$/;"	f	typeref:typename:int	file:
+sshsig_sign_fd	sshsig.c	/^sshsig_sign_fd(struct sshkey *key, const char *hashalg,$/;"	f	typeref:typename:int
+sshsig_signb	sshsig.c	/^sshsig_signb(struct sshkey *key, const char *hashalg,$/;"	f	typeref:typename:int
+sshsig_signer	sshsig.h	/^typedef int sshsig_signer(struct sshkey *, u_char **, size_t *,$/;"	t	typeref:typename:int ()(struct sshkey *,u_char **,size_t *,const u_char *,size_t,const char *,const char *,const char *,u_int,void *)
+sshsig_t	misc.h	/^typedef void (*sshsig_t)(int);$/;"	t	typeref:typename:void (*)(int)
+sshsig_verify_fd	sshsig.c	/^sshsig_verify_fd(struct sshbuf *signature, int fd,$/;"	f	typeref:typename:int
+sshsig_verifyb	sshsig.c	/^sshsig_verifyb(struct sshbuf *signature, const struct sshbuf *message,$/;"	f	typeref:typename:int
+sshsig_wrap_sign	sshsig.c	/^sshsig_wrap_sign(struct sshkey *key, const char *hashalg,$/;"	f	typeref:typename:int	file:
+sshsig_wrap_verify	sshsig.c	/^sshsig_wrap_verify(struct sshbuf *signature, const char *hashalg,$/;"	f	typeref:typename:int	file:
+sshsigdie	log.c	/^sshsigdie(const char *file, const char *func, int line, int showfunc,$/;"	f	typeref:typename:void
+sshsigopt	sshsig.c	/^struct sshsigopt {$/;"	s	file:
+sshsigopt_free	sshsig.c	/^sshsigopt_free(struct sshsigopt *opts)$/;"	f	typeref:typename:void
+sshsigopt_fuzz	regress/misc/fuzz-harness/Makefile	/^sshsigopt_fuzz: sshsigopt_fuzz.o $(SK_NULL_OBJS) $(COMMON_DEPS)$/;"	t
+sshsigopt_parse	sshsig.c	/^sshsigopt_parse(const char *opts, const char *path, u_long linenum,$/;"	f	typeref:struct:sshsigopt *
+sshsk_add_option	ssh-sk.c	/^sshsk_add_option(struct sk_option ***optsp, size_t *noptsp,$/;"	f	typeref:typename:int	file:
+sshsk_ecdsa_assemble	ssh-sk.c	/^sshsk_ecdsa_assemble(struct sk_enroll_response *resp, struct sshkey **keyp)$/;"	f	typeref:typename:int	file:
+sshsk_ecdsa_sig	ssh-sk.c	/^sshsk_ecdsa_sig(struct sk_sign_response *resp, struct sshbuf *sig)$/;"	f	typeref:typename:int	file:
+sshsk_ed25519_assemble	ssh-sk.c	/^sshsk_ed25519_assemble(struct sk_enroll_response *resp, struct sshkey **keyp)$/;"	f	typeref:typename:int	file:
+sshsk_ed25519_sig	ssh-sk.c	/^sshsk_ed25519_sig(struct sk_sign_response *resp, struct sshbuf *sig)$/;"	f	typeref:typename:int	file:
+sshsk_enroll	regress/misc/fuzz-harness/ssh-sk-null.cc	/^sshsk_enroll(int type, const char *provider_path, const char *device,$/;"	f	typeref:typename:int
+sshsk_enroll	ssh-sk-client.c	/^sshsk_enroll(int type, const char *provider_path, const char *device,$/;"	f	typeref:typename:int
+sshsk_enroll	ssh-sk.c	/^sshsk_enroll(int type, const char *provider_path, const char *device,$/;"	f	typeref:typename:int
+sshsk_free	ssh-sk.c	/^sshsk_free(struct sshsk_provider *p)$/;"	f	typeref:typename:void	file:
+sshsk_free_enroll_response	ssh-sk.c	/^sshsk_free_enroll_response(struct sk_enroll_response *r)$/;"	f	typeref:typename:void	file:
+sshsk_free_options	ssh-sk.c	/^sshsk_free_options(struct sk_option **opts)$/;"	f	typeref:typename:void	file:
+sshsk_free_resident_key	ssh-sk-client.c	/^sshsk_free_resident_key(struct sshsk_resident_key *srk)$/;"	f	typeref:typename:void	file:
+sshsk_free_resident_key	ssh-sk.c	/^sshsk_free_resident_key(struct sshsk_resident_key *srk)$/;"	f	typeref:typename:void	file:
+sshsk_free_resident_keys	ssh-sk-client.c	/^sshsk_free_resident_keys(struct sshsk_resident_key **srks, size_t nsrks)$/;"	f	typeref:typename:void
+sshsk_free_resident_keys	ssh-sk.c	/^sshsk_free_resident_keys(struct sshsk_resident_key **srks, size_t nsrks)$/;"	f	typeref:typename:void
+sshsk_free_sign_response	ssh-sk.c	/^sshsk_free_sign_response(struct sk_sign_response *r)$/;"	f	typeref:typename:void	file:
+sshsk_free_sk_resident_keys	ssh-sk.c	/^sshsk_free_sk_resident_keys(struct sk_resident_key **rks, size_t nrks)$/;"	f	typeref:typename:void	file:
+sshsk_key_from_response	ssh-sk.c	/^sshsk_key_from_response(int alg, const char *application, uint8_t flags,$/;"	f	typeref:typename:int	file:
+sshsk_load_resident	regress/misc/fuzz-harness/ssh-sk-null.cc	/^sshsk_load_resident(const char *provider_path, const char *device,$/;"	f	typeref:typename:int
+sshsk_load_resident	ssh-sk-client.c	/^sshsk_load_resident(const char *provider_path, const char *device,$/;"	f	typeref:typename:int
+sshsk_load_resident	ssh-sk.c	/^sshsk_load_resident(const char *provider_path, const char *device,$/;"	f	typeref:typename:int
+sshsk_open	ssh-sk.c	/^sshsk_open(const char *path)$/;"	f	typeref:struct:sshsk_provider *	file:
+sshsk_provider	ssh-sk.c	/^struct sshsk_provider {$/;"	s	file:
+sshsk_resident_key	ssh-sk.h	/^struct sshsk_resident_key {$/;"	s
+sshsk_sign	regress/misc/fuzz-harness/ssh-sk-null.cc	/^sshsk_sign(const char *provider_path, struct sshkey *key,$/;"	f	typeref:typename:int
+sshsk_sign	ssh-sk-client.c	/^sshsk_sign(const char *provider, struct sshkey *key,$/;"	f	typeref:typename:int
+sshsk_sign	ssh-sk.c	/^sshsk_sign(const char *provider_path, struct sshkey *key,$/;"	f	typeref:typename:int
+ssize_t	defines.h	/^typedef int ssize_t;$/;"	t	typeref:typename:int
+ssl-dir	configure.ac	/^AC_ARG_WITH([ssl-dir],$/;"	w
+ssl-engine	configure.ac	/^AC_ARG_WITH([ssl-engine],$/;"	w
+ssl_err_check	regress/unittests/test_helper/test_helper.c	/^ssl_err_check(const char *file, int line)$/;"	f	typeref:typename:void
+st32	openbsd-compat/sha2.h	/^		u_int32_t	st32[8];$/;"	m	union:_SHA2_CTX::__anonad84a1d4010a	typeref:typename:u_int32_t[8]
+st64	openbsd-compat/sha2.h	/^		u_int64_t	st64[8];$/;"	m	union:_SHA2_CTX::__anonad84a1d4010a	typeref:typename:u_int64_t[8]
+stack	sshkey-xmss.c	/^	u_char		*stack;$/;"	m	struct:ssh_xmss_state	typeref:typename:u_char *	file:
+stack	xmss_fast.h	/^  unsigned char *stack;$/;"	m	struct:__anon22bef5f30508	typeref:typename:unsigned char *
+stacklevels	sshkey-xmss.c	/^	u_char		*stacklevels;$/;"	m	struct:ssh_xmss_state	typeref:typename:u_char *	file:
+stacklevels	xmss_fast.h	/^  unsigned char *stacklevels;$/;"	m	struct:__anon22bef5f30508	typeref:typename:unsigned char *
+stackoffset	sshkey-xmss.c	/^	u_int32_t	stackoffset;$/;"	m	struct:ssh_xmss_state	typeref:typename:u_int32_t	file:
+stackoffset	xmss_fast.h	/^  unsigned int stackoffset;$/;"	m	struct:__anon22bef5f30508	typeref:typename:unsigned int
+stackprotect	configure.ac	/^AC_ARG_WITH([stackprotect],$/;"	w
+stackusage	xmss_fast.h	/^  unsigned int stackusage;$/;"	m	struct:__anon22bef5f30408	typeref:typename:unsigned int
+stalled	progressmeter.c	/^static long stalled;		\/* how long we have been stalled *\/$/;"	v	typeref:typename:long	file:
+start	contrib/redhat/sshd.init	/^start()$/;"	f
+start	progressmeter.c	/^static double start;		\/* start progress *\/$/;"	v	typeref:typename:double	file:
+start_client	regress/cfgmatch.sh	/^start_client()$/;"	f
+start_client	regress/cfgmatchlisten.sh	/^start_client()$/;"	f
+start_compression_in	packet.c	/^start_compression_in(struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+start_compression_out	packet.c	/^start_compression_out(struct ssh *ssh, int level)$/;"	f	typeref:typename:int	file:
+start_debug_log	regress/test-exec.sh	/^start_debug_log ()$/;"	f
+start_helper	ssh-sk-client.c	/^start_helper(int *fdp, pid_t *pidp, void (**osigchldp)(int))$/;"	f	typeref:typename:int	file:
+start_mux_master	regress/multiplex.sh	/^start_mux_master()$/;"	f
+start_pam	auth-pam.c	/^start_pam(struct ssh *ssh)$/;"	f	typeref:typename:void
+start_pos	progressmeter.c	/^static off_t start_pos;		\/* initial position of transfer *\/$/;"	v	typeref:typename:off_t	file:
+start_progress_meter	progressmeter.c	/^start_progress_meter(const char *f, off_t filesize, off_t *ctr)$/;"	f	typeref:typename:void
+start_sshd	regress/test-exec.sh	/^start_sshd ()$/;"	f
+start_sshd_copy	regress/reexec.sh	/^start_sshd_copy ()$/;"	f
+startup_flags	sshd.c	/^static int *startup_flags = NULL;	\/* Indicates child closed listener *\/$/;"	v	typeref:typename:int *	file:
+startup_pipe	sshd.c	/^static int startup_pipe = -1;		\/* in child *\/$/;"	v	typeref:typename:int	file:
+startup_pipes	sshd.c	/^static int *startup_pipes = NULL;$/;"	v	typeref:typename:int *	file:
+stat_to_attrib	sftp-common.c	/^stat_to_attrib(const struct stat *st, Attrib *a)$/;"	f	typeref:typename:void
+state	openbsd-compat/md5.h	/^	u_int32_t state[4];			\/* state *\/$/;"	m	struct:MD5Context	typeref:typename:u_int32_t[4]
+state	openbsd-compat/sha1.h	/^    u_int32_t state[5];$/;"	m	struct:__anonad849d930108	typeref:typename:u_int32_t[5]
+state	openbsd-compat/sha2.h	/^	} state;$/;"	m	struct:_SHA2_CTX	typeref:union:_SHA2_CTX::__anonad84a1d4010a
+state	packet.h	/^	struct session_state *state;$/;"	m	struct:ssh	typeref:struct:session_state *
+state	pkcs11.h	/^  ck_state_t state;$/;"	m	struct:ck_session_info	typeref:typename:ck_state_t
+state	umac.c	/^    UINT64 state[STREAMS];               \/* on-line state     *\/$/;"	m	struct:__anon20b5e17c0308	typeref:typename:UINT64[]	file:
+static_libcrypto	contrib/redhat/openssh.spec	/^%global static_libcrypto 0$/;"	g
+status	hostfile.h	/^	u_int status;	\/* One of HKF_STATUS_* *\/$/;"	m	struct:hostkey_foreach_line	typeref:typename:u_int
+status_confirms	channels.h	/^	struct channel_confirms	status_confirms;$/;"	m	struct:Channel	typeref:struct:channel_confirms
+status_to_message	sftp-server.c	/^status_to_message(u_int32_t status)$/;"	f	typeref:typename:const char *	file:
+statvfs	openbsd-compat/bsd-statvfs.c	/^int statvfs(const char *path, struct statvfs *buf)$/;"	f	typeref:typename:int
+statvfs	openbsd-compat/bsd-statvfs.h	/^struct statvfs {$/;"	s
+stderr_buffer	clientloop.c	/^static struct sshbuf *stderr_buffer;	\/* Used for final exit message. *\/$/;"	v	typeref:struct:sshbuf *	file:
+stdfd_devnull	misc.c	/^stdfd_devnull(int do_stdin, int do_stdout, int do_stderr)$/;"	f	typeref:typename:int
+stdin_null	readconf.h	/^	int	stdin_null;$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+stdio_forward_host	readconf.h	/^	char   *stdio_forward_host;$/;"	m	struct:__anon7d31da1d0108	typeref:typename:char *
+stdio_forward_port	readconf.h	/^	int	stdio_forward_port;$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+stop	contrib/redhat/sshd.init	/^stop()$/;"	f
+stop_client	regress/cfgmatch.sh	/^stop_client()$/;"	f
+stop_client	regress/cfgmatchlisten.sh	/^stop_client()$/;"	f
+stop_progress_meter	progressmeter.c	/^stop_progress_meter(void)$/;"	f	typeref:typename:void
+stop_sshd	regress/test-exec.sh	/^stop_sshd ()$/;"	f
+store	ssh-gss.h	/^	ssh_gssapi_ccache store;$/;"	m	struct:__anon1dbf9ce30208	typeref:typename:ssh_gssapi_ccache
+store_conv	auth-pam.c	/^static struct pam_conv store_conv = { sshpam_store_conv, NULL };$/;"	v	typeref:struct:pam_conv	file:
+store_key	regress/misc/fuzz-harness/kex_fuzz.cc	/^store_key(struct shared_state *st, struct sshkey *pubkey,$/;"	f	typeref:typename:void	file:
+store_lastlog_message	sshlogin.c	/^store_lastlog_message(const char *user, uid_t uid)$/;"	f	typeref:typename:void	file:
+storecreds	ssh-gss.h	/^	void (*storecreds) (ssh_gssapi_client *);$/;"	m	struct:ssh_gssapi_mech_struct	typeref:typename:void (*)(ssh_gssapi_client *)
+strategies	regress/unittests/test_helper/fuzz.c	/^	int strategies;$/;"	m	struct:fuzz	typeref:typename:int	file:
+strategy	regress/unittests/test_helper/fuzz.c	/^	int strategy;$/;"	m	struct:fuzz	typeref:typename:int	file:
+stravis	openbsd-compat/vis.c	/^stravis(char **outp, const char *src, int flag)$/;"	f	typeref:typename:int
+strcasestr	openbsd-compat/strcasestr.c	/^strcasestr(const char *s, const char *find)$/;"	f	typeref:typename:char *
+strcmp_maybe_null	misc.c	/^strcmp_maybe_null(const char *a, const char *b)$/;"	f	typeref:typename:int	file:
+strdelim	misc.c	/^strdelim(char **s)$/;"	f	typeref:typename:char *
+strdelim_internal	misc.c	/^strdelim_internal(char **s, int split_equals)$/;"	f	typeref:typename:char *	file:
+strdelimw	misc.c	/^strdelimw(char **s)$/;"	f	typeref:typename:char *
+strdup	openbsd-compat/bsd-misc.c	/^strdup(const char *str)$/;"	f	typeref:typename:char *
+streamlocal_bind_mask	misc.h	/^	mode_t	 streamlocal_bind_mask; \/* umask for streamlocal binds *\/$/;"	m	struct:ForwardOptions	typeref:typename:mode_t
+streamlocal_bind_unlink	misc.h	/^	int	 streamlocal_bind_unlink; \/* unlink socket before bind *\/$/;"	m	struct:ForwardOptions	typeref:typename:int
+strerror	openbsd-compat/bsd-misc.c	/^const char *strerror(int e)$/;"	f	typeref:typename:const char *
+strict_host_key_checking	readconf.h	/^	int     strict_host_key_checking;	\/* Strict host key checking. *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+strict_modes	servconf.h	/^	int     strict_modes;	\/* If true, require string home dir modes. *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+string_from_portable	sftp-server.c	/^string_from_portable(int pflags)$/;"	f	typeref:typename:const char *	file:
+stringlist_append	ssh-add.c	/^stringlist_append(char ***listp, const char *s)$/;"	f	typeref:typename:void	file:
+strip	configure.ac	/^AC_ARG_ENABLE([strip],$/;"	e
+strlcat	openbsd-compat/strlcat.c	/^strlcat(char *dst, const char *src, size_t siz)$/;"	f	typeref:typename:size_t
+strlcpy	openbsd-compat/strlcpy.c	/^strlcpy(char *dst, const char *src, size_t siz)$/;"	f	typeref:typename:size_t
+strmode	openbsd-compat/strmode.c	/^strmode(int mode, char *p)$/;"	f	typeref:typename:void
+strndup	openbsd-compat/strndup.c	/^strndup(const char *str, size_t maxlen)$/;"	f	typeref:typename:char *
+strnlen	openbsd-compat/strnlen.c	/^strnlen(const char *str, size_t maxlen)$/;"	f	typeref:typename:size_t
+strnnsep	ssh-keyscan.c	/^strnnsep(char **stringp, char *delim)$/;"	f	typeref:typename:char *	file:
+strnvis	openbsd-compat/vis.c	/^strnvis(char *dst, const char *src, size_t siz, int flag)$/;"	f	typeref:typename:int
+strptime	openbsd-compat/strptime.c	/^strptime(const char *buf, const char *fmt, struct tm *tm)$/;"	f	typeref:typename:char *
+strsep	openbsd-compat/strsep.c	/^strsep(char **stringp, const char *delim)$/;"	f	typeref:typename:char *
+strsignal	openbsd-compat/bsd-signal.c	/^char *strsignal(int sig)$/;"	f	typeref:typename:char *
+strtoll	openbsd-compat/strtoll.c	/^strtoll(const char *nptr, char **endptr, int base)$/;"	f	typeref:typename:long long
+strtonum	openbsd-compat/strtonum.c	/^strtonum(const char *numstr, long long minval, long long maxval,$/;"	f	typeref:typename:long long
+strtoul	openbsd-compat/strtoul.c	/^strtoul(const char *nptr, char **endptr, int base)$/;"	f	typeref:typename:unsigned long
+strtoull	openbsd-compat/strtoull.c	/^strtoull(const char *nptr, char **endptr, int base)$/;"	f	typeref:typename:unsigned long long
+strvis	openbsd-compat/vis.c	/^strvis(char *dst, const char *src, int flag)$/;"	f	typeref:typename:int
+strvisx	openbsd-compat/vis.c	/^strvisx(char *dst, const char *src, size_t len, int flag)$/;"	f	typeref:typename:int
+style	auth.h	/^	char		*style;$/;"	m	struct:Authctxt	typeref:typename:char *
+sub	smult_curve25519_ref.c	/^static void sub(unsigned int out[32],const unsigned int a[32],const unsigned int b[32])$/;"	f	typeref:typename:void	file:
+subleaf	xmss_fast.h	/^  unsigned int subleaf;$/;"	m	struct:__anon22bef5f30108	typeref:typename:unsigned int
+subprocess	misc.c	/^subprocess(const char *tag, const char *command,$/;"	f	typeref:typename:pid_t
+subsys	session.h	/^	char	*subsys;$/;"	m	struct:Session	typeref:typename:char *
+subsystem_args	servconf.h	/^	char   *subsystem_args[MAX_SUBSYSTEMS];$/;"	m	struct:__anon9b33d3c10108	typeref:typename:char * []
+subsystem_command	servconf.h	/^	char   *subsystem_command[MAX_SUBSYSTEMS];$/;"	m	struct:__anon9b33d3c10108	typeref:typename:char * []
+subsystem_name	servconf.h	/^	char   *subsystem_name[MAX_SUBSYSTEMS];$/;"	m	struct:__anon9b33d3c10108	typeref:typename:char * []
+subtest_info	regress/unittests/test_helper/test_helper.c	/^static char subtest_info[512];$/;"	v	typeref:typename:char[512]	file:
+subtree	xmss_fast.h	/^  unsigned long long subtree;$/;"	m	struct:__anon22bef5f30108	typeref:typename:unsigned long long
+success	auth.h	/^	sig_atomic_t	 success;$/;"	m	struct:Authctxt	typeref:typename:sig_atomic_t
+success	sshconnect2.c	/^	sig_atomic_t success;$/;"	m	struct:cauthctxt	typeref:typename:sig_atomic_t	file:
+sun_family	defines.h	/^	short	sun_family;		\/* AF_UNIX *\/$/;"	m	struct:sockaddr_un	typeref:typename:short
+sun_path	defines.h	/^	char	sun_path[108];		\/* path name (gag) *\/$/;"	m	struct:sockaddr_un	typeref:typename:char[108]
+superuser-path	configure.ac	/^AC_ARG_WITH([superuser-path],$/;"	w
+supported	sshconnect2.c	/^static char *supported = NULL;$/;"	v	typeref:typename:char *	file:
+supported_mechs	gss-serv.c	/^ssh_gssapi_mech* supported_mechs[]= {$/;"	v	typeref:typename:ssh_gssapi_mech * []
+supported_oids	gss-serv.c	/^static gss_OID_set supported_oids;$/;"	v	typeref:typename:gss_OID_set	file:
+survey	Makefile.in	/^survey: survey.sh ssh$/;"	t
+suspchild	scp.c	/^suspchild(int signo)$/;"	f	typeref:typename:void	file:
+suspchild	sftp.c	/^suspchild(int signo)$/;"	f	typeref:typename:void	file:
+suspone	scp.c	/^suspone(int pid, int signo)$/;"	f	typeref:typename:void	file:
+sv	openbsd-compat/sigact.h	/^	struct sigvec sv;$/;"	m	struct:sigaction	typeref:struct:sigvec
+synonym	auth.h	/^	char	*synonym;$/;"	m	struct:Authmethod	typeref:typename:char *
+sys_auth_allowed_user	openbsd-compat/port-aix.c	/^sys_auth_allowed_user(struct passwd *pw, struct sshbuf *loginmsg)$/;"	f	typeref:typename:int
+sys_auth_get_lastlogin_msg	openbsd-compat/port-aix.c	/^sys_auth_get_lastlogin_msg(const char *user, uid_t uid)$/;"	f	typeref:typename:char *
+sys_auth_passwd	auth-passwd.c	/^sys_auth_passwd(struct ssh *ssh, const char *password)$/;"	f	typeref:typename:int
+sys_auth_passwd	auth-sia.c	/^sys_auth_passwd(struct ssh *ssh, const char *pass)$/;"	f	typeref:typename:int
+sys_auth_passwd	openbsd-compat/port-aix.c	/^sys_auth_passwd(struct ssh *ssh, const char *password)$/;"	f	typeref:typename:int
+sys_auth_passwd	openbsd-compat/port-uw.c	/^sys_auth_passwd(struct ssh *ssh, const char *password)$/;"	f	typeref:typename:int
+sys_auth_record_login	openbsd-compat/port-aix.c	/^sys_auth_record_login(const char *user, const char *host, const char *ttynm,$/;"	f	typeref:typename:int
+sys_get_rdomain	openbsd-compat/port-net.c	/^sys_get_rdomain(int fd)$/;"	f	typeref:typename:char *
+sys_set_process_rdomain	openbsd-compat/port-net.c	/^sys_set_process_rdomain(const char *name)$/;"	f	typeref:typename:void
+sys_set_rdomain	openbsd-compat/port-net.c	/^sys_set_rdomain(int fd, const char *name)$/;"	f	typeref:typename:int
+sys_tun_infilter	openbsd-compat/port-net.c	/^sys_tun_infilter(struct ssh *ssh, struct Channel *c, char *buf, int _len)$/;"	f	typeref:typename:int
+sys_tun_open	openbsd-compat/port-net.c	/^sys_tun_open(int tun, int mode, char **ifname)$/;"	f	typeref:typename:int
+sys_tun_outfilter	openbsd-compat/port-net.c	/^sys_tun_outfilter(struct ssh *ssh, struct Channel *c,$/;"	f	typeref:typename:u_char *
+sys_valid_rdomain	openbsd-compat/port-net.c	/^sys_valid_rdomain(const char *name)$/;"	f	typeref:typename:int
+syscall	sandbox-systrace.c	/^	int syscall;$/;"	m	struct:sandbox_policy	typeref:typename:int	file:
+sysconfdir	Makefile.in	/^sysconfdir=@sysconfdir@$/;"	m
+sysconfdir	contrib/cygwin/Makefile	/^sysconfdir=\/etc$/;"	m
+sysconfdir	openbsd-compat/Makefile.in	/^sysconfdir=@sysconfdir@$/;"	m
+sysconfdir	openbsd-compat/regress/Makefile.in	/^sysconfdir=@sysconfdir@$/;"	m
+syslogin_perform_login	loginrec.c	/^syslogin_perform_login(struct logininfo *li)$/;"	f	typeref:typename:int	file:
+syslogin_perform_logout	loginrec.c	/^syslogin_perform_logout(struct logininfo *li)$/;"	f	typeref:typename:int	file:
+syslogin_write_entry	loginrec.c	/^syslogin_write_entry(struct logininfo *li)$/;"	f	typeref:typename:int
+system_hostfiles	readconf.h	/^	char   *system_hostfiles[SSH_MAX_HOSTS_FILES];$/;"	m	struct:__anon7d31da1d0108	typeref:typename:char * []
+systrace_fd	sandbox-systrace.c	/^	int systrace_fd;$/;"	m	struct:ssh_sandbox	typeref:typename:int	file:
+t	ge25519.c	/^  fe25519 t;$/;"	m	struct:__anon8e832fe80108	typeref:typename:fe25519	file:
+t	ge25519.h	/^  fe25519 t;$/;"	m	struct:__anon8e832fed0108	typeref:typename:fe25519
+t	sftp.c	/^	const int t;	\/* Completion type for the first argument *\/$/;"	m	struct:CMD	typeref:typename:const int	file:
+t-exec	Makefile.in	/^interop-tests t-exec file-tests: regress-prep regress-binaries $(TARGETS)$/;"	t
+t-exec	openbsd-compat/regress/Makefile.in	/^t-exec:	$(TESTPROGS)$/;"	t
+t-exec	regress/Makefile	/^t-exec:	${LTESTS:=.sh}$/;"	t
+t-exec-interop	regress/Makefile	/^t-exec-interop:	${INTEROP_TESTS:=.sh}$/;"	t
+t-extra	regress/Makefile	/^t-extra:	${EXTRA_TESTS:=.sh}$/;"	t
+t1	regress/Makefile	/^t1:$/;"	t
+t10	regress/Makefile	/^t10: $(OBJ)\/t10.out$/;"	t
+t11	regress/Makefile	/^t11:$/;"	t
+t12	regress/Makefile	/^t12: $(OBJ)\/t12.out$/;"	t
+t2	regress/Makefile	/^t2:$/;"	t
+t2	sftp.c	/^	const int t2;	\/* completion type for the optional second argument *\/$/;"	m	struct:CMD	typeref:typename:const int	file:
+t3	regress/Makefile	/^t3:$/;"	t
+t4	regress/Makefile	/^t4:$/;"	t
+t5	regress/Makefile	/^t5:$/;"	t
+t6	regress/Makefile	/^t6:$/;"	t
+t7	regress/Makefile	/^t7: $(OBJ)\/t7.out$/;"	t
+t8	regress/Makefile	/^t8: $(OBJ)\/t8.out$/;"	t
+t9	regress/Makefile	/^t9: $(OBJ)\/t9.out$/;"	t
+target_list	readconf.h	/^	char *target_list;$/;"	m	struct:allowed_cname	typeref:typename:char *
+targetshouldbedirectory	scp.c	/^int Tflag, pflag, iamremote, iamrecursive, targetshouldbedirectory;$/;"	v	typeref:typename:int
+tau	chacha.c	/^static const char tau[16] = "expand 16-byte k";$/;"	v	typeref:typename:const char[16]	file:
+tau	openbsd-compat/chacha_private.h	/^static const char tau[16] = "expand 16-byte k";$/;"	v	typeref:typename:const char[16]
+tau	sntrup761.c	/^#define tau /;"	d	file:
+tau0	sntrup761.c	/^#define tau0 /;"	d	file:
+tau1	sntrup761.c	/^#define tau1 /;"	d	file:
+tau2	sntrup761.c	/^#define tau2 /;"	d	file:
+tau3	sntrup761.c	/^#define tau3 /;"	d	file:
+tcgetattr	openbsd-compat/bsd-nextstep.c	/^tcgetattr(int fd, struct termios *t)$/;"	f	typeref:typename:int
+tcgetpgrp	openbsd-compat/bsd-misc.c	/^tcgetpgrp(int fd)$/;"	f	typeref:typename:pid_t
+tcp_keep_alive	readconf.h	/^	int     tcp_keep_alive;	\/* Set SO_KEEPALIVE. *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+tcp_keep_alive	servconf.h	/^	int     tcp_keep_alive;	\/* If true, set SO_KEEPALIVE. *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+tcpconnect	ssh-keyscan.c	/^tcpconnect(char *host)$/;"	f	typeref:typename:int	file:
+tcsendbreak	openbsd-compat/bsd-misc.c	/^tcsendbreak(int fd, int duration)$/;"	f	typeref:typename:int
+tcsetattr	openbsd-compat/bsd-nextstep.c	/^tcsetattr(int fd, int opt, const struct termios *t)$/;"	f	typeref:typename:int
+tcsetpgrp	openbsd-compat/bsd-nextstep.c	/^int tcsetpgrp(int fd, pid_t pgrp)$/;"	f	typeref:typename:int
+temporarily_use_uid	uidswap.c	/^temporarily_use_uid(struct passwd *pw)$/;"	f	typeref:typename:void
+temporarily_use_uid_effective	uidswap.c	/^static int	temporarily_use_uid_effective = 0;$/;"	v	typeref:typename:int	file:
+term	mux.c	/^	char *term;$/;"	m	struct:mux_session_confirm_ctx	typeref:typename:char *	file:
+term	session.h	/^	char	*term;$/;"	m	struct:Session	typeref:typename:char *
+termination	loginrec.h	/^	int        termination;                 \/* process termination status *\/$/;"	m	struct:logininfo	typeref:typename:int
+test	openbsd-compat/regress/strduptest.c	/^test(const char *a)$/;"	f	typeref:typename:void
+test	openbsd-compat/regress/strtonumtest.c	/^test(const char *p, long long lb, long long ub, int ok)$/;"	f	typeref:typename:void
+test	servconf.h	/^	int test;		\/* test mode, allow some attributes to be$/;"	m	struct:connection_info	typeref:typename:int
+testAPI	logintest.c	/^testAPI()$/;"	f	typeref:typename:int
+testLineName	logintest.c	/^testLineName(char *line)$/;"	f	typeref:typename:void
+testOutput	logintest.c	/^testOutput()$/;"	f	typeref:typename:int
+test_all	regress/krl.sh	/^test_all() {$/;"	f
+test_argv	regress/unittests/misc/test_argv.c	/^test_argv(void)$/;"	f	typeref:typename:void
+test_auth	regress/allow-deny-users.sh	/^test_auth()$/;"	f
+test_authkeys_parse	regress/unittests/authopt/tests.c	/^test_authkeys_parse(void)$/;"	f	typeref:typename:void	file:
+test_buf	regress/unittests/sshbuf/test_sshbuf_fixed.c	/^const u_char test_buf[] = "\\x01\\x12\\x34\\x56\\x78\\x00\\x00\\x00\\x05hello";$/;"	v	typeref:typename:const u_char[]
+test_cert_parse	regress/unittests/authopt/tests.c	/^test_cert_parse(void)$/;"	f	typeref:typename:void	file:
+test_convtime	regress/unittests/misc/test_convtime.c	/^test_convtime(void)$/;"	f	typeref:typename:void
+test_data_file	regress/unittests/test_helper/test_helper.c	/^test_data_file(const char *name)$/;"	f	typeref:typename:const char *
+test_die	regress/unittests/test_helper/test_helper.c	/^test_die(void)$/;"	f	typeref:typename:void	file:
+test_done	regress/unittests/test_helper/test_helper.c	/^test_done(void)$/;"	f	typeref:typename:void
+test_expand	regress/unittests/misc/test_expand.c	/^test_expand(void)$/;"	f	typeref:typename:void
+test_flag	sshd.c	/^static int test_flag = 0;$/;"	v	typeref:typename:int	file:
+test_header	regress/unittests/test_helper/test_helper.c	/^test_header(const char *file, int line, const char *a1, const char *a2,$/;"	f	typeref:typename:void	file:
+test_hpdelim	regress/unittests/misc/test_hpdelim.c	/^test_hpdelim(void)$/;"	f	typeref:typename:void
+test_info	regress/unittests/test_helper/test_helper.c	/^test_info(char *s, size_t len)$/;"	f	typeref:typename:void
+test_is_fast	regress/unittests/test_helper/test_helper.c	/^test_is_fast(void)$/;"	f	typeref:typename:int
+test_is_quiet	regress/unittests/test_helper/test_helper.c	/^test_is_quiet(void)$/;"	f	typeref:typename:int
+test_is_slow	regress/unittests/test_helper/test_helper.c	/^test_is_slow(void)$/;"	f	typeref:typename:int
+test_is_verbose	regress/unittests/test_helper/test_helper.c	/^test_is_verbose(void)$/;"	f	typeref:typename:int
+test_iterate	regress/unittests/hostkeys/test_iterate.c	/^test_iterate(void)$/;"	f	typeref:typename:void
+test_key	ssh-add.c	/^test_key(int agent_fd, const char *filename)$/;"	f	typeref:typename:int	file:
+test_merge	regress/unittests/authopt/tests.c	/^test_merge(void)$/;"	f	typeref:typename:void	file:
+test_number	regress/unittests/test_helper/test_helper.c	/^static u_int test_number = 0;$/;"	v	typeref:typename:u_int	file:
+test_one	regress/cert-hostkey.sh	/^test_one() {$/;"	f
+test_one	regress/cert-userkey.sh	/^test_one() {$/;"	f
+test_one	regress/misc/fuzz-harness/agent_fuzz_helper.c	/^test_one(const uint8_t* s, size_t slen)$/;"	f	typeref:typename:void
+test_onerror	regress/unittests/test_helper/test_helper.c	/^static test_onerror_func_t *test_onerror = NULL;$/;"	v	typeref:typename:test_onerror_func_t *	file:
+test_onerror_func_t	regress/unittests/test_helper/test_helper.h	/^typedef void (test_onerror_func_t)(void *);$/;"	t	typeref:typename:void ()(void *)
+test_parse	regress/unittests/misc/test_parse.c	/^test_parse(void)$/;"	f	typeref:typename:void
+test_predicate	regress/unittests/test_helper/test_helper.h	/^enum test_predicate {$/;"	g
+test_rev	regress/krl.sh	/^test_rev() {$/;"	f
+test_start	regress/unittests/test_helper/test_helper.c	/^test_start(const char *n)$/;"	f	typeref:typename:void
+test_state	regress/misc/fuzz-harness/kex_fuzz.cc	/^struct test_state {$/;"	s	file:
+test_strdelim	regress/unittests/misc/test_strdelim.c	/^test_strdelim(void)$/;"	f	typeref:typename:void
+test_subtest_info	regress/unittests/test_helper/test_helper.c	/^test_subtest_info(const char *fmt, ...)$/;"	f	typeref:typename:void
+tests	Makefile.in	/^tests:	file-tests t-exec interop-tests unit$/;"	t
+tests	regress/Makefile	/^tests:		prep file-tests t-exec unit$/;"	t
+tests	regress/unittests/authopt/tests.c	/^tests(void)$/;"	f	typeref:typename:void
+tests	regress/unittests/bitmap/tests.c	/^tests(void)$/;"	f	typeref:typename:void
+tests	regress/unittests/conversion/tests.c	/^tests(void)$/;"	f	typeref:typename:void
+tests	regress/unittests/hostkeys/tests.c	/^tests(void)$/;"	f	typeref:typename:void
+tests	regress/unittests/kex/tests.c	/^tests(void)$/;"	f	typeref:typename:void
+tests	regress/unittests/match/tests.c	/^tests(void)$/;"	f	typeref:typename:void
+tests	regress/unittests/misc/tests.c	/^tests(void)$/;"	f	typeref:typename:void
+tests	regress/unittests/sshbuf/tests.c	/^tests(void)$/;"	f	typeref:typename:void
+tests	regress/unittests/sshkey/tests.c	/^tests(void)$/;"	f	typeref:typename:void
+tests	regress/unittests/sshsig/tests.c	/^tests(void)$/;"	f	typeref:typename:void
+tests	regress/unittests/utf8/tests.c	/^tests(void)$/;"	f	typeref:typename:void
+text	clientloop.c	/^	const char *text;$/;"	m	struct:escape_help_text	typeref:typename:const char *	file:
+text	servconf.c	/^	char *text;$/;"	m	struct:__anon9b33d3bc0308	typeref:typename:char *	file:
+tflag	regress/netcat.c	/^int	tflag;					\/* Telnet Emulation *\/$/;"	v	typeref:typename:int
+th_nodes	sshkey-xmss.c	/^	u_char		*th_nodes;$/;"	m	struct:ssh_xmss_state	typeref:typename:u_char *	file:
+the_active_state	sshd.c	/^struct ssh *the_active_state;$/;"	v	typeref:struct:ssh *
+the_authctxt	sshd.c	/^Authctxt *the_authctxt = NULL;$/;"	v	typeref:typename:Authctxt *
+thishost	sshconnect.h	/^	char *thishost;$/;"	m	struct:ssh_conn_info	typeref:typename:char *
+threebyte_memmem	openbsd-compat/memmem.c	/^threebyte_memmem(const unsigned char *h, size_t k, const unsigned char *n)$/;"	f	typeref:typename:char *	file:
+thresh	misc.h	/^	u_int64_t thresh;	\/* threshold after which we'll check timers *\/$/;"	m	struct:bwlimit	typeref:typename:u_int64_t
+throughlocal	scp.c	/^int throughlocal = 1;$/;"	v	typeref:typename:int
+throughlocal_sftp	scp.c	/^throughlocal_sftp(struct sftp_conn *from, struct sftp_conn *to,$/;"	f	typeref:typename:void
+tilde_expand	misc.c	/^tilde_expand(const char *filename, uid_t uid, char **retp)$/;"	f	typeref:typename:int
+tilde_expand_filename	misc.c	/^tilde_expand_filename(const char *filename, uid_t uid)$/;"	f	typeref:typename:char *
+tilde_expand_paths	ssh.c	/^tilde_expand_paths(char **paths, u_int num_paths)$/;"	f	typeref:typename:void	file:
+timegm	openbsd-compat/bsd-timegm.c	/^time_t timegm(struct tm *tm)$/;"	f	typeref:typename:time_t
+timeout	regress/netcat.c	/^int timeout = -1;$/;"	v	typeref:typename:int
+timeout	ssh-keyscan.c	/^int timeout = 5;$/;"	v	typeref:typename:int
+timeout_connect	misc.c	/^timeout_connect(int sockfd, const struct sockaddr *serv_addr,$/;"	f	typeref:typename:int
+timeout_connect	regress/netcat.c	/^#define timeout_connect /;"	d	file:
+timeout_connect	regress/netcat.c	/^timeout_connect(int s, const struct sockaddr *name, socklen_t namelen)$/;"	f	typeref:typename:int
+timersub	defines.h	/^#define timersub(/;"	d
+times19	fe25519.c	/^static crypto_uint32 times19(crypto_uint32 a)$/;"	f	typeref:typename:crypto_uint32	file:
+times38	fe25519.c	/^static crypto_uint32 times38(crypto_uint32 a)$/;"	f	typeref:typename:crypto_uint32	file:
+timespec	openbsd-compat/bsd-misc.h	/^struct timespec {$/;"	s
+timespecadd	defines.h	/^#define	timespecadd(/;"	d
+timespecclear	defines.h	/^#define	timespecclear(/;"	d
+timespeccmp	defines.h	/^#define	timespeccmp(/;"	d
+timespeccmp	defines.h	/^#define timespeccmp(/;"	d
+timespecsub	defines.h	/^#define	timespecsub(/;"	d
+timeval	openbsd-compat/bsd-misc.h	/^struct timeval {$/;"	s
+timing_secret	servconf.h	/^	u_int64_t timing_secret;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:u_int64_t
+timingsafe_bcmp	openbsd-compat/timingsafe_bcmp.c	/^timingsafe_bcmp(const void *b1, const void *b2, size_t n)$/;"	f	typeref:typename:int
+tinybits	moduli.c	/^static u_int32_t *TinySieve, tinybits;$/;"	v	typeref:typename:u_int32_t	file:
+tio	mux.c	/^	struct termios tio;$/;"	m	struct:mux_session_confirm_ctx	typeref:struct:termios	file:
+tmp_nonce_lo	umac.c	/^        UINT8 tmp_nonce_lo[4];$/;"	m	union:pdf_gen_xor::__anon20b5e17c020a	typeref:typename:UINT8[4]	file:
+tmpl_fd	openbsd-compat/port-solaris.c	/^static int tmpl_fd = -1;$/;"	v	typeref:typename:int	file:
+to	authfd.h	/^	struct dest_constraint_hop to;$/;"	m	struct:dest_constraint	typeref:struct:dest_constraint_hop
+to_blob	sshkey.c	/^to_blob(const struct sshkey *key, u_char **blobp, size_t *lenp, int force_plain,$/;"	f	typeref:typename:int	file:
+to_blob_buf	sshkey.c	/^to_blob_buf(const struct sshkey *key, struct sshbuf *b, int force_plain,$/;"	f	typeref:typename:int	file:
+to_byte	xmss_commons.c	/^void to_byte(unsigned char *out, unsigned long long in, uint32_t bytes)$/;"	f	typeref:typename:void
+tohex	misc.c	/^tohex(const void *vp, size_t l)$/;"	f	typeref:typename:char *
+tohex	regress/unittests/test_helper/test_helper.c	/^tohex(const void *_s, size_t l)$/;"	f	typeref:typename:char *	file:
+token	ssh-pkcs11.c	/^	CK_TOKEN_INFO		token;$/;"	m	struct:pkcs11_slotinfo	typeref:typename:CK_TOKEN_INFO	file:
+tolocal	scp.c	/^tolocal(int argc, char **argv, enum scp_mode_e mode, char *sftp_direct)$/;"	f	typeref:typename:void
+top	bitmap.c	/^	size_t top; \/* index of top word allocated *\/$/;"	m	struct:bitmap	typeref:typename:size_t	file:
+top_srcdir	Makefile.in	/^top_srcdir=@top_srcdir@$/;"	m
+top_srcdir	openbsd-compat/Makefile.in	/^top_srcdir=@top_srcdir@$/;"	m
+top_srcdir	openbsd-compat/regress/Makefile.in	/^top_srcdir=@top_srcdir@$/;"	m
+toremote	scp.c	/^toremote(int argc, char **argv, enum scp_mode_e mode, char *sftp_direct)$/;"	f	typeref:typename:void
+toskeywords	regress/netcat.c	/^	const struct toskeywords {$/;"	s	function:map_tos	file:
+total_private_memory	pkcs11.h	/^  unsigned long total_private_memory;$/;"	m	struct:ck_token_info	typeref:typename:unsigned long
+total_private_memory	pkcs11.h	/^#define total_private_memory /;"	d
+total_public_memory	pkcs11.h	/^  unsigned long total_public_memory;$/;"	m	struct:ck_token_info	typeref:typename:unsigned long
+total_public_memory	pkcs11.h	/^#define total_public_memory /;"	d
+trace	regress/test-exec.sh	/^trace ()$/;"	f
+translate_libcrypto_error	sshkey.c	/^translate_libcrypto_error(unsigned long pem_err)$/;"	f	typeref:typename:int	file:
+treehash	sshkey-xmss.c	/^	treehash_inst	*treehash;$/;"	m	struct:ssh_xmss_state	typeref:typename:treehash_inst *	file:
+treehash	xmss_fast.h	/^  treehash_inst *treehash;$/;"	m	struct:__anon22bef5f30508	typeref:typename:treehash_inst *
+treehash_inst	xmss_fast.h	/^} treehash_inst;$/;"	t	typeref:struct:__anon22bef5f30408
+treehash_minheight_on_stack	xmss_fast.c	/^static int treehash_minheight_on_stack(bds_state* state, const xmss_params *params, const treeha/;"	f	typeref:typename:int	file:
+treehash_setup	xmss_fast.c	/^static void treehash_setup(unsigned char *node, int height, int index, bds_state *state, const u/;"	f	typeref:typename:void	file:
+treehash_update	xmss_fast.c	/^static void treehash_update(treehash_inst *treehash, bds_state *state, const unsigned char *sk_s/;"	f	typeref:typename:void	file:
+trial	regress/cfginclude.sh	/^trial() {$/;"	f
+trial	regress/percent.sh	/^trial()$/;"	f
+trial	regress/servcfginclude.sh	/^trial() {$/;"	f
+tried	sshconnect2.c	/^	int	tried;$/;"	m	struct:identity	typeref:typename:int	file:
+truncate	openbsd-compat/bsd-misc.c	/^int truncate(const char *path, off_t length)$/;"	f	typeref:typename:int
+truncatebits	mac.c	/^	int		truncatebits;	\/* truncate digest if != 0 *\/$/;"	m	struct:macalg	typeref:typename:int	file:
+trusted_user_ca_keys	servconf.h	/^	char   *trusted_user_ca_keys;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:char *
+try_identity	sshconnect2.c	/^try_identity(struct ssh *ssh, Identity *id)$/;"	f	typeref:typename:int	file:
+try_read_key	ssh-keygen.c	/^try_read_key(char **cpp)$/;"	f	typeref:struct:sshkey *	file:
+try_tilde_unexpand	sshconnect.c	/^try_tilde_unexpand(const char *path)$/;"	f	typeref:typename:char *	file:
+try_token_libs	regress/agent-pkcs11.sh	/^try_token_libs() {$/;"	f
+ttl	openbsd-compat/getrrsetbyname.c	/^	u_int16_t		ttl;$/;"	m	struct:dns_rr	typeref:typename:u_int16_t	file:
+tty	session.h	/^	char	tty[TTYSZ];$/;"	m	struct:Session	typeref:typename:char[]
+tty_conv	auth-pam.c	/^static struct pam_conv tty_conv = { sshpam_tty_conv, NULL };$/;"	v	typeref:struct:pam_conv	file:
+tty_flag	ssh.c	/^int tty_flag = 0;$/;"	v	typeref:typename:int
+ttyfd	session.h	/^	int	ptyfd, ttyfd, ptymaster;$/;"	m	struct:Session	typeref:typename:int
+tun_fwd_ifnames	serverloop.c	/^char *tun_fwd_ifnames = NULL;$/;"	v	typeref:typename:char *
+tun_local	readconf.h	/^	int     tun_local;	\/* force tun device (optional) *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+tun_open	misc.c	/^tun_open(int tun, int mode, char **ifname)$/;"	f	typeref:typename:int
+tun_open	readconf.h	/^	int	tun_open;	\/* tun(4) *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+tun_remote	readconf.h	/^	int     tun_remote;	\/* force tun device (optional) *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+tunmode_desc	servconf.c	/^} tunmode_desc[] = {$/;"	v	typeref:struct:__anon9b33d3bc0308[]
+tv_nsec	openbsd-compat/bsd-misc.h	/^	long	tv_nsec;$/;"	m	struct:timespec	typeref:typename:long
+tv_sec	loginrec.h	/^	unsigned int tv_sec;$/;"	m	struct:logininfo	typeref:typename:unsigned int
+tv_sec	openbsd-compat/bsd-misc.h	/^	long tv_sec;$/;"	m	struct:timeval	typeref:typename:long
+tv_sec	openbsd-compat/bsd-misc.h	/^	time_t	tv_sec;$/;"	m	struct:timespec	typeref:typename:time_t
+tv_usec	loginrec.h	/^	unsigned int tv_usec;$/;"	m	struct:logininfo	typeref:typename:unsigned int
+tv_usec	openbsd-compat/bsd-misc.h	/^	long tv_usec;$/;"	m	struct:timeval	typeref:typename:long
+twobyte_memmem	openbsd-compat/memmem.c	/^twobyte_memmem(const unsigned char *h, size_t k, const unsigned char *n)$/;"	f	typeref:typename:char *	file:
+twoway_memmem	openbsd-compat/memmem.c	/^twoway_memmem(const unsigned char *h, const unsigned char *z,$/;"	f	typeref:typename:char *	file:
+type	channels.h	/^	int     type;		\/* channel type\/state *\/$/;"	m	struct:Channel	typeref:typename:int
+type	kex.c	/^	u_int type;$/;"	m	struct:kexalg	typeref:typename:u_int	file:
+type	kex.h	/^	u_int	type;$/;"	m	struct:sshcomp	typeref:typename:u_int
+type	loginrec.h	/^	short int  type;                         \/* type of login (LTYPE_*) *\/$/;"	m	struct:logininfo	typeref:typename:short int
+type	mac.c	/^	int		type;$/;"	m	struct:macalg	typeref:typename:int	file:
+type	mac.h	/^	int	type;$/;"	m	struct:sshmac	typeref:typename:int
+type	monitor.c	/^	enum monitor_reqtype type;$/;"	m	struct:mon_table	typeref:enum:monitor_reqtype	file:
+type	mux.c	/^	u_int type;$/;"	m	struct:__anon0ff59c300108	typeref:typename:u_int	file:
+type	openbsd-compat/getrrsetbyname.c	/^	u_int16_t		type;$/;"	m	struct:dns_query	typeref:typename:u_int16_t	file:
+type	openbsd-compat/getrrsetbyname.c	/^	u_int16_t		type;$/;"	m	struct:dns_rr	typeref:typename:u_int16_t	file:
+type	packet.c	/^	u_char type;$/;"	m	struct:packet	typeref:typename:u_char	file:
+type	pkcs11.h	/^  ck_attribute_type_t type;$/;"	m	struct:ck_attribute	typeref:typename:ck_attribute_type_t
+type	sftp-server.c	/^	u_int type;		\/* packet type, for non extended packets *\/$/;"	m	struct:sftp_handler	typeref:typename:u_int	file:
+type	ssh-agent.c	/^	sock_type type;$/;"	m	struct:socket_entry	typeref:typename:sock_type	file:
+type	sshkey.c	/^	int type;$/;"	m	struct:keytype	typeref:typename:int	file:
+type	sshkey.h	/^	int	 type;$/;"	m	struct:sshkey	typeref:typename:int
+type	sshkey.h	/^	u_int		 type; \/* SSH2_CERT_TYPE_USER or SSH2_CERT_TYPE_HOST *\/$/;"	m	struct:sshkey_cert	typeref:typename:u_int
+type_bits_valid	ssh-keygen.c	/^type_bits_valid(int type, const char *name, u_int32_t *bitsp)$/;"	f	typeref:typename:void	file:
+u16	rijndael.h	/^typedef unsigned short	u16;$/;"	t	typeref:typename:unsigned short
+u32	chacha.c	/^typedef unsigned int u32;$/;"	t	typeref:typename:unsigned int	file:
+u32	openbsd-compat/chacha_private.h	/^typedef unsigned int u32;$/;"	t	typeref:typename:unsigned int
+u32	rijndael.h	/^typedef unsigned int	u32;$/;"	t	typeref:typename:unsigned int
+u8	chacha.c	/^typedef unsigned char u8;$/;"	t	typeref:typename:unsigned char	file:
+u8	openbsd-compat/chacha_private.h	/^typedef unsigned char u8;$/;"	t	typeref:typename:unsigned char
+u8	rijndael.h	/^typedef unsigned char	u8;$/;"	t	typeref:typename:unsigned char
+u_char	defines.h	/^typedef unsigned char u_char;$/;"	t	typeref:typename:unsigned char
+u_int	defines.h	/^typedef unsigned int u_int;$/;"	t	typeref:typename:unsigned int
+u_int16_t	defines.h	/^typedef uint16_t u_int16_t;$/;"	t	typeref:typename:uint16_t
+u_int16_t	defines.h	/^typedef unsigned short int u_int16_t;$/;"	t	typeref:typename:unsigned short int
+u_int32_t	defines.h	/^typedef uint32_t u_int32_t;$/;"	t	typeref:typename:uint32_t
+u_int32_t	defines.h	/^typedef unsigned int u_int32_t;$/;"	t	typeref:typename:unsigned int
+u_int64_t	defines.h	/^typedef unsigned long int u_int64_t;$/;"	t	typeref:typename:unsigned long int
+u_int64_t	defines.h	/^typedef unsigned long long int u_int64_t;$/;"	t	typeref:typename:unsigned long long int
+u_int8_t	defines.h	/^typedef uint8_t u_int8_t;$/;"	t	typeref:typename:uint8_t
+u_int8_t	defines.h	/^typedef unsigned char u_int8_t;$/;"	t	typeref:typename:unsigned char
+udptest	regress/netcat.c	/^udptest(int s)$/;"	f	typeref:typename:int
+uflag	regress/netcat.c	/^int	uflag;					\/* UDP - Default to TCP *\/$/;"	v	typeref:typename:int
+uhash_ctx	umac.c	/^typedef struct uhash_ctx {$/;"	s	file:
+uhash_ctx	umac.c	/^} uhash_ctx;$/;"	t	typeref:struct:uhash_ctx	file:
+uhash_ctx_t	umac.c	/^typedef struct uhash_ctx *uhash_ctx_t;$/;"	t	typeref:struct:uhash_ctx *	file:
+uhash_final	umac.c	/^static int uhash_final(uhash_ctx_t ctx, u_char *res)$/;"	f	typeref:typename:int	file:
+uhash_init	umac.c	/^static void uhash_init(uhash_ctx_t ahc, aes_int_key prf_key)$/;"	f	typeref:typename:void	file:
+uhash_reset	umac.c	/^static int uhash_reset(uhash_ctx_t pc)$/;"	f	typeref:typename:int	file:
+uhash_update	umac.c	/^static int uhash_update(uhash_ctx_t ctx, const u_char *input, long len)$/;"	f	typeref:typename:int	file:
+uid	loginrec.h	/^	uid_t      uid;                          \/* UID of this user *\/$/;"	m	struct:logininfo	typeref:typename:uid_t
+uid	openbsd-compat/pwcache.c	/^		uid_t	uid;$/;"	m	struct:user_from_uid::ncache	typeref:typename:uid_t	file:
+uid	sftp-common.h	/^	u_int32_t	uid;$/;"	m	struct:Attrib	typeref:typename:u_int32_t
+uidstr	sshconnect.h	/^	char *uidstr;$/;"	m	struct:ssh_conn_info	typeref:typename:char *
+uint16	sntrup761.c	/^#define uint16 /;"	d	file:
+uint16_t	defines.h	/^typedef u_int16_t uint16_t;$/;"	t	typeref:typename:u_int16_t
+uint32	sntrup761.c	/^#define uint32 /;"	d	file:
+uint32_divmod_uint14	sntrup761.c	/^static void uint32_divmod_uint14(uint32 *q,uint16 *r,uint32 x,uint16 m)$/;"	f	typeref:typename:void	file:
+uint32_mod_uint14	sntrup761.c	/^static uint16 uint32_mod_uint14(uint32 x,uint16 m)$/;"	f	typeref:typename:uint16	file:
+uint32_t	defines.h	/^typedef u_int32_t uint32_t;$/;"	t	typeref:typename:u_int32_t
+uint64	sntrup761.c	/^#define uint64 /;"	d	file:
+uint64_t	defines.h	/^typedef u_int64_t uint64_t;$/;"	t	typeref:typename:u_int64_t
+uint8	sntrup761.c	/^#define uint8 /;"	d	file:
+uint8_t	defines.h	/^typedef u_int8_t uint8_t;$/;"	t	typeref:typename:u_int8_t
+uintmax_t	defines.h	/^typedef unsigned long long uintmax_t;$/;"	t	typeref:typename:unsigned long long
+umac_ctx	mac.h	/^	struct umac_ctx		*umac_ctx;$/;"	m	struct:sshmac	typeref:struct:umac_ctx *
+umac_ctx	umac.c	/^struct umac_ctx {$/;"	s	file:
+umac_ctx	umac.c	/^} umac_ctx;$/;"	v	typeref:struct:umac_ctx
+umac_ctx	umac128.c	/^#define umac_ctx	/;"	d	file:
+umac_delete	umac.c	/^int umac_delete(struct umac_ctx *ctx)$/;"	f	typeref:typename:int
+umac_delete	umac128.c	/^#define umac_delete	/;"	d	file:
+umac_final	umac.c	/^int umac_final(struct umac_ctx *ctx, u_char tag[], const u_char nonce[8])$/;"	f	typeref:typename:int
+umac_final	umac128.c	/^#define umac_final	/;"	d	file:
+umac_new	umac.c	/^struct umac_ctx *umac_new(const u_char key[])$/;"	f	typeref:struct:umac_ctx *
+umac_new	umac128.c	/^#define umac_new	/;"	d	file:
+umac_update	umac.c	/^int umac_update(struct umac_ctx *ctx, const u_char *input, long len)$/;"	f	typeref:typename:int
+umac_update	umac128.c	/^#define umac_update	/;"	d	file:
+uncompress_buffer	packet.c	/^uncompress_buffer(struct ssh *ssh, struct sshbuf *in, struct sshbuf *out)$/;"	f	typeref:typename:int	file:
+undo_glob_escape	sftp.c	/^undo_glob_escape(char *s)$/;"	f	typeref:typename:void	file:
+uninstall	Makefile.in	/^uninstall:$/;"	t
+uninstallall	Makefile.in	/^uninstallall:	uninstall$/;"	t
+unit	Makefile.in	/^unit: regress-unit-binaries$/;"	t
+unit	progressmeter.c	/^static const char unit[] = " KMGT";$/;"	v	typeref:typename:const char[]	file:
+unit	regress/Makefile	/^unit:$/;"	t
+unit_type	openbsd-compat/fmt_scaled.c	/^} unit_type;$/;"	t	typeref:enum:__anondc0b1e130103	file:
+units	openbsd-compat/fmt_scaled.c	/^static const unit_type units[] = { NONE, KILO, MEGA, GIGA, TERA, PETA, EXA };$/;"	v	typeref:typename:const unit_type[]	file:
+unix_bind	regress/netcat.c	/^unix_bind(char *path)$/;"	f	typeref:typename:int
+unix_connect	regress/netcat.c	/^unix_connect(char *path)$/;"	f	typeref:typename:int
+unix_dg_tmp_socket	regress/netcat.c	/^char *unix_dg_tmp_socket;$/;"	v	typeref:typename:char *
+unix_listen	regress/netcat.c	/^unix_listen(char *path)$/;"	f	typeref:typename:int
+unix_listener	misc.c	/^unix_listener(const char *path, int backlog, int unlink_first)$/;"	f	typeref:typename:int
+unlock_mutex	pkcs11.h	/^  ck_unlockmutex_t unlock_mutex;$/;"	m	struct:ck_c_initialize_args	typeref:typename:ck_unlockmutex_t
+unlock_mutex	pkcs11.h	/^#define unlock_mutex /;"	d
+unset_nonblock	misc.c	/^unset_nonblock(int fd)$/;"	f	typeref:typename:int
+unsetenv	openbsd-compat/setenv.c	/^unsetenv(const char *name)$/;"	f	typeref:typename:int
+update_card	ssh-add.c	/^update_card(int agent_fd, int add, const char *id, int qflag,$/;"	f	typeref:typename:int	file:
+update_hostkeys	readconf.h	/^	int	 update_hostkeys; \/* one of SSH_UPDATE_HOSTKEYS_* *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+update_known_hosts	clientloop.c	/^update_known_hosts(struct hostkeys_update_ctx *ctx)$/;"	f	typeref:typename:void	file:
+update_krl_from_file	ssh-keygen.c	/^update_krl_from_file(struct passwd *pw, const char *file, int wild_ca,$/;"	f	typeref:typename:void	file:
+upload_buflen	sftp-client.c	/^	u_int upload_buflen;$/;"	m	struct:sftp_conn	typeref:typename:u_int	file:
+upload_dir	sftp-client.c	/^upload_dir(struct sftp_conn *conn, const char *src, const char *dst,$/;"	f	typeref:typename:int
+upload_dir_internal	sftp-client.c	/^upload_dir_internal(struct sftp_conn *conn, const char *src, const char *dst,$/;"	f	typeref:typename:int	file:
+urandom32	sntrup761.c	/^static uint32 urandom32(void)$/;"	f	typeref:typename:uint32	file:
+urldecode	misc.c	/^urldecode(const char *src)$/;"	f	typeref:typename:char *	file:
+usage	regress/check-perm.c	/^usage(void)$/;"	f	typeref:typename:void	file:
+usage	regress/mkdtemp.c	/^usage(void)$/;"	f	typeref:typename:void	file:
+usage	regress/modpipe.c	/^usage(void)$/;"	f	typeref:typename:void	file:
+usage	regress/netcat.c	/^usage(int ret)$/;"	f	typeref:typename:void
+usage	regress/setuid-allowed.c	/^usage(void)$/;"	f	typeref:typename:void	file:
+usage	scp.c	/^usage(void)$/;"	f	typeref:typename:void
+usage	sftp.c	/^usage(void)$/;"	f	typeref:typename:void	file:
+usage	ssh-add.c	/^usage(void)$/;"	f	typeref:typename:void	file:
+usage	ssh-agent.c	/^usage(void)$/;"	f	typeref:typename:void	file:
+usage	ssh-keygen.c	/^usage(void)$/;"	f	typeref:typename:void	file:
+usage	ssh-keyscan.c	/^usage(void)$/;"	f	typeref:typename:void	file:
+usage	ssh.c	/^usage(void)$/;"	f	typeref:typename:void	file:
+usage	sshd.c	/^usage(void)$/;"	f	typeref:typename:void	file:
+use	sftp-server.c	/^	int use;$/;"	m	struct:Handle	typeref:typename:int	file:
+use_dns	servconf.h	/^	int	use_dns;$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+use_pam	servconf.h	/^	int	use_pam;		\/* Enable auth via PAM *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+use_privsep	ssh_api.c	/^int	use_privsep = 0;$/;"	v	typeref:typename:int
+use_privsep	sshd.c	/^int use_privsep = -1;$/;"	v	typeref:typename:int
+used	session.h	/^	int	used;$/;"	m	struct:Session	typeref:typename:int
+user	auth.h	/^	char		*user;		\/* username sent by the client *\/$/;"	m	struct:Authctxt	typeref:typename:char *
+user	authfd.h	/^	char *user;	\/* wildcards allowed *\/$/;"	m	struct:dest_constraint_hop	typeref:typename:char *
+user	readconf.h	/^	char   *user;		\/* User to log in as. *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:char *
+user	servconf.h	/^	const char *user;$/;"	m	struct:connection_info	typeref:typename:const char *
+user_cert_trusted_ca	auth2-pubkey.c	/^user_cert_trusted_ca(struct passwd *pw, struct sshkey *key,$/;"	f	typeref:typename:int	file:
+user_from_uid	openbsd-compat/pwcache.c	/^user_from_uid(uid_t uid, int nouser)$/;"	f	typeref:typename:char *
+user_groups	uidswap.c	/^static gid_t	*saved_egroups = NULL, *user_groups = NULL;$/;"	v	typeref:typename:gid_t *	file:
+user_groups_uid	uidswap.c	/^static uid_t	user_groups_uid;$/;"	v	typeref:typename:uid_t	file:
+user_groupslen	uidswap.c	/^static int	saved_egroupslen = -1, user_groupslen = -1;$/;"	v	typeref:typename:int	file:
+user_hostfiles	readconf.h	/^	char   *user_hostfiles[SSH_MAX_HOSTS_FILES];$/;"	m	struct:__anon7d31da1d0108	typeref:typename:char * []
+user_id	sk-api.h	/^	uint8_t *user_id;$/;"	m	struct:sk_resident_key	typeref:typename:uint8_t *
+user_id	ssh-sk.h	/^	uint8_t *user_id;$/;"	m	struct:sshsk_resident_key	typeref:typename:uint8_t *
+user_id_len	sk-api.h	/^	size_t user_id_len;$/;"	m	struct:sk_resident_key	typeref:typename:size_t
+user_id_len	ssh-sk.h	/^	size_t user_id_len;$/;"	m	struct:sshsk_resident_key	typeref:typename:size_t
+user_idname	sftp-usergroup.c	/^static struct idname_tree user_idname = RB_INITIALIZER(&user_idname);$/;"	v	typeref:struct:idname_tree	file:
+user_key_allowed	auth2-pubkey.c	/^user_key_allowed(struct ssh *ssh, struct passwd *pw, struct sshkey *key,$/;"	f	typeref:typename:int
+user_key_allowed2	auth2-pubkey.c	/^user_key_allowed2(struct passwd *pw, struct sshkey *key,$/;"	f	typeref:typename:int	file:
+user_key_command_allowed2	auth2-pubkey.c	/^user_key_command_allowed2(struct passwd *user_pw, struct sshkey *key,$/;"	f	typeref:typename:int	file:
+user_path	configure.ac	/^	AC_SUBST([user_path])$/;"	s
+user_specific_delay	auth2.c	/^user_specific_delay(const char *user)$/;"	f	typeref:typename:double	file:
+userauth	auth.h	/^	int	(*userauth)(struct ssh *, const char *);$/;"	m	struct:Authmethod	typeref:typename:int (*)(struct ssh *,const char *)
+userauth	sshconnect2.c	/^	int	(*userauth)(struct ssh *ssh);$/;"	m	struct:cauthmethod	typeref:typename:int (*)(struct ssh * ssh)	file:
+userauth	sshconnect2.c	/^userauth(struct ssh *ssh, char *authlist)$/;"	f	typeref:typename:void
+userauth_banner	auth2.c	/^userauth_banner(struct ssh *ssh)$/;"	f	typeref:typename:void	file:
+userauth_finish	auth2.c	/^userauth_finish(struct ssh *ssh, int authenticated, const char *packet_method,$/;"	f	typeref:typename:void
+userauth_gssapi	auth2-gss.c	/^userauth_gssapi(struct ssh *ssh, const char *method)$/;"	f	typeref:typename:int	file:
+userauth_gssapi	sshconnect2.c	/^userauth_gssapi(struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+userauth_gssapi_cleanup	sshconnect2.c	/^userauth_gssapi_cleanup(struct ssh *ssh)$/;"	f	typeref:typename:void	file:
+userauth_hostbased	auth2-hostbased.c	/^userauth_hostbased(struct ssh *ssh, const char *method)$/;"	f	typeref:typename:int	file:
+userauth_hostbased	sshconnect2.c	/^userauth_hostbased(struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+userauth_kbdint	auth2-kbdint.c	/^userauth_kbdint(struct ssh *ssh, const char *method)$/;"	f	typeref:typename:int	file:
+userauth_kbdint	sshconnect2.c	/^userauth_kbdint(struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+userauth_none	auth2-none.c	/^userauth_none(struct ssh *ssh, const char *method)$/;"	f	typeref:typename:int	file:
+userauth_none	sshconnect2.c	/^userauth_none(struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+userauth_passwd	auth2-passwd.c	/^userauth_passwd(struct ssh *ssh, const char *method)$/;"	f	typeref:typename:int	file:
+userauth_passwd	sshconnect2.c	/^userauth_passwd(struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+userauth_pubkey	auth2-pubkey.c	/^userauth_pubkey(struct ssh *ssh, const char *method)$/;"	f	typeref:typename:int	file:
+userauth_pubkey	sshconnect2.c	/^userauth_pubkey(struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+userauth_send_banner	auth2.c	/^userauth_send_banner(struct ssh *ssh, const char *msg)$/;"	f	typeref:typename:void	file:
+userid	scp.c	/^uid_t userid;$/;"	v	typeref:typename:uid_t
+username	loginrec.h	/^	char       username[LINFO_NAMESIZE];     \/* login username *\/$/;"	m	struct:logininfo	typeref:typename:char[]
+username	regress/unittests/sshsig/webauthn.html	/^<td><input id="username" type="text" size="20" name="user" value="test" \/><\/td>$/;"	I
+userok	ssh-gss.h	/^	int (*userok) (ssh_gssapi_client *, char *);$/;"	m	struct:ssh_gssapi_mech_struct	typeref:typename:int (*)(ssh_gssapi_client *,char *)
+userprovided	sshconnect2.c	/^	int	userprovided;$/;"	m	struct:identity	typeref:typename:int	file:
+usleep	openbsd-compat/bsd-misc.c	/^int usleep(unsigned int useconds)$/;"	f	typeref:typename:int
+utc_time	pkcs11.h	/^  unsigned char utc_time[16];$/;"	m	struct:ck_token_info	typeref:typename:unsigned char[16]
+utc_time	pkcs11.h	/^#define utc_time /;"	d
+utimensat	openbsd-compat/bsd-misc.c	/^utimensat(int fd, const char *path, const struct timespec times[2],$/;"	f	typeref:typename:int
+utimes	openbsd-compat/bsd-misc.c	/^int utimes(const char *filename, struct timeval *tvp)$/;"	f	typeref:typename:int
+utmp	configure.ac	/^AC_ARG_ENABLE([utmp],$/;"	e
+utmp_len	sshd.c	/^u_int utmp_len = HOST_NAME_MAX+1;$/;"	v	typeref:typename:u_int
+utmp_perform_login	loginrec.c	/^utmp_perform_login(struct logininfo *li)$/;"	f	typeref:typename:int	file:
+utmp_perform_logout	loginrec.c	/^utmp_perform_logout(struct logininfo *li)$/;"	f	typeref:typename:int	file:
+utmp_write_direct	loginrec.c	/^utmp_write_direct(struct logininfo *li, struct utmp *ut)$/;"	f	typeref:typename:int	file:
+utmp_write_entry	loginrec.c	/^utmp_write_entry(struct logininfo *li)$/;"	f	typeref:typename:int
+utmp_write_library	loginrec.c	/^utmp_write_library(struct logininfo *li, struct utmp *ut)$/;"	f	typeref:typename:int	file:
+utmpx	configure.ac	/^AC_ARG_ENABLE([utmpx],$/;"	e
+utmpx_get_entry	loginrec.c	/^utmpx_get_entry(struct logininfo *li)$/;"	f	typeref:typename:int
+utmpx_perform_login	loginrec.c	/^utmpx_perform_login(struct logininfo *li)$/;"	f	typeref:typename:int	file:
+utmpx_perform_logout	loginrec.c	/^utmpx_perform_logout(struct logininfo *li)$/;"	f	typeref:typename:int	file:
+utmpx_write_direct	loginrec.c	/^utmpx_write_direct(struct logininfo *li, struct utmpx *utx)$/;"	f	typeref:typename:int	file:
+utmpx_write_entry	loginrec.c	/^utmpx_write_entry(struct logininfo *li)$/;"	f	typeref:typename:int
+utmpx_write_library	loginrec.c	/^utmpx_write_library(struct logininfo *li, struct utmpx *utx)$/;"	f	typeref:typename:int	file:
+v	fe25519.h	/^  crypto_uint32 v[32]; $/;"	m	struct:__anon1a06beec0108	typeref:typename:crypto_uint32[32]
+v	sc25519.h	/^  crypto_uint32 v[16]; $/;"	m	struct:__anon2bd4d2370208	typeref:typename:crypto_uint32[16]
+v	sc25519.h	/^  crypto_uint32 v[32]; $/;"	m	struct:__anon2bd4d2370108	typeref:typename:crypto_uint32[32]
+v4	addr.h	/^		struct in_addr		v4;$/;"	m	union:xaddr::__anonf16dbd56010a	typeref:struct:in_addr
+v4	addr.h	/^#define v4	/;"	d
+v6	addr.h	/^		struct in6_addr		v6;$/;"	m	union:xaddr::__anonf16dbd56010a	typeref:struct:in6_addr
+v6	addr.h	/^#define v6	/;"	d
+va_copy	defines.h	/^#  define va_copy(/;"	d
+val	log.c	/^	LogLevel val;$/;"	m	struct:__anon0fdff1180208	typeref:typename:LogLevel	file:
+val	log.c	/^	SyslogFacility val;$/;"	m	struct:__anon0fdff1180108	typeref:typename:SyslogFacility	file:
+val	openbsd-compat/getopt.h	/^	int val;$/;"	m	struct:option	typeref:typename:int
+val	regress/netcat.c	/^		int		 val;$/;"	m	struct:map_tos::toskeywords	typeref:typename:int	file:
+val	servconf.c	/^	int val;$/;"	m	struct:__anon9b33d3bc0308	typeref:typename:int	file:
+val	session.h	/^		char	*val;$/;"	m	struct:Session::__anon24519b1f0108	typeref:typename:char *
+val	ssh-keygen.c	/^	char *val;$/;"	m	struct:cert_ext	typeref:typename:char *	file:
+valid	auth.h	/^	int		 valid;		\/* user exists and is allowed to login *\/$/;"	m	struct:Authctxt	typeref:typename:int
+valid	ssh-pkcs11.c	/^	int			valid;$/;"	m	struct:pkcs11_provider	typeref:typename:int	file:
+valid_after	sshkey.h	/^	u_int64_t	 valid_after, valid_before;$/;"	m	struct:sshkey_cert	typeref:typename:u_int64_t
+valid_after	sshsig.c	/^	uint64_t valid_after, valid_before;$/;"	m	struct:sshsigopt	typeref:typename:uint64_t	file:
+valid_before	auth-options.h	/^	uint64_t valid_before;$/;"	m	struct:sshauthopt	typeref:typename:uint64_t
+valid_before	sshkey.h	/^	u_int64_t	 valid_after, valid_before;$/;"	m	struct:sshkey_cert	typeref:typename:u_int64_t
+valid_before	sshsig.c	/^	uint64_t valid_after, valid_before;$/;"	m	struct:sshsigopt	typeref:typename:uint64_t	file:
+valid_domain	misc.c	/^valid_domain(char *name, int makelower, const char **errstr)$/;"	f	typeref:typename:int
+valid_env_name	misc.c	/^valid_env_name(const char *name)$/;"	f	typeref:typename:int
+valid_rdomain	openbsd-compat/port-net.c	/^valid_rdomain(const char *name)$/;"	f	typeref:typename:int
+valid_rdomain	servconf.c	/^valid_rdomain(const char *name)$/;"	f	typeref:typename:int	file:
+valid_request	ssh-keysign.c	/^valid_request(struct passwd *pw, char *host, struct sshkey **ret, char **pkalgp,$/;"	f	typeref:typename:int	file:
+validate_authpath	xmss_fast.c	/^static void validate_authpath(unsigned char *root, const unsigned char *leaf, unsigned long leaf/;"	f	typeref:typename:void	file:
+value	misc.c	/^	int value;$/;"	m	struct:__anon0dce19420208	typeref:typename:int	file:
+value	openbsd-compat/port-linux.c	/^	int value;$/;"	m	struct:__anon8408cfa30108	typeref:typename:int	file:
+value	pkcs11.h	/^  void *value;$/;"	m	struct:ck_attribute	typeref:typename:void *
+value	pkcs11.h	/^#define value /;"	d
+value	readconf.c	/^	int value;$/;"	m	struct:multistate	typeref:typename:int	file:
+value	servconf.c	/^	int value;$/;"	m	struct:multistate	typeref:typename:int	file:
+value	sk-api.h	/^	char *value;$/;"	m	struct:sk_option	typeref:typename:char *
+value_len	pkcs11.h	/^  unsigned long value_len;$/;"	m	struct:ck_attribute	typeref:typename:unsigned long
+value_len	pkcs11.h	/^#define value_len /;"	d
+vasnmprintf	utf8.c	/^vasnmprintf(char **str, size_t maxsz, int *wp, const char *fmt, va_list ap)$/;"	f	typeref:typename:int
+vasprintf	openbsd-compat/bsd-asprintf.c	/^vasprintf(char **str, const char *fmt, va_list ap)$/;"	f	typeref:typename:int
+vdollar_percent_expand	misc.c	/^vdollar_percent_expand(int *parseerror, int dollar, int percent,$/;"	f	typeref:typename:char *	file:
+ver	contrib/redhat/openssh.spec	/^%global ver 9.1p1$/;"	g
+verbose	log.h	/^#define verbose(/;"	d
+verbose	regress/test-exec.sh	/^verbose ()$/;"	f
+verbose_f	log.h	/^#define verbose_f(/;"	d
+verbose_fr	log.h	/^#define verbose_fr(/;"	d
+verbose_mode	regress/unittests/test_helper/test_helper.c	/^static int verbose_mode = 0;$/;"	v	typeref:typename:int	file:
+verbose_mode	scp.c	/^int verbose_mode = 0;$/;"	v	typeref:typename:int
+verbose_r	log.h	/^#define verbose_r(/;"	d
+verify_host_key	kex.h	/^	int	(*verify_host_key)(struct sshkey *, struct ssh *);$/;"	m	struct:kex	typeref:typename:int (*)(struct sshkey *,struct ssh *)
+verify_host_key	sshconnect.c	/^verify_host_key(char *host, struct sockaddr *hostaddr, struct sshkey *host_key,$/;"	f	typeref:typename:int
+verify_host_key_callback	sshconnect2.c	/^verify_host_key_callback(struct sshkey *hostkey, struct ssh *ssh)$/;"	f	typeref:typename:int	file:
+verify_host_key_dns	dns.c	/^verify_host_key_dns(const char *hostname, struct sockaddr *address,$/;"	f	typeref:typename:int
+verify_host_key_dns	readconf.h	/^	int	verify_host_key_dns;	\/* Verify host key using DNS *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+verifydir	scp.c	/^verifydir(char *cp)$/;"	f	typeref:typename:void
+version	channels.c	/^		u_int8_t version;$/;"	m	struct:channel_decode_socks4::__anonb8c1f4220108	typeref:typename:u_int8_t	file:
+version	channels.c	/^		u_int8_t version;$/;"	m	struct:channel_decode_socks5::__anonb8c1f4220208	typeref:typename:u_int8_t	file:
+version	pkcs11.h	/^  struct ck_version version;$/;"	m	struct:ck_function_list	typeref:struct:ck_version
+version	sftp-client.c	/^	u_int version;$/;"	m	struct:sftp_conn	typeref:typename:u_int	file:
+version	sftp-server.c	/^static u_int version;$/;"	v	typeref:typename:u_int	file:
+version_addendum	servconf.h	/^	char   *version_addendum;	\/* Appended to SSH banner *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:char *
+version_test	openbsd-compat/regress/opensslvertest.c	/^struct version_test {$/;"	s	file:
+version_tests	openbsd-compat/regress/opensslvertest.c	/^} version_tests[] = {$/;"	v	typeref:struct:version_test[]
+veryclean	Makefile.in	/^veryclean: distclean$/;"	t
+vflag	regress/netcat.c	/^int	vflag;					\/* Verbosity *\/$/;"	v	typeref:typename:int
+vfmprintf	utf8.c	/^vfmprintf(FILE *stream, const char *fmt, va_list ap)$/;"	f	typeref:typename:int
+vis	openbsd-compat/vis.c	/^vis(char *dst, int c, int flag, int nextc)$/;"	f	typeref:typename:char *
+visual_host_key	readconf.h	/^	int	visual_host_key;$/;"	m	struct:__anon7d31da1d0108	typeref:typename:int
+vsnprintf	openbsd-compat/bsd-snprintf.c	/^vsnprintf (char *str, size_t count, const char *fmt, va_list args)$/;"	f	typeref:typename:int
+vwrite	atomicio.h	/^#define vwrite /;"	d
+w	sntrup761.c	/^#define w /;"	d	file:
+w	sshkey-xmss.c	/^	u_int32_t	n, w, h, k;$/;"	m	struct:ssh_xmss_state	typeref:typename:u_int32_t	file:
+w	xmss_wots.h	/^  uint32_t w;$/;"	m	struct:__anon4b6487d20108	typeref:typename:uint32_t
+wait	openbsd-compat/bsd-nextstep.h	/^#define wait(/;"	d
+wait_for_mux_master_ready	regress/multiplex.sh	/^wait_for_mux_master_ready()$/;"	f
+wait_for_process_to_exit	regress/forward-control.sh	/^wait_for_process_to_exit() {$/;"	f
+wait_until_can_do_something	serverloop.c	/^wait_until_can_do_something(struct ssh *ssh,$/;"	f	typeref:typename:void	file:
+waitfd	misc.c	/^waitfd(int fd, int *timeoutp, short events)$/;"	f	typeref:typename:int	file:
+waitpid	openbsd-compat/bsd-waitpid.c	/^waitpid(int pid, int *stat_loc, int options)$/;"	f	typeref:typename:pid_t
+waitrfd	misc.c	/^waitrfd(int fd, int *timeoutp) {$/;"	f	typeref:typename:int
+want_agent_fwd	mux.c	/^	u_int want_agent_fwd;$/;"	m	struct:mux_session_confirm_ctx	typeref:typename:u_int	file:
+want_subsys	mux.c	/^	u_int want_subsys;$/;"	m	struct:mux_session_confirm_ctx	typeref:typename:u_int	file:
+want_tty	mux.c	/^	u_int want_tty;$/;"	m	struct:mux_session_confirm_ctx	typeref:typename:u_int	file:
+want_x_fwd	mux.c	/^	u_int want_x_fwd;$/;"	m	struct:mux_session_confirm_ctx	typeref:typename:u_int	file:
+warn	openbsd-compat/bsd-err.c	/^warn(const char *fmt, ...)$/;"	f	typeref:typename:void
+warn_changed_key	sshconnect.c	/^warn_changed_key(struct sshkey *host_key)$/;"	f	typeref:typename:void	file:
+warn_expiry	auth-passwd.c	/^warn_expiry(Authctxt *authctxt, auth_session_t *as)$/;"	f	typeref:typename:void	file:
+warnx	openbsd-compat/getopt_long.c	/^#define warnx	/;"	d	file:
+wcwidth	openbsd-compat/openbsd-compat.h	/^# define wcwidth(/;"	d
+we_need	kex.h	/^	u_int	we_need;$/;"	m	struct:kex	typeref:typename:u_int
+webauthn test	regress/unittests/sshsig/webauthn.html	/^<h1>webauthn test<\/h1>$/;"	h
+webauthn_check_prepare_hash	ssh-ecdsa-sk.c	/^webauthn_check_prepare_hash(const u_char *data, size_t datalen,$/;"	f	typeref:typename:int	file:
+wenv	openbsd-compat/bsd-cygwin_util.c	/^static struct wenv {$/;"	s	file:
+wenv_arr	openbsd-compat/bsd-cygwin_util.c	/^} wenv_arr[] = {$/;"	v	typeref:struct:wenv[]
+wfd	channels.h	/^	int     wfd;		\/* write fd *\/$/;"	m	struct:Channel	typeref:typename:int
+wfd_isatty	channels.h	/^	int     wfd_isatty;	\/* wfd is a tty *\/$/;"	m	struct:Channel	typeref:typename:int
+what	regress/modpipe.c	/^	enum { MOD_XOR, MOD_AND_OR } what;$/;"	m	struct:modification	typeref:enum:modification::__anonde2ca40e0103	file:
+which	contrib/findssl.sh	/^    which () {$/;"	f
+which	regress/test-exec.sh	/^which()$/;"	f
+win_resized	progressmeter.c	/^static volatile sig_atomic_t win_resized; \/* for window resizing *\/$/;"	v	typeref:typename:volatile sig_atomic_t	file:
+win_size	progressmeter.c	/^static int win_size;		\/* terminal window size *\/$/;"	v	typeref:typename:int	file:
+window_change_handler	clientloop.c	/^window_change_handler(int sig)$/;"	f	typeref:typename:void	file:
+winsize	defines.h	/^struct winsize {$/;"	s
+wots_log2	xmss_wots.c	/^wots_log2(uint32_t v)$/;"	f	typeref:typename:int	file:
+wots_par	xmss_fast.h	/^  wots_params wots_par;$/;"	m	struct:__anon22bef5f30208	typeref:typename:wots_params
+wots_params	xmss_wots.h	/^} wots_params;$/;"	t	typeref:struct:__anon4b6487d20108
+wots_pkFromSig	xmss_wots.c	/^int wots_pkFromSig(unsigned char *pk, const unsigned char *sig, const unsigned char *msg, const /;"	f	typeref:typename:int
+wots_pkgen	xmss_wots.c	/^void wots_pkgen(unsigned char *pk, const unsigned char *sk, const wots_params *params, const uns/;"	f	typeref:typename:void
+wots_set_params	xmss_wots.c	/^wots_set_params(wots_params *params, int n, int w)$/;"	f	typeref:typename:void
+wots_sign	xmss_wots.c	/^int wots_sign(unsigned char *sig, const unsigned char *msg, const unsigned char *sk, const wots_/;"	f	typeref:typename:int
+wrap_key	ssh-pkcs11-client.c	/^wrap_key(struct sshkey *k)$/;"	f	typeref:typename:void	file:
+write_checkpoint	moduli.c	/^write_checkpoint(char *cpfile, u_int32_t lineno)$/;"	f	typeref:typename:void	file:
+write_host_entry	hostfile.c	/^write_host_entry(FILE *f, const char *host, const char *ip,$/;"	f	typeref:typename:int	file:
+write_length	sftp-client.h	/^	u_int64_t write_length;$/;"	m	struct:sftp_limits	typeref:typename:u_int64_t
+writemsg	readpass.c	/^writemsg(const char *msg)$/;"	f	typeref:typename:void	file:
+ws_col	defines.h	/^      unsigned short ws_col;          \/* columns, in character *\/$/;"	m	struct:winsize	typeref:typename:unsigned short
+ws_row	defines.h	/^      unsigned short ws_row;          \/* rows, in characters *\/$/;"	m	struct:winsize	typeref:typename:unsigned short
+ws_xpixel	defines.h	/^      unsigned short ws_xpixel;       \/* horizontal size, pixels *\/$/;"	m	struct:winsize	typeref:typename:unsigned short
+ws_ypixel	defines.h	/^      unsigned short ws_ypixel;       \/* vertical size, pixels *\/$/;"	m	struct:winsize	typeref:typename:unsigned short
+wtail	mdoc2man.awk	/^function wtail() {$/;"	f
+wtmp	configure.ac	/^AC_ARG_ENABLE([wtmp],$/;"	e
+wtmp_get_entry	loginrec.c	/^wtmp_get_entry(struct logininfo *li)$/;"	f	typeref:typename:int
+wtmp_islogin	loginrec.c	/^wtmp_islogin(struct logininfo *li, struct utmp *ut)$/;"	f	typeref:typename:int	file:
+wtmp_perform_login	loginrec.c	/^wtmp_perform_login(struct logininfo *li)$/;"	f	typeref:typename:int	file:
+wtmp_perform_logout	loginrec.c	/^wtmp_perform_logout(struct logininfo *li)$/;"	f	typeref:typename:int	file:
+wtmp_write	loginrec.c	/^wtmp_write(struct logininfo *li, struct utmp *ut)$/;"	f	typeref:typename:int	file:
+wtmp_write_entry	loginrec.c	/^wtmp_write_entry(struct logininfo *li)$/;"	f	typeref:typename:int
+wtmpx	configure.ac	/^AC_ARG_ENABLE([wtmpx],$/;"	e
+wtmpx_get_entry	loginrec.c	/^wtmpx_get_entry(struct logininfo *li)$/;"	f	typeref:typename:int
+wtmpx_islogin	loginrec.c	/^wtmpx_islogin(struct logininfo *li, struct utmpx *utx)$/;"	f	typeref:typename:int	file:
+wtmpx_perform_login	loginrec.c	/^wtmpx_perform_login(struct logininfo *li)$/;"	f	typeref:typename:int	file:
+wtmpx_perform_logout	loginrec.c	/^wtmpx_perform_logout(struct logininfo *li)$/;"	f	typeref:typename:int	file:
+wtmpx_write	loginrec.c	/^wtmpx_write(struct logininfo *li, struct utmpx *utx)$/;"	f	typeref:typename:int	file:
+wtmpx_write_entry	loginrec.c	/^wtmpx_write_entry(struct logininfo *li)$/;"	f	typeref:typename:int
+x	ge25519.c	/^  fe25519 x;$/;"	m	struct:__anon8e832fe80108	typeref:typename:fe25519	file:
+x	ge25519.c	/^  fe25519 x;$/;"	m	struct:__anon8e832fe80208	typeref:typename:fe25519	file:
+x	ge25519.c	/^  fe25519 x;$/;"	m	struct:__anon8e832fe80308	typeref:typename:fe25519	file:
+x	ge25519.h	/^  fe25519 x;$/;"	m	struct:__anon8e832fed0108	typeref:typename:fe25519
+x11_chanids	session.h	/^	int	*x11_chanids;$/;"	m	struct:Session	typeref:typename:int *
+x11_connect_display	channels.c	/^x11_connect_display(struct ssh *ssh)$/;"	f	typeref:typename:int
+x11_create_display_inet	channels.c	/^x11_create_display_inet(struct ssh *ssh, int x11_display_offset,$/;"	f	typeref:typename:int
+x11_display_offset	servconf.h	/^	int     x11_display_offset;	\/* What DISPLAY number to start$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+x11_fake_data	channels.c	/^	u_char *x11_fake_data;$/;"	m	struct:ssh_channels	typeref:typename:u_char *	file:
+x11_fake_data_len	channels.c	/^	u_int x11_fake_data_len;$/;"	m	struct:ssh_channels	typeref:typename:u_int	file:
+x11_forwarding	servconf.h	/^	int     x11_forwarding;	\/* If true, permit inet (spoofing) X11 fwd. *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+x11_open_helper	channels.c	/^x11_open_helper(struct ssh *ssh, struct sshbuf *b)$/;"	f	typeref:typename:int	file:
+x11_refuse_time	channels.c	/^	u_int x11_refuse_time;$/;"	m	struct:ssh_channels	typeref:typename:u_int	file:
+x11_refuse_time	clientloop.c	/^static u_int x11_refuse_time;	\/* If >0, refuse x11 opens after this time. *\/$/;"	v	typeref:typename:u_int	file:
+x11_request_forwarding_with_spoofing	channels.c	/^x11_request_forwarding_with_spoofing(struct ssh *ssh, int client_session_id,$/;"	f	typeref:typename:void
+x11_saved_data	channels.c	/^	char *x11_saved_data;$/;"	m	struct:ssh_channels	typeref:typename:char *	file:
+x11_saved_data_len	channels.c	/^	u_int x11_saved_data_len;$/;"	m	struct:ssh_channels	typeref:typename:u_int	file:
+x11_saved_display	channels.c	/^	char *x11_saved_display;$/;"	m	struct:ssh_channels	typeref:typename:char *	file:
+x11_saved_proto	channels.c	/^	char *x11_saved_proto;$/;"	m	struct:ssh_channels	typeref:typename:char *	file:
+x11_use_localhost	servconf.h	/^	int     x11_use_localhost;	\/* If true, use localhost for fake X11 server. *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:int
+x_snprintf	openbsd-compat/regress/snprintftest.c	/^int x_snprintf(char *str, size_t count, const char *fmt, ...)$/;"	f	typeref:typename:int
+xa	addr.h	/^	} xa;		    \/* 128-bit address *\/$/;"	m	struct:xaddr	typeref:union:xaddr::__anonf16dbd56010a
+xaddr	addr.h	/^struct xaddr {$/;"	s
+xasprintf	xmalloc.c	/^xasprintf(char **ret, const char *fmt, ...)$/;"	f	typeref:typename:int
+xauth	configure.ac	/^AC_ARG_WITH([xauth],$/;"	w
+xauth_location	readconf.h	/^	char   *xauth_location;	\/* Location for xauth program *\/$/;"	m	struct:__anon7d31da1d0108	typeref:typename:char *
+xauth_location	servconf.h	/^	char   *xauth_location;	\/* Location of xauth program *\/$/;"	m	struct:__anon9b33d3c10108	typeref:typename:char *
+xauth_valid_string	session.c	/^xauth_valid_string(const char *s)$/;"	f	typeref:typename:int	file:
+xcalloc	xmalloc.c	/^xcalloc(size_t nmemb, size_t size)$/;"	f	typeref:typename:void *
+xcrypt	openbsd-compat/xcrypt.c	/^xcrypt(const char *password, const char *salt)$/;"	f	typeref:typename:char *
+xextendf	misc.c	/^xextendf(char **sp, const char *sep, const char *fmt, ...)$/;"	f	typeref:typename:void
+xflag	regress/netcat.c	/^int	xflag;					\/* Socks proxy *\/$/;"	v	typeref:typename:int
+xmalloc	xmalloc.c	/^xmalloc(size_t size)$/;"	f	typeref:typename:void *
+xmss_filename	sshkey.h	/^	char	*xmss_filename;	\/* for state file updates *\/$/;"	m	struct:sshkey	typeref:typename:char *
+xmss_keypair	xmss_fast.c	/^int xmss_keypair(unsigned char *pk, unsigned char *sk, bds_state *state, xmss_params *params)$/;"	f	typeref:typename:int
+xmss_name	sshkey.h	/^	char	*xmss_name;$/;"	m	struct:sshkey	typeref:typename:char *
+xmss_par	xmss_fast.h	/^  xmss_params xmss_par;$/;"	m	struct:__anon22bef5f30308	typeref:typename:xmss_params
+xmss_params	xmss_fast.h	/^} xmss_params;$/;"	t	typeref:struct:__anon22bef5f30208
+xmss_pk	sshkey.h	/^	u_char	*xmss_pk;$/;"	m	struct:sshkey	typeref:typename:u_char *
+xmss_set_bds_state	xmss_fast.c	/^void xmss_set_bds_state(bds_state *state, unsigned char *stack, int stackoffset, unsigned char */;"	f	typeref:typename:void
+xmss_set_params	xmss_fast.c	/^int xmss_set_params(xmss_params *params, int n, int h, int w, int k)$/;"	f	typeref:typename:int
+xmss_sign	xmss_fast.c	/^int xmss_sign(unsigned char *sk, bds_state *state, unsigned char *sig_msg, unsigned long long *s/;"	f	typeref:typename:int
+xmss_sign_open	xmss_fast.c	/^int xmss_sign_open(unsigned char *msg, unsigned long long *msglen, const unsigned char *sig_msg,/;"	f	typeref:typename:int
+xmss_sk	sshkey.h	/^	u_char	*xmss_sk;$/;"	m	struct:sshkey	typeref:typename:u_char *
+xmss_state	sshkey.h	/^	void	*xmss_state;	\/* depends on xmss_name, opaque *\/$/;"	m	struct:sshkey	typeref:typename:void *
+xmssmt_keypair	xmss_fast.c	/^int xmssmt_keypair(unsigned char *pk, unsigned char *sk, bds_state *states, unsigned char *wots_/;"	f	typeref:typename:int
+xmssmt_params	xmss_fast.h	/^} xmssmt_params;$/;"	t	typeref:struct:__anon22bef5f30308
+xmssmt_set_params	xmss_fast.c	/^int xmssmt_set_params(xmssmt_params *params, int n, int h, int d, int w, int k)$/;"	f	typeref:typename:int
+xmssmt_sign	xmss_fast.c	/^int xmssmt_sign(unsigned char *sk, bds_state *states, unsigned char *wots_sigs, unsigned char *s/;"	f	typeref:typename:int
+xmssmt_sign_open	xmss_fast.c	/^int xmssmt_sign_open(unsigned char *msg, unsigned long long *msglen, const unsigned char *sig_ms/;"	f	typeref:typename:int
+xpixel	session.h	/^	u_int	row, col, xpixel, ypixel;$/;"	m	struct:Session	typeref:typename:u_int
+xreallocarray	xmalloc.c	/^xreallocarray(void *ptr, size_t nmemb, size_t size)$/;"	f	typeref:typename:void *
+xrecallocarray	xmalloc.c	/^xrecallocarray(void *ptr, size_t onmemb, size_t nmemb, size_t size)$/;"	f	typeref:typename:void *
+xstrdup	xmalloc.c	/^xstrdup(const char *str)$/;"	f	typeref:typename:char *
+xstrsep	ssh-keyscan.c	/^xstrsep(char **str, const char *delim)$/;"	f	typeref:typename:char *	file:
+xvasprintf	xmalloc.c	/^xvasprintf(char **ret, const char *fmt, va_list ap)$/;"	f	typeref:typename:int
+xversion	contrib/suse/openssh.spec	/^%define xversion	1.2.4.1$/;"	m
+xxx_conn_info	sshconnect2.c	/^static const struct ssh_conn_info *xxx_conn_info;$/;"	v	typeref:typename:const struct ssh_conn_info *	file:
+xxx_host	sshconnect2.c	/^static char *xxx_host;$/;"	v	typeref:typename:char *	file:
+xxx_hostaddr	sshconnect2.c	/^static struct sockaddr *xxx_hostaddr;$/;"	v	typeref:struct:sockaddr *	file:
+y	ge25519.c	/^  fe25519 y;$/;"	m	struct:__anon8e832fe80108	typeref:typename:fe25519	file:
+y	ge25519.c	/^  fe25519 y;$/;"	m	struct:__anon8e832fe80208	typeref:typename:fe25519	file:
+y	ge25519.c	/^  fe25519 y;$/;"	m	struct:__anon8e832fe80308	typeref:typename:fe25519	file:
+y	ge25519.h	/^  fe25519 y;$/;"	m	struct:__anon8e832fed0108	typeref:typename:fe25519
+year	pkcs11.h	/^  unsigned char year[4];$/;"	m	struct:ck_date	typeref:typename:unsigned char[4]
+ypixel	session.h	/^	u_int	row, col, xpixel, ypixel;$/;"	m	struct:Session	typeref:typename:u_int
+z	ge25519.c	/^  fe25519 z;$/;"	m	struct:__anon8e832fe80108	typeref:typename:fe25519	file:
+z	ge25519.c	/^  fe25519 z;$/;"	m	struct:__anon8e832fe80208	typeref:typename:fe25519	file:
+z	ge25519.h	/^  fe25519 z;$/;"	m	struct:__anon8e832fed0108	typeref:typename:fe25519
+zero_pad	umac.c	/^static void zero_pad(UINT8 *p, int nbytes)$/;"	f	typeref:typename:void	file:
+zflag	regress/netcat.c	/^int	zflag;					\/* Port Scan Flag *\/$/;"	v	typeref:typename:int
+zlib	configure.ac	/^AC_ARG_WITH([zlib],$/;"	w
+zlib-version-check	configure.ac	/^    AC_ARG_WITH([zlib-version-check],$/;"	w
