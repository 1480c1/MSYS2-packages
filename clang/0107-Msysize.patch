diff --git a/test/lit.cfg.py b/test/lit.cfg.py
index dacda6894a0..dd35dc83b8c 100644
--- a/test/lit.cfg.py
+++ b/test/lit.cfg.py
@@ -142,7 +142,7 @@ if is_filesystem_case_insensitive():
     config.available_features.add('case-insensitive-filesystem')
 
 # Tests that require the /dev/fd filesystem.
-if os.path.exists('/dev/fd/0') and sys.platform not in ['cygwin']:
+if os.path.exists('/dev/fd/0') and sys.platform not in ['cygwin', 'msys']:
     config.available_features.add('dev-fd-fs')
 
 # Set on native MS environment.
@@ -154,7 +154,7 @@ if not re.match(r'^x86_64.*-(windows-msvc|windows-gnu)$', config.target_triple):
     config.available_features.add('LP64')
 
 # [PR12920] "clang-driver" -- set if gcc driver is not used.
-if not re.match(r'.*-(cygwin)$', config.target_triple):
+if not re.match(r'.*-(cygwin|msys)$', config.target_triple):
     config.available_features.add('clang-driver')
 
 # Tests that are specific to the Apple Silicon macOS.
diff --git a/tools/scan-build-py/libear/__init__.py b/tools/scan-build-py/libear/__init__.py
index 0dfe8c11eba..b46c202ab68 100644
--- a/tools/scan-build-py/libear/__init__.py
+++ b/tools/scan-build-py/libear/__init__.py
@@ -149,7 +149,7 @@ class LinuxToolset(UnixToolset):
 
 def make_toolset(src_dir):
     platform = sys.platform
-    if platform in {'win32', 'cygwin'}:
+    if platform in {'win32', 'cygwin', 'msys'}:
         raise RuntimeError('not implemented on this platform')
     elif platform == 'darwin':
         return DarwinToolset(src_dir)
diff --git a/tools/scan-build-py/libscanbuild/intercept.py b/tools/scan-build-py/libscanbuild/intercept.py
index 70f3233f5e8..c6951cf6d20 100644
--- a/tools/scan-build-py/libscanbuild/intercept.py
+++ b/tools/scan-build-py/libscanbuild/intercept.py
@@ -44,7 +44,7 @@ US = chr(0x1f)
 COMPILER_WRAPPER_CC = 'intercept-cc'
 COMPILER_WRAPPER_CXX = 'intercept-c++'
 TRACE_FILE_EXTENSION = '.cmd'  # same as in ear.c
-WRAPPER_ONLY_PLATFORMS = frozenset({'win32', 'cygwin'})
+WRAPPER_ONLY_PLATFORMS = frozenset({'win32', 'cygwin', 'msys'})
 
 
 @command_entry_point
